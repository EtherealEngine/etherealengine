{
  "version": 3,
  "sources": ["../../../../node_modules/@hookstate/subscribable/src/subscribable.ts"],
  "sourcesContent": ["\r\nimport { Path, StateValueAtPath, InferStateValueType, ExtensionFactory, State, none } from '@hookstate/core';\r\n\r\nexport interface Subscribable {\r\n    subscribe<S extends InferStateValueType<this>>(callback: (value: S) => void): () => void\r\n}\r\n\r\nexport function subscribable<S, E>(): ExtensionFactory<S, E, Subscribable> {\r\n    type SubscriberEntry = [Path, (value: StateValueAtPath) => void]\r\n    const subscribers: SubscriberEntry[] = [];\r\n    let stateAtRoot: State<S, {}>;\r\n\r\n    return () => ({\r\n        onCreate: (s) => {\r\n            stateAtRoot = s\r\n            function pathsEqual(p1: Path, p2: Path) {\r\n                if (p1.length !== p2.length) {\r\n                    return false\r\n                }\r\n                for (let i = 0; i < p1.length; i += 1) {\r\n                    if (p1[i] !== p2[i]) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }\r\n\r\n            return {\r\n                subscribe: (state) => (cb) => {\r\n                    if (!subscribers.find(i => pathsEqual(i[0], state.path) && i[1] === cb)) {\r\n                        subscribers.push([state.path, cb])\r\n                    }\r\n                    return () => {\r\n                        let found = subscribers.findIndex(i => pathsEqual(i[0], state.path) && i[1] === cb)\r\n                        if (found !== -1) {\r\n                            subscribers.splice(found, 1)\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        onSet: (s, d) => {\r\n            function pathStartsWith(p1: Path, p2: Path) {\r\n                if (p1.length < p2.length) {\r\n                    return false\r\n                }\r\n                for (let i = 0; i < p2.length; i += 1) {\r\n                    if (p1[i] !== p2[i]) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }\r\n            function getValueAtPath(path: Path) {\r\n                let result = stateAtRoot.value\r\n                for (let p of path) {\r\n                    if (result === undefined || result == null) {\r\n                        return none\r\n                    }\r\n                    result = result[p]\r\n                }\r\n                return result\r\n            }\r\n\r\n            if (s.promise || s.error) {\r\n                return;\r\n            }\r\n            for (let subscriber of subscribers) {\r\n                // Here is the path match logic\r\n                // If a state is updated at /a/b, then the following subscribers should be invoked\r\n                // - /\r\n                // - /a\r\n                // - /a/b (<-- this one is updated)\r\n                // - /a/b/c\r\n                // and the following should not be invoked\r\n                // - /a/d\r\n                // - /g\r\n                // - /g/f\r\n                if (pathStartsWith(s.path, subscriber[0]) || pathStartsWith(subscriber[0], s.path)) {\r\n                    let v = getValueAtPath(subscriber[0])\r\n                    if (v !== none) {\r\n                        subscriber[1](v)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n"],
  "mappings": ";;;;;;;SAOgB,eAAY;AAExB,MAAM,cAAiC,CAAA;AACvC,MAAI;AAEJ,SAAO,WAAA;AAAM,WAAC;MACV,UAAU,SAAC,GAAC;AACR,sBAAc;AACd,iBAAS,WAAW,IAAU,IAAQ;AAClC,cAAI,GAAG,WAAW,GAAG,QAAQ;AACzB,mBAAO;UACV;AACD,mBAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK,GAAG;AACnC,gBAAI,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG;AACjB,qBAAO;YACV;UACJ;AACD,iBAAO;;AAGX,eAAO;UACH,WAAW,SAAC,OAAU;AAAA,mBAAA,SAAC,IAAE;AACrB,kBAAI,CAAC,YAAY,KAAK,SAAA,GAAC;AAAI,uBAAA,WAAW,EAAE,CAAC,GAAG,MAAM,IAAI,KAAK,EAAE,CAAC,MAAM;cAAzC,CAA2C,GAAG;AACrE,4BAAY,KAAK,CAAC,MAAM,MAAM,EAAE,CAAC;cACpC;AACD,qBAAO,WAAA;AACH,oBAAI,QAAQ,YAAY,UAAU,SAAA,GAAK;AAAA,yBAAA,WAAW,EAAE,CAAC,GAAG,MAAM,IAAI,KAAK,EAAE,CAAC,MAAM;gBAAzC,CAA2C;AAClF,oBAAI,UAAU,IAAI;AACd,8BAAY,OAAO,OAAO,CAAC;gBAC9B;cACL;YACJ;UAAC;;;MAGT,OAAO,SAAC,GAAG,GAAC;AACR,iBAAS,eAAe,IAAU,IAAQ;AACtC,cAAI,GAAG,SAAS,GAAG,QAAQ;AACvB,mBAAO;UACV;AACD,mBAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK,GAAG;AACnC,gBAAI,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG;AACjB,qBAAO;YACV;UACJ;AACD,iBAAO;;AAEX,iBAAS,eAAe,MAAU;AAC9B,cAAI,SAAS,YAAY;AACzB,mBAAcA,MAAA,GAAA,SAAA,MAAAA,MAAI,OAAA,QAAJA,OAAM;AAAf,gBAAI,IAAC,OAAAA,GAAA;AACN,gBAAI,WAAW,UAAa,UAAU,MAAM;AACxC,qBAAO;YACV;AACD,qBAAS,OAAO,CAAC;UACpB;AACD,iBAAO;;AAGX,YAAI,EAAE,WAAW,EAAE,OAAO;AACtB;QACH;AACD,iBAAuB,KAAA,GAAA,gBAAA,aAAA,KAAW,cAAA,QAAX,MAAa;AAA/B,cAAI,aAAU,cAAA,EAAA;AAWf,cAAI,eAAe,EAAE,MAAM,WAAW,CAAC,CAAC,KAAK,eAAe,WAAW,CAAC,GAAG,EAAE,IAAI,GAAG;AAChF,gBAAI,IAAI,eAAe,WAAW,CAAC,CAAC;AACpC,gBAAI,MAAM,MAAM;AACZ,yBAAW,CAAC,EAAE,CAAC;YAClB;UACJ;QACJ;;;EAEP;AACN;",
  "names": ["_i"]
}
