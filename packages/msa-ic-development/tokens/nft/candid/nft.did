type Balance = nat;
type Memo = blob;
type SubAccount = vec nat8;
type TokenIdentifier = text;
type TokenIndex = nat32;
type AccountIdentifier = text;

 type User =
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };

 type TransferRequest =
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };

 type TransferResponse =
 variant {
   Err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   Ok: Balance;
 };

 type MintRequest =
 record {
   metadata: opt MetadataContainer;
   to: User;
 };

 type CommonError =
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };

 type AccountIdentifierReturn =
 variant {
   Err: CommonError;
   Ok: AccountIdentifier;
 };

 type BalanceReturn =
 variant {
   Err: CommonError;
   Ok: Balance;
 };

 type MetadataReturn =
 variant {
   Err: CommonError;
   Ok: Metadata;
 };

 type TokenMetadata =
 record {
   account_identifier: AccountIdentifier;
   metadata: Metadata;
   token_identifier: TokenIdentifier;
 };

 type Metadata =
 variant {
   fungible:
    record {
      name: text;
      symbol: text;
      decimals: nat8;
      metadata: opt MetadataContainer;
    };
   nonfungible: opt MetadataContainer;
 };

  type MetadataContainer =
  variant {
    data : vec MetadataValue;
    "blob" : blob;
    json : text;
  };

  type MetadataValue =
  record {text; Value};

  type Value =
  variant {
    "text" : text;
    "blob" : blob;
    "nat" : nat;
    "nat8": nat8;
  };

 type TransactionId = nat;
 type Date = nat64;

 type Transaction =
 record {
   txid: TransactionId;
   request: TransferRequest;
   date: Date;
 };

 type TransactionRequestFilter =
 variant {
   txid: TransactionId;
   user: User;
   date: record {Date; Date;};
   page: record {nat; nat;};
 };

 type TransactionRequest =
 record {
     "query": TransactionRequestFilter;
     token: TokenIdentifier;
 };

 type TrasactionsResult =
 variant {
   Err: CommonError;
   Ok: vec Transaction;
 };

 type erc721_token =
 service {
   transfer: (TransferRequest) -> (TransferResponse);
   mintNFT: (MintRequest) -> (TokenIdentifier);
   bearer: (TokenIdentifier) -> (AccountIdentifierReturn) query;
   getAllMetadataForUser: (User) -> (vec TokenMetadata) query;
   supply: (TokenIdentifier) -> (BalanceReturn) query;
   metadata: (TokenIdentifier) -> (MetadataReturn)  query;
   add: (TransferRequest) -> (TransactionId);
   transactions: (TransactionRequest) -> (TrasactionsResult);
 };

service : (principal, text, text, principal) -> erc721_token
