import{N as v,a as m}from"./AuthService.6db25508.js";import{E as d,d as g,i as A,q as R,g as f,h as b}from"./avatarFunctions.c7a0e273.js";import{T as k}from"./SystemUpdateType.4e88f289.js";import{A as q,X as I,V as P}from"./[projectId].d5e44847.js";import{W as O}from"./networkSchema.bc1be026.js";import{i as T}from"./mathUtils.88086a33.js";import{X as j}from"./XRHandsInputComponent.9ef816f1.js";import"./AlertService.bfed2141.js";import"./index.0040ebb6.js";import"./vendor.c8b8cc93.js";import"./_app.009e96ac.js";import"./feathers.081246a7.js";import"./three.module.0404e109.js";import"./upload.38e3baaf.js";import"./index.9af95596.js";function u(o,e){if(o.length!==e.length)return!1;for(let n=0;n<o.length;n++)if(o[n]!==e[n])return!1;return!0}const x=g([m,k]),E=A?g([q,I]):g([I]),V=A?g([q,j]):g([j]);function S(o,e,n){for(let t=0;t<o.pose.length;t++)if(o.pose[t].networkId===e)return!!u(o.pose[t].angularVelocity,n);return!1}function H(o,e,n,t,i){i===void 0&&(i=[0]);for(let s=0;s<o.pose.length;s++)if(o.pose[s].networkId===e)return!!(u(o.pose[s].position,n)&&u(o.pose[s].rotation,t)&&u(o.pose[s].linearVelocity,i));return!1}function X(o,e,n,t,i,s,c,a){for(let r=0;r<o.ikPose.length;r++)if(o.ikPose[r].networkId===e)return!!(u(o.ikPose[r].headPosePosition,n)&&u(o.ikPose[r].headPoseRotation,t)&&u(o.ikPose[r].leftPosePosition,i)&&u(o.ikPose[r].leftPoseRotation,s)&&u(o.ikPose[r].rightPosePosition,c)&&u(o.ikPose[r].rightPoseRotation,a));return!1}const $=o=>{const{incomingActions:e,outgoingActions:n}=o;if(o.isHosting)for(const t of e)t.$from!==d.userId&&n.add(t);return e.clear(),o},D=o=>{const{incomingActions:e,outgoingActions:n}=o;for(const t of n)t.$from=t.$from??d.userId,t.$from===d.userId&&t.$to==="local"&&(e.add(t),n.delete(t)),o.isHosting&&t.$from===d.userId&&e.add(t);return o},U=R($,D),F=o=>{const{outgoingNetworkState:e,previousNetworkState:n}=o,t=x(o);for(let i=0;i<t.length;i++){const s=t[i],c=f(s,m),a=f(s,k);let r;if(b(s,P)){const l=f(s,P);T(l.velocity)||S(n,c.networkId,l.velocity)?r=[0]:r=l.velocity.toArray()}(n===void 0||!H(n,c.networkId,a.position.toArray(),a.rotation.toArray(),r))&&e.pose.push({networkId:c.networkId,position:a.position.toArray(),rotation:a.rotation.toArray(),linearVelocity:r!==void 0?r:[0],angularVelocity:[0]})}return o},Q=o=>{const{outgoingNetworkState:e,previousNetworkState:n}=o,t=f(o.localClientEntity,m);if(A&&t){const i=f(o.localClientEntity,k);let s;if(b(o.localClientEntity,P)){const c=f(o.localClientEntity,P);T(c.velocity)||S(n,o.localClientEntity,c.velocity)?s=[0]:s=c.velocity.toArray()}(n===void 0||!H(n,t.networkId,i.position.toArray(),i.rotation.toArray(),s))&&e.pose.push({networkId:t.networkId,position:i.position.toArray(),rotation:i.rotation.toArray(),linearVelocity:s!==void 0?s:[0],angularVelocity:[0]})}return o},ao=o=>{const{outgoingNetworkState:e,previousNetworkState:n}=o,t=E(o);for(let i=0;i<t.length;i++){const s=t[i],{networkId:c}=f(s,m),a=f(s,I),r=a.head.position.toArray(),l=a.head.quaternion.toArray(),p=a.controllerLeft.position.toArray(),y=a.controllerLeft.quaternion.toArray(),h=a.controllerRight.position.toArray(),C=a.controllerRight.quaternion.toArray();(n===void 0||!X(n,c,r,l,p,y,h,C))&&e.ikPose.push({networkId:c,headPosePosition:r,headPoseRotation:l,leftPosePosition:p,leftPoseRotation:y,rightPosePosition:h,rightPoseRotation:C})}return o},N=o=>{const{outgoingNetworkState:e}=o;for(const n of V(o)){const{networkId:t}=f(n,m),i=f(n,j),s=[{joints:[]},{joints:[]}];for(let c of i.hands){const a=c.joints;if(!a)continue;const r=s[c.userData.handedness=="left"?0:1];for(const[l,p]of Object.entries(a)){const y=p.position.toArray(),h=p.quaternion.toArray();r.joints.push({key:l,position:y,rotation:h})}}e.handsPose.push({networkId:t,hands:s})}return o},B=o=>(o.previousNetworkState=o.outgoingNetworkState,o.outgoingNetworkState={tick:o.fixedTick,time:Date.now(),pose:[],ikPose:[],handsPose:[]},o),L=R(B,F,Q,N),M=o=>e=>{const{outgoingActions:n}=e;return o.sendActions(n),n.clear(),e},W=o=>e=>{o.sendData(e)};async function co(o){const e=M(v.instance.transport),n=W(v.instance.transport);return()=>{U(o);try{e(o)}catch(t){console.error(t)}if(!d.offlineMode){L(o);try{const t=O.toBuffer(o.outgoingNetworkState);n(t)}catch(t){console.error(t)}}}}export{co as default,$ as forwardIncomingActionsFromOthersIfHost,L as queueAllOutgoingPoses,ao as queueUnchangedIkPoses,F as queueUnchangedPoses,Q as queueUnchangedPosesForClient,N as queueXRHandPoses,U as rerouteActions,D as rerouteOutgoingActionsBoundForSelf,B as resetNetworkState};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
