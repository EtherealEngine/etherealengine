import{aK as q,V as N,Q as F}from"./three.module.0404e109.js";import{T as S,a1 as x,a2 as L}from"./SystemUpdateType.4e88f289.js";import{G as W,h as D,L as _,a as A,b as j}from"./[projectId].d5e44847.js";import{d as P,g as a,E as p,a as R,r as f,h as G}from"./avatarFunctions.c7a0e273.js";import{A as b,a as y,b as O,c as w}from"./AutoPilotOverrideComponent.0b4b0ae9.js";import"./upload.38e3baaf.js";import"./vendor.c8b8cc93.js";import"./index.0040ebb6.js";import"./_app.009e96ac.js";import"./index.9af95596.js";import"./AuthService.6db25508.js";import"./AlertService.bfed2141.js";import"./feathers.081246a7.js";const Y=(h,n,l,m)=>{const d=new x(m.x,m.y,m.z),v=new x(n.x,n.y,n.z).sub(d),I=new x(l.x,l.y,l.z).sub(d),g=h.findPath(v,I),t=new L;for(const o of g){const i=o.clone().add(d);t.add(i)}return t},B=new F,J=new N(0,0,1);async function ct(h){const n=W.Left,l=new q,m=P([D]),d=P([b]),v=P([y]),I=P([_,O]);return()=>{for(const t of I.enter()){const{coords:o}=a(t,O),{overrideCoords:i,overridePosition:s}=a(t,w);l.setFromCamera(o,p.camera);const e=[],c=m().reduce((r,u)=>{const C=a(u,D).navTarget;return e.length=0,l.intersectObject(C,!0,e),e.length&&e[0].distance<r.distance?{distance:e[0].distance,point:e[0].point,entity:u}:r},{distance:1/0,point:null,entity:null});c.point&&(i&&(c.point=s),R(t,b,{point:c.point,navEntity:c.entity})),f(t,O),G(t,w)&&f(t,w)}for(const t of d.enter()){const o=a(t,b),i=a(o.navEntity,D);i||console.error("AutopilotSystem unable to process request - navigation entity does not have NavMeshComponent");const{position:s}=a(t,S),{position:e}=a(o.navEntity,S);R(t,y,{path:Y(i.yukaNavMesh,s,o.point,e),navEntity:o.navEntity}),f(t,b)}const g=v(h);if(g.length){const t=1,o=.1,i=.2;for(const s of g){const e=a(s,y);if(!e.path.current()){console.error("autopilot.path is invalid or empty"),f(s,y);continue}const{position:c}=a(s,S),r=new N(e.path.current().x,0,e.path.current().z),u=r.distanceTo(c.clone().setY(0));if(u<o){if(e.path.finished()){p.inputState.set(n,{type:A.TWODIM,value:[0,0,0],lifecycleState:j.Changed}),f(s,y);continue}e.path.advance();continue}const C=a(s,S),k=Math.min(1,Math.max(i,u<t?u/t:1)),T=r.clone().sub(c.clone().setY(0)).applyQuaternion(C.rotation).normalize(),z=Math.atan2(T.x,T.z),E=T.clone().multiplyScalar(k),M=[E.z,E.x,z];if(!p.inputState.has(n))p.inputState.set(n,{type:A.TWODIM,value:M,lifecycleState:j.Started});else{const V=p.inputState.get(n);JSON.stringify(V)!==JSON.stringify(M)&&p.inputState.set(n,{type:A.TWODIM,value:M,lifecycleState:j.Changed})}const Q=r.clone().sub(c).setY(0).normalize();C.rotation.copy(B.setFromUnitVectors(J,Q))}}v.exit(h).length&&p.inputState.set(n,{type:A.TWODIM,value:[0,0],lifecycleState:j.Changed})}}export{ct as default,Y as findPath};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
