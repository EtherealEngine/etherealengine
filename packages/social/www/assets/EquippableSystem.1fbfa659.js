import{c as q,g as e,d,N as y,A as l}from"./avatarFunctions.c7a0e273.js";import{a as u}from"./AuthService.6db25508.js";import{T as a}from"./SystemUpdateType.4e88f289.js";import{C as f,d as j,m as C,N as c,L as E}from"./[projectId].d5e44847.js";import{g as h}from"./WebXRFunctions.c1f81cbf.js";import{t as I}from"./teleportRigidbody.0bf2d2c0.js";import"./three.module.0404e109.js";import"./index.0040ebb6.js";import"./vendor.c8b8cc93.js";import"./AlertService.bfed2141.js";import"./_app.009e96ac.js";import"./feathers.081246a7.js";import"./upload.38e3baaf.js";import"./index.9af95596.js";import"./XRHandsInputComponent.9ef816f1.js";import"./addControllerModels.086e1687.js";const s=q("EquipperComponent");d([y(E),l,a]);const m=d([s]);function T(p){C(p).when(c.setEquippedObject.matches,t=>{})}async function X(p){return p.receptors.add(T),()=>{for(const t of m.enter()){const n=e(t,s).equippedEntity;e(n,f),j(p.hostId,()=>c.setEquippedObject({networkId:e(n,u).networkId,equip:!0}))}for(const t of m()){const n=e(t,s),o=e(n.equippedEntity,a),r=h(t),{position:i,rotation:b}=r;o.position.copy(i),o.rotation.copy(b)}for(const t of m.exit()){const o=e(t,s).equippedEntity,r=e(o,a),i=e(o,f);i&&I(i.body,r.position,r.rotation),j(p.hostId,()=>c.setEquippedObject({networkId:e(o,u).networkId,equip:!1}))}}}export{X as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXF1aXBwYWJsZVN5c3RlbS4xZmJmYTY1OS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZW5naW5lL3NyYy9pbnRlcmFjdGlvbi9jb21wb25lbnRzL0VxdWlwcGVyQ29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZW5naW5lL3NyYy9pbnRlcmFjdGlvbi9zeXN0ZW1zL0VxdWlwcGFibGVTeXN0ZW0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vLi4vZWNzL2NsYXNzZXMvRW50aXR5J1xuaW1wb3J0IHsgY3JlYXRlTWFwcGVkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZWNzL2Z1bmN0aW9ucy9Db21wb25lbnRGdW5jdGlvbnMnXG5cbmV4cG9ydCB0eXBlIEVxdWlwcGVyQ29tcG9uZW50VHlwZSA9IHtcbiAgZXF1aXBwZWRFbnRpdHk6IEVudGl0eVxuICBkYXRhOiBhbnlcbn1cblxuZXhwb3J0IGNvbnN0IEVxdWlwcGVyQ29tcG9uZW50ID0gY3JlYXRlTWFwcGVkQ29tcG9uZW50PEVxdWlwcGVyQ29tcG9uZW50VHlwZT4oJ0VxdWlwcGVyQ29tcG9uZW50JylcbiIsImltcG9ydCB7IGRlZmluZVF1ZXJ5LCBnZXRDb21wb25lbnQsIGhhc0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Vjcy9mdW5jdGlvbnMvQ29tcG9uZW50RnVuY3Rpb25zJ1xuaW1wb3J0IHsgTmV0d29ya09iamVjdENvbXBvbmVudCB9IGZyb20gJy4uLy4uL25ldHdvcmtpbmcvY29tcG9uZW50cy9OZXR3b3JrT2JqZWN0Q29tcG9uZW50J1xuaW1wb3J0IHsgVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdHJhbnNmb3JtL2NvbXBvbmVudHMvVHJhbnNmb3JtQ29tcG9uZW50J1xuaW1wb3J0IHsgRXF1aXBwZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL0VxdWlwcGVyQ29tcG9uZW50J1xuaW1wb3J0IHsgQ29sbGlkZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi9waHlzaWNzL2NvbXBvbmVudHMvQ29sbGlkZXJDb21wb25lbnQnXG5pbXBvcnQgeyBnZXRIYW5kVHJhbnNmb3JtIH0gZnJvbSAnLi4vLi4veHIvZnVuY3Rpb25zL1dlYlhSRnVuY3Rpb25zJ1xuaW1wb3J0IHsgQXZhdGFyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vYXZhdGFyL2NvbXBvbmVudHMvQXZhdGFyQ29tcG9uZW50J1xuaW1wb3J0IHsgTG9jYWxJbnB1dFRhZ0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL2lucHV0L2NvbXBvbmVudHMvTG9jYWxJbnB1dFRhZ0NvbXBvbmVudCdcbmltcG9ydCB7IGRpc3BhdGNoRnJvbSB9IGZyb20gJy4uLy4uL25ldHdvcmtpbmcvZnVuY3Rpb25zL2Rpc3BhdGNoRnJvbSdcbmltcG9ydCB7IFN5c3RlbSB9IGZyb20gJy4uLy4uL2Vjcy9jbGFzc2VzL1N5c3RlbSdcbmltcG9ydCB7IE5vdCB9IGZyb20gJ2JpdGVjcydcbmltcG9ydCB7IFdvcmxkIH0gZnJvbSAnLi4vLi4vZWNzL2NsYXNzZXMvV29ybGQnXG5pbXBvcnQgeyBOZXR3b3JrV29ybGRBY3Rpb24gfSBmcm9tICcuLi8uLi9uZXR3b3JraW5nL2Z1bmN0aW9ucy9OZXR3b3JrV29ybGRBY3Rpb24nXG5pbXBvcnQgbWF0Y2hlcyBmcm9tICd0cy1tYXRjaGVzJ1xuaW1wb3J0IHsgdXNlV29ybGQgfSBmcm9tICcuLi8uLi9lY3MvZnVuY3Rpb25zL1N5c3RlbUhvb2tzJ1xuaW1wb3J0IHsgdGVsZXBvcnRSaWdpZGJvZHkgfSBmcm9tICcuLi8uLi9waHlzaWNzL2Z1bmN0aW9ucy90ZWxlcG9ydFJpZ2lkYm9keSdcblxuY29uc3QgbmV0d29ya1VzZXJRdWVyeSA9IGRlZmluZVF1ZXJ5KFtOb3QoTG9jYWxJbnB1dFRhZ0NvbXBvbmVudCksIEF2YXRhckNvbXBvbmVudCwgVHJhbnNmb3JtQ29tcG9uZW50XSlcbmNvbnN0IGVxdWlwcGFibGVRdWVyeSA9IGRlZmluZVF1ZXJ5KFtFcXVpcHBlckNvbXBvbmVudF0pXG5cbmZ1bmN0aW9uIGVxdWlwcGFibGVBY3Rpb25SZWNlcHRvcihhY3Rpb24pIHtcbiAgbWF0Y2hlcyhhY3Rpb24pLndoZW4oTmV0d29ya1dvcmxkQWN0aW9uLnNldEVxdWlwcGVkT2JqZWN0Lm1hdGNoZXMsIChhKSA9PiB7XG4gICAgLy8gY29uc3Qgd29ybGQgPSB1c2VXb3JsZCgpXG4gICAgLy8gLy8gY29uc3QgZXF1aXBwZXIgPSB3b3JsZC5nZXRVc2VyQXZhdGFyRW50aXR5KGEuJHVzZXJJZClcbiAgICAvLyAvLyBjb25zdCBlcXVpcHBlZCA9IHdvcmxkLmdldE5ldHdvcmtPYmplY3QoYS4kdXNlcklkLCBhLm5ldHdvcmtJZClcbiAgICAvLyBpZiAoIWVxdWlwcGVkKSB7XG4gICAgLy8gICByZXR1cm4gY29uc29sZS53YXJuKFxuICAgIC8vICAgICBgRXF1aXBwZWQgZW50aXR5IHdpdGggaWQgJHtlcXVpcHBlZH0gZG9lcyBub3QgZXhpc3QhIFlvdSBzaG91bGQgcHJvYmFibHkgcmVjb25uZWN0Li4uYFxuICAgIC8vICAgKVxuICAgIC8vIH1cbiAgICAvLyBpZiAoYS5lcXVpcCkge1xuICAgIC8vICAgZXF1aXBFbnRpdHkoZXF1aXBwZXIsIGVxdWlwcGVkKVxuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICB1bmVxdWlwRW50aXR5KGVxdWlwcGVyKVxuICAgIC8vIH1cbiAgfSlcbn1cblxuLyoqXG4gKiBAYXV0aG9yIEpvc2ggRmllbGQgPGdpdGh1Yi5jb20vSGV4YUZpZWxkPlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBFcXVpcHBhYmxlU3lzdGVtKHdvcmxkOiBXb3JsZCk6IFByb21pc2U8U3lzdGVtPiB7XG4gIHdvcmxkLnJlY2VwdG9ycy5hZGQoZXF1aXBwYWJsZUFjdGlvblJlY2VwdG9yKVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZXF1aXBwYWJsZVF1ZXJ5LmVudGVyKCkpIHtcbiAgICAgIGNvbnN0IGVxdWlwcGVkRW50aXR5ID0gZ2V0Q29tcG9uZW50KGVudGl0eSwgRXF1aXBwZXJDb21wb25lbnQpLmVxdWlwcGVkRW50aXR5XG4gICAgICBjb25zdCBjb2xsaWRlciA9IGdldENvbXBvbmVudChlcXVpcHBlZEVudGl0eSwgQ29sbGlkZXJDb21wb25lbnQpXG4gICAgICAvLyBpZiAoY29sbGlkZXIpIGNvbGxpZGVyLmJvZHkudHlwZSA9IEJvZHlUeXBlLktJTkVNQVRJQ1xuICAgICAgLy8gc2VuZCBlcXVpcCB0byBjbGllbnRzXG4gICAgICBkaXNwYXRjaEZyb20od29ybGQuaG9zdElkLCAoKSA9PlxuICAgICAgICBOZXR3b3JrV29ybGRBY3Rpb24uc2V0RXF1aXBwZWRPYmplY3Qoe1xuICAgICAgICAgIG5ldHdvcmtJZDogZ2V0Q29tcG9uZW50KGVxdWlwcGVkRW50aXR5LCBOZXR3b3JrT2JqZWN0Q29tcG9uZW50KS5uZXR3b3JrSWQsXG4gICAgICAgICAgZXF1aXA6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBlcXVpcHBhYmxlUXVlcnkoKSkge1xuICAgICAgY29uc3QgZXF1aXBwZXJDb21wb25lbnQgPSBnZXRDb21wb25lbnQoZW50aXR5LCBFcXVpcHBlckNvbXBvbmVudClcbiAgICAgIGNvbnN0IGVxdWlwcGFibGVUcmFuc2Zvcm0gPSBnZXRDb21wb25lbnQoZXF1aXBwZXJDb21wb25lbnQuZXF1aXBwZWRFbnRpdHksIFRyYW5zZm9ybUNvbXBvbmVudClcbiAgICAgIGNvbnN0IGhhbmRUcmFuc2Zvcm0gPSBnZXRIYW5kVHJhbnNmb3JtKGVudGl0eSlcbiAgICAgIGNvbnN0IHsgcG9zaXRpb24sIHJvdGF0aW9uIH0gPSBoYW5kVHJhbnNmb3JtXG4gICAgICBlcXVpcHBhYmxlVHJhbnNmb3JtLnBvc2l0aW9uLmNvcHkocG9zaXRpb24pXG4gICAgICBlcXVpcHBhYmxlVHJhbnNmb3JtLnJvdGF0aW9uLmNvcHkocm90YXRpb24pXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZXF1aXBwYWJsZVF1ZXJ5LmV4aXQoKSkge1xuICAgICAgY29uc3QgZXF1aXBwZXJDb21wb25lbnQgPSBnZXRDb21wb25lbnQoZW50aXR5LCBFcXVpcHBlckNvbXBvbmVudClcbiAgICAgIGNvbnN0IGVxdWlwcGVkRW50aXR5ID0gZXF1aXBwZXJDb21wb25lbnQuZXF1aXBwZWRFbnRpdHlcbiAgICAgIGNvbnN0IGVxdWlwcGVkVHJhbnNmb3JtID0gZ2V0Q29tcG9uZW50KGVxdWlwcGVkRW50aXR5LCBUcmFuc2Zvcm1Db21wb25lbnQpXG4gICAgICBjb25zdCBjb2xsaWRlciA9IGdldENvbXBvbmVudChlcXVpcHBlZEVudGl0eSwgQ29sbGlkZXJDb21wb25lbnQpXG4gICAgICBpZiAoY29sbGlkZXIpIHtcbiAgICAgICAgLy8gY29sbGlkZXIuYm9keS50eXBlID0gQm9keVR5cGUuRFlOQU1JQ1xuICAgICAgICB0ZWxlcG9ydFJpZ2lkYm9keShjb2xsaWRlci5ib2R5LCBlcXVpcHBlZFRyYW5zZm9ybS5wb3NpdGlvbiwgZXF1aXBwZWRUcmFuc2Zvcm0ucm90YXRpb24pXG4gICAgICB9XG4gICAgICAvLyBzZW5kIHVuZXF1aXAgdG8gY2xpZW50c1xuICAgICAgZGlzcGF0Y2hGcm9tKHdvcmxkLmhvc3RJZCwgKCkgPT5cbiAgICAgICAgTmV0d29ya1dvcmxkQWN0aW9uLnNldEVxdWlwcGVkT2JqZWN0KHtcbiAgICAgICAgICBuZXR3b3JrSWQ6IGdldENvbXBvbmVudChlcXVpcHBlZEVudGl0eSwgTmV0d29ya09iamVjdENvbXBvbmVudCkubmV0d29ya0lkLFxuICAgICAgICAgIGVxdWlwOiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzcUJBUWEsR0FBb0IsRUFBNkMscUJDU3JELEVBQVksQ0FBQyxFQUFJLEdBQXlCLEVBQWlCLElBQ3BGLEtBQU0sR0FBa0IsRUFBWSxDQUFDLElBRXJDLFdBQWtDLEVBQVEsR0FDaEMsR0FBUSxLQUFLLEVBQW1CLGtCQUFrQixRQUFTLEFBQUMsR0FBTSxxQkFvQjdCLEVBQStCLFVBQ3RFLFVBQVUsSUFBSSxHQUViLElBQU0sVUFDQSxLQUFVLEdBQWdCLFFBQVMsTUFDdEMsR0FBaUIsRUFBYSxFQUFRLEdBQW1CLGVBQzlDLEVBQWEsRUFBZ0IsS0FHakMsRUFBTSxPQUFRLElBQ3pCLEVBQW1CLGtCQUFrQixDQUNuQyxVQUFXLEVBQWEsRUFBZ0IsR0FBd0IsVUFDaEUsTUFBTyxlQUtGLEtBQVUsS0FBbUIsTUFDaEMsR0FBb0IsRUFBYSxFQUFRLEdBQ3pDLEVBQXNCLEVBQWEsRUFBa0IsZUFBZ0IsR0FDckUsRUFBZ0IsRUFBaUIsR0FDakMsQ0FBRSxXQUFVLFlBQWEsSUFDWCxTQUFTLEtBQUssS0FDZCxTQUFTLEtBQUssWUFHekIsS0FBVSxHQUFnQixPQUFRLE1BRXJDLEdBQWlCLEFBREcsRUFBYSxFQUFRLEdBQ04sZUFDbkMsRUFBb0IsRUFBYSxFQUFnQixHQUNqRCxFQUFXLEVBQWEsRUFBZ0IsR0FDMUMsS0FFZ0IsRUFBUyxLQUFNLEVBQWtCLFNBQVUsRUFBa0IsWUFHcEUsRUFBTSxPQUFRLElBQ3pCLEVBQW1CLGtCQUFrQixDQUNuQyxVQUFXLEVBQWEsRUFBZ0IsR0FBd0IsVUFDaEUsTUFBTyJ9
