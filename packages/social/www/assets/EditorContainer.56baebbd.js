import{aq as qd,ar as Yd,_ as Z,as as es,ak as $,at as lr,B as mt,E as ts,p as ns,a9 as te,z as Xd,au as rs,an as Jd,S as Zd,al as is,am as Qd}from"./_app.f0a72417.js";import{r as u,R as p,m as U,b as On,h as Zt,t as Ft,s as Bt,p as jt,e as G,j as Oe,q as Ae,c as os,g as as,n as ss,f as ef,u as Pt,d as ls,w as Tn,i as De}from"./vendor.475cb2ff.js";import{j as de,D as tf,u as nf,k as rf,l as of,H as af,U as sf,T as lf,N as cs,f as Be,_ as Wt,w as cr,K as we,m as ur,n as us,P as He,o as Xr,p as dr,i as po,I as Te,q as cf,r as ho,t as Pn,v as H,E as Re,x as ee,y as uf,z as df,A as ff,G as fr,e as pf,J as hf,L as Y,O as Le,a as ds,b as fn,Q as vo,R as pr,V as vf,W as hr,X as mf,Y as pn,Z as fs,$ as gf,a0 as ot,s as bf,a1 as yf,a2 as wf,a3 as Ht,a4 as Jr,a5 as xf,a6 as _n,a7 as mo,a8 as Cf,a9 as Zr,aa as Qr,ab as Sf,ac as ps,B as Ef,ad as Df,ae as Mf,af as go,ag as Of,ah as Tf,ai as Pf,aj as _f,ak as If,al as kf,am as Ze,an as hs,ao as Rf,ap as Nf,aq as Af,ar as $t,as as Lf,at as zf,au as Ff,av as Bf}from"./projectFunctions.0b423c97.js";import{L as vs,S as jf}from"./SceneService.306da1a6.js";import{a as fe}from"./index.ebe70c7a.js";import{K as Wf}from"./_baseIteratee.d1a5d142.js";import{b as Hf,u as bo,g as $f}from"./upload.bd537b46.js";import{V as Kf,S as Vf,P as Uf,W as Gf,am as qf,ak as Yf}from"./three.module.493739a3.js";import{G as Xf}from"./avatarFunctions.6d66cf01.js";import{C as ei}from"./index.7b02be28.js";import"./___vite-browser-external_commonjs-proxy.0e203c6e.js";import"./__vite-browser-external.b6126e45.js";import"./SystemUpdateType.772fc25d.js";import"./index.81138b53.js";import"./createSvgIcon.896642b4.js";import"./capitalize.fc001633.js";import"./useControlled.8dca0ac1.js";import"./useFormControl.a2039fae.js";import"./IconButton.ce216bbb.js";import"./ButtonBase.fb193a96.js";import"./createSvgIcon.57924123.js";import"./ownerWindow.3d7152ce.js";import"./index.2272cc2f.js";import"./AlertService.5d8abaff.js";import"./feathers.32f4d4e8.js";var lt;(function(t){t.SOURCE="SOURCE",t.TARGET="TARGET"})(lt||(lt={}));var yo="dnd-core/INIT_COORDS",ti="dnd-core/BEGIN_DRAG",wo="dnd-core/PUBLISH_DRAG_SOURCE",ni="dnd-core/HOVER",ri="dnd-core/DROP",ii="dnd-core/END_DRAG";function ms(t,e){return{type:yo,payload:{sourceClientOffset:e||null,clientOffset:t||null}}}function oi(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?oi=function(n){return typeof n}:oi=function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},oi(t)}function Jf(t,e,n){return e.split(".").reduce(function(r,i){return r&&r[i]?r[i]:n||null},t)}function Zf(t,e){return t.filter(function(n){return n!==e})}function gs(t){return oi(t)==="object"}function Qf(t,e){var n=new Map,r=function(a){n.set(a,n.has(a)?n.get(a)+1:1)};t.forEach(r),e.forEach(r);var i=[];return n.forEach(function(o,a){o===1&&i.push(a)}),i}function ep(t,e){return t.filter(function(n){return e.indexOf(n)>-1})}var tp={type:yo,payload:{clientOffset:null,sourceClientOffset:null}};function np(t){return function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{publishSource:!0},i=r.publishSource,o=i===void 0?!0:i,a=r.clientOffset,s=r.getSourceClientOffset,l=t.getMonitor(),c=t.getRegistry();t.dispatch(ms(a)),rp(n,l,c);var d=ap(n,l);if(d===null){t.dispatch(tp);return}var f=null;if(a){if(!s)throw new Error("getSourceClientOffset must be defined");ip(s),f=s(d)}t.dispatch(ms(a,f));var h=c.getSource(d),v=h.beginDrag(l,d);if(v!=null){op(v),c.pinSource(d);var m=c.getSourceType(d);return{type:ti,payload:{itemType:m,item:v,sourceId:d,clientOffset:a||null,sourceClientOffset:f||null,isSourcePublic:!!o}}}}}function rp(t,e,n){de(!e.isDragging(),"Cannot call beginDrag while dragging."),t.forEach(function(r){de(n.getSource(r),"Expected sourceIds to be registered.")})}function ip(t){de(typeof t=="function","When clientOffset is provided, getSourceClientOffset must be a function.")}function op(t){de(gs(t),"Item must be an object.")}function ap(t,e){for(var n=null,r=t.length-1;r>=0;r--)if(e.canDragSource(t[r])){n=t[r];break}return n}function sp(t){return function(){var n=t.getMonitor();if(n.isDragging())return{type:wo}}}function xo(t,e){return e===null?t===null:Array.isArray(t)?t.some(function(n){return n===e}):t===e}function lp(t){return function(n){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i=r.clientOffset;cp(n);var o=n.slice(0),a=t.getMonitor(),s=t.getRegistry();up(o,a,s);var l=a.getItemType();return dp(o,s,l),fp(o,a,s),{type:ni,payload:{targetIds:o,clientOffset:i||null}}}}function cp(t){de(Array.isArray(t),"Expected targetIds to be an array.")}function up(t,e,n){de(e.isDragging(),"Cannot call hover while not dragging."),de(!e.didDrop(),"Cannot call hover after drop.");for(var r=0;r<t.length;r++){var i=t[r];de(t.lastIndexOf(i)===r,"Expected targetIds to be unique in the passed array.");var o=n.getTarget(i);de(o,"Expected targetIds to be registered.")}}function dp(t,e,n){for(var r=t.length-1;r>=0;r--){var i=t[r],o=e.getTargetType(i);xo(o,n)||t.splice(r,1)}}function fp(t,e,n){t.forEach(function(r){var i=n.getTarget(r);i.hover(e,r)})}function bs(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(t,i).enumerable})),n.push.apply(n,r)}return n}function ys(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?bs(Object(n),!0).forEach(function(r){pp(t,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):bs(Object(n)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))})}return t}function pp(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function hp(t){return function(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},r=t.getMonitor(),i=t.getRegistry();vp(r);var o=bp(r);o.forEach(function(a,s){var l=mp(a,s,i,r),c={type:ri,payload:{dropResult:ys(ys({},n),l)}};t.dispatch(c)})}}function vp(t){de(t.isDragging(),"Cannot call drop while not dragging."),de(!t.didDrop(),"Cannot call drop twice during one drag operation.")}function mp(t,e,n,r){var i=n.getTarget(t),o=i?i.drop(r,t):void 0;return gp(o),typeof o=="undefined"&&(o=e===0?{}:r.getDropResult()),o}function gp(t){de(typeof t=="undefined"||gs(t),"Drop result must either be an object or undefined.")}function bp(t){var e=t.getTargetIds().filter(t.canDropOnTarget,t);return e.reverse(),e}function yp(t){return function(){var n=t.getMonitor(),r=t.getRegistry();wp(n);var i=n.getSourceId();if(i!=null){var o=r.getSource(i,!0);o.endDrag(n,i),r.unpinSource()}return{type:ii}}}function wp(t){de(t.isDragging(),"Cannot call endDrag while not dragging.")}function xp(t){return{beginDrag:np(t),publishDragSource:sp(t),hover:lp(t),drop:hp(t),endDrag:yp(t)}}function Cp(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ws(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Sp(t,e,n){return e&&ws(t.prototype,e),n&&ws(t,n),t}function vr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Ep=function(){function t(e,n){var r=this;Cp(this,t),vr(this,"store",void 0),vr(this,"monitor",void 0),vr(this,"backend",void 0),vr(this,"isSetUp",!1),vr(this,"handleRefCountChange",function(){var i=r.store.getState().refCount>0;r.backend&&(i&&!r.isSetUp?(r.backend.setup(),r.isSetUp=!0):!i&&r.isSetUp&&(r.backend.teardown(),r.isSetUp=!1))}),this.store=e,this.monitor=n,e.subscribe(this.handleRefCountChange)}return Sp(t,[{key:"receiveBackend",value:function(n){this.backend=n}},{key:"getMonitor",value:function(){return this.monitor}},{key:"getBackend",value:function(){return this.backend}},{key:"getRegistry",value:function(){return this.monitor.registry}},{key:"getActions",value:function(){var n=this,r=this.store.dispatch;function i(a){return function(){for(var s=arguments.length,l=new Array(s),c=0;c<s;c++)l[c]=arguments[c];var d=a.apply(n,l);typeof d!="undefined"&&r(d)}}var o=xp(this);return Object.keys(o).reduce(function(a,s){var l=o[s];return a[s]=i(l),a},{})}},{key:"dispatch",value:function(n){this.store.dispatch(n)}}]),t}(),Dp=function(e,n){return e===n};function Mp(t,e){return!t&&!e?!0:!t||!e?!1:t.x===e.x&&t.y===e.y}function Op(t,e){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:Dp;if(t.length!==e.length)return!1;for(var r=0;r<t.length;++r)if(!n(t[r],e[r]))return!1;return!0}function xs(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(t,i).enumerable})),n.push.apply(n,r)}return n}function Cs(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?xs(Object(n),!0).forEach(function(r){Tp(t,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):xs(Object(n)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))})}return t}function Tp(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Ss={initialSourceClientOffset:null,initialClientOffset:null,clientOffset:null};function Pp(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Ss,e=arguments.length>1?arguments[1]:void 0,n=e.payload;switch(e.type){case yo:case ti:return{initialSourceClientOffset:n.sourceClientOffset,initialClientOffset:n.clientOffset,clientOffset:n.clientOffset};case ni:return Mp(t.clientOffset,n.clientOffset)?t:Cs(Cs({},t),{},{clientOffset:n.clientOffset});case ii:case ri:return Ss;default:return t}}var Co="dnd-core/ADD_SOURCE",So="dnd-core/ADD_TARGET",Eo="dnd-core/REMOVE_SOURCE",ai="dnd-core/REMOVE_TARGET";function _p(t){return{type:Co,payload:{sourceId:t}}}function Ip(t){return{type:So,payload:{targetId:t}}}function kp(t){return{type:Eo,payload:{sourceId:t}}}function Rp(t){return{type:ai,payload:{targetId:t}}}function Es(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(t,i).enumerable})),n.push.apply(n,r)}return n}function ct(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?Es(Object(n),!0).forEach(function(r){Np(t,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Es(Object(n)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))})}return t}function Np(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Ap={itemType:null,item:null,sourceId:null,targetIds:[],dropResult:null,didDrop:!1,isSourcePublic:null};function Lp(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Ap,e=arguments.length>1?arguments[1]:void 0,n=e.payload;switch(e.type){case ti:return ct(ct({},t),{},{itemType:n.itemType,item:n.item,sourceId:n.sourceId,isSourcePublic:n.isSourcePublic,dropResult:null,didDrop:!1});case wo:return ct(ct({},t),{},{isSourcePublic:!0});case ni:return ct(ct({},t),{},{targetIds:n.targetIds});case ai:return t.targetIds.indexOf(n.targetId)===-1?t:ct(ct({},t),{},{targetIds:Zf(t.targetIds,n.targetId)});case ri:return ct(ct({},t),{},{dropResult:n.dropResult,didDrop:!0,targetIds:[]});case ii:return ct(ct({},t),{},{itemType:null,item:null,sourceId:null,dropResult:null,didDrop:!1,isSourcePublic:null,targetIds:[]});default:return t}}function zp(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case Co:case So:return t+1;case Eo:case ai:return t-1;default:return t}}var si=[],Do=[];si.__IS_NONE__=!0;Do.__IS_ALL__=!0;function Fp(t,e){if(t===si)return!1;if(t===Do||typeof e=="undefined")return!0;var n=ep(e,t);return n.length>0}function Bp(){var t=arguments.length>1?arguments[1]:void 0;switch(t.type){case ni:break;case Co:case So:case ai:case Eo:return si;case ti:case wo:case ii:case ri:default:return Do}var e=t.payload,n=e.targetIds,r=n===void 0?[]:n,i=e.prevTargetIds,o=i===void 0?[]:i,a=Qf(r,o),s=a.length>0||!Op(r,o);if(!s)return si;var l=o[o.length-1],c=r[r.length-1];return l!==c&&(l&&a.push(l),c&&a.push(c)),a}function jp(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0;return t+1}function Ds(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(t,i).enumerable})),n.push.apply(n,r)}return n}function Ms(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?Ds(Object(n),!0).forEach(function(r){Wp(t,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ds(Object(n)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))})}return t}function Wp(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Hp(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0;return{dirtyHandlerIds:Bp(t.dirtyHandlerIds,{type:e.type,payload:Ms(Ms({},e.payload),{},{prevTargetIds:Jf(t,"dragOperation.targetIds",[])})}),dragOffset:Pp(t.dragOffset,e),refCount:zp(t.refCount,e),dragOperation:Lp(t.dragOperation,e),stateId:jp(t.stateId)}}function $p(t,e){return{x:t.x+e.x,y:t.y+e.y}}function Os(t,e){return{x:t.x-e.x,y:t.y-e.y}}function Kp(t){var e=t.clientOffset,n=t.initialClientOffset,r=t.initialSourceClientOffset;return!e||!n||!r?null:Os($p(e,r),n)}function Vp(t){var e=t.clientOffset,n=t.initialClientOffset;return!e||!n?null:Os(e,n)}function Up(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ts(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Gp(t,e,n){return e&&Ts(t.prototype,e),n&&Ts(t,n),t}function Ps(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var qp=function(){function t(e,n){Up(this,t),Ps(this,"store",void 0),Ps(this,"registry",void 0),this.store=e,this.registry=n}return Gp(t,[{key:"subscribeToStateChange",value:function(n){var r=this,i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{handlerIds:void 0},o=i.handlerIds;de(typeof n=="function","listener must be a function."),de(typeof o=="undefined"||Array.isArray(o),"handlerIds, when specified, must be an array of strings.");var a=this.store.getState().stateId,s=function(){var c=r.store.getState(),d=c.stateId;try{var f=d===a||d===a+1&&!Fp(c.dirtyHandlerIds,o);f||n()}finally{a=d}};return this.store.subscribe(s)}},{key:"subscribeToOffsetChange",value:function(n){var r=this;de(typeof n=="function","listener must be a function.");var i=this.store.getState().dragOffset,o=function(){var s=r.store.getState().dragOffset;s!==i&&(i=s,n())};return this.store.subscribe(o)}},{key:"canDragSource",value:function(n){if(!n)return!1;var r=this.registry.getSource(n);return de(r,"Expected to find a valid source. sourceId=".concat(n)),this.isDragging()?!1:r.canDrag(this,n)}},{key:"canDropOnTarget",value:function(n){if(!n)return!1;var r=this.registry.getTarget(n);if(de(r,"Expected to find a valid target. targetId=".concat(n)),!this.isDragging()||this.didDrop())return!1;var i=this.registry.getTargetType(n),o=this.getItemType();return xo(i,o)&&r.canDrop(this,n)}},{key:"isDragging",value:function(){return Boolean(this.getItemType())}},{key:"isDraggingSource",value:function(n){if(!n)return!1;var r=this.registry.getSource(n,!0);if(de(r,"Expected to find a valid source. sourceId=".concat(n)),!this.isDragging()||!this.isSourcePublic())return!1;var i=this.registry.getSourceType(n),o=this.getItemType();return i!==o?!1:r.isDragging(this,n)}},{key:"isOverTarget",value:function(n){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{shallow:!1};if(!n)return!1;var i=r.shallow;if(!this.isDragging())return!1;var o=this.registry.getTargetType(n),a=this.getItemType();if(a&&!xo(o,a))return!1;var s=this.getTargetIds();if(!s.length)return!1;var l=s.indexOf(n);return i?l===s.length-1:l>-1}},{key:"getItemType",value:function(){return this.store.getState().dragOperation.itemType}},{key:"getItem",value:function(){return this.store.getState().dragOperation.item}},{key:"getSourceId",value:function(){return this.store.getState().dragOperation.sourceId}},{key:"getTargetIds",value:function(){return this.store.getState().dragOperation.targetIds}},{key:"getDropResult",value:function(){return this.store.getState().dragOperation.dropResult}},{key:"didDrop",value:function(){return this.store.getState().dragOperation.didDrop}},{key:"isSourcePublic",value:function(){return Boolean(this.store.getState().dragOperation.isSourcePublic)}},{key:"getInitialClientOffset",value:function(){return this.store.getState().dragOffset.initialClientOffset}},{key:"getInitialSourceClientOffset",value:function(){return this.store.getState().dragOffset.initialSourceClientOffset}},{key:"getClientOffset",value:function(){return this.store.getState().dragOffset.clientOffset}},{key:"getSourceClientOffset",value:function(){return Kp(this.store.getState().dragOffset)}},{key:"getDifferenceFromInitialOffset",value:function(){return Vp(this.store.getState().dragOffset)}}]),t}(),Yp=0;function Xp(){return Yp++}function li(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?li=function(n){return typeof n}:li=function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},li(t)}function Jp(t){de(typeof t.canDrag=="function","Expected canDrag to be a function."),de(typeof t.beginDrag=="function","Expected beginDrag to be a function."),de(typeof t.endDrag=="function","Expected endDrag to be a function.")}function Zp(t){de(typeof t.canDrop=="function","Expected canDrop to be a function."),de(typeof t.hover=="function","Expected hover to be a function."),de(typeof t.drop=="function","Expected beginDrag to be a function.")}function Mo(t,e){if(e&&Array.isArray(t)){t.forEach(function(n){return Mo(n,!1)});return}de(typeof t=="string"||li(t)==="symbol",e?"Type can only be a string, a symbol, or an array of either.":"Type can only be a string or a symbol.")}function ci(t){_t.length||ui(),_t[_t.length]=t}var _t=[],ui,It=0,Qp=1024;function _s(){for(;It<_t.length;){var t=It;if(It=It+1,_t[t].call(),It>Qp){for(var e=0,n=_t.length-It;e<n;e++)_t[e]=_t[e+It];_t.length-=It,It=0}}_t.length=0,It=0}var Is=typeof global!="undefined"?global:self,ks=Is.MutationObserver||Is.WebKitMutationObserver;typeof ks=="function"?ui=eh(_s):ui=Rs(_s);ci.requestFlush=ui;function eh(t){var e=1,n=new ks(t),r=document.createTextNode("");return n.observe(r,{characterData:!0}),function(){e=-e,r.data=e}}function Rs(t){return function(){var n=setTimeout(i,0),r=setInterval(i,50);function i(){clearTimeout(n),clearInterval(r),t()}}}ci.makeRequestCallFromTimer=Rs;var di=[],Oo=[],th=ci.makeRequestCallFromTimer(nh);function nh(){if(Oo.length)throw Oo.shift()}function To(t){var e;di.length?e=di.pop():e=new rh,e.task=t,ci(e)}var rh=function(){function t(){}return t.prototype.call=function(){try{this.task.call()}catch(e){To.onerror?To.onerror(e):(Oo.push(e),th())}finally{this.task=null,di[di.length]=this}},t}();function ih(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ns(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function oh(t,e,n){return e&&Ns(t.prototype,e),n&&Ns(t,n),t}function In(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ah(t,e){return uh(t)||ch(t,e)||lh(t,e)||sh()}function sh(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function lh(t,e){if(!!t){if(typeof t=="string")return As(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);if(n==="Object"&&t.constructor&&(n=t.constructor.name),n==="Map"||n==="Set")return Array.from(t);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return As(t,e)}}function As(t,e){(e==null||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ch(t,e){var n=t==null?null:typeof Symbol!="undefined"&&t[Symbol.iterator]||t["@@iterator"];if(n!=null){var r=[],i=!0,o=!1,a,s;try{for(n=n.call(t);!(i=(a=n.next()).done)&&(r.push(a.value),!(e&&r.length===e));i=!0);}catch(l){o=!0,s=l}finally{try{!i&&n.return!=null&&n.return()}finally{if(o)throw s}}return r}}function uh(t){if(Array.isArray(t))return t}function dh(t){var e=Xp().toString();switch(t){case lt.SOURCE:return"S".concat(e);case lt.TARGET:return"T".concat(e);default:throw new Error("Unknown Handler Role: ".concat(t))}}function Ls(t){switch(t[0]){case"S":return lt.SOURCE;case"T":return lt.TARGET;default:de(!1,"Cannot parse handler ID: ".concat(t))}}function zs(t,e){var n=t.entries(),r=!1;do{var i=n.next(),o=i.done,a=ah(i.value,2),s=a[1];if(s===e)return!0;r=!!o}while(!r);return!1}var fh=function(){function t(e){ih(this,t),In(this,"types",new Map),In(this,"dragSources",new Map),In(this,"dropTargets",new Map),In(this,"pinnedSourceId",null),In(this,"pinnedSource",null),In(this,"store",void 0),this.store=e}return oh(t,[{key:"addSource",value:function(n,r){Mo(n),Jp(r);var i=this.addHandler(lt.SOURCE,n,r);return this.store.dispatch(_p(i)),i}},{key:"addTarget",value:function(n,r){Mo(n,!0),Zp(r);var i=this.addHandler(lt.TARGET,n,r);return this.store.dispatch(Ip(i)),i}},{key:"containsHandler",value:function(n){return zs(this.dragSources,n)||zs(this.dropTargets,n)}},{key:"getSource",value:function(n){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;de(this.isSourceId(n),"Expected a valid source ID.");var i=r&&n===this.pinnedSourceId,o=i?this.pinnedSource:this.dragSources.get(n);return o}},{key:"getTarget",value:function(n){return de(this.isTargetId(n),"Expected a valid target ID."),this.dropTargets.get(n)}},{key:"getSourceType",value:function(n){return de(this.isSourceId(n),"Expected a valid source ID."),this.types.get(n)}},{key:"getTargetType",value:function(n){return de(this.isTargetId(n),"Expected a valid target ID."),this.types.get(n)}},{key:"isSourceId",value:function(n){var r=Ls(n);return r===lt.SOURCE}},{key:"isTargetId",value:function(n){var r=Ls(n);return r===lt.TARGET}},{key:"removeSource",value:function(n){var r=this;de(this.getSource(n),"Expected an existing source."),this.store.dispatch(kp(n)),To(function(){r.dragSources.delete(n),r.types.delete(n)})}},{key:"removeTarget",value:function(n){de(this.getTarget(n),"Expected an existing target."),this.store.dispatch(Rp(n)),this.dropTargets.delete(n),this.types.delete(n)}},{key:"pinSource",value:function(n){var r=this.getSource(n);de(r,"Expected an existing source."),this.pinnedSourceId=n,this.pinnedSource=r}},{key:"unpinSource",value:function(){de(this.pinnedSource,"No source is pinned at the time."),this.pinnedSourceId=null,this.pinnedSource=null}},{key:"addHandler",value:function(n,r,i){var o=dh(n);return this.types.set(o,r),n===lt.SOURCE?this.dragSources.set(o,i):n===lt.TARGET&&this.dropTargets.set(o,i),o}}]),t}();function ph(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!1,i=hh(r),o=new qp(i,new fh(i)),a=new Ep(i,o),s=t(a,e,n);return a.receiveBackend(s),a}function hh(t){var e=typeof window!="undefined"&&window.__REDUX_DEVTOOLS_EXTENSION__;return qd(Hp,t&&e&&e({name:"dnd-core",instanceId:"dnd-core"}))}var vh=["children"];function mh(t,e){return wh(t)||yh(t,e)||bh(t,e)||gh()}function gh(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function bh(t,e){if(!!t){if(typeof t=="string")return Fs(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);if(n==="Object"&&t.constructor&&(n=t.constructor.name),n==="Map"||n==="Set")return Array.from(t);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Fs(t,e)}}function Fs(t,e){(e==null||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function yh(t,e){var n=t==null?null:typeof Symbol!="undefined"&&t[Symbol.iterator]||t["@@iterator"];if(n!=null){var r=[],i=!0,o=!1,a,s;try{for(n=n.call(t);!(i=(a=n.next()).done)&&(r.push(a.value),!(e&&r.length===e));i=!0);}catch(l){o=!0,s=l}finally{try{!i&&n.return!=null&&n.return()}finally{if(o)throw s}}return r}}function wh(t){if(Array.isArray(t))return t}function xh(t,e){if(t==null)return{};var n=Ch(t,e),r,i;if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)r=o[i],!(e.indexOf(r)>=0)&&(!Object.prototype.propertyIsEnumerable.call(t,r)||(n[r]=t[r]))}return n}function Ch(t,e){if(t==null)return{};var n={},r=Object.keys(t),i,o;for(o=0;o<r.length;o++)i=r[o],!(e.indexOf(i)>=0)&&(n[i]=t[i]);return n}var Bs=0,fi=Symbol.for("__REACT_DND_CONTEXT_INSTANCE__"),Sh=u.exports.memo(function(e){var n=e.children,r=xh(e,vh),i=Eh(r),o=mh(i,2),a=o[0],s=o[1];return u.exports.useEffect(function(){if(s){var l=js();return++Bs,function(){--Bs==0&&(l[fi]=null)}}},[]),Yd.exports.jsx(tf.Provider,Object.assign({value:a},{children:n}),void 0)});function Eh(t){if("manager"in t){var e={dragDropManager:t.manager};return[e,!1]}var n=Dh(t.backend,t.context,t.options,t.debugMode),r=!t.context;return[n,r]}function Dh(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:js(),n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,i=e;return i[fi]||(i[fi]={dragDropManager:ph(t,e,n,r)}),i[fi]}function js(){return typeof global!="undefined"?global:window}function Mh(t,e){return _h(t)||Ph(t,e)||Th(t,e)||Oh()}function Oh(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Th(t,e){if(!!t){if(typeof t=="string")return Ws(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);if(n==="Object"&&t.constructor&&(n=t.constructor.name),n==="Map"||n==="Set")return Array.from(t);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ws(t,e)}}function Ws(t,e){(e==null||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ph(t,e){var n=t==null?null:typeof Symbol!="undefined"&&t[Symbol.iterator]||t["@@iterator"];if(n!=null){var r=[],i=!0,o=!1,a,s;try{for(n=n.call(t);!(i=(a=n.next()).done)&&(r.push(a.value),!(e&&r.length===e));i=!0);}catch(l){o=!0,s=l}finally{try{!i&&n.return!=null&&n.return()}finally{if(o)throw s}}return r}}function _h(t){if(Array.isArray(t))return t}function Ih(t){var e=nf(),n=e.getMonitor(),r=rf(n,t),i=Mh(r,2),o=i[0],a=i[1];return u.exports.useEffect(function(){return n.subscribeToOffsetChange(a)}),u.exports.useEffect(function(){return n.subscribeToStateChange(a)}),o}function Hs(t){var e=null,n=function(){return e==null&&(e=t()),e};return n}function kh(t,e){return t.filter(function(n){return n!==e})}function Rh(t,e){var n=new Set,r=function(a){return n.add(a)};t.forEach(r),e.forEach(r);var i=[];return n.forEach(function(o){return i.push(o)}),i}function Nh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function $s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ah(t,e,n){return e&&$s(t.prototype,e),n&&$s(t,n),t}function Ks(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Lh=function(){function t(e){Nh(this,t),Ks(this,"entered",[]),Ks(this,"isNodeInDocument",void 0),this.isNodeInDocument=e}return Ah(t,[{key:"enter",value:function(n){var r=this,i=this.entered.length,o=function(s){return r.isNodeInDocument(s)&&(!s.contains||s.contains(n))};return this.entered=Rh(this.entered.filter(o),[n]),i===0&&this.entered.length>0}},{key:"leave",value:function(n){var r=this.entered.length;return this.entered=kh(this.entered.filter(this.isNodeInDocument),n),r>0&&this.entered.length===0}},{key:"reset",value:function(){this.entered=[]}}]),t}(),zh=Hs(function(){return/firefox/i.test(navigator.userAgent)}),Vs=Hs(function(){return Boolean(window.safari)});function Fh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Us(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Bh(t,e,n){return e&&Us(t.prototype,e),n&&Us(t,n),t}function mr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Gs=function(){function t(e,n){Fh(this,t),mr(this,"xs",void 0),mr(this,"ys",void 0),mr(this,"c1s",void 0),mr(this,"c2s",void 0),mr(this,"c3s",void 0);for(var r=e.length,i=[],o=0;o<r;o++)i.push(o);i.sort(function(_,F){return e[_]<e[F]?-1:1});for(var a=[],s=[],l,c,d=0;d<r-1;d++)l=e[d+1]-e[d],c=n[d+1]-n[d],a.push(l),s.push(c/l);for(var f=[s[0]],h=0;h<a.length-1;h++){var v=s[h],m=s[h+1];if(v*m<=0)f.push(0);else{l=a[h];var b=a[h+1],g=l+b;f.push(3*g/((g+b)/v+(g+l)/m))}}f.push(s[s.length-1]);for(var w=[],D=[],E,y=0;y<f.length-1;y++){E=s[y];var S=f[y],x=1/a[y],I=S+f[y+1]-E-E;w.push((E-S-I)*x),D.push(I*x*x)}this.xs=e,this.ys=n,this.c1s=f,this.c2s=w,this.c3s=D}return Bh(t,[{key:"interpolate",value:function(n){var r=this.xs,i=this.ys,o=this.c1s,a=this.c2s,s=this.c3s,l=r.length-1;if(n===r[l])return i[l];for(var c=0,d=s.length-1,f;c<=d;){f=Math.floor(.5*(c+d));var h=r[f];if(h<n)c=f+1;else if(h>n)d=f-1;else return i[f]}l=Math.max(0,d);var v=n-r[l],m=v*v;return i[l]+o[l]*v+a[l]*m+s[l]*v*m}}]),t}(),jh=1;function qs(t){var e=t.nodeType===jh?t:t.parentElement;if(!e)return null;var n=e.getBoundingClientRect(),r=n.top,i=n.left;return{x:i,y:r}}function pi(t){return{x:t.clientX,y:t.clientY}}function Wh(t){var e;return t.nodeName==="IMG"&&(zh()||!((e=document.documentElement)!==null&&e!==void 0&&e.contains(t)))}function Hh(t,e,n,r){var i=t?e.width:n,o=t?e.height:r;return Vs()&&t&&(o/=window.devicePixelRatio,i/=window.devicePixelRatio),{dragPreviewWidth:i,dragPreviewHeight:o}}function $h(t,e,n,r,i){var o=Wh(e),a=o?t:e,s=qs(a),l={x:n.x-s.x,y:n.y-s.y},c=t.offsetWidth,d=t.offsetHeight,f=r.anchorX,h=r.anchorY,v=Hh(o,e,c,d),m=v.dragPreviewWidth,b=v.dragPreviewHeight,g=function(){var I=new Gs([0,.5,1],[l.y,l.y/d*b,l.y+b-d]),_=I.interpolate(h);return Vs()&&o&&(_+=(window.devicePixelRatio-1)*b),_},w=function(){var I=new Gs([0,.5,1],[l.x,l.x/c*m,l.x+m-c]);return I.interpolate(f)},D=i.offsetX,E=i.offsetY,y=D===0||D,S=E===0||E;return{x:y?D:w(),y:S?E:g()}}function Po(t,e,n){var r=e.reduce(function(i,o){return i||t.getData(o)},"");return r??n}var kn;function hi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var _o=(kn={},hi(kn,of,{exposeProperties:{files:function(e){return Array.prototype.slice.call(e.files)},items:function(e){return e.items}},matchesTypes:["Files"]}),hi(kn,af,{exposeProperties:{html:function(e,n){return Po(e,n,"")}},matchesTypes:["Html","text/html"]}),hi(kn,sf,{exposeProperties:{urls:function(e,n){return Po(e,n,"").split(`
`)}},matchesTypes:["Url","text/uri-list"]}),hi(kn,lf,{exposeProperties:{text:function(e,n){return Po(e,n,"")}},matchesTypes:["Text","text/plain"]}),kn);function Kh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ys(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Vh(t,e,n){return e&&Ys(t.prototype,e),n&&Ys(t,n),t}function Xs(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Uh=function(){function t(e){Kh(this,t),Xs(this,"item",void 0),Xs(this,"config",void 0),this.config=e,this.item={},this.initializeExposedProperties()}return Vh(t,[{key:"initializeExposedProperties",value:function(){var n=this;Object.keys(this.config.exposeProperties).forEach(function(r){Object.defineProperty(n.item,r,{configurable:!0,enumerable:!0,get:function(){return console.warn(`Browser doesn't allow reading "`.concat(r,'" until the drop event.')),null}})})}},{key:"loadDataTransfer",value:function(n){var r=this;if(n){var i={};Object.keys(this.config.exposeProperties).forEach(function(o){i[o]={value:r.config.exposeProperties[o](n,r.config.matchesTypes),configurable:!0,enumerable:!0}}),Object.defineProperties(this.item,i)}}},{key:"canDrag",value:function(){return!0}},{key:"beginDrag",value:function(){return this.item}},{key:"isDragging",value:function(n,r){return r===n.getSourceId()}},{key:"endDrag",value:function(){}}]),t}();function Gh(t,e){var n=new Uh(_o[t]);return n.loadDataTransfer(e),n}function Io(t){if(!t)return null;var e=Array.prototype.slice.call(t.types||[]);return Object.keys(_o).filter(function(n){var r=_o[n].matchesTypes;return r.some(function(i){return e.indexOf(i)>-1})})[0]||null}function qh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Js(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Yh(t,e,n){return e&&Js(t.prototype,e),n&&Js(t,n),t}function ko(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Xh=function(){function t(e,n){qh(this,t),ko(this,"ownerDocument",null),ko(this,"globalContext",void 0),ko(this,"optionsArgs",void 0),this.globalContext=e,this.optionsArgs=n}return Yh(t,[{key:"window",get:function(){if(this.globalContext)return this.globalContext;if(typeof window!="undefined")return window}},{key:"document",get:function(){var n;return(n=this.globalContext)!==null&&n!==void 0&&n.document?this.globalContext.document:this.window?this.window.document:void 0}},{key:"rootElement",get:function(){var n;return((n=this.optionsArgs)===null||n===void 0?void 0:n.rootElement)||this.window}}]),t}();function Zs(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(t,i).enumerable})),n.push.apply(n,r)}return n}function Qs(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?Zs(Object(n),!0).forEach(function(r){pe(t,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Zs(Object(n)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))})}return t}function Jh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function el(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Zh(t,e,n){return e&&el(t.prototype,e),n&&el(t,n),t}function pe(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Qh=function(){function t(e,n,r){var i=this;Jh(this,t),pe(this,"options",void 0),pe(this,"actions",void 0),pe(this,"monitor",void 0),pe(this,"registry",void 0),pe(this,"enterLeaveCounter",void 0),pe(this,"sourcePreviewNodes",new Map),pe(this,"sourcePreviewNodeOptions",new Map),pe(this,"sourceNodes",new Map),pe(this,"sourceNodeOptions",new Map),pe(this,"dragStartSourceIds",null),pe(this,"dropTargetIds",[]),pe(this,"dragEnterTargetIds",[]),pe(this,"currentNativeSource",null),pe(this,"currentNativeHandle",null),pe(this,"currentDragSourceNode",null),pe(this,"altKeyPressed",!1),pe(this,"mouseMoveTimeoutTimer",null),pe(this,"asyncEndDragFrameId",null),pe(this,"dragOverTargetIds",null),pe(this,"getSourceClientOffset",function(o){var a=i.sourceNodes.get(o);return a&&qs(a)||null}),pe(this,"endDragNativeItem",function(){!i.isDraggingNativeItem()||(i.actions.endDrag(),i.currentNativeHandle&&i.registry.removeSource(i.currentNativeHandle),i.currentNativeHandle=null,i.currentNativeSource=null)}),pe(this,"isNodeInDocument",function(o){return Boolean(o&&i.document&&i.document.body&&i.document.body.contains(o))}),pe(this,"endDragIfSourceWasRemovedFromDOM",function(){var o=i.currentDragSourceNode;o==null||i.isNodeInDocument(o)||i.clearCurrentDragSourceNode()&&i.monitor.isDragging()&&i.actions.endDrag()}),pe(this,"handleTopDragStartCapture",function(){i.clearCurrentDragSourceNode(),i.dragStartSourceIds=[]}),pe(this,"handleTopDragStart",function(o){if(!o.defaultPrevented){var a=i.dragStartSourceIds;i.dragStartSourceIds=null;var s=pi(o);i.monitor.isDragging()&&i.actions.endDrag(),i.actions.beginDrag(a||[],{publishSource:!1,getSourceClientOffset:i.getSourceClientOffset,clientOffset:s});var l=o.dataTransfer,c=Io(l);if(i.monitor.isDragging()){if(l&&typeof l.setDragImage=="function"){var d=i.monitor.getSourceId(),f=i.sourceNodes.get(d),h=i.sourcePreviewNodes.get(d)||f;if(h){var v=i.getCurrentSourcePreviewNodeOptions(),m=v.anchorX,b=v.anchorY,g=v.offsetX,w=v.offsetY,D={anchorX:m,anchorY:b},E={offsetX:g,offsetY:w},y=$h(f,h,s,D,E);l.setDragImage(h,y.x,y.y)}}try{l==null||l.setData("application/json",{})}catch(I){}i.setCurrentDragSourceNode(o.target);var S=i.getCurrentSourcePreviewNodeOptions(),x=S.captureDraggingState;x?i.actions.publishDragSource():setTimeout(function(){return i.actions.publishDragSource()},0)}else if(c)i.beginDragNativeItem(c);else{if(l&&!l.types&&(o.target&&!o.target.hasAttribute||!o.target.hasAttribute("draggable")))return;o.preventDefault()}}}),pe(this,"handleTopDragEndCapture",function(){i.clearCurrentDragSourceNode()&&i.monitor.isDragging()&&i.actions.endDrag()}),pe(this,"handleTopDragEnterCapture",function(o){i.dragEnterTargetIds=[];var a=i.enterLeaveCounter.enter(o.target);if(!(!a||i.monitor.isDragging())){var s=o.dataTransfer,l=Io(s);l&&i.beginDragNativeItem(l,s)}}),pe(this,"handleTopDragEnter",function(o){var a=i.dragEnterTargetIds;if(i.dragEnterTargetIds=[],!!i.monitor.isDragging()){i.altKeyPressed=o.altKey,a.length>0&&i.actions.hover(a,{clientOffset:pi(o)});var s=a.some(function(l){return i.monitor.canDropOnTarget(l)});s&&(o.preventDefault(),o.dataTransfer&&(o.dataTransfer.dropEffect=i.getCurrentDropEffect()))}}),pe(this,"handleTopDragOverCapture",function(){i.dragOverTargetIds=[]}),pe(this,"handleTopDragOver",function(o){var a=i.dragOverTargetIds;if(i.dragOverTargetIds=[],!i.monitor.isDragging()){o.preventDefault(),o.dataTransfer&&(o.dataTransfer.dropEffect="none");return}i.altKeyPressed=o.altKey,i.actions.hover(a||[],{clientOffset:pi(o)});var s=(a||[]).some(function(l){return i.monitor.canDropOnTarget(l)});s?(o.preventDefault(),o.dataTransfer&&(o.dataTransfer.dropEffect=i.getCurrentDropEffect())):i.isDraggingNativeItem()?o.preventDefault():(o.preventDefault(),o.dataTransfer&&(o.dataTransfer.dropEffect="none"))}),pe(this,"handleTopDragLeaveCapture",function(o){i.isDraggingNativeItem()&&o.preventDefault();var a=i.enterLeaveCounter.leave(o.target);!a||i.isDraggingNativeItem()&&setTimeout(function(){return i.endDragNativeItem()},0)}),pe(this,"handleTopDropCapture",function(o){if(i.dropTargetIds=[],i.isDraggingNativeItem()){var a;o.preventDefault(),(a=i.currentNativeSource)===null||a===void 0||a.loadDataTransfer(o.dataTransfer)}else Io(o.dataTransfer)&&o.preventDefault();i.enterLeaveCounter.reset()}),pe(this,"handleTopDrop",function(o){var a=i.dropTargetIds;i.dropTargetIds=[],i.actions.hover(a,{clientOffset:pi(o)}),i.actions.drop({dropEffect:i.getCurrentDropEffect()}),i.isDraggingNativeItem()?i.endDragNativeItem():i.monitor.isDragging()&&i.actions.endDrag()}),pe(this,"handleSelectStart",function(o){var a=o.target;typeof a.dragDrop=="function"&&(a.tagName==="INPUT"||a.tagName==="SELECT"||a.tagName==="TEXTAREA"||a.isContentEditable||(o.preventDefault(),a.dragDrop()))}),this.options=new Xh(n,r),this.actions=e.getActions(),this.monitor=e.getMonitor(),this.registry=e.getRegistry(),this.enterLeaveCounter=new Lh(this.isNodeInDocument)}return Zh(t,[{key:"profile",value:function(){var n,r;return{sourcePreviewNodes:this.sourcePreviewNodes.size,sourcePreviewNodeOptions:this.sourcePreviewNodeOptions.size,sourceNodeOptions:this.sourceNodeOptions.size,sourceNodes:this.sourceNodes.size,dragStartSourceIds:((n=this.dragStartSourceIds)===null||n===void 0?void 0:n.length)||0,dropTargetIds:this.dropTargetIds.length,dragEnterTargetIds:this.dragEnterTargetIds.length,dragOverTargetIds:((r=this.dragOverTargetIds)===null||r===void 0?void 0:r.length)||0}}},{key:"window",get:function(){return this.options.window}},{key:"document",get:function(){return this.options.document}},{key:"rootElement",get:function(){return this.options.rootElement}},{key:"setup",value:function(){var n=this.rootElement;if(n!==void 0){if(n.__isReactDndBackendSetUp)throw new Error("Cannot have two HTML5 backends at the same time.");n.__isReactDndBackendSetUp=!0,this.addEventListeners(n)}}},{key:"teardown",value:function(){var n=this.rootElement;if(n!==void 0&&(n.__isReactDndBackendSetUp=!1,this.removeEventListeners(this.rootElement),this.clearCurrentDragSourceNode(),this.asyncEndDragFrameId)){var r;(r=this.window)===null||r===void 0||r.cancelAnimationFrame(this.asyncEndDragFrameId)}}},{key:"connectDragPreview",value:function(n,r,i){var o=this;return this.sourcePreviewNodeOptions.set(n,i),this.sourcePreviewNodes.set(n,r),function(){o.sourcePreviewNodes.delete(n),o.sourcePreviewNodeOptions.delete(n)}}},{key:"connectDragSource",value:function(n,r,i){var o=this;this.sourceNodes.set(n,r),this.sourceNodeOptions.set(n,i);var a=function(c){return o.handleDragStart(c,n)},s=function(c){return o.handleSelectStart(c)};return r.setAttribute("draggable","true"),r.addEventListener("dragstart",a),r.addEventListener("selectstart",s),function(){o.sourceNodes.delete(n),o.sourceNodeOptions.delete(n),r.removeEventListener("dragstart",a),r.removeEventListener("selectstart",s),r.setAttribute("draggable","false")}}},{key:"connectDropTarget",value:function(n,r){var i=this,o=function(c){return i.handleDragEnter(c,n)},a=function(c){return i.handleDragOver(c,n)},s=function(c){return i.handleDrop(c,n)};return r.addEventListener("dragenter",o),r.addEventListener("dragover",a),r.addEventListener("drop",s),function(){r.removeEventListener("dragenter",o),r.removeEventListener("dragover",a),r.removeEventListener("drop",s)}}},{key:"addEventListeners",value:function(n){!n.addEventListener||(n.addEventListener("dragstart",this.handleTopDragStart),n.addEventListener("dragstart",this.handleTopDragStartCapture,!0),n.addEventListener("dragend",this.handleTopDragEndCapture,!0),n.addEventListener("dragenter",this.handleTopDragEnter),n.addEventListener("dragenter",this.handleTopDragEnterCapture,!0),n.addEventListener("dragleave",this.handleTopDragLeaveCapture,!0),n.addEventListener("dragover",this.handleTopDragOver),n.addEventListener("dragover",this.handleTopDragOverCapture,!0),n.addEventListener("drop",this.handleTopDrop),n.addEventListener("drop",this.handleTopDropCapture,!0))}},{key:"removeEventListeners",value:function(n){!n.removeEventListener||(n.removeEventListener("dragstart",this.handleTopDragStart),n.removeEventListener("dragstart",this.handleTopDragStartCapture,!0),n.removeEventListener("dragend",this.handleTopDragEndCapture,!0),n.removeEventListener("dragenter",this.handleTopDragEnter),n.removeEventListener("dragenter",this.handleTopDragEnterCapture,!0),n.removeEventListener("dragleave",this.handleTopDragLeaveCapture,!0),n.removeEventListener("dragover",this.handleTopDragOver),n.removeEventListener("dragover",this.handleTopDragOverCapture,!0),n.removeEventListener("drop",this.handleTopDrop),n.removeEventListener("drop",this.handleTopDropCapture,!0))}},{key:"getCurrentSourceNodeOptions",value:function(){var n=this.monitor.getSourceId(),r=this.sourceNodeOptions.get(n);return Qs({dropEffect:this.altKeyPressed?"copy":"move"},r||{})}},{key:"getCurrentDropEffect",value:function(){return this.isDraggingNativeItem()?"copy":this.getCurrentSourceNodeOptions().dropEffect}},{key:"getCurrentSourcePreviewNodeOptions",value:function(){var n=this.monitor.getSourceId(),r=this.sourcePreviewNodeOptions.get(n);return Qs({anchorX:.5,anchorY:.5,captureDraggingState:!1},r||{})}},{key:"isDraggingNativeItem",value:function(){var n=this.monitor.getItemType();return Object.keys(cs).some(function(r){return cs[r]===n})}},{key:"beginDragNativeItem",value:function(n,r){this.clearCurrentDragSourceNode(),this.currentNativeSource=Gh(n,r),this.currentNativeHandle=this.registry.addSource(n,this.currentNativeSource),this.actions.beginDrag([this.currentNativeHandle])}},{key:"setCurrentDragSourceNode",value:function(n){var r=this;this.clearCurrentDragSourceNode(),this.currentDragSourceNode=n;var i=1e3;this.mouseMoveTimeoutTimer=setTimeout(function(){var o;return(o=r.rootElement)===null||o===void 0?void 0:o.addEventListener("mousemove",r.endDragIfSourceWasRemovedFromDOM,!0)},i)}},{key:"clearCurrentDragSourceNode",value:function(){if(this.currentDragSourceNode){if(this.currentDragSourceNode=null,this.rootElement){var n;(n=this.window)===null||n===void 0||n.clearTimeout(this.mouseMoveTimeoutTimer||void 0),this.rootElement.removeEventListener("mousemove",this.endDragIfSourceWasRemovedFromDOM,!0)}return this.mouseMoveTimeoutTimer=null,!0}return!1}},{key:"handleDragStart",value:function(n,r){n.defaultPrevented||(this.dragStartSourceIds||(this.dragStartSourceIds=[]),this.dragStartSourceIds.unshift(r))}},{key:"handleDragEnter",value:function(n,r){this.dragEnterTargetIds.unshift(r)}},{key:"handleDragOver",value:function(n,r){this.dragOverTargetIds===null&&(this.dragOverTargetIds=[]),this.dragOverTargetIds.unshift(r)}},{key:"handleDrop",value:function(n,r){this.dropTargetIds.unshift(r)}}]),t}(),ev=function(e,n,r){return new Qh(e,n,r)},tl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M32 448c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V160H32v288zm160-212c0-6.6 5.4-12 12-12h104c6.6 0 12 5.4 12 12v8c0 6.6-5.4 12-12 12H204c-6.6 0-12-5.4-12-12v-8zM480 32H32C14.3 32 0 46.3 0 64v48c0 8.8 7.2 16 16 16h480c8.8 0 16-7.2 16-16V64c0-17.7-14.3-32-32-32z"}))});tl.displayName="Archive";var nl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"m352.201 425.775-79.196 79.196c-9.373 9.373-24.568 9.373-33.941 0l-79.196-79.196c-15.119-15.119-4.411-40.971 16.971-40.97h51.162L228 284H127.196v51.162c0 21.382-25.851 32.09-40.971 16.971L7.029 272.937c-9.373-9.373-9.373-24.569 0-33.941L86.225 159.8c15.119-15.119 40.971-4.411 40.971 16.971V228H228V127.196h-51.23c-21.382 0-32.09-25.851-16.971-40.971l79.196-79.196c9.373-9.373 24.568-9.373 33.941 0l79.196 79.196c15.119 15.119 4.411 40.971-16.971 40.971h-51.162V228h100.804v-51.162c0-21.382 25.851-32.09 40.97-16.971l79.196 79.196c9.373 9.373 9.373 24.569 0 33.941L425.773 352.2c-15.119 15.119-40.971 4.411-40.97-16.971V284H284v100.804h51.23c21.382 0 32.09 25.851 16.971 40.971z"}))});nl.displayName="ArrowsAlt";var rl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 256 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M214.059 377.941H168V134.059h46.059c21.382 0 32.09-25.851 16.971-40.971L144.971 7.029c-9.373-9.373-24.568-9.373-33.941 0L24.971 93.088c-15.119 15.119-4.411 40.971 16.971 40.971H88v243.882H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.568 9.373 33.941 0l86.059-86.059c15.12-15.119 4.412-40.971-16.97-40.971z"}))});rl.displayName="ArrowsAltV";var il=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 448 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"}))});il.displayName="Bars";var ol=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 320 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"}))});ol.displayName="CaretDown";var al=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 192 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z"}))});al.displayName="CaretRight";var sl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M500 384c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v308h436zM372.7 159.5 288 216l-85.3-113.7c-5.1-6.8-15.5-6.3-19.9 1L96 248v104h384l-89.9-187.8c-3.2-6.5-11.4-8.7-17.4-4.7z"}))});sl.displayName="ChartArea";var ll=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 576 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346 7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"}))});ll.displayName="ExclamationTriangle";var cl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M164.07 148.1H12a12 12 0 0 1-12-12v-80a36 36 0 0 1 36-36h104a36 36 0 0 1 36 36v80a11.89 11.89 0 0 1-11.93 12zm347.93-12V56a36 36 0 0 0-36-36H372a36 36 0 0 0-36 36v80a12 12 0 0 0 12 12h152a11.89 11.89 0 0 0 12-11.9zm-164 44a12 12 0 0 0-12 12v52c0 128.1-160 127.9-160 0v-52a12 12 0 0 0-12-12H12.1a12 12 0 0 0-12 12.1c.1 21.4.6 40.3 0 53.3 0 150.6 136.17 246.6 256.75 246.6s255-96 255-246.7c-.6-12.8-.2-33 0-53.2a12 12 0 0 0-12-12.1z"}))});cl.displayName="Magnet";var ul=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 448 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z"}))});ul.displayName="Pause";var dl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 448 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M424.4 214.7 72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"}))});dl.displayName="Play";var fl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 640 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M384 320H256c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h128c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32zM192 32c0-17.67-14.33-32-32-32H32C14.33 0 0 14.33 0 32v128c0 17.67 14.33 32 32 32h95.72l73.16 128.04C211.98 300.98 232.4 288 256 288h.28L192 175.51V128h224V64H192V32zM608 0H480c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h128c17.67 0 32-14.33 32-32V32c0-17.67-14.33-32-32-32z"}))});fl.displayName="ProjectDiagram";var pl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M496 384H160v-16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v16H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h80v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h336c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-160h-80v-16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v16H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h336v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h80c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm0-160H288V48c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v16H16C7.2 64 0 71.2 0 80v32c0 8.8 7.2 16 16 16h208v16c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-16h208c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16z"}))});pl.displayName="SlidersH";var hl=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},t,{ref:e}),u.exports.createElement("path",{fill:"currentColor",d:"M370.72 133.28C339.458 104.008 298.888 87.962 255.848 88c-77.458.068-144.328 53.178-162.791 126.85-1.344 5.363-6.122 9.15-11.651 9.15H24.103c-7.498 0-13.194-6.807-11.807-14.176C33.933 94.924 134.813 8 256 8c66.448 0 126.791 26.136 171.315 68.685L463.03 40.97C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.749zM32 296h134.059c21.382 0 32.09 25.851 16.971 40.971l-41.75 41.75c31.262 29.273 71.835 45.319 114.876 45.28 77.418-.07 144.315-53.144 162.787-126.849 1.344-5.363 6.122-9.15 11.651-9.15h57.304c7.498 0 13.194 6.807 11.807 14.176C478.067 417.076 377.187 504 256 504c-66.448 0-126.791-26.136-171.315-68.685L48.97 471.03C33.851 486.149 8 475.441 8 454.059V320c0-13.255 10.745-24 24-24z"}))});hl.displayName="SyncAlt";const tv={floatable:!0,maximizable:!0},vi="place-holder",mi="-maximized-placeholder-",nv={floatable:!1},ut=p.createContext(null),rv=ut.Provider;ut.Consumer;function Rn(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=[];return p.Children.forEach(t,function(r){r==null&&!e.keepEmpty||(Array.isArray(r)?n=n.concat(Rn(r)):es.exports.isFragment(r)&&r.props?n=n.concat(Rn(r.props.children,e)):n.push(r))}),n}var vl=function(){if(typeof navigator=="undefined"||typeof window=="undefined")return!1;var t=navigator.userAgent||navigator.vendor||window.opera;return!!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(t==null?void 0:t.substr(0,4)))};function Nn(t,e){var n=e||{},r=n.defaultValue,i=n.value,o=n.onChange,a=n.postState,s=u.exports.useState(function(){return i!==void 0?i:r!==void 0?typeof r=="function"?r():r:typeof t=="function"?t():t}),l=U(s,2),c=l[0],d=l[1],f=i!==void 0?i:c;a&&(f=a(f));function h(m){d(m),f!==m&&o&&o(m,f)}var v=u.exports.useRef(!0);return u.exports.useEffect(function(){if(v.current){v.current=!1;return}i===void 0&&d(i)},[i]),[f,h]}var ml=function(e){return+setTimeout(e,16)},gl=function(e){return clearTimeout(e)};typeof window!="undefined"&&"requestAnimationFrame"in window&&(ml=function(e){return window.requestAnimationFrame(e)},gl=function(e){return window.cancelAnimationFrame(e)});var bl=0,Ro=new Map;function yl(t){Ro.delete(t)}function Ce(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1;bl+=1;var n=bl;function r(i){if(i===0)yl(n),t();else{var o=ml(function(){r(i-1)});Ro.set(n,o)}}return r(e),n}Ce.cancel=function(t){var e=Ro.get(t);return yl(e),gl(e)};function No(t){return t instanceof HTMLElement?t:On.findDOMNode(t)}function wl(t,e){typeof t=="function"?t(e):Zt(t)==="object"&&t&&"current"in t&&(t.current=e)}function Ao(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(r){e.forEach(function(i){wl(i,r)})}}function xl(t){var e,n,r=es.exports.isMemo(t)?t.type.type:t.type;return!(typeof r=="function"&&!((e=r.prototype)===null||e===void 0?void 0:e.render)||typeof t=="function"&&!((n=t.prototype)===null||n===void 0?void 0:n.render))}var Cl=function(){if(typeof Map!="undefined")return Map;function t(e,n){var r=-1;return e.some(function(i,o){return i[0]===n?(r=o,!0):!1}),r}return function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(n){var r=t(this.__entries__,n),i=this.__entries__[r];return i&&i[1]},e.prototype.set=function(n,r){var i=t(this.__entries__,n);~i?this.__entries__[i][1]=r:this.__entries__.push([n,r])},e.prototype.delete=function(n){var r=this.__entries__,i=t(r,n);~i&&r.splice(i,1)},e.prototype.has=function(n){return!!~t(this.__entries__,n)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(n,r){r===void 0&&(r=null);for(var i=0,o=this.__entries__;i<o.length;i++){var a=o[i];n.call(r,a[1],a[0])}},e}()}(),Lo=typeof window!="undefined"&&typeof document!="undefined"&&window.document===document,gi=function(){return typeof global!="undefined"&&global.Math===Math?global:typeof self!="undefined"&&self.Math===Math?self:typeof window!="undefined"&&window.Math===Math?window:Function("return this")()}(),iv=function(){return typeof requestAnimationFrame=="function"?requestAnimationFrame.bind(gi):function(t){return setTimeout(function(){return t(Date.now())},1e3/60)}}(),ov=2;function av(t,e){var n=!1,r=!1,i=0;function o(){n&&(n=!1,t()),r&&s()}function a(){iv(o)}function s(){var l=Date.now();if(n){if(l-i<ov)return;r=!0}else n=!0,r=!1,setTimeout(a,e);i=l}return s}var sv=20,lv=["top","right","bottom","left","width","height","size","weight"],cv=typeof MutationObserver!="undefined",uv=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=av(this.refresh.bind(this),sv)}return t.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},t.prototype.removeObserver=function(e){var n=this.observers_,r=n.indexOf(e);~r&&n.splice(r,1),!n.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){var e=this.updateObservers_();e&&this.refresh()},t.prototype.updateObservers_=function(){var e=this.observers_.filter(function(n){return n.gatherActive(),n.hasActive()});return e.forEach(function(n){return n.broadcastActive()}),e.length>0},t.prototype.connect_=function(){!Lo||this.connected_||(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),cv?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){!Lo||!this.connected_||(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(e){var n=e.propertyName,r=n===void 0?"":n,i=lv.some(function(o){return!!~r.indexOf(o)});i&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),Sl=function(t,e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];Object.defineProperty(t,i,{value:e[i],enumerable:!1,writable:!1,configurable:!0})}return t},An=function(t){var e=t&&t.ownerDocument&&t.ownerDocument.defaultView;return e||gi},El=yi(0,0,0,0);function bi(t){return parseFloat(t)||0}function Dl(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.reduce(function(r,i){var o=t["border-"+i+"-width"];return r+bi(o)},0)}function dv(t){for(var e=["top","right","bottom","left"],n={},r=0,i=e;r<i.length;r++){var o=i[r],a=t["padding-"+o];n[o]=bi(a)}return n}function fv(t){var e=t.getBBox();return yi(0,0,e.width,e.height)}function pv(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return El;var r=An(t).getComputedStyle(t),i=dv(r),o=i.left+i.right,a=i.top+i.bottom,s=bi(r.width),l=bi(r.height);if(r.boxSizing==="border-box"&&(Math.round(s+o)!==e&&(s-=Dl(r,"left","right")+o),Math.round(l+a)!==n&&(l-=Dl(r,"top","bottom")+a)),!vv(t)){var c=Math.round(s+o)-e,d=Math.round(l+a)-n;Math.abs(c)!==1&&(s-=c),Math.abs(d)!==1&&(l-=d)}return yi(i.left,i.top,s,l)}var hv=function(){return typeof SVGGraphicsElement!="undefined"?function(t){return t instanceof An(t).SVGGraphicsElement}:function(t){return t instanceof An(t).SVGElement&&typeof t.getBBox=="function"}}();function vv(t){return t===An(t).document.documentElement}function mv(t){return Lo?hv(t)?fv(t):pv(t):El}function gv(t){var e=t.x,n=t.y,r=t.width,i=t.height,o=typeof DOMRectReadOnly!="undefined"?DOMRectReadOnly:Object,a=Object.create(o.prototype);return Sl(a,{x:e,y:n,width:r,height:i,top:n,right:e+r,bottom:i+n,left:e}),a}function yi(t,e,n,r){return{x:t,y:e,width:n,height:r}}var bv=function(){function t(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=yi(0,0,0,0),this.target=e}return t.prototype.isActive=function(){var e=mv(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},t}(),yv=function(){function t(e,n){var r=gv(n);Sl(this,{target:e,contentRect:r})}return t}(),wv=function(){function t(e,n,r){if(this.activeObservations_=[],this.observations_=new Cl,typeof e!="function")throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=n,this.callbackCtx_=r}return t.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if(!(typeof Element=="undefined"||!(Element instanceof Object))){if(!(e instanceof An(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var n=this.observations_;n.has(e)||(n.set(e,new bv(e)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if(!(typeof Element=="undefined"||!(Element instanceof Object))){if(!(e instanceof An(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var n=this.observations_;!n.has(e)||(n.delete(e),n.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach(function(n){n.isActive()&&e.activeObservations_.push(n)})},t.prototype.broadcastActive=function(){if(!!this.hasActive()){var e=this.callbackCtx_,n=this.activeObservations_.map(function(r){return new yv(r.target,r.broadcastRect())});this.callback_.call(e,n,e),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),Ml=typeof WeakMap!="undefined"?new WeakMap:new Cl,Ol=function(){function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=uv.getInstance(),r=new wv(e,n,this);Ml.set(this,r)}return t}();["observe","unobserve","disconnect"].forEach(function(t){Ol.prototype[t]=function(){var e;return(e=Ml.get(this))[t].apply(e,arguments)}});var zo=function(){return typeof gi.ResizeObserver!="undefined"?gi.ResizeObserver:Ol}(),xv="rc-observer-key",gr=function(t){Ft(n,t);var e=Wt(n);function n(){var r;return Bt(this,n),r=e.apply(this,arguments),r.resizeObserver=null,r.childNode=null,r.currentElement=null,r.state={width:0,height:0,offsetHeight:0,offsetWidth:0},r.onResize=function(i){var o=r.props.onResize,a=i[0].target,s=a.getBoundingClientRect(),l=s.width,c=s.height,d=a.offsetWidth,f=a.offsetHeight,h=Math.floor(l),v=Math.floor(c);if(r.state.width!==h||r.state.height!==v||r.state.offsetWidth!==d||r.state.offsetHeight!==f){var m={width:h,height:v,offsetWidth:d,offsetHeight:f};r.setState(m),o&&Promise.resolve().then(function(){o($($({},m),{},{offsetWidth:d,offsetHeight:f}),a)})}},r.setChildNode=function(i){r.childNode=i},r}return jt(n,[{key:"componentDidMount",value:function(){this.onComponentUpdated()}},{key:"componentDidUpdate",value:function(){this.onComponentUpdated()}},{key:"componentWillUnmount",value:function(){this.destroyObserver()}},{key:"onComponentUpdated",value:function(){var i=this.props.disabled;if(i){this.destroyObserver();return}var o=No(this.childNode||this),a=o!==this.currentElement;a&&(this.destroyObserver(),this.currentElement=o),!this.resizeObserver&&o&&(this.resizeObserver=new zo(this.onResize),this.resizeObserver.observe(o))}},{key:"destroyObserver",value:function(){this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null)}},{key:"render",value:function(){var i=this.props.children,o=Rn(i);if(o.length>1)cr(!1,"Find more than one child node with `children` in ResizeObserver. Will only observe first one.");else if(o.length===0)return cr(!1,"`children` of ResizeObserver is empty. Nothing is in observe."),null;var a=o[0];if(u.exports.isValidElement(a)&&xl(a)){var s=a.ref;o[0]=u.exports.cloneElement(a,{ref:Ao(s,this.setChildNode)})}return o.length===1?o[0]:o.map(function(l,c){return!u.exports.isValidElement(l)||"key"in l&&l.key!==null?l:u.exports.cloneElement(l,{key:"".concat(xv,"-").concat(c)})})}}]),n}(u.exports.Component);gr.displayName="ResizeObserver";function Tl(t){var e=u.exports.useRef(),n=u.exports.useRef(!1);function r(){for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];n.current||(Ce.cancel(e.current),e.current=Ce(function(){t.apply(void 0,o)}))}return u.exports.useEffect(function(){return function(){n.current=!0,Ce.cancel(e.current)}},[]),r}function Cv(t){var e=u.exports.useRef([]),n=u.exports.useState({}),r=U(n,2),i=r[1],o=u.exports.useRef(typeof t=="function"?t():t),a=Tl(function(){var l=o.current;e.current.forEach(function(c){l=c(l)}),e.current=[],o.current=l,i({})});function s(l){e.current.push(l),a()}return[o.current,s]}function Sv(t,e){var n,r=t.prefixCls,i=t.id,o=t.active,a=t.tab,s=a.key,l=a.tab,c=a.disabled,d=a.closeIcon,f=t.closable,h=t.renderWrapper,v=t.removeAriaLabel,m=t.editable,b=t.onClick,g=t.onRemove,w=t.onFocus,D=t.style,E="".concat(r,"-tab");u.exports.useEffect(function(){return g},[]);var y=m&&f!==!1&&!c;function S(_){c||b(_)}function x(_){_.preventDefault(),_.stopPropagation(),m.onEdit("remove",{key:s,event:_})}var I=u.exports.createElement("div",{key:s,ref:e,className:fe(E,(n={},G(n,"".concat(E,"-with-remove"),y),G(n,"".concat(E,"-active"),o),G(n,"".concat(E,"-disabled"),c),n)),style:D,onClick:S},u.exports.createElement("div",{role:"tab","aria-selected":o,id:i&&"".concat(i,"-tab-").concat(s),className:"".concat(E,"-btn"),"aria-controls":i&&"".concat(i,"-panel-").concat(s),"aria-disabled":c,tabIndex:c?null:0,onClick:function(F){F.stopPropagation(),S(F)},onKeyDown:function(F){[we.SPACE,we.ENTER].includes(F.which)&&(F.preventDefault(),S(F))},onFocus:w},l),y&&u.exports.createElement("button",{type:"button","aria-label":v||"remove",tabIndex:0,className:"".concat(E,"-remove"),onClick:function(F){F.stopPropagation(),x(F)}},d||m.removeIcon||"\xD7"));return h?h(I):I}var Ev=u.exports.forwardRef(Sv),Pl={width:0,height:0,left:0,top:0};function Dv(t,e,n){return u.exports.useMemo(function(){for(var r,i=new Map,o=e.get((r=t[0])===null||r===void 0?void 0:r.key)||Pl,a=o.left+o.width,s=0;s<t.length;s+=1){var l=t[s].key,c=e.get(l);if(!c){var d;c=e.get((d=t[s-1])===null||d===void 0?void 0:d.key)||Pl}var f=i.get(l)||$({},c);f.right=a-f.left-f.width,i.set(l,f)}return i},[t.map(function(r){return r.key}).join("_"),e,n])}var _l={width:0,height:0,left:0,top:0,right:0};function Mv(t,e,n,r,i){var o=i.tabs,a=i.tabPosition,s=i.rtl,l,c,d;["top","bottom"].includes(a)?(l="width",c=s?"right":"left",d=Math.abs(e.left)):(l="height",c="top",d=-e.top);var f=e[l],h=n[l],v=r[l],m=f;return h+v>f&&(m=f-v),u.exports.useMemo(function(){if(!o.length)return[0,0];for(var b=o.length,g=b,w=0;w<b;w+=1){var D=t.get(o[w].key)||_l;if(D[c]+D[l]>d+m){g=w-1;break}}for(var E=0,y=b-1;y>=0;y-=1){var S=t.get(o[y].key)||_l;if(S[c]<d){E=y+1;break}}return[E,g]},[t,d,m,a,o.map(function(b){return b.key}).join("_"),s])}var Ln=void 0;function Ov(t,e){var n=t.prefixCls,r=t.invalidate,i=t.item,o=t.renderItem,a=t.responsive,s=t.registerSize,l=t.itemKey,c=t.className,d=t.style,f=t.children,h=t.display,v=t.order,m=t.component,b=m===void 0?"div":m,g=Oe(t,["prefixCls","invalidate","item","renderItem","responsive","registerSize","itemKey","className","style","children","display","order","component"]),w=a&&!h;function D(I){s(l,I)}u.exports.useEffect(function(){return function(){D(null)}},[]);var E=o&&i!==Ln?o(i):f,y;r||(y={opacity:w?0:1,height:w?0:Ln,overflowY:w?"hidden":Ln,order:a?v:Ln,pointerEvents:w?"none":Ln,position:w?"absolute":Ln});var S={};w&&(S["aria-hidden"]=!0);var x=u.exports.createElement(b,Z({className:fe(!r&&n,c),style:$($({},y),d)},S,g,{ref:e}),E);return a&&(x=u.exports.createElement(gr,{onResize:function(_){var F=_.offsetWidth;D(F)}},x)),x}var br=u.exports.forwardRef(Ov);br.displayName="Item";function Tv(){var t=u.exports.useState({}),e=U(t,2),n=e[1],r=u.exports.useRef([]),i=u.exports.useRef(!1),o=0,a=0;u.exports.useEffect(function(){return function(){i.current=!0}},[]);function s(l){var c=o;o+=1,r.current.length<c+1&&(r.current[c]=l);var d=r.current[c];function f(h){r.current[c]=typeof h=="function"?h(r.current[c]):h,Ce.cancel(a),a=Ce(function(){i.current||n({})})}return[d,f]}return s}var Pv=function(e,n){var r=u.exports.useContext(wi);if(!r){var i=e.component,o=i===void 0?"div":i,a=Oe(e,["component"]);return u.exports.createElement(o,Z({},a,{ref:n}))}var s=r.className,l=Oe(r,["className"]),c=e.className,d=Oe(e,["className"]);return u.exports.createElement(wi.Provider,{value:null},u.exports.createElement(br,Z({ref:n,className:fe(s,c)},l,d)))},Il=u.exports.forwardRef(Pv);Il.displayName="RawItem";var wi=u.exports.createContext(null),kl="responsive",Rl="invalidate";function _v(t){return"+ ".concat(t.length," ...")}function Iv(t,e){var n=t.prefixCls,r=n===void 0?"rc-overflow":n,i=t.data,o=i===void 0?[]:i,a=t.renderItem,s=t.renderRawItem,l=t.itemKey,c=t.itemWidth,d=c===void 0?10:c,f=t.ssr,h=t.style,v=t.className,m=t.maxCount,b=t.renderRest,g=t.renderRawRest,w=t.suffix,D=t.component,E=D===void 0?"div":D,y=t.itemComponent,S=t.onVisibleChange,x=Oe(t,["prefixCls","data","renderItem","renderRawItem","itemKey","itemWidth","ssr","style","className","maxCount","renderRest","renderRawRest","suffix","component","itemComponent","onVisibleChange"]),I=Tv(),_=f==="full",F=I(null),k=U(F,2),P=k[0],O=k[1],j=P||0,N=I(new Map),R=U(N,2),V=R[0],T=R[1],C=I(0),M=U(C,2),A=M[0],W=M[1],L=I(0),K=U(L,2),Q=K[0],z=K[1],q=I(0),J=U(q,2),le=J[0],ve=J[1],me=u.exports.useState(null),be=U(me,2),ze=be[0],Fe=be[1],tt=u.exports.useState(null),Ne=U(tt,2),ue=Ne[0],je=Ne[1],se=u.exports.useMemo(function(){return ue===null&&_?Number.MAX_SAFE_INTEGER:ue||0},[ue,P]),ce=u.exports.useState(!1),Se=U(ce,2),Yt=Se[0],Lt=Se[1],$e="".concat(r,"-item"),Xt=Math.max(A,Q),Ye=o.length&&m===kl,We=m===Rl,zt=Ye||typeof m=="number"&&o.length>m,Xe=u.exports.useMemo(function(){var ae=o;return Ye?P===null&&_?ae=o:ae=o.slice(0,Math.min(o.length,j/d)):typeof m=="number"&&(ae=o.slice(0,m)),ae},[o,d,P,m,Ye]),ht=u.exports.useMemo(function(){return Ye?o.slice(se+1):o.slice(Xe.length)},[o,Xe,Ye,se]),Ke=u.exports.useCallback(function(ae,he){var Ee;return typeof l=="function"?l(ae):(Ee=l&&(ae==null?void 0:ae[l]))!==null&&Ee!==void 0?Ee:he},[l]),nt=u.exports.useCallback(a||function(ae){return ae},[a]);function ke(ae,he){je(ae),he||(Lt(ae<o.length-1),S==null||S(ae))}function Qn(ae,he){O(he.clientWidth)}function Jt(ae,he){T(function(Ee){var Je=new Map(Ee);return he===null?Je.delete(ae):Je.set(ae,he),Je})}function at(ae,he){z(he),W(Q)}function Sn(ae,he){ve(he)}function st(ae){return V.get(Ke(Xe[ae],ae))}u.exports.useLayoutEffect(function(){if(j&&Xt&&Xe){var ae=le,he=Xe.length,Ee=he-1;if(!he){ke(0),Fe(null);return}for(var Je=0;Je<he;Je+=1){var cn=st(Je);if(cn===void 0){ke(Je-1,!0);break}if(ae+=cn,Ee===0&&ae<=j||Je===Ee-1&&ae+st(Ee)<=j){ke(Ee),Fe(null);break}else if(ae+Xt>j){ke(Je-1),Fe(ae-cn-le+Q);break}}w&&st(0)+le>j&&Fe(null)}},[j,V,Q,le,Ke,Xe]);var an=Yt&&!!ht.length,vt={};ze!==null&&Ye&&(vt={position:"absolute",left:ze,top:0});var it={prefixCls:$e,responsive:Ye,component:y,invalidate:We},sn=s?function(ae,he){var Ee=Ke(ae,he);return u.exports.createElement(wi.Provider,{key:Ee,value:$($({},it),{},{order:he,item:ae,itemKey:Ee,registerSize:Jt,display:he<=se})},s(ae,he))}:function(ae,he){var Ee=Ke(ae,he);return u.exports.createElement(br,Z({},it,{order:he,key:Ee,item:ae,renderItem:nt,itemKey:Ee,registerSize:Jt,display:he<=se}))},Dt,ln={order:an?se:Number.MAX_SAFE_INTEGER,className:"".concat($e,"-rest"),registerSize:at,display:an};if(g)g&&(Dt=u.exports.createElement(wi.Provider,{value:$($({},it),ln)},g(ht)));else{var rt=b||_v;Dt=u.exports.createElement(br,Z({},it,ln),typeof rt=="function"?rt(ht):rt)}var Mt=u.exports.createElement(E,Z({className:fe(!We&&r,v),style:h,ref:e},x),Xe.map(sn),zt?Dt:null,w&&u.exports.createElement(br,Z({},it,{order:se,className:"".concat($e,"-suffix"),registerSize:Sn,display:!0,style:vt}),w));return Ye&&(Mt=u.exports.createElement(gr,{onResize:Qn},Mt)),Mt}var Kt=u.exports.forwardRef(Iv);Kt.displayName="Overflow";Kt.Item=Il;Kt.RESPONSIVE=kl;Kt.INVALIDATE=Rl;function xi(t,e){var n=$({},t);return Array.isArray(e)&&e.forEach(function(r){delete n[r]}),n}function kv(t,e,n){var r=u.exports.useRef({});return(!("value"in r.current)||n(r.current.condition,e))&&(r.current.value=t(),r.current.condition=e),r.current.value}var gt=u.exports.createContext(null);function Rv(t,e){var n=$({},t);return Object.keys(e).forEach(function(r){var i=e[r];i!==void 0&&(n[r]=i)}),n}function yr(t){var e=t.children,n=t.locked,r=Oe(t,["children","locked"]),i=u.exports.useContext(gt),o=kv(function(){return Rv(i,r)},[i,r],function(a,s){return!n&&(a[0]!==s[0]||!lr(a[1],s[1]))});return u.exports.createElement(gt.Provider,{value:o},e)}function Nl(t,e,n,r){var i=u.exports.useContext(gt),o=i.activeKey,a=i.onActive,s=i.onInactive,l={active:o===t};return e||(l.onMouseEnter=function(c){n==null||n({key:t,domEvent:c}),a(t)},l.onMouseLeave=function(c){r==null||r({key:t,domEvent:c}),s(t)}),l}function Ci(t){var e=t.item,n=Oe(t,["item"]);return Object.defineProperty(n,"item",{get:function(){return cr(!1,"`info.item` is deprecated since we will move to function component that not provides React Node instance in future."),e}}),n}function Al(t){var e=t.icon,n=t.props,r=t.children,i;return typeof e=="function"?i=u.exports.createElement(e,$({},n)):i=e,i||r||null}function Ll(t){var e=u.exports.useContext(gt),n=e.mode,r=e.rtl,i=e.inlineIndent;if(n!=="inline")return null;var o=t;return r?{paddingRight:o*i}:{paddingLeft:o*i}}var Nv=[],zl=u.exports.createContext(null);function Si(){return u.exports.useContext(zl)}var Fl=u.exports.createContext(Nv);function wr(t){var e=u.exports.useContext(Fl);return u.exports.useMemo(function(){return t!==void 0?[].concat(mt(e),[t]):e},[e,t])}var Bl=u.exports.createContext(null),jl=u.exports.createContext(null);function Wl(t,e){return t===void 0?null:"".concat(t,"-").concat(e)}function Hl(t){var e=u.exports.useContext(jl);return Wl(e,t)}var Av=function(t){Ft(n,t);var e=Wt(n);function n(){return Bt(this,n),e.apply(this,arguments)}return jt(n,[{key:"render",value:function(){var i=this.props,o=i.title,a=i.attribute,s=i.elementRef,l=Oe(i,["title","attribute","elementRef"]),c=xi(l,["eventKey"]);return cr(!a,"`attribute` of Menu.Item is deprecated. Please pass attribute directly."),u.exports.createElement(Kt.Item,Z({},a,{title:typeof o=="string"?o:void 0},c,{ref:s}))}}]),n}(u.exports.Component),Lv=function(e){var n,r=e.style,i=e.className,o=e.eventKey;e.warnKey;var a=e.disabled,s=e.itemIcon,l=e.children,c=e.role,d=e.onMouseEnter,f=e.onMouseLeave,h=e.onClick,v=e.onKeyDown,m=e.onFocus,b=Oe(e,["style","className","eventKey","warnKey","disabled","itemIcon","children","role","onMouseEnter","onMouseLeave","onClick","onKeyDown","onFocus"]),g=Hl(o),w=u.exports.useContext(gt),D=w.prefixCls,E=w.onItemClick,y=w.disabled,S=w.overflowDisabled,x=w.itemIcon,I=w.selectedKeys,_=w.onActive,F="".concat(D,"-item"),k=u.exports.useRef(),P=u.exports.useRef(),O=y||a,j=wr(o),N=function(q){return{key:o,keyPath:mt(j).reverse(),item:k.current,domEvent:q}},R=s||x,V=Nl(o,O,d,f),T=V.active,C=Oe(V,["active"]),M=I.includes(o),A=Ll(j.length),W=function(q){if(!O){var J=N(q);h==null||h(Ci(J)),E(J)}},L=function(q){if(v==null||v(q),q.which===we.ENTER){var J=N(q);h==null||h(Ci(J)),E(J)}},K=function(q){_(o),m==null||m(q)},Q={};return e.role==="option"&&(Q["aria-selected"]=M),u.exports.createElement(Av,Z({ref:k,elementRef:P,role:c===null?"none":c||"menuitem",tabIndex:a?null:-1,"data-menu-id":S&&g?null:g},b,C,Q,{component:"li","aria-disabled":a,style:$($({},A),r),className:fe(F,(n={},G(n,"".concat(F,"-active"),T),G(n,"".concat(F,"-selected"),M),G(n,"".concat(F,"-disabled"),O),n),i),onClick:W,onKeyDown:L,onFocus:K}),l,u.exports.createElement(Al,{props:$($({},e),{},{isSelected:M}),icon:R}))};function Fo(t){var e=t.eventKey,n=Si(),r=wr(e);return u.exports.useEffect(function(){if(n)return n.registerPath(e,r),function(){n.unregisterPath(e,r)}},[r]),n?null:u.exports.createElement(Lv,t)}function Bo(t,e){return Rn(t).map(function(n,r){if(u.exports.isValidElement(n)){var i,o,a=n.key,s=(i=(o=n.props)===null||o===void 0?void 0:o.eventKey)!==null&&i!==void 0?i:a,l=s==null;l&&(s="tmp_key-".concat([].concat(mt(e),[r]).join("-")));var c={key:s,eventKey:s};return u.exports.cloneElement(n,c)}return n})}function zn(t){var e=u.exports.useRef(t);e.current=t;var n=u.exports.useCallback(function(){for(var r,i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return(r=e.current)===null||r===void 0?void 0:r.call.apply(r,[e].concat(o))},[]);return t?n:void 0}var zv=function(e,n){var r=e.className,i=e.children,o=Oe(e,["className","children"]),a=u.exports.useContext(gt),s=a.prefixCls,l=a.mode;return u.exports.createElement("ul",Z({className:fe(s,"".concat(s,"-sub"),"".concat(s,"-").concat(l==="inline"?"inline":"vertical"),r)},o,{"data-menu-list":!0,ref:n}),i)},jo=u.exports.forwardRef(zv);jo.displayName="SubMenuList";function Ei(t,e){return t?t.contains(e):!1}function Di(){return!!(typeof window!="undefined"&&window.document&&window.document.createElement)}var Fv=u.exports.forwardRef(function(t,e){var n=t.didUpdate,r=t.getContainer,i=t.children,o=u.exports.useRef();u.exports.useImperativeHandle(e,function(){return{}});var a=u.exports.useRef(!1);return!a.current&&Di()&&(o.current=r(),a.current=!0),u.exports.useEffect(function(){n==null||n(t)}),u.exports.useEffect(function(){return function(){var s,l;(s=o.current)===null||s===void 0||(l=s.parentNode)===null||l===void 0||l.removeChild(o.current)}},[]),o.current?On.createPortal(i,o.current):null});function Bv(t,e,n){return n?t[0]===e[0]:t[0]===e[0]&&t[1]===e[1]}function jv(t,e,n){var r=t[e]||{};return $($({},r),n)}function Wv(t,e,n,r){for(var i=n.points,o=Object.keys(t),a=0;a<o.length;a+=1){var s=o[a];if(Bv(t[s].points,i,r))return"".concat(e,"-placement-").concat(s)}return""}function $l(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit".concat(t)]="webkit".concat(e),n["Moz".concat(t)]="moz".concat(e),n["ms".concat(t)]="MS".concat(e),n["O".concat(t)]="o".concat(e.toLowerCase()),n}function Hv(t,e){var n={animationend:$l("Animation","AnimationEnd"),transitionend:$l("Transition","TransitionEnd")};return t&&("AnimationEvent"in e||delete n.animationend.animation,"TransitionEvent"in e||delete n.transitionend.transition),n}var $v=Hv(Di(),typeof window!="undefined"?window:{}),Kl={};if(Di()){var Kv=document.createElement("div");Kl=Kv.style}var Mi={};function Vl(t){if(Mi[t])return Mi[t];var e=$v[t];if(e)for(var n=Object.keys(e),r=n.length,i=0;i<r;i+=1){var o=n[i];if(Object.prototype.hasOwnProperty.call(e,o)&&o in Kl)return Mi[t]=e[o],Mi[t]}return""}var Ul=Vl("animationend"),Gl=Vl("transitionend"),Vv=!!(Ul&&Gl),ql=Ul||"animationend",Yl=Gl||"transitionend";function Xl(t,e){if(!t)return null;if(Zt(t)==="object"){var n=e.replace(/-\w/g,function(r){return r[1].toUpperCase()});return t[n]}return"".concat(t,"-").concat(e)}var xr="none",Wo="appear",Ho="enter",$o="leave",Jl="none",Vt="prepare",Fn="start",Bn="active",Ko="end";function Vo(t){var e=u.exports.useRef(!1),n=u.exports.useState(t),r=U(n,2),i=r[0],o=r[1];function a(s){e.current||o(s)}return u.exports.useEffect(function(){return function(){e.current=!0}},[]),[i,a]}var Zl=Di()?u.exports.useLayoutEffect:u.exports.useEffect,Uv=function(){var t=u.exports.useRef(null);function e(){Ce.cancel(t.current)}function n(r){var i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:2;e();var o=Ce(function(){i<=1?r({isCanceled:function(){return o!==t.current}}):n(r,i-1)});t.current=o}return u.exports.useEffect(function(){return function(){e()}},[]),[n,e]},Ql=[Vt,Fn,Bn,Ko],ec=!1,Gv=!0;function tc(t){return t===Bn||t===Ko}var qv=function(t,e){var n=u.exports.useState(Jl),r=U(n,2),i=r[0],o=r[1],a=Uv(),s=U(a,2),l=s[0],c=s[1];function d(){o(Vt)}return Zl(function(){if(i!==Jl&&i!==Ko){var f=Ql.indexOf(i),h=Ql[f+1],v=e(i);v===ec?o(h):l(function(m){function b(){m.isCanceled()||o(h)}v===!0?b():Promise.resolve(v).then(b)})}},[t,i]),u.exports.useEffect(function(){return function(){c()}},[]),[d,i]},Yv=function(t){var e=u.exports.useRef(),n=u.exports.useRef(t);n.current=t;var r=u.exports.useCallback(function(a){n.current(a)},[]);function i(a){a&&(a.removeEventListener(Yl,r),a.removeEventListener(ql,r))}function o(a){e.current&&e.current!==a&&i(e.current),a&&a!==e.current&&(a.addEventListener(Yl,r),a.addEventListener(ql,r),e.current=a)}return u.exports.useEffect(function(){return function(){i(e.current)}},[]),[o,i]};function Xv(t,e,n,r){var i=r.motionEnter,o=i===void 0?!0:i,a=r.motionAppear,s=a===void 0?!0:a,l=r.motionLeave,c=l===void 0?!0:l,d=r.motionDeadline,f=r.motionLeaveImmediately,h=r.onAppearPrepare,v=r.onEnterPrepare,m=r.onLeavePrepare,b=r.onAppearStart,g=r.onEnterStart,w=r.onLeaveStart,D=r.onAppearActive,E=r.onEnterActive,y=r.onLeaveActive,S=r.onAppearEnd,x=r.onEnterEnd,I=r.onLeaveEnd,_=r.onVisibleChanged,F=Vo(),k=U(F,2),P=k[0],O=k[1],j=Vo(xr),N=U(j,2),R=N[0],V=N[1],T=Vo(null),C=U(T,2),M=C[0],A=C[1],W=u.exports.useRef(!1),L=u.exports.useRef(null),K=u.exports.useRef(!1),Q=u.exports.useRef(null);function z(){var se=n();return se||Q.current}var q=u.exports.useRef(!1);function J(se){var ce=z();if(!(se&&!se.deadline&&se.target!==ce)){var Se;R===Wo&&q.current?Se=S==null?void 0:S(ce,se):R===Ho&&q.current?Se=x==null?void 0:x(ce,se):R===$o&&q.current&&(Se=I==null?void 0:I(ce,se)),Se!==!1&&!K.current&&(V(xr),A(null))}}var le=Yv(J),ve=U(le,1),me=ve[0],be=u.exports.useMemo(function(){var se,ce,Se;switch(R){case"appear":return se={},G(se,Vt,h),G(se,Fn,b),G(se,Bn,D),se;case"enter":return ce={},G(ce,Vt,v),G(ce,Fn,g),G(ce,Bn,E),ce;case"leave":return Se={},G(Se,Vt,m),G(Se,Fn,w),G(Se,Bn,y),Se;default:return{}}},[R]),ze=qv(R,function(se){if(se===Vt){var ce=be[Vt];return ce?ce(z()):ec}if(Ne in be){var Se;A(((Se=be[Ne])===null||Se===void 0?void 0:Se.call(be,z(),null))||null)}return Ne===Bn&&(me(z()),d>0&&(clearTimeout(L.current),L.current=setTimeout(function(){J({deadline:!0})},d))),Gv}),Fe=U(ze,2),tt=Fe[0],Ne=Fe[1],ue=tc(Ne);q.current=ue,Zl(function(){O(e);var se=W.current;if(W.current=!0,!!t){var ce;!se&&e&&s&&(ce=Wo),se&&e&&o&&(ce=Ho),(se&&!e&&c||!se&&f&&!e&&c)&&(ce=$o),ce&&(V(ce),tt())}},[e]),u.exports.useEffect(function(){(R===Wo&&!s||R===Ho&&!o||R===$o&&!c)&&V(xr)},[s,o,c]),u.exports.useEffect(function(){return function(){clearTimeout(L.current),K.current=!0}},[]),u.exports.useEffect(function(){P!==void 0&&R===xr&&(_==null||_(P))},[P,R]);var je=M;return be[Vt]&&Ne===Fn&&(je=$({transition:"none"},je)),[R,Ne,je,P??e]}var Jv=function(t){Ft(n,t);var e=Wt(n);function n(){return Bt(this,n),e.apply(this,arguments)}return jt(n,[{key:"render",value:function(){return this.props.children}}]),n}(u.exports.Component);function Zv(t){var e=t;Zt(t)==="object"&&(e=t.transitionSupport);function n(i){return!!(i.motionName&&e)}var r=u.exports.forwardRef(function(i,o){var a=i.visible,s=a===void 0?!0:a,l=i.removeOnLeave,c=l===void 0?!0:l,d=i.forceRender,f=i.children,h=i.motionName,v=i.leavedClassName,m=i.eventProps,b=n(i),g=u.exports.useRef(),w=u.exports.useRef();function D(){try{return No(g.current||w.current)}catch(V){return null}}var E=Xv(b,s,D,i),y=U(E,4),S=y[0],x=y[1],I=y[2],_=y[3],F=u.exports.useRef(_);_&&(F.current=!0);var k=u.exports.useRef(o);k.current=o;var P=u.exports.useCallback(function(V){g.current=V,wl(k.current,V)},[]),O,j=$($({},m),{},{visible:s});if(!f)O=null;else if(S===xr||!n(i))_?O=f($({},j),P):!c&&F.current?O=f($($({},j),{},{className:v}),P):d?O=f($($({},j),{},{style:{display:"none"}}),P):O=null;else{var N,R;x===Vt?R="prepare":tc(x)?R="active":x===Fn&&(R="start"),O=f($($({},j),{},{className:fe(Xl(h,S),(N={},G(N,Xl(h,"".concat(S,"-").concat(R)),R),G(N,h,typeof h=="string"),N)),style:I}),P)}return u.exports.createElement(Jv,{ref:w},O)});return r.displayName="CSSMotion",r}var Cr=Zv(Vv);function nc(t){var e=t.prefixCls,n=t.motion,r=t.animation,i=t.transitionName;return n||(r?{motionName:"".concat(e,"-").concat(r)}:i?{motionName:i}:null)}function Qv(t){var e=t.prefixCls,n=t.visible,r=t.zIndex,i=t.mask,o=t.maskMotion,a=t.maskAnimation,s=t.maskTransitionName;if(!i)return null;var l={};return(o||s||a)&&(l=$({motionAppear:!0},nc({motion:o,prefixCls:e,transitionName:s,animation:a}))),u.exports.createElement(Cr,Z({},l,{visible:n,removeOnLeave:!0}),function(c){var d=c.className;return u.exports.createElement("div",{style:{zIndex:r},className:fe("".concat(e,"-mask"),d)})})}var rc=function(t){if(!t)return!1;if(t.offsetParent)return!0;if(t.getBBox){var e=t.getBBox();if(e.width||e.height)return!0}if(t.getBoundingClientRect){var n=t.getBoundingClientRect();if(n.width||n.height)return!0}return!1};function ic(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(t,i).enumerable})),n.push.apply(n,r)}return n}function oc(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?ic(Object(n),!0).forEach(function(r){em(t,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ic(Object(n)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))})}return t}function Oi(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Oi=function(e){return typeof e}:Oi=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Oi(t)}function em(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Sr,tm={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-",O:"-o-"};function Ti(){if(Sr!==void 0)return Sr;Sr="";var t=document.createElement("p").style,e="Transform";for(var n in tm)n+e in t&&(Sr=n);return Sr}function ac(){return Ti()?"".concat(Ti(),"TransitionProperty"):"transitionProperty"}function Pi(){return Ti()?"".concat(Ti(),"Transform"):"transform"}function sc(t,e){var n=ac();n&&(t.style[n]=e,n!=="transitionProperty"&&(t.style.transitionProperty=e))}function Uo(t,e){var n=Pi();n&&(t.style[n]=e,n!=="transform"&&(t.style.transform=e))}function nm(t){return t.style.transitionProperty||t.style[ac()]}function rm(t){var e=window.getComputedStyle(t,null),n=e.getPropertyValue("transform")||e.getPropertyValue(Pi());if(n&&n!=="none"){var r=n.replace(/[^0-9\-.,]/g,"").split(",");return{x:parseFloat(r[12]||r[4],0),y:parseFloat(r[13]||r[5],0)}}return{x:0,y:0}}var im=/matrix\((.*)\)/,om=/matrix3d\((.*)\)/;function am(t,e){var n=window.getComputedStyle(t,null),r=n.getPropertyValue("transform")||n.getPropertyValue(Pi());if(r&&r!=="none"){var i,o=r.match(im);if(o)o=o[1],i=o.split(",").map(function(s){return parseFloat(s,10)}),i[4]=e.x,i[5]=e.y,Uo(t,"matrix(".concat(i.join(","),")"));else{var a=r.match(om)[1];i=a.split(",").map(function(s){return parseFloat(s,10)}),i[12]=e.x,i[13]=e.y,Uo(t,"matrix3d(".concat(i.join(","),")"))}}else Uo(t,"translateX(".concat(e.x,"px) translateY(").concat(e.y,"px) translateZ(0)"))}var sm=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,Er;function lc(t){var e=t.style.display;t.style.display="none",t.offsetHeight,t.style.display=e}function jn(t,e,n){var r=n;if(Oi(e)==="object"){for(var i in e)e.hasOwnProperty(i)&&jn(t,i,e[i]);return}if(typeof r!="undefined"){typeof r=="number"&&(r="".concat(r,"px")),t.style[e]=r;return}return Er(t,e)}function lm(t){var e,n,r,i=t.ownerDocument,o=i.body,a=i&&i.documentElement;return e=t.getBoundingClientRect(),n=e.left,r=e.top,n-=a.clientLeft||o.clientLeft||0,r-=a.clientTop||o.clientTop||0,{left:n,top:r}}function cc(t,e){var n=t["page".concat(e?"Y":"X","Offset")],r="scroll".concat(e?"Top":"Left");if(typeof n!="number"){var i=t.document;n=i.documentElement[r],typeof n!="number"&&(n=i.body[r])}return n}function uc(t){return cc(t)}function dc(t){return cc(t,!0)}function Dr(t){var e=lm(t),n=t.ownerDocument,r=n.defaultView||n.parentWindow;return e.left+=uc(r),e.top+=dc(r),e}function Go(t){return t!=null&&t==t.window}function fc(t){return Go(t)?t.document:t.nodeType===9?t:t.ownerDocument}function cm(t,e,n){var r=n,i="",o=fc(t);return r=r||o.defaultView.getComputedStyle(t,null),r&&(i=r.getPropertyValue(e)||r[e]),i}var um=new RegExp("^(".concat(sm,")(?!px)[a-z%]+$"),"i"),dm=/^(top|right|bottom|left)$/,qo="currentStyle",Yo="runtimeStyle",hn="left",fm="px";function pm(t,e){var n=t[qo]&&t[qo][e];if(um.test(n)&&!dm.test(e)){var r=t.style,i=r[hn],o=t[Yo][hn];t[Yo][hn]=t[qo][hn],r[hn]=e==="fontSize"?"1em":n||0,n=r.pixelLeft+fm,r[hn]=i,t[Yo][hn]=o}return n===""?"auto":n}typeof window!="undefined"&&(Er=window.getComputedStyle?cm:pm);function _i(t,e){return t==="left"?e.useCssRight?"right":t:e.useCssBottom?"bottom":t}function pc(t){if(t==="left")return"right";if(t==="right")return"left";if(t==="top")return"bottom";if(t==="bottom")return"top"}function hc(t,e,n){jn(t,"position")==="static"&&(t.style.position="relative");var r=-999,i=-999,o=_i("left",n),a=_i("top",n),s=pc(o),l=pc(a);o!=="left"&&(r=999),a!=="top"&&(i=999);var c="",d=Dr(t);("left"in e||"top"in e)&&(c=nm(t)||"",sc(t,"none")),"left"in e&&(t.style[s]="",t.style[o]="".concat(r,"px")),"top"in e&&(t.style[l]="",t.style[a]="".concat(i,"px")),lc(t);var f=Dr(t),h={};for(var v in e)if(e.hasOwnProperty(v)){var m=_i(v,n),b=v==="left"?r:i,g=d[v]-f[v];m===v?h[m]=b+g:h[m]=b-g}jn(t,h),lc(t),("left"in e||"top"in e)&&sc(t,c);var w={};for(var D in e)if(e.hasOwnProperty(D)){var E=_i(D,n),y=e[D]-d[D];D===E?w[E]=h[E]+y:w[E]=h[E]-y}jn(t,w)}function hm(t,e){var n=Dr(t),r=rm(t),i={x:r.x,y:r.y};"left"in e&&(i.x=r.x+e.left-n.left),"top"in e&&(i.y=r.y+e.top-n.top),am(t,i)}function vm(t,e,n){if(n.ignoreShake){var r=Dr(t),i=r.left.toFixed(0),o=r.top.toFixed(0),a=e.left.toFixed(0),s=e.top.toFixed(0);if(i===a&&o===s)return}n.useCssRight||n.useCssBottom?hc(t,e,n):n.useCssTransform&&Pi()in document.body.style?hm(t,e):hc(t,e,n)}function Xo(t,e){for(var n=0;n<t.length;n++)e(t[n])}function vc(t){return Er(t,"boxSizing")==="border-box"}var mm=["margin","border","padding"],Jo=-1,gm=2,Zo=1,bm=0;function ym(t,e,n){var r={},i=t.style,o;for(o in e)e.hasOwnProperty(o)&&(r[o]=i[o],i[o]=e[o]);n.call(t);for(o in e)e.hasOwnProperty(o)&&(i[o]=r[o])}function Mr(t,e,n){var r=0,i,o,a;for(o=0;o<e.length;o++)if(i=e[o],i)for(a=0;a<n.length;a++){var s=void 0;i==="border"?s="".concat(i).concat(n[a],"Width"):s=i+n[a],r+=parseFloat(Er(t,s))||0}return r}var kt={getParent:function(e){var n=e;do n.nodeType===11&&n.host?n=n.host:n=n.parentNode;while(n&&n.nodeType!==1&&n.nodeType!==9);return n}};Xo(["Width","Height"],function(t){kt["doc".concat(t)]=function(e){var n=e.document;return Math.max(n.documentElement["scroll".concat(t)],n.body["scroll".concat(t)],kt["viewport".concat(t)](n))},kt["viewport".concat(t)]=function(e){var n="client".concat(t),r=e.document,i=r.body,o=r.documentElement,a=o[n];return r.compatMode==="CSS1Compat"&&a||i&&i[n]||a}});function mc(t,e,n){var r=n;if(Go(t))return e==="width"?kt.viewportWidth(t):kt.viewportHeight(t);if(t.nodeType===9)return e==="width"?kt.docWidth(t):kt.docHeight(t);var i=e==="width"?["Left","Right"]:["Top","Bottom"],o=e==="width"?t.getBoundingClientRect().width:t.getBoundingClientRect().height,a=vc(t),s=0;(o==null||o<=0)&&(o=void 0,s=Er(t,e),(s==null||Number(s)<0)&&(s=t.style[e]||0),s=parseFloat(s)||0),r===void 0&&(r=a?Zo:Jo);var l=o!==void 0||a,c=o||s;return r===Jo?l?c-Mr(t,["border","padding"],i):s:l?r===Zo?c:c+(r===gm?-Mr(t,["border"],i):Mr(t,["margin"],i)):s+Mr(t,mm.slice(r),i)}var wm={position:"absolute",visibility:"hidden",display:"block"};function gc(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r,i=e[0];return i.offsetWidth!==0?r=mc.apply(void 0,e):ym(i,wm,function(){r=mc.apply(void 0,e)}),r}Xo(["width","height"],function(t){var e=t.charAt(0).toUpperCase()+t.slice(1);kt["outer".concat(e)]=function(r,i){return r&&gc(r,t,i?bm:Zo)};var n=t==="width"?["Left","Right"]:["Top","Bottom"];kt[t]=function(r,i){var o=i;if(o!==void 0){if(r){var a=vc(r);return a&&(o+=Mr(r,["padding","border"],n)),jn(r,t,o)}return}return r&&gc(r,t,Jo)}});function bc(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var re={getWindow:function(e){if(e&&e.document&&e.setTimeout)return e;var n=e.ownerDocument||e;return n.defaultView||n.parentWindow},getDocument:fc,offset:function(e,n,r){if(typeof n!="undefined")vm(e,n,r||{});else return Dr(e)},isWindow:Go,each:Xo,css:jn,clone:function(e){var n,r={};for(n in e)e.hasOwnProperty(n)&&(r[n]=e[n]);var i=e.overflow;if(i)for(n in e)e.hasOwnProperty(n)&&(r.overflow[n]=e.overflow[n]);return r},mix:bc,getWindowScrollLeft:function(e){return uc(e)},getWindowScrollTop:function(e){return dc(e)},merge:function(){for(var e={},n=0;n<arguments.length;n++)re.mix(e,n<0||arguments.length<=n?void 0:arguments[n]);return e},viewportWidth:0,viewportHeight:0};bc(re,kt);var Qo=re.getParent;function ea(t){if(re.isWindow(t)||t.nodeType===9)return null;var e=re.getDocument(t),n=e.body,r,i=re.css(t,"position"),o=i==="fixed"||i==="absolute";if(!o)return t.nodeName.toLowerCase()==="html"?null:Qo(t);for(r=Qo(t);r&&r!==n&&r.nodeType!==9;r=Qo(r))if(i=re.css(r,"position"),i!=="static")return r;return null}var yc=re.getParent;function xm(t){if(re.isWindow(t)||t.nodeType===9)return!1;var e=re.getDocument(t),n=e.body,r=null;for(r=yc(t);r&&r!==n&&r!==e;r=yc(r)){var i=re.css(r,"position");if(i==="fixed")return!0}return!1}function ta(t,e){for(var n={left:0,right:1/0,top:0,bottom:1/0},r=ea(t),i=re.getDocument(t),o=i.defaultView||i.parentWindow,a=i.body,s=i.documentElement;r;){if((navigator.userAgent.indexOf("MSIE")===-1||r.clientWidth!==0)&&r!==a&&r!==s&&re.css(r,"overflow")!=="visible"){var l=re.offset(r);l.left+=r.clientLeft,l.top+=r.clientTop,n.top=Math.max(n.top,l.top),n.right=Math.min(n.right,l.left+r.clientWidth),n.bottom=Math.min(n.bottom,l.top+r.clientHeight),n.left=Math.max(n.left,l.left)}else if(r===a||r===s)break;r=ea(r)}var c=null;if(!re.isWindow(t)&&t.nodeType!==9){c=t.style.position;var d=re.css(t,"position");d==="absolute"&&(t.style.position="fixed")}var f=re.getWindowScrollLeft(o),h=re.getWindowScrollTop(o),v=re.viewportWidth(o),m=re.viewportHeight(o),b=s.scrollWidth,g=s.scrollHeight,w=window.getComputedStyle(a);if(w.overflowX==="hidden"&&(b=o.innerWidth),w.overflowY==="hidden"&&(g=o.innerHeight),t.style&&(t.style.position=c),e||xm(t))n.left=Math.max(n.left,f),n.top=Math.max(n.top,h),n.right=Math.min(n.right,f+v),n.bottom=Math.min(n.bottom,h+m);else{var D=Math.max(b,f+v);n.right=Math.min(n.right,D);var E=Math.max(g,h+m);n.bottom=Math.min(n.bottom,E)}return n.top>=0&&n.left>=0&&n.bottom>n.top&&n.right>n.left?n:null}function Cm(t,e,n,r){var i=re.clone(t),o={width:e.width,height:e.height};return r.adjustX&&i.left<n.left&&(i.left=n.left),r.resizeWidth&&i.left>=n.left&&i.left+o.width>n.right&&(o.width-=i.left+o.width-n.right),r.adjustX&&i.left+o.width>n.right&&(i.left=Math.max(n.right-o.width,n.left)),r.adjustY&&i.top<n.top&&(i.top=n.top),r.resizeHeight&&i.top>=n.top&&i.top+o.height>n.bottom&&(o.height-=i.top+o.height-n.bottom),r.adjustY&&i.top+o.height>n.bottom&&(i.top=Math.max(n.bottom-o.height,n.top)),re.mix(i,o)}function na(t){var e,n,r;if(!re.isWindow(t)&&t.nodeType!==9)e=re.offset(t),n=re.outerWidth(t),r=re.outerHeight(t);else{var i=re.getWindow(t);e={left:re.getWindowScrollLeft(i),top:re.getWindowScrollTop(i)},n=re.viewportWidth(i),r=re.viewportHeight(i)}return e.width=n,e.height=r,e}function wc(t,e){var n=e.charAt(0),r=e.charAt(1),i=t.width,o=t.height,a=t.left,s=t.top;return n==="c"?s+=o/2:n==="b"&&(s+=o),r==="c"?a+=i/2:r==="r"&&(a+=i),{left:a,top:s}}function Ii(t,e,n,r,i){var o=wc(e,n[1]),a=wc(t,n[0]),s=[a.left-o.left,a.top-o.top];return{left:Math.round(t.left-s[0]+r[0]-i[0]),top:Math.round(t.top-s[1]+r[1]-i[1])}}function xc(t,e,n){return t.left<n.left||t.left+e.width>n.right}function Cc(t,e,n){return t.top<n.top||t.top+e.height>n.bottom}function Sm(t,e,n){return t.left>n.right||t.left+e.width<n.left}function Em(t,e,n){return t.top>n.bottom||t.top+e.height<n.top}function ki(t,e,n){var r=[];return re.each(t,function(i){r.push(i.replace(e,function(o){return n[o]}))}),r}function Ri(t,e){return t[e]=-t[e],t}function Sc(t,e){var n;return/%$/.test(t)?n=parseInt(t.substring(0,t.length-1),10)/100*e:n=parseInt(t,10),n||0}function Ec(t,e){t[0]=Sc(t[0],e.width),t[1]=Sc(t[1],e.height)}function Dc(t,e,n,r){var i=n.points,o=n.offset||[0,0],a=n.targetOffset||[0,0],s=n.overflow,l=n.source||t;o=[].concat(o),a=[].concat(a),s=s||{};var c={},d=0,f=!!(s&&s.alwaysByViewport),h=ta(l,f),v=na(l);Ec(o,v),Ec(a,e);var m=Ii(v,e,i,o,a),b=re.merge(v,m);if(h&&(s.adjustX||s.adjustY)&&r){if(s.adjustX&&xc(m,v,h)){var g=ki(i,/[lr]/gi,{l:"r",r:"l"}),w=Ri(o,0),D=Ri(a,0),E=Ii(v,e,g,w,D);Sm(E,v,h)||(d=1,i=g,o=w,a=D)}if(s.adjustY&&Cc(m,v,h)){var y=ki(i,/[tb]/gi,{t:"b",b:"t"}),S=Ri(o,1),x=Ri(a,1),I=Ii(v,e,y,S,x);Em(I,v,h)||(d=1,i=y,o=S,a=x)}d&&(m=Ii(v,e,i,o,a),re.mix(b,m));var _=xc(m,v,h),F=Cc(m,v,h);if(_||F){var k=i;_&&(k=ki(i,/[lr]/gi,{l:"r",r:"l"})),F&&(k=ki(i,/[tb]/gi,{t:"b",b:"t"})),i=k,o=n.offset||[0,0],a=n.targetOffset||[0,0]}c.adjustX=s.adjustX&&_,c.adjustY=s.adjustY&&F,(c.adjustX||c.adjustY)&&(b=Cm(m,v,h,c))}return b.width!==v.width&&re.css(l,"width",re.width(l)+b.width-v.width),b.height!==v.height&&re.css(l,"height",re.height(l)+b.height-v.height),re.offset(l,{left:b.left,top:b.top},{useCssRight:n.useCssRight,useCssBottom:n.useCssBottom,useCssTransform:n.useCssTransform,ignoreShake:n.ignoreShake}),{points:i,offset:o,targetOffset:a,overflow:c}}function Dm(t,e){var n=ta(t,e),r=na(t);return!n||r.left+r.width<=n.left||r.top+r.height<=n.top||r.left>=n.right||r.top>=n.bottom}function ra(t,e,n){var r=n.target||e,i=na(r),o=!Dm(r,n.overflow&&n.overflow.alwaysByViewport);return Dc(t,i,n,o)}ra.__getOffsetParent=ea;ra.__getVisibleRectForElement=ta;function Mm(t,e,n){var r,i,o=re.getDocument(t),a=o.defaultView||o.parentWindow,s=re.getWindowScrollLeft(a),l=re.getWindowScrollTop(a),c=re.viewportWidth(a),d=re.viewportHeight(a);"pageX"in e?r=e.pageX:r=s+e.clientX,"pageY"in e?i=e.pageY:i=l+e.clientY;var f={left:r,top:i,width:0,height:0},h=r>=0&&r<=s+c&&i>=0&&i<=l+d,v=[n.points[0],"cc"];return Dc(t,f,oc(oc({},n),{},{points:v}),h)}var Om=Wf;function Tm(t,e){return Om(t,e)}var Pm=Tm;function _m(t,e){return t===e?!0:!t||!e?!1:"pageX"in e&&"pageY"in e?t.pageX===e.pageX&&t.pageY===e.pageY:"clientX"in e&&"clientY"in e?t.clientX===e.clientX&&t.clientY===e.clientY:!1}function Im(t,e){t!==document.activeElement&&Ei(e,t)&&typeof t.focus=="function"&&t.focus()}function Mc(t,e){var n=null,r=null;function i(a){var s=U(a,1),l=s[0].target;if(!!document.documentElement.contains(l)){var c=l.getBoundingClientRect(),d=c.width,f=c.height,h=Math.floor(d),v=Math.floor(f);(n!==h||r!==v)&&Promise.resolve().then(function(){e({width:h,height:v})}),n=h,r=v}}var o=new zo(i);return t&&o.observe(t),function(){o.disconnect()}}var km=function(t,e){var n=p.useRef(!1),r=p.useRef(null);function i(){window.clearTimeout(r.current)}function o(a){if(!n.current||a===!0){if(t()===!1)return;n.current=!0,i(),r.current=window.setTimeout(function(){n.current=!1},e)}else i(),r.current=window.setTimeout(function(){n.current=!1,o()},e)}return[o,function(){n.current=!1,i()}]};function Oc(t){return typeof t!="function"?null:t()}function Tc(t){return Zt(t)!=="object"||!t?null:t}var Rm=function(e,n){var r=e.children,i=e.disabled,o=e.target,a=e.align,s=e.onAlign,l=e.monitorWindowResize,c=e.monitorBufferTime,d=c===void 0?0:c,f=p.useRef({}),h=p.useRef(),v=p.Children.only(r),m=p.useRef({});m.current.disabled=i,m.current.target=o,m.current.align=a,m.current.onAlign=s;var b=km(function(){var x=m.current,I=x.disabled,_=x.target,F=x.align,k=x.onAlign;if(!I&&_){var P=h.current,O,j=Oc(_),N=Tc(_);f.current.element=j,f.current.point=N,f.current.align=F;var R=document,V=R.activeElement;return j&&rc(j)?O=ra(P,j,F):N&&(O=Mm(P,N,F)),Im(V,P),k&&O&&k(P,O),!0}return!1},d),g=U(b,2),w=g[0],D=g[1],E=p.useRef({cancel:function(){}}),y=p.useRef({cancel:function(){}});p.useEffect(function(){var x=Oc(o),I=Tc(o);h.current!==y.current.element&&(y.current.cancel(),y.current.element=h.current,y.current.cancel=Mc(h.current,w)),(f.current.element!==x||!_m(f.current.point,I)||!Pm(f.current.align,a))&&(w(),E.current.element!==x&&(E.current.cancel(),E.current.element=x,E.current.cancel=Mc(x,w)))}),p.useEffect(function(){i?D():w()},[i]);var S=p.useRef(null);return p.useEffect(function(){l?S.current||(S.current=ur(window,"resize",w)):S.current&&(S.current.remove(),S.current=null)},[l]),p.useEffect(function(){return function(){E.current.cancel(),y.current.cancel(),S.current&&S.current.remove(),D()}},[]),p.useImperativeHandle(n,function(){return{forceAlign:function(){return w(!0)}}}),p.isValidElement(v)&&(v=p.cloneElement(v,{ref:Ao(v.ref,h)})),v},Pc=p.forwardRef(Rm);Pc.displayName="Align";var _c={exports:{}};(function(t){var e=function(n){var r=Object.prototype,i=r.hasOwnProperty,o,a=typeof Symbol=="function"?Symbol:{},s=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function d(C,M,A){return Object.defineProperty(C,M,{value:A,enumerable:!0,configurable:!0,writable:!0}),C[M]}try{d({},"")}catch(C){d=function(M,A,W){return M[A]=W}}function f(C,M,A,W){var L=M&&M.prototype instanceof D?M:D,K=Object.create(L.prototype),Q=new R(W||[]);return K._invoke=P(C,A,Q),K}n.wrap=f;function h(C,M,A){try{return{type:"normal",arg:C.call(M,A)}}catch(W){return{type:"throw",arg:W}}}var v="suspendedStart",m="suspendedYield",b="executing",g="completed",w={};function D(){}function E(){}function y(){}var S={};d(S,s,function(){return this});var x=Object.getPrototypeOf,I=x&&x(x(V([])));I&&I!==r&&i.call(I,s)&&(S=I);var _=y.prototype=D.prototype=Object.create(S);E.prototype=y,d(_,"constructor",y),d(y,"constructor",E),E.displayName=d(y,c,"GeneratorFunction");function F(C){["next","throw","return"].forEach(function(M){d(C,M,function(A){return this._invoke(M,A)})})}n.isGeneratorFunction=function(C){var M=typeof C=="function"&&C.constructor;return M?M===E||(M.displayName||M.name)==="GeneratorFunction":!1},n.mark=function(C){return Object.setPrototypeOf?Object.setPrototypeOf(C,y):(C.__proto__=y,d(C,c,"GeneratorFunction")),C.prototype=Object.create(_),C},n.awrap=function(C){return{__await:C}};function k(C,M){function A(K,Q,z,q){var J=h(C[K],C,Q);if(J.type==="throw")q(J.arg);else{var le=J.arg,ve=le.value;return ve&&typeof ve=="object"&&i.call(ve,"__await")?M.resolve(ve.__await).then(function(me){A("next",me,z,q)},function(me){A("throw",me,z,q)}):M.resolve(ve).then(function(me){le.value=me,z(le)},function(me){return A("throw",me,z,q)})}}var W;function L(K,Q){function z(){return new M(function(q,J){A(K,Q,q,J)})}return W=W?W.then(z,z):z()}this._invoke=L}F(k.prototype),d(k.prototype,l,function(){return this}),n.AsyncIterator=k,n.async=function(C,M,A,W,L){L===void 0&&(L=Promise);var K=new k(f(C,M,A,W),L);return n.isGeneratorFunction(M)?K:K.next().then(function(Q){return Q.done?Q.value:K.next()})};function P(C,M,A){var W=v;return function(K,Q){if(W===b)throw new Error("Generator is already running");if(W===g){if(K==="throw")throw Q;return T()}for(A.method=K,A.arg=Q;;){var z=A.delegate;if(z){var q=O(z,A);if(q){if(q===w)continue;return q}}if(A.method==="next")A.sent=A._sent=A.arg;else if(A.method==="throw"){if(W===v)throw W=g,A.arg;A.dispatchException(A.arg)}else A.method==="return"&&A.abrupt("return",A.arg);W=b;var J=h(C,M,A);if(J.type==="normal"){if(W=A.done?g:m,J.arg===w)continue;return{value:J.arg,done:A.done}}else J.type==="throw"&&(W=g,A.method="throw",A.arg=J.arg)}}}function O(C,M){var A=C.iterator[M.method];if(A===o){if(M.delegate=null,M.method==="throw"){if(C.iterator.return&&(M.method="return",M.arg=o,O(C,M),M.method==="throw"))return w;M.method="throw",M.arg=new TypeError("The iterator does not provide a 'throw' method")}return w}var W=h(A,C.iterator,M.arg);if(W.type==="throw")return M.method="throw",M.arg=W.arg,M.delegate=null,w;var L=W.arg;if(!L)return M.method="throw",M.arg=new TypeError("iterator result is not an object"),M.delegate=null,w;if(L.done)M[C.resultName]=L.value,M.next=C.nextLoc,M.method!=="return"&&(M.method="next",M.arg=o);else return L;return M.delegate=null,w}F(_),d(_,c,"Generator"),d(_,s,function(){return this}),d(_,"toString",function(){return"[object Generator]"});function j(C){var M={tryLoc:C[0]};1 in C&&(M.catchLoc=C[1]),2 in C&&(M.finallyLoc=C[2],M.afterLoc=C[3]),this.tryEntries.push(M)}function N(C){var M=C.completion||{};M.type="normal",delete M.arg,C.completion=M}function R(C){this.tryEntries=[{tryLoc:"root"}],C.forEach(j,this),this.reset(!0)}n.keys=function(C){var M=[];for(var A in C)M.push(A);return M.reverse(),function W(){for(;M.length;){var L=M.pop();if(L in C)return W.value=L,W.done=!1,W}return W.done=!0,W}};function V(C){if(C){var M=C[s];if(M)return M.call(C);if(typeof C.next=="function")return C;if(!isNaN(C.length)){var A=-1,W=function L(){for(;++A<C.length;)if(i.call(C,A))return L.value=C[A],L.done=!1,L;return L.value=o,L.done=!0,L};return W.next=W}}return{next:T}}n.values=V;function T(){return{value:o,done:!0}}return R.prototype={constructor:R,reset:function(C){if(this.prev=0,this.next=0,this.sent=this._sent=o,this.done=!1,this.delegate=null,this.method="next",this.arg=o,this.tryEntries.forEach(N),!C)for(var M in this)M.charAt(0)==="t"&&i.call(this,M)&&!isNaN(+M.slice(1))&&(this[M]=o)},stop:function(){this.done=!0;var C=this.tryEntries[0],M=C.completion;if(M.type==="throw")throw M.arg;return this.rval},dispatchException:function(C){if(this.done)throw C;var M=this;function A(q,J){return K.type="throw",K.arg=C,M.next=q,J&&(M.method="next",M.arg=o),!!J}for(var W=this.tryEntries.length-1;W>=0;--W){var L=this.tryEntries[W],K=L.completion;if(L.tryLoc==="root")return A("end");if(L.tryLoc<=this.prev){var Q=i.call(L,"catchLoc"),z=i.call(L,"finallyLoc");if(Q&&z){if(this.prev<L.catchLoc)return A(L.catchLoc,!0);if(this.prev<L.finallyLoc)return A(L.finallyLoc)}else if(Q){if(this.prev<L.catchLoc)return A(L.catchLoc,!0)}else if(z){if(this.prev<L.finallyLoc)return A(L.finallyLoc)}else throw new Error("try statement without catch or finally")}}},abrupt:function(C,M){for(var A=this.tryEntries.length-1;A>=0;--A){var W=this.tryEntries[A];if(W.tryLoc<=this.prev&&i.call(W,"finallyLoc")&&this.prev<W.finallyLoc){var L=W;break}}L&&(C==="break"||C==="continue")&&L.tryLoc<=M&&M<=L.finallyLoc&&(L=null);var K=L?L.completion:{};return K.type=C,K.arg=M,L?(this.method="next",this.next=L.finallyLoc,w):this.complete(K)},complete:function(C,M){if(C.type==="throw")throw C.arg;return C.type==="break"||C.type==="continue"?this.next=C.arg:C.type==="return"?(this.rval=this.arg=C.arg,this.method="return",this.next="end"):C.type==="normal"&&M&&(this.next=M),w},finish:function(C){for(var M=this.tryEntries.length-1;M>=0;--M){var A=this.tryEntries[M];if(A.finallyLoc===C)return this.complete(A.completion,A.afterLoc),N(A),w}},catch:function(C){for(var M=this.tryEntries.length-1;M>=0;--M){var A=this.tryEntries[M];if(A.tryLoc===C){var W=A.completion;if(W.type==="throw"){var L=W.arg;N(A)}return L}}throw new Error("illegal catch attempt")},delegateYield:function(C,M,A){return this.delegate={iterator:V(C),resultName:M,nextLoc:A},this.method==="next"&&(this.arg=o),w}},n}(t.exports);try{regeneratorRuntime=e}catch(n){typeof globalThis=="object"?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}})(_c);var Ic=_c.exports;function kc(t,e,n,r,i,o,a){try{var s=t[o](a),l=s.value}catch(c){n(c);return}s.done?e(l):Promise.resolve(l).then(r,i)}function Nm(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(l){kc(o,r,i,a,s,"next",l)}function s(l){kc(o,r,i,a,s,"throw",l)}a(void 0)})}}var Rc=["measure","align",null,"motion"],Am=function(t,e){var n=u.exports.useState(null),r=U(n,2),i=r[0],o=r[1],a=u.exports.useRef(),s=u.exports.useRef(!1);function l(f){s.current||o(f)}function c(){Ce.cancel(a.current)}function d(f){c(),a.current=Ce(function(){l(function(h){switch(i){case"align":return"motion";case"motion":return"stable"}return h}),f==null||f()})}return u.exports.useEffect(function(){l("measure")},[t]),u.exports.useEffect(function(){switch(i){case"measure":e();break}i&&(a.current=Ce(Nm(Ic.mark(function f(){var h,v;return Ic.wrap(function(b){for(;;)switch(b.prev=b.next){case 0:h=Rc.indexOf(i),v=Rc[h+1],v&&h!==-1&&l(v);case 3:case"end":return b.stop()}},f)}))))},[i]),u.exports.useEffect(function(){return function(){s.current=!0,c()}},[]),[i,d]},Lm=function(t){var e=u.exports.useState({width:0,height:0}),n=U(e,2),r=n[0],i=n[1];function o(s){i({width:s.offsetWidth,height:s.offsetHeight})}var a=u.exports.useMemo(function(){var s={};if(t){var l=r.width,c=r.height;t.indexOf("height")!==-1&&c?s.height=c:t.indexOf("minHeight")!==-1&&c&&(s.minHeight=c),t.indexOf("width")!==-1&&l?s.width=l:t.indexOf("minWidth")!==-1&&l&&(s.minWidth=l)}return s},[t,r]);return[a,o]},Nc=u.exports.forwardRef(function(t,e){var n=t.visible,r=t.prefixCls,i=t.className,o=t.style,a=t.children,s=t.zIndex,l=t.stretch,c=t.destroyPopupOnHide,d=t.forceRender,f=t.align,h=t.point,v=t.getRootDomNode,m=t.getClassNameFromAlign,b=t.onAlign,g=t.onMouseEnter,w=t.onMouseLeave,D=t.onMouseDown,E=t.onTouchStart,y=u.exports.useRef(),S=u.exports.useRef(),x=u.exports.useState(),I=U(x,2),_=I[0],F=I[1],k=Lm(l),P=U(k,2),O=P[0],j=P[1];function N(){l&&j(v())}var R=Am(n,N),V=U(R,2),T=V[0],C=V[1],M=u.exports.useRef();function A(){return h||v}function W(){var le;(le=y.current)===null||le===void 0||le.forceAlign()}function L(le,ve){var me=m(ve);_!==me&&F(me),T==="align"&&(_!==me?Promise.resolve().then(function(){W()}):C(function(){var be;(be=M.current)===null||be===void 0||be.call(M)}),b==null||b(le,ve))}var K=$({},nc(t));["onAppearEnd","onEnterEnd","onLeaveEnd"].forEach(function(le){var ve=K[le];K[le]=function(me,be){return C(),ve==null?void 0:ve(me,be)}});function Q(){return new Promise(function(le){M.current=le})}u.exports.useEffect(function(){!K.motionName&&T==="motion"&&C()},[K.motionName,T]),u.exports.useImperativeHandle(e,function(){return{forceAlign:W,getElement:function(){return S.current}}});var z=$($({},O),{},{zIndex:s,opacity:T==="motion"||T==="stable"||!n?void 0:0,pointerEvents:T==="stable"?void 0:"none"},o),q=!0;(f==null?void 0:f.points)&&(T==="align"||T==="stable")&&(q=!1);var J=a;return u.exports.Children.count(a)>1&&(J=u.exports.createElement("div",{className:"".concat(r,"-content")},a)),u.exports.createElement(Cr,Z({visible:n,ref:S,leavedClassName:"".concat(r,"-hidden")},K,{onAppearPrepare:Q,onEnterPrepare:Q,removeOnLeave:c,forceRender:d}),function(le,ve){var me=le.className,be=le.style,ze=fe(r,i,_,me);return u.exports.createElement(Pc,{target:A(),key:"popup",ref:y,monitorWindowResize:!0,disabled:q,align:f,onAlign:L},u.exports.createElement("div",{ref:ve,className:ze,onMouseEnter:g,onMouseLeave:w,onMouseDownCapture:D,onTouchStartCapture:E,style:$($({},be),z)},J))})});Nc.displayName="PopupInner";var Ac=u.exports.forwardRef(function(t,e){var n=t.prefixCls,r=t.visible,i=t.zIndex,o=t.children,a=t.mobile;a=a===void 0?{}:a;var s=a.popupClassName,l=a.popupStyle,c=a.popupMotion,d=c===void 0?{}:c,f=a.popupRender,h=u.exports.useRef();u.exports.useImperativeHandle(e,function(){return{forceAlign:function(){},getElement:function(){return h.current}}});var v=$({zIndex:i},l),m=o;return u.exports.Children.count(o)>1&&(m=u.exports.createElement("div",{className:"".concat(n,"-content")},o)),f&&(m=f(m)),u.exports.createElement(Cr,Z({visible:r,ref:h,removeOnLeave:!0},d),function(b,g){var w=b.className,D=b.style,E=fe(n,s,w);return u.exports.createElement("div",{ref:g,className:E,style:$($({},D),v)},m)})});Ac.displayName="MobilePopupInner";var zm=["visible","mobile"],Lc=u.exports.forwardRef(function(t,e){var n=t.visible,r=t.mobile,i=Oe(t,zm),o=u.exports.useState(n),a=U(o,2),s=a[0],l=a[1],c=u.exports.useState(!1),d=U(c,2),f=d[0],h=d[1],v=$($({},i),{},{visible:s});u.exports.useEffect(function(){l(n),n&&r&&h(vl())},[n,r]);var m=f?u.exports.createElement(Ac,Z({},v,{mobile:r,ref:e})):u.exports.createElement(Nc,Z({},v,{ref:e}));return u.exports.createElement("div",null,u.exports.createElement(Qv,v),m)});Lc.displayName="Popup";var zc=u.exports.createContext(null);function ia(){}function Fm(){return""}function Bm(t){return t?t.ownerDocument:window.document}var jm=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"];function Wm(t){var e=function(n){Ft(i,n);var r=Wt(i);function i(o){var a;Bt(this,i),a=r.call(this,o),a.popupRef=u.exports.createRef(),a.triggerRef=u.exports.createRef(),a.attachId=void 0,a.clickOutsideHandler=void 0,a.touchOutsideHandler=void 0,a.contextMenuOutsideHandler1=void 0,a.contextMenuOutsideHandler2=void 0,a.mouseDownTimeout=void 0,a.focusTime=void 0,a.preClickTime=void 0,a.preTouchTime=void 0,a.delayTimer=void 0,a.hasPopupMouseDown=void 0,a.onMouseEnter=function(l){var c=a.props.mouseEnterDelay;a.fireEvents("onMouseEnter",l),a.delaySetPopupVisible(!0,c,c?null:l)},a.onMouseMove=function(l){a.fireEvents("onMouseMove",l),a.setPoint(l)},a.onMouseLeave=function(l){a.fireEvents("onMouseLeave",l),a.delaySetPopupVisible(!1,a.props.mouseLeaveDelay)},a.onPopupMouseEnter=function(){a.clearDelayTimer()},a.onPopupMouseLeave=function(l){var c;l.relatedTarget&&!l.relatedTarget.setTimeout&&Ei((c=a.popupRef.current)===null||c===void 0?void 0:c.getElement(),l.relatedTarget)||a.delaySetPopupVisible(!1,a.props.mouseLeaveDelay)},a.onFocus=function(l){a.fireEvents("onFocus",l),a.clearDelayTimer(),a.isFocusToShow()&&(a.focusTime=Date.now(),a.delaySetPopupVisible(!0,a.props.focusDelay))},a.onMouseDown=function(l){a.fireEvents("onMouseDown",l),a.preClickTime=Date.now()},a.onTouchStart=function(l){a.fireEvents("onTouchStart",l),a.preTouchTime=Date.now()},a.onBlur=function(l){a.fireEvents("onBlur",l),a.clearDelayTimer(),a.isBlurToHide()&&a.delaySetPopupVisible(!1,a.props.blurDelay)},a.onContextMenu=function(l){l.preventDefault(),a.fireEvents("onContextMenu",l),a.setPopupVisible(!0,l)},a.onContextMenuClose=function(){a.isContextMenuToShow()&&a.close()},a.onClick=function(l){if(a.fireEvents("onClick",l),a.focusTime){var c;if(a.preClickTime&&a.preTouchTime?c=Math.min(a.preClickTime,a.preTouchTime):a.preClickTime?c=a.preClickTime:a.preTouchTime&&(c=a.preTouchTime),Math.abs(c-a.focusTime)<20)return;a.focusTime=0}a.preClickTime=0,a.preTouchTime=0,a.isClickToShow()&&(a.isClickToHide()||a.isBlurToHide())&&l&&l.preventDefault&&l.preventDefault();var d=!a.state.popupVisible;(a.isClickToHide()&&!d||d&&a.isClickToShow())&&a.setPopupVisible(!a.state.popupVisible,l)},a.onPopupMouseDown=function(){if(a.hasPopupMouseDown=!0,clearTimeout(a.mouseDownTimeout),a.mouseDownTimeout=window.setTimeout(function(){a.hasPopupMouseDown=!1},0),a.context){var l;(l=a.context).onPopupMouseDown.apply(l,arguments)}},a.onDocumentClick=function(l){if(!(a.props.mask&&!a.props.maskClosable)){var c=l.target,d=a.getRootDomNode(),f=a.getPopupDomNode();(!Ei(d,c)||a.isContextMenuOnly())&&!Ei(f,c)&&!a.hasPopupMouseDown&&a.close()}},a.getRootDomNode=function(){var l=a.props.getTriggerDOMNode;if(l)return l(a.triggerRef.current);try{var c=No(a.triggerRef.current);if(c)return c}catch(d){}return On.findDOMNode(Ae(a))},a.getPopupClassNameFromAlign=function(l){var c=[],d=a.props,f=d.popupPlacement,h=d.builtinPlacements,v=d.prefixCls,m=d.alignPoint,b=d.getPopupClassNameFromAlign;return f&&h&&c.push(Wv(h,v,l,m)),b&&c.push(b(l)),c.join(" ")},a.getComponent=function(){var l=a.props,c=l.prefixCls,d=l.destroyPopupOnHide,f=l.popupClassName,h=l.onPopupAlign,v=l.popupMotion,m=l.popupAnimation,b=l.popupTransitionName,g=l.popupStyle,w=l.mask,D=l.maskAnimation,E=l.maskTransitionName,y=l.maskMotion,S=l.zIndex,x=l.popup,I=l.stretch,_=l.alignPoint,F=l.mobile,k=l.forceRender,P=a.state,O=P.popupVisible,j=P.point,N=a.getPopupAlign(),R={};return a.isMouseEnterToShow()&&(R.onMouseEnter=a.onPopupMouseEnter),a.isMouseLeaveToHide()&&(R.onMouseLeave=a.onPopupMouseLeave),R.onMouseDown=a.onPopupMouseDown,R.onTouchStart=a.onPopupMouseDown,u.exports.createElement(Lc,Z({prefixCls:c,destroyPopupOnHide:d,visible:O,point:_&&j,className:f,align:N,onAlign:h,animation:m,getClassNameFromAlign:a.getPopupClassNameFromAlign},R,{stretch:I,getRootDomNode:a.getRootDomNode,style:g,mask:w,zIndex:S,transitionName:b,maskAnimation:D,maskTransitionName:E,maskMotion:y,ref:a.popupRef,motion:v,mobile:F,forceRender:k}),typeof x=="function"?x():x)},a.attachParent=function(l){Ce.cancel(a.attachId);var c=a.props,d=c.getPopupContainer,f=c.getDocument,h=a.getRootDomNode(),v;d?(h||d.length===0)&&(v=d(h)):v=f(a.getRootDomNode()).body,v?v.appendChild(l):a.attachId=Ce(function(){a.attachParent(l)})},a.getContainer=function(){var l=a.props.getDocument,c=l(a.getRootDomNode()).createElement("div");return c.style.position="absolute",c.style.top="0",c.style.left="0",c.style.width="100%",a.attachParent(c),c},a.setPoint=function(l){var c=a.props.alignPoint;!c||!l||a.setState({point:{pageX:l.pageX,pageY:l.pageY}})},a.handlePortalUpdate=function(){a.state.prevPopupVisible!==a.state.popupVisible&&a.props.afterPopupVisibleChange(a.state.popupVisible)},a.triggerContextValue={onPopupMouseDown:a.onPopupMouseDown};var s;return"popupVisible"in o?s=!!o.popupVisible:s=!!o.defaultPopupVisible,a.state={prevPopupVisible:s,popupVisible:s},jm.forEach(function(l){a["fire".concat(l)]=function(c){a.fireEvents(l,c)}}),a}return jt(i,[{key:"componentDidMount",value:function(){this.componentDidUpdate()}},{key:"componentDidUpdate",value:function(){var a=this.props,s=this.state;if(s.popupVisible){var l;!this.clickOutsideHandler&&(this.isClickToHide()||this.isContextMenuToShow())&&(l=a.getDocument(this.getRootDomNode()),this.clickOutsideHandler=ur(l,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(l=l||a.getDocument(this.getRootDomNode()),this.touchOutsideHandler=ur(l,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(l=l||a.getDocument(this.getRootDomNode()),this.contextMenuOutsideHandler1=ur(l,"scroll",this.onContextMenuClose)),!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=ur(window,"blur",this.onContextMenuClose));return}this.clearOutsideHandler()}},{key:"componentWillUnmount",value:function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout),Ce.cancel(this.attachId)}},{key:"getPopupDomNode",value:function(){var a;return((a=this.popupRef.current)===null||a===void 0?void 0:a.getElement())||null}},{key:"getPopupAlign",value:function(){var a=this.props,s=a.popupPlacement,l=a.popupAlign,c=a.builtinPlacements;return s&&c?jv(c,s,l):l}},{key:"setPopupVisible",value:function(a,s){var l=this.props.alignPoint,c=this.state.popupVisible;this.clearDelayTimer(),c!==a&&("popupVisible"in this.props||this.setState({popupVisible:a,prevPopupVisible:c}),this.props.onPopupVisibleChange(a)),l&&s&&a&&this.setPoint(s)}},{key:"delaySetPopupVisible",value:function(a,s,l){var c=this,d=s*1e3;if(this.clearDelayTimer(),d){var f=l?{pageX:l.pageX,pageY:l.pageY}:null;this.delayTimer=window.setTimeout(function(){c.setPopupVisible(a,f),c.clearDelayTimer()},d)}else this.setPopupVisible(a,l)}},{key:"clearDelayTimer",value:function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)}},{key:"clearOutsideHandler",value:function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)}},{key:"createTwoChains",value:function(a){var s=this.props.children.props,l=this.props;return s[a]&&l[a]?this["fire".concat(a)]:s[a]||l[a]}},{key:"isClickToShow",value:function(){var a=this.props,s=a.action,l=a.showAction;return s.indexOf("click")!==-1||l.indexOf("click")!==-1}},{key:"isContextMenuOnly",value:function(){var a=this.props.action;return a==="contextMenu"||a.length===1&&a[0]==="contextMenu"}},{key:"isContextMenuToShow",value:function(){var a=this.props,s=a.action,l=a.showAction;return s.indexOf("contextMenu")!==-1||l.indexOf("contextMenu")!==-1}},{key:"isClickToHide",value:function(){var a=this.props,s=a.action,l=a.hideAction;return s.indexOf("click")!==-1||l.indexOf("click")!==-1}},{key:"isMouseEnterToShow",value:function(){var a=this.props,s=a.action,l=a.showAction;return s.indexOf("hover")!==-1||l.indexOf("mouseEnter")!==-1}},{key:"isMouseLeaveToHide",value:function(){var a=this.props,s=a.action,l=a.hideAction;return s.indexOf("hover")!==-1||l.indexOf("mouseLeave")!==-1}},{key:"isFocusToShow",value:function(){var a=this.props,s=a.action,l=a.showAction;return s.indexOf("focus")!==-1||l.indexOf("focus")!==-1}},{key:"isBlurToHide",value:function(){var a=this.props,s=a.action,l=a.hideAction;return s.indexOf("focus")!==-1||l.indexOf("blur")!==-1}},{key:"forcePopupAlign",value:function(){if(this.state.popupVisible){var a;(a=this.popupRef.current)===null||a===void 0||a.forceAlign()}}},{key:"fireEvents",value:function(a,s){var l=this.props.children.props[a];l&&l(s);var c=this.props[a];c&&c(s)}},{key:"close",value:function(){this.setPopupVisible(!1)}},{key:"render",value:function(){var a=this.state.popupVisible,s=this.props,l=s.children,c=s.forceRender,d=s.alignPoint,f=s.className,h=s.autoDestroy,v=u.exports.Children.only(l),m={key:"trigger"};this.isContextMenuToShow()?m.onContextMenu=this.onContextMenu:m.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(m.onClick=this.onClick,m.onMouseDown=this.onMouseDown,m.onTouchStart=this.onTouchStart):(m.onClick=this.createTwoChains("onClick"),m.onMouseDown=this.createTwoChains("onMouseDown"),m.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(m.onMouseEnter=this.onMouseEnter,d&&(m.onMouseMove=this.onMouseMove)):m.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?m.onMouseLeave=this.onMouseLeave:m.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(m.onFocus=this.onFocus,m.onBlur=this.onBlur):(m.onFocus=this.createTwoChains("onFocus"),m.onBlur=this.createTwoChains("onBlur"));var b=fe(v&&v.props&&v.props.className,f);b&&(m.className=b);var g=$({},m);xl(v)&&(g.ref=Ao(this.triggerRef,v.ref));var w=u.exports.cloneElement(v,g),D;return(a||this.popupRef.current||c)&&(D=u.exports.createElement(t,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),!a&&h&&(D=null),u.exports.createElement(zc.Provider,{value:this.triggerContextValue},w,D)}}],[{key:"getDerivedStateFromProps",value:function(a,s){var l=a.popupVisible,c={};return l!==void 0&&s.popupVisible!==l&&(c.popupVisible=l,c.prevPopupVisible=s.popupVisible),c}}]),i}(u.exports.Component);return e.contextType=zc,e.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:Fm,getDocument:Bm,onPopupVisibleChange:ia,afterPopupVisibleChange:ia,onPopupAlign:ia,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[],autoDestroy:!1},e}var oa=Wm(Fv),Qt={adjustX:1,adjustY:1},Hm={topLeft:{points:["bl","tl"],overflow:Qt,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:Qt,offset:[0,7]},leftTop:{points:["tr","tl"],overflow:Qt,offset:[-4,0]},rightTop:{points:["tl","tr"],overflow:Qt,offset:[4,0]}},$m={topLeft:{points:["bl","tl"],overflow:Qt,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:Qt,offset:[0,7]},rightTop:{points:["tr","tl"],overflow:Qt,offset:[-4,0]},leftTop:{points:["tl","tr"],overflow:Qt,offset:[4,0]}};function Fc(t,e,n){if(e)return e;if(n)return n[t]||n.other}var Km={horizontal:"bottomLeft",vertical:"rightTop","vertical-left":"rightTop","vertical-right":"leftTop"};function Vm(t){var e=t.prefixCls,n=t.visible,r=t.children,i=t.popup,o=t.popupClassName,a=t.popupOffset,s=t.disabled,l=t.mode,c=t.onVisibleChange,d=u.exports.useContext(gt),f=d.getPopupContainer,h=d.rtl,v=d.subMenuOpenDelay,m=d.subMenuCloseDelay,b=d.builtinPlacements,g=d.triggerSubMenuAction,w=d.forceSubMenuRender,D=d.motion,E=d.defaultMotions,y=u.exports.useState(!1),S=U(y,2),x=S[0],I=S[1],_=h?$($({},$m),b):$($({},Hm),b),F=Km[l],k=Fc(l,D,E),P=$($({},k),{},{leavedClassName:"".concat(e,"-hidden"),removeOnLeave:!1,motionAppear:!0}),O=u.exports.useRef();return u.exports.useEffect(function(){return O.current=Ce(function(){I(n)}),function(){Ce.cancel(O.current)}},[n]),u.exports.createElement(oa,{prefixCls:e,popupClassName:fe("".concat(e,"-popup"),G({},"".concat(e,"-rtl"),h),o),stretch:l==="horizontal"?"minWidth":null,getPopupContainer:f,builtinPlacements:_,popupPlacement:F,popupVisible:x,popup:i,popupAlign:a&&{offset:a},action:s?[]:[g],mouseEnterDelay:v,mouseLeaveDelay:m,onPopupVisibleChange:c,forceRender:w,popupMotion:P},r)}function Um(t){var e=t.id,n=t.open,r=t.keyPath,i=t.children,o="inline",a=u.exports.useContext(gt),s=a.prefixCls,l=a.forceSubMenuRender,c=a.motion,d=a.defaultMotions,f=a.mode,h=u.exports.useRef(!1);h.current=f===o;var v=u.exports.useState(!h.current),m=U(v,2),b=m[0],g=m[1],w=h.current?n:!1;u.exports.useEffect(function(){h.current&&g(!1)},[f]);var D=$({},Fc(o,c,d));r.length>1&&(D.motionAppear=!1);var E=D.onVisibleChanged;return D.onVisibleChanged=function(y){return!h.current&&!y&&g(!0),E==null?void 0:E(y)},b?null:u.exports.createElement(yr,{mode:o,locked:!h.current},u.exports.createElement(Cr,Z({visible:w},D,{forceRender:l,removeOnLeave:!1,leavedClassName:"".concat(s,"-hidden")}),function(y){var S=y.className,x=y.style;return u.exports.createElement(jo,{id:e,className:S,style:x},i)}))}var Gm=function(e){var n,r=e.style,i=e.className,o=e.title,a=e.eventKey;e.warnKey;var s=e.disabled,l=e.internalPopupClose,c=e.children,d=e.itemIcon,f=e.expandIcon,h=e.popupClassName,v=e.popupOffset,m=e.onClick,b=e.onMouseEnter,g=e.onMouseLeave,w=e.onTitleClick,D=e.onTitleMouseEnter,E=e.onTitleMouseLeave,y=Oe(e,["style","className","title","eventKey","warnKey","disabled","internalPopupClose","children","itemIcon","expandIcon","popupClassName","popupOffset","onClick","onMouseEnter","onMouseLeave","onTitleClick","onTitleMouseEnter","onTitleMouseLeave"]),S=Hl(a),x=u.exports.useContext(gt),I=x.prefixCls,_=x.mode,F=x.openKeys,k=x.disabled,P=x.overflowDisabled,O=x.activeKey,j=x.selectedKeys,N=x.itemIcon,R=x.expandIcon,V=x.onItemClick,T=x.onOpenChange,C=x.onActive,M=u.exports.useContext(Bl),A=M.isSubPathKey,W=wr(),L="".concat(I,"-submenu"),K=k||s,Q=u.exports.useRef(),z=u.exports.useRef(),q=d||N,J=f||R,le=F.includes(a),ve=!P&&le,me=A(j,a),be=Nl(a,K,D,E),ze=be.active,Fe=Oe(be,["active"]),tt=u.exports.useState(!1),Ne=U(tt,2),ue=Ne[0],je=Ne[1],se=function(ke){K||je(ke)},ce=function(ke){se(!0),b==null||b({key:a,domEvent:ke})},Se=function(ke){se(!1),g==null||g({key:a,domEvent:ke})},Yt=u.exports.useMemo(function(){return ze||(_!=="inline"?ue||A([O],a):!1)},[_,ze,O,ue,a,A]),Lt=Ll(W.length),$e=function(ke){K||(w==null||w({key:a,domEvent:ke}),_==="inline"&&T(a,!le))},Xt=zn(function(nt){m==null||m(Ci(nt)),V(nt)}),Ye=function(ke){_!=="inline"&&T(a,ke)},We=function(){C(a)},zt=S&&"".concat(S,"-popup"),Xe=u.exports.createElement("div",Z({role:"menuitem",style:Lt,className:"".concat(L,"-title"),tabIndex:K?null:-1,ref:Q,title:typeof o=="string"?o:null,"data-menu-id":P&&S?null:S,"aria-expanded":ve,"aria-haspopup":!0,"aria-controls":zt,"aria-disabled":K,onClick:$e,onFocus:We},Fe),o,u.exports.createElement(Al,{icon:_!=="horizontal"?J:null,props:$($({},e),{},{isOpen:ve,isSubMenu:!0})},u.exports.createElement("i",{className:"".concat(L,"-arrow")}))),ht=u.exports.useRef(_);if(_!=="inline"&&(ht.current=W.length>1?"vertical":_),!P){var Ke=ht.current;Xe=u.exports.createElement(Vm,{mode:Ke,prefixCls:L,visible:!l&&ve&&_!=="inline",popupClassName:h,popupOffset:v,popup:u.exports.createElement(yr,{mode:Ke==="horizontal"?"vertical":Ke},u.exports.createElement(jo,{id:zt,ref:z},c)),disabled:K,onVisibleChange:Ye},Xe)}return u.exports.createElement(yr,{onItemClick:Xt,mode:_==="horizontal"?"vertical":_,itemIcon:q,expandIcon:J},u.exports.createElement(Kt.Item,Z({role:"none"},y,{component:"li",style:r,className:fe(L,"".concat(L,"-").concat(_),i,(n={},G(n,"".concat(L,"-open"),ve),G(n,"".concat(L,"-active"),Yt),G(n,"".concat(L,"-selected"),me),G(n,"".concat(L,"-disabled"),K),n)),onMouseEnter:ce,onMouseLeave:Se}),Xe,!P&&u.exports.createElement(Um,{id:zt,open:ve,keyPath:W},c)))};function Bc(t){var e=t.eventKey,n=t.children,r=wr(e),i=Bo(n,r),o=Si();u.exports.useEffect(function(){if(o)return o.registerPath(e,r),function(){o.unregisterPath(e,r)}},[r]);var a;return o?a=i:a=u.exports.createElement(Gm,t,i),u.exports.createElement(Fl.Provider,{value:r},a)}function jc(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;if(rc(t)){var n=t.nodeName.toLowerCase(),r=["input","select","textarea","button"].includes(n)||t.isContentEditable||n==="a"&&!!t.getAttribute("href"),i=t.getAttribute("tabindex"),o=Number(i),a=null;return i&&!Number.isNaN(o)?a=o:r&&a===null&&(a=0),r&&t.disabled&&(a=null),a!==null&&(a>=0||e&&a<0)}return!1}function qm(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,n=mt(t.querySelectorAll("*")).filter(function(r){return jc(r,e)});return jc(t,e)&&n.unshift(t),n}var aa=we.LEFT,sa=we.RIGHT,la=we.UP,Ni=we.DOWN,Ai=we.ENTER,Wc=we.ESC,Hc=[la,Ni,aa,sa];function Ym(t,e,n,r){var i,o,a,s,l="prev",c="next",d="children",f="parent";if(t==="inline"&&r===Ai)return{inlineTrigger:!0};var h=(i={},G(i,la,l),G(i,Ni,c),i),v=(o={},G(o,aa,n?c:l),G(o,sa,n?l:c),G(o,Ni,d),G(o,Ai,d),o),m=(a={},G(a,la,l),G(a,Ni,c),G(a,Ai,d),G(a,Wc,f),G(a,aa,n?d:f),G(a,sa,n?f:d),a),b={inline:h,horizontal:v,vertical:m,inlineSub:h,horizontalSub:m,verticalSub:m},g=(s=b["".concat(t).concat(e?"":"Sub")])===null||s===void 0?void 0:s[r];switch(g){case l:return{offset:-1,sibling:!0};case c:return{offset:1,sibling:!0};case f:return{offset:-1,sibling:!1};case d:return{offset:1,sibling:!1};default:return null}}function Xm(t){for(var e=t;e;){if(e.getAttribute("data-menu-list"))return e;e=e.parentElement}return null}function Jm(t,e){for(var n=t||document.activeElement;n;){if(e.has(n))return n;n=n.parentElement}return null}function Zm(t,e){var n=qm(t,!0);return n.filter(function(r){return e.has(r)})}function $c(t,e,n){var r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:1;if(!t)return null;var i=Zm(t,e),o=i.length,a=i.findIndex(function(s){return n===s});return r<0?a===-1?a=o-1:a-=1:r>0&&(a+=1),a=(a+o)%o,i[a]}function Qm(t,e,n,r,i,o,a,s,l,c){var d=u.exports.useRef(),f=u.exports.useRef();f.current=e;var h=function(){Ce.cancel(d.current)};return u.exports.useEffect(function(){return function(){h()}},[]),function(v){var m=v.which;if([].concat(Hc,[Ai,Wc]).includes(m)){var b,g,w,D=function(){b=new Set,g=new Map,w=new Map;var N=o();return N.forEach(function(R){var V=document.querySelector("[data-menu-id='".concat(Wl(r,R),"']"));V&&(b.add(V),w.set(V,R),g.set(R,V))}),b};D();var E=g.get(e),y=Jm(E,b),S=w.get(y),x=Ym(t,a(S,!0).length===1,n,m);if(!x)return;Hc.includes(m)&&v.preventDefault();var I=function(N){if(N){var R=N,V=N.querySelector("a");(V==null?void 0:V.getAttribute("href"))&&(R=V);var T=w.get(N);s(T),h(),d.current=Ce(function(){f.current===T&&R.focus()})}};if(x.sibling||!y){var _;!y||t==="inline"?_=i.current:_=Xm(y);var F=$c(_,b,y,x.offset);I(F)}else if(x.inlineTrigger)l(S);else if(x.offset>0)l(S,!0),h(),d.current=Ce(function(){D();var j=y.getAttribute("aria-controls"),N=document.getElementById(j),R=$c(N,b);I(R)},5);else if(x.offset<0){var k=a(S,!0),P=k[k.length-2],O=g.get(P);l(P,!1),I(O)}}c==null||c(v)}}var eg=Math.random().toFixed(5).toString().slice(2),Kc=0;function tg(t){var e=Nn(t,{value:t}),n=U(e,2),r=n[0],i=n[1];return u.exports.useEffect(function(){Kc+=1;var o="".concat(eg,"-").concat(Kc);i("rc-menu-uuid-".concat(o))},[]),r}function ng(t){Promise.resolve().then(t)}var ca="__RC_UTIL_PATH_SPLIT__",Vc=function(e){return e.join(ca)},rg=function(e){return e.split(ca)},ua="rc-menu-more";function ig(){var t=u.exports.useState({}),e=U(t,2),n=e[1],r=u.exports.useRef(new Map),i=u.exports.useRef(new Map),o=u.exports.useState([]),a=U(o,2),s=a[0],l=a[1],c=u.exports.useRef(0),d=u.exports.useRef(!1),f=function(){d.current||n({})},h=u.exports.useCallback(function(E,y){var S=Vc(y);i.current.set(S,E),r.current.set(E,S),c.current+=1;var x=c.current;ng(function(){x===c.current&&f()})},[]),v=u.exports.useCallback(function(E,y){var S=Vc(y);i.current.delete(S),r.current.delete(E)},[]),m=u.exports.useCallback(function(E){l(E)},[]),b=u.exports.useCallback(function(E,y){var S=r.current.get(E)||"",x=rg(S);return y&&s.includes(x[0])&&x.unshift(ua),x},[s]),g=u.exports.useCallback(function(E,y){return E.some(function(S){var x=b(S,!0);return x.includes(y)})},[b]),w=function(){var y=mt(r.current.keys());return s.length&&y.push(ua),y},D=u.exports.useCallback(function(E){var y="".concat(r.current.get(E)).concat(ca),S=new Set;return mt(i.current.keys()).forEach(function(x){x.startsWith(y)&&S.add(i.current.get(x))}),S},[]);return u.exports.useEffect(function(){return function(){d.current=!0}},[]),{registerPath:h,unregisterPath:v,refreshOverflowKeys:m,isSubPathKey:g,getKeyPath:b,getKeys:w,getSubPathKeys:D}}var Wn=[],og=function(e){var n,r,i=e.prefixCls,o=i===void 0?"rc-menu":i,a=e.style,s=e.className,l=e.tabIndex,c=l===void 0?0:l,d=e.children,f=e.direction,h=e.id,v=e.mode,m=v===void 0?"vertical":v,b=e.inlineCollapsed,g=e.disabled,w=e.disabledOverflow,D=e.subMenuOpenDelay,E=D===void 0?.1:D,y=e.subMenuCloseDelay,S=y===void 0?.1:y,x=e.forceSubMenuRender,I=e.defaultOpenKeys,_=e.openKeys,F=e.activeKey,k=e.defaultActiveFirst,P=e.selectable,O=P===void 0?!0:P,j=e.multiple,N=j===void 0?!1:j,R=e.defaultSelectedKeys,V=e.selectedKeys,T=e.onSelect,C=e.onDeselect,M=e.inlineIndent,A=M===void 0?24:M,W=e.motion,L=e.defaultMotions,K=e.triggerSubMenuAction,Q=K===void 0?"hover":K,z=e.builtinPlacements,q=e.itemIcon,J=e.expandIcon,le=e.overflowedIndicator,ve=le===void 0?"...":le,me=e.overflowedIndicatorPopupClassName,be=e.getPopupContainer,ze=e.onClick,Fe=e.onOpenChange,tt=e.onKeyDown;e.openAnimation,e.openTransitionName;var Ne=Oe(e,["prefixCls","style","className","tabIndex","children","direction","id","mode","inlineCollapsed","disabled","disabledOverflow","subMenuOpenDelay","subMenuCloseDelay","forceSubMenuRender","defaultOpenKeys","openKeys","activeKey","defaultActiveFirst","selectable","multiple","defaultSelectedKeys","selectedKeys","onSelect","onDeselect","inlineIndent","motion","defaultMotions","triggerSubMenuAction","builtinPlacements","itemIcon","expandIcon","overflowedIndicator","overflowedIndicatorPopupClassName","getPopupContainer","onClick","onOpenChange","onKeyDown","openAnimation","openTransitionName"]),ue=Bo(d,Wn),je=u.exports.useState(!1),se=U(je,2),ce=se[0],Se=se[1],Yt=u.exports.useRef(),Lt=tg(h),$e=f==="rtl",Xt=u.exports.useMemo(function(){return(m==="inline"||m==="vertical")&&b?["vertical",b]:[m,!1]},[m,b]),Ye=U(Xt,2),We=Ye[0],zt=Ye[1],Xe=u.exports.useState(0),ht=U(Xe,2),Ke=ht[0],nt=ht[1],ke=Ke>=ue.length-1||We!=="horizontal"||w,Qn=Nn(I,{value:_,postState:function(X){return X||Wn}}),Jt=U(Qn,2),at=Jt[0],Sn=Jt[1],st=function(X){Sn(X),Fe==null||Fe(X)},an=u.exports.useState(at),vt=U(an,2),it=vt[0],sn=vt[1],Dt=We==="inline",ln=u.exports.useRef(!1);u.exports.useEffect(function(){Dt&&sn(at)},[at]),u.exports.useEffect(function(){if(!ln.current){ln.current=!0;return}Dt?Sn(it):st(Wn)},[Dt]);var rt=ig(),Mt=rt.registerPath,ae=rt.unregisterPath,he=rt.refreshOverflowKeys,Ee=rt.isSubPathKey,Je=rt.getKeyPath,cn=rt.getKeys,Vr=rt.getSubPathKeys,oo=u.exports.useMemo(function(){return{registerPath:Mt,unregisterPath:ae}},[Mt,ae]),ao=u.exports.useMemo(function(){return{isSubPathKey:Ee}},[Ee]);u.exports.useEffect(function(){he(ke?Wn:ue.slice(Ke+1).map(function(xe){return xe.key}))},[Ke,ke]);var En=Nn(F||k&&((n=ue[0])===null||n===void 0?void 0:n.key),{value:F}),er=U(En,2),Dn=er[0],tr=er[1],so=zn(function(xe){tr(xe)}),Ur=zn(function(){tr(void 0)}),lo=Nn(R||[],{value:V,postState:function(X){return Array.isArray(X)?X:X==null?Wn:[X]}}),nr=U(lo,2),Mn=nr[0],co=nr[1],Ot=function(X){if(O){var ne=X.key,ge=Mn.includes(ne),Me;N?ge?Me=Mn.filter(function(dn){return dn!==ne}):Me=[].concat(mt(Mn),[ne]):Me=[ne],co(Me);var Tt=$($({},X),{},{selectedKeys:Me});ge?C==null||C(Tt):T==null||T(Tt)}!N&&at.length&&We!=="inline"&&st(Wn)},Gr=zn(function(xe){ze==null||ze(Ci(xe)),Ot(xe)}),rr=zn(function(xe,X){var ne=at.filter(function(Me){return Me!==xe});if(X)ne.push(xe);else if(We!=="inline"){var ge=Vr(xe);ne=ne.filter(function(Me){return!ge.has(Me)})}lr(at,ne)||st(ne)}),qr=zn(be),un=function(X,ne){var ge=ne??!at.includes(X);rr(X,ge)},ir=Qm(We,Dn,$e,Lt,Yt,cn,Je,tr,un,tt);u.exports.useEffect(function(){Se(!0)},[]);var or=We!=="horizontal"||w?ue:ue.map(function(xe,X){return u.exports.createElement(yr,{key:xe.key,overflowDisabled:X>Ke},xe)}),Yr=u.exports.createElement(Kt,Z({id:h,ref:Yt,prefixCls:"".concat(o,"-overflow"),component:"ul",itemComponent:Fo,className:fe(o,"".concat(o,"-root"),"".concat(o,"-").concat(We),s,(r={},G(r,"".concat(o,"-inline-collapsed"),zt),G(r,"".concat(o,"-rtl"),$e),r)),dir:f,style:a,role:"menu",tabIndex:c,data:or,renderRawItem:function(X){return X},renderRawRest:function(X){var ne=X.length,ge=ne?ue.slice(-ne):null;return u.exports.createElement(Bc,{eventKey:ua,title:ve,disabled:ke,internalPopupClose:ne===0,popupClassName:me},ge)},maxCount:We!=="horizontal"||w?Kt.INVALIDATE:Kt.RESPONSIVE,ssr:"full","data-menu-list":!0,onVisibleChange:function(X){nt(X)},onKeyDown:ir},Ne));return u.exports.createElement(jl.Provider,{value:Lt},u.exports.createElement(yr,{prefixCls:o,mode:We,openKeys:at,rtl:$e,disabled:g,motion:ce?W:null,defaultMotions:ce?L:null,activeKey:Dn,onActive:so,onInactive:Ur,selectedKeys:Mn,inlineIndent:A,subMenuOpenDelay:E,subMenuCloseDelay:S,forceSubMenuRender:x,builtinPlacements:z,triggerSubMenuAction:Q,getPopupContainer:qr,itemIcon:q,expandIcon:J,onItemClick:Gr,onOpenChange:rr},u.exports.createElement(Bl.Provider,{value:ao},Yr),u.exports.createElement("div",{style:{display:"none"},"aria-hidden":!0},u.exports.createElement(zl.Provider,{value:oo},ue))))},ag=function(e){var n=e.className,r=e.title;e.eventKey;var i=e.children,o=Oe(e,["className","title","eventKey","children"]),a=u.exports.useContext(gt),s=a.prefixCls,l="".concat(s,"-item-group");return u.exports.createElement("li",Z({},o,{onClick:function(d){return d.stopPropagation()},className:fe(l,n)}),u.exports.createElement("div",{className:"".concat(l,"-title"),title:typeof r=="string"?r:void 0},r),u.exports.createElement("ul",{className:"".concat(l,"-list")},i))};function sg(t){var e=t.children,n=Oe(t,["children"]),r=wr(n.eventKey),i=Bo(e,r),o=Si();return o?i:u.exports.createElement(ag,xi(n,["warnKey"]),i)}function lg(t){var e=t.className,n=t.style,r=u.exports.useContext(gt),i=r.prefixCls,o=Si();return o?null:u.exports.createElement("li",{className:fe("".concat(i,"-item-divider"),e),style:n})}var Or=og;Or.Item=Fo;Or.SubMenu=Bc;Or.ItemGroup=sg;Or.Divider=lg;var Hn={adjustX:1,adjustY:1},$n=[0,0],cg={topLeft:{points:["bl","tl"],overflow:Hn,offset:[0,-4],targetOffset:$n},topCenter:{points:["bc","tc"],overflow:Hn,offset:[0,-4],targetOffset:$n},topRight:{points:["br","tr"],overflow:Hn,offset:[0,-4],targetOffset:$n},bottomLeft:{points:["tl","bl"],overflow:Hn,offset:[0,4],targetOffset:$n},bottomCenter:{points:["tc","bc"],overflow:Hn,offset:[0,4],targetOffset:$n},bottomRight:{points:["tr","br"],overflow:Hn,offset:[0,4],targetOffset:$n}};function ug(t,e){var n=t.arrow,r=n===void 0?!1:n,i=t.prefixCls,o=i===void 0?"rc-dropdown":i,a=t.transitionName,s=t.animation,l=t.align,c=t.placement,d=c===void 0?"bottomLeft":c,f=t.placements,h=f===void 0?cg:f,v=t.getPopupContainer,m=t.showAction,b=t.hideAction,g=t.overlayClassName,w=t.overlayStyle,D=t.visible,E=t.trigger,y=E===void 0?["hover"]:E,S=Oe(t,["arrow","prefixCls","transitionName","animation","align","placement","placements","getPopupContainer","showAction","hideAction","overlayClassName","overlayStyle","visible","trigger"]),x=u.exports.useState(),I=U(x,2),_=I[0],F=I[1],k="visible"in t?D:_,P=u.exports.useRef(null);u.exports.useImperativeHandle(e,function(){return P.current});var O=function(){var L=t.overlay,K;return typeof L=="function"?K=L():K=L,K},j=function(L){var K=t.onOverlayClick,Q=O().props;F(!1),K&&K(L),Q.onClick&&Q.onClick(L)},N=function(L){var K=t.onVisibleChange;F(L),typeof K=="function"&&K(L)},R=function(){var L=O(),K={prefixCls:"".concat(o,"-menu"),onClick:j};return typeof L.type=="string"&&delete K.prefixCls,u.exports.createElement(u.exports.Fragment,null,r&&u.exports.createElement("div",{className:"".concat(o,"-arrow")}),u.exports.cloneElement(L,K))},V=function(){var L=t.overlay;return typeof L=="function"?R:R()},T=function(){var L=t.minOverlayWidthMatchTrigger,K=t.alignPoint;return"minOverlayWidthMatchTrigger"in t?L:!K},C=function(){var L=t.openClassName;return L!==void 0?L:"".concat(o,"-open")},M=function(){var L=t.children,K=L.props?L.props:{},Q=fe(K.className,C());return _&&L?u.exports.cloneElement(L,{className:Q}):L},A=b;return!A&&y.indexOf("contextMenu")!==-1&&(A=["click"]),u.exports.createElement(oa,Object.assign({},S,{prefixCls:o,ref:P,popupClassName:fe(g,G({},"".concat(o,"-show-arrow"),r)),popupStyle:w,builtinPlacements:h,action:y,showAction:m,hideAction:A||[],popupPlacement:d,popupAlign:l,popupTransitionName:a,popupAnimation:s,popupVisible:k,stretch:T()?"minWidth":"",popup:V(),onPopupVisibleChange:N,getPopupContainer:v}),M())}var Uc=u.exports.forwardRef(ug);function dg(t,e){var n=t.prefixCls,r=t.editable,i=t.locale,o=t.style;return!r||r.showAdd===!1?null:u.exports.createElement("button",{ref:e,type:"button",className:"".concat(n,"-nav-add"),style:o,"aria-label":(i==null?void 0:i.addAriaLabel)||"Add tab",onClick:function(s){r.onEdit("add",{event:s})}},r.addIcon||"+")}var Gc=u.exports.forwardRef(dg);function fg(t,e){var n=t.prefixCls,r=t.id,i=t.tabs,o=t.locale,a=t.mobile,s=t.moreIcon,l=s===void 0?"More":s,c=t.moreTransitionName,d=t.style,f=t.className,h=t.editable,v=t.tabBarGutter,m=t.rtl,b=t.onTabClick,g=u.exports.useState(!1),w=U(g,2),D=w[0],E=w[1],y=u.exports.useState(null),S=U(y,2),x=S[0],I=S[1],_="".concat(r,"-more-popup"),F="".concat(n,"-dropdown"),k=x!==null?"".concat(_,"-").concat(x):null,P=o==null?void 0:o.dropdownAriaLabel,O=u.exports.createElement(Or,{onClick:function(M){var A=M.key,W=M.domEvent;b(A,W),E(!1)},id:_,tabIndex:-1,role:"listbox","aria-activedescendant":k,selectedKeys:[x],"aria-label":P!==void 0?P:"expanded dropdown"},i.map(function(C){return u.exports.createElement(Fo,{key:C.key,id:"".concat(_,"-").concat(C.key),role:"option","aria-controls":r&&"".concat(r,"-panel-").concat(C.key),disabled:C.disabled},C.tab)}));function j(C){for(var M=i.filter(function(Q){return!Q.disabled}),A=M.findIndex(function(Q){return Q.key===x})||0,W=M.length,L=0;L<W;L+=1){A=(A+C+W)%W;var K=M[A];if(!K.disabled){I(K.key);return}}}function N(C){var M=C.which;if(!D){[we.DOWN,we.SPACE,we.ENTER].includes(M)&&(E(!0),C.preventDefault());return}switch(M){case we.UP:j(-1),C.preventDefault();break;case we.DOWN:j(1),C.preventDefault();break;case we.ESC:E(!1);break;case we.SPACE:case we.ENTER:x!==null&&b(x,C);break}}u.exports.useEffect(function(){var C=document.getElementById(k);C&&C.scrollIntoView&&C.scrollIntoView(!1)},[x]),u.exports.useEffect(function(){D||I(null)},[D]);var R=G({},m?"marginRight":"marginLeft",v);i.length||(R.visibility="hidden",R.order=1);var V=fe(G({},"".concat(F,"-rtl"),m)),T=a?null:u.exports.createElement(Uc,{prefixCls:F,overlay:O,trigger:["hover"],visible:D,transitionName:c,onVisibleChange:E,overlayClassName:V,mouseEnterDelay:.1,mouseLeaveDelay:.1},u.exports.createElement("button",{type:"button",className:"".concat(n,"-nav-more"),style:R,tabIndex:-1,"aria-hidden":"true","aria-haspopup":"listbox","aria-controls":_,id:"".concat(r,"-more"),"aria-expanded":D,onKeyDown:N},l));return u.exports.createElement("div",{className:fe("".concat(n,"-nav-operations"),f),style:d,ref:e},T,u.exports.createElement(Gc,{prefixCls:n,locale:o,editable:h}))}var pg=u.exports.forwardRef(fg),da=u.exports.createContext(null),hg=.1,qc=.01,Li=20,Yc=Math.pow(.995,Li);function vg(t,e){var n=u.exports.useState(),r=U(n,2),i=r[0],o=r[1],a=u.exports.useState(0),s=U(a,2),l=s[0],c=s[1],d=u.exports.useState(0),f=U(d,2),h=f[0],v=f[1],m=u.exports.useState(),b=U(m,2),g=b[0],w=b[1],D=u.exports.useRef();function E(F){var k=F.touches[0],P=k.screenX,O=k.screenY;o({x:P,y:O}),window.clearInterval(D.current)}function y(F){if(!!i){F.preventDefault();var k=F.touches[0],P=k.screenX,O=k.screenY;o({x:P,y:O});var j=P-i.x,N=O-i.y;e(j,N);var R=Date.now();c(R),v(R-l),w({x:j,y:N})}}function S(){if(!!i&&(o(null),w(null),g)){var F=g.x/h,k=g.y/h,P=Math.abs(F),O=Math.abs(k);if(Math.max(P,O)<hg)return;var j=F,N=k;D.current=window.setInterval(function(){if(Math.abs(j)<qc&&Math.abs(N)<qc){window.clearInterval(D.current);return}j*=Yc,N*=Yc,e(j*Li,N*Li)},Li)}}var x=u.exports.useRef();function I(F){var k=F.deltaX,P=F.deltaY,O=0,j=Math.abs(k),N=Math.abs(P);j===N?O=x.current==="x"?k:P:j>N?(O=k,x.current="x"):(O=P,x.current="y"),e(-O,-O)&&F.preventDefault()}var _=u.exports.useRef(null);_.current={onTouchStart:E,onTouchMove:y,onTouchEnd:S,onWheel:I},u.exports.useEffect(function(){function F(j){_.current.onTouchStart(j)}function k(j){_.current.onTouchMove(j)}function P(j){_.current.onTouchEnd(j)}function O(j){_.current.onWheel(j)}return document.addEventListener("touchmove",k,{passive:!1}),document.addEventListener("touchend",P,{passive:!1}),t.current.addEventListener("touchstart",F,{passive:!1}),t.current.addEventListener("wheel",O),function(){document.removeEventListener("touchmove",k),document.removeEventListener("touchend",P)}},[])}function mg(){var t=u.exports.useRef(new Map);function e(r){return t.current.has(r)||t.current.set(r,u.exports.createRef()),t.current.get(r)}function n(r){t.current.delete(r)}return[e,n]}function Xc(t,e){var n=u.exports.useRef(t),r=u.exports.useState({}),i=U(r,2),o=i[1];function a(s){var l=typeof s=="function"?s(n.current):s;l!==n.current&&e(l,n.current),n.current=l,o({})}return[n.current,a]}var Jc=function(e){var n=e.position,r=e.prefixCls,i=e.extra;if(!i)return null;var o,a={};return i&&Zt(i)==="object"&&!u.exports.isValidElement(i)?a=i:a.right=i,n==="right"&&(o=a.right),n==="left"&&(o=a.left),o?u.exports.createElement("div",{className:"".concat(r,"-extra-content")},o):null};function gg(t,e){var n,r=u.exports.useContext(da),i=r.prefixCls,o=r.tabs,a=t.className,s=t.style,l=t.id,c=t.animated,d=t.activeKey,f=t.rtl,h=t.extra,v=t.editable,m=t.locale,b=t.tabPosition,g=t.tabBarGutter,w=t.children,D=t.onTabClick,E=t.onTabScroll,y=u.exports.useRef(),S=u.exports.useRef(),x=u.exports.useRef(),I=u.exports.useRef(),_=mg(),F=U(_,2),k=F[0],P=F[1],O=b==="top"||b==="bottom",j=Xc(0,function(X,ne){O&&E&&E({direction:X>ne?"left":"right"})}),N=U(j,2),R=N[0],V=N[1],T=Xc(0,function(X,ne){!O&&E&&E({direction:X>ne?"top":"bottom"})}),C=U(T,2),M=C[0],A=C[1],W=u.exports.useState(0),L=U(W,2),K=L[0],Q=L[1],z=u.exports.useState(0),q=U(z,2),J=q[0],le=q[1],ve=u.exports.useState(0),me=U(ve,2),be=me[0],ze=me[1],Fe=u.exports.useState(0),tt=U(Fe,2),Ne=tt[0],ue=tt[1],je=u.exports.useState(null),se=U(je,2),ce=se[0],Se=se[1],Yt=u.exports.useState(null),Lt=U(Yt,2),$e=Lt[0],Xt=Lt[1],Ye=u.exports.useState(0),We=U(Ye,2),zt=We[0],Xe=We[1],ht=u.exports.useState(0),Ke=U(ht,2),nt=Ke[0],ke=Ke[1],Qn=Cv(new Map),Jt=U(Qn,2),at=Jt[0],Sn=Jt[1],st=Dv(o,at,K),an="".concat(i,"-nav-operations-hidden"),vt=0,it=0;O?f?(vt=0,it=Math.max(0,K-ce)):(vt=Math.min(0,ce-K),it=0):(vt=Math.min(0,$e-J),it=0);function sn(X){return X<vt?vt:X>it?it:X}var Dt=u.exports.useRef(),ln=u.exports.useState(),rt=U(ln,2),Mt=rt[0],ae=rt[1];function he(){ae(Date.now())}function Ee(){window.clearTimeout(Dt.current)}vg(y,function(X,ne){function ge(Me,Tt){Me(function(dn){var ar=sn(dn+Tt);return ar})}if(O){if(ce>=K)return!1;ge(V,X)}else{if($e>=J)return!1;ge(A,ne)}return Ee(),he(),!0}),u.exports.useEffect(function(){return Ee(),Mt&&(Dt.current=window.setTimeout(function(){ae(0)},100)),Ee},[Mt]);function Je(){var X=arguments.length>0&&arguments[0]!==void 0?arguments[0]:d,ne=st.get(X)||{width:0,height:0,left:0,right:0,top:0};if(O){var ge=R;f?ne.right<R?ge=ne.right:ne.right+ne.width>R+ce&&(ge=ne.right+ne.width-ce):ne.left<-R?ge=-ne.left:ne.left+ne.width>-R+ce&&(ge=-(ne.left+ne.width-ce)),A(0),V(sn(ge))}else{var Me=M;ne.top<-M?Me=-ne.top:ne.top+ne.height>-M+$e&&(Me=-(ne.top+ne.height-$e)),V(0),A(sn(Me))}}var cn=Mv(st,{width:ce,height:$e,left:R,top:M},{width:be,height:Ne},{width:zt,height:nt},$($({},t),{},{tabs:o})),Vr=U(cn,2),oo=Vr[0],ao=Vr[1],En={};b==="top"||b==="bottom"?En[f?"marginRight":"marginLeft"]=g:En.marginTop=g;var er=o.map(function(X,ne){var ge=X.key;return u.exports.createElement(Ev,{id:l,prefixCls:i,key:ge,tab:X,style:ne===0?void 0:En,closable:X.closable,editable:v,active:ge===d,renderWrapper:w,removeAriaLabel:m==null?void 0:m.removeAriaLabel,ref:k(ge),onClick:function(Tt){D(ge,Tt)},onRemove:function(){P(ge)},onFocus:function(){Je(ge),he(),!!y.current&&(f||(y.current.scrollLeft=0),y.current.scrollTop=0)}})}),Dn=Tl(function(){var X,ne,ge,Me,Tt,dn,ar,uo,fo,$d=((X=y.current)===null||X===void 0?void 0:X.offsetWidth)||0,Kd=((ne=y.current)===null||ne===void 0?void 0:ne.offsetHeight)||0,Ga=((ge=I.current)===null||ge===void 0?void 0:ge.offsetWidth)||0,qa=((Me=I.current)===null||Me===void 0?void 0:Me.offsetHeight)||0,Vd=((Tt=x.current)===null||Tt===void 0?void 0:Tt.offsetWidth)||0,Ud=((dn=x.current)===null||dn===void 0?void 0:dn.offsetHeight)||0;Se($d),Xt(Kd),Xe(Ga),ke(qa);var Ya=(((ar=S.current)===null||ar===void 0?void 0:ar.offsetWidth)||0)-Ga,Xa=(((uo=S.current)===null||uo===void 0?void 0:uo.offsetHeight)||0)-qa;Q(Ya),le(Xa);var Ja=(fo=x.current)===null||fo===void 0?void 0:fo.className.includes(an);ze(Ya-(Ja?0:Vd)),ue(Xa-(Ja?0:Ud)),Sn(function(){var Za=new Map;return o.forEach(function(Gd){var Qa=Gd.key,sr=k(Qa).current;sr&&Za.set(Qa,{width:sr.offsetWidth,height:sr.offsetHeight,left:sr.offsetLeft,top:sr.offsetTop})}),Za})}),tr=o.slice(0,oo),so=o.slice(ao+1),Ur=[].concat(mt(tr),mt(so)),lo=u.exports.useState(),nr=U(lo,2),Mn=nr[0],co=nr[1],Ot=st.get(d),Gr=u.exports.useRef();function rr(){Ce.cancel(Gr.current)}u.exports.useEffect(function(){var X={};return Ot&&(O?(f?X.right=Ot.right:X.left=Ot.left,X.width=Ot.width):(X.top=Ot.top,X.height=Ot.height)),rr(),Gr.current=Ce(function(){co(X)}),rr},[Ot,O,f]),u.exports.useEffect(function(){Je()},[d,Ot,st,O]),u.exports.useEffect(function(){Dn()},[f,g,d,o.map(function(X){return X.key}).join("_")]);var qr=!!Ur.length,un="".concat(i,"-nav-wrap"),ir,or,Yr,xe;return O?f?(or=R>0,ir=R+ce<K):(ir=R<0,or=-R+ce<K):(Yr=M<0,xe=-M+$e<J),u.exports.createElement("div",{ref:e,role:"tablist",className:fe("".concat(i,"-nav"),a),style:s,onKeyDown:function(){he()}},u.exports.createElement(Jc,{position:"left",extra:h,prefixCls:i}),u.exports.createElement(gr,{onResize:Dn},u.exports.createElement("div",{className:fe(un,(n={},G(n,"".concat(un,"-ping-left"),ir),G(n,"".concat(un,"-ping-right"),or),G(n,"".concat(un,"-ping-top"),Yr),G(n,"".concat(un,"-ping-bottom"),xe),n)),ref:y},u.exports.createElement(gr,{onResize:Dn},u.exports.createElement("div",{ref:S,className:"".concat(i,"-nav-list"),style:{transform:"translate(".concat(R,"px, ").concat(M,"px)"),transition:Mt?"none":void 0}},er,u.exports.createElement(Gc,{ref:I,prefixCls:i,locale:m,editable:v,style:$($({},er.length===0?void 0:En),{},{visibility:qr?"hidden":null})}),u.exports.createElement("div",{className:fe("".concat(i,"-ink-bar"),G({},"".concat(i,"-ink-bar-animated"),c.inkBar)),style:Mn}))))),u.exports.createElement(pg,Z({},t,{ref:x,prefixCls:i,tabs:Ur,className:!qr&&an})),u.exports.createElement(Jc,{position:"right",extra:h,prefixCls:i}))}var Zc=u.exports.forwardRef(gg);function bg(t){var e=t.id,n=t.activeKey,r=t.animated,i=t.tabPosition,o=t.rtl,a=t.destroyInactiveTabPane,s=u.exports.useContext(da),l=s.prefixCls,c=s.tabs,d=r.tabPane,f=c.findIndex(function(h){return h.key===n});return u.exports.createElement("div",{className:fe("".concat(l,"-content-holder"))},u.exports.createElement("div",{className:fe("".concat(l,"-content"),"".concat(l,"-content-").concat(i),G({},"".concat(l,"-content-animated"),d)),style:f&&d?G({},o?"marginRight":"marginLeft","-".concat(f,"00%")):null},c.map(function(h){return u.exports.cloneElement(h.node,{key:h.key,prefixCls:l,tabKey:h.key,id:e,animated:d,active:h.key===n,destroyInactiveTabPane:a})})))}function yg(t){var e=t.prefixCls,n=t.forceRender,r=t.className,i=t.style,o=t.id,a=t.active,s=t.animated,l=t.destroyInactiveTabPane,c=t.tabKey,d=t.children,f=u.exports.useState(n),h=U(f,2),v=h[0],m=h[1];u.exports.useEffect(function(){a?m(!0):l&&m(!1)},[a,l]);var b={};return a||(s?(b.visibility="hidden",b.height=0,b.overflowY="hidden"):b.display="none"),u.exports.createElement("div",{id:o&&"".concat(o,"-panel-").concat(c),role:"tabpanel",tabIndex:a?0:-1,"aria-labelledby":o&&"".concat(o,"-tab-").concat(c),"aria-hidden":!a,style:$($({},b),i),className:fe("".concat(e,"-tabpane"),a&&"".concat(e,"-tabpane-active"),r)},(a||v||n)&&d)}var wg=["id","prefixCls","className","children","direction","activeKey","defaultActiveKey","editable","animated","tabPosition","tabBarGutter","tabBarStyle","tabBarExtraContent","locale","moreIcon","moreTransitionName","destroyInactiveTabPane","renderTabBar","onChange","onTabClick","onTabScroll"],Qc=0;function xg(t){return Rn(t).map(function(e){if(u.exports.isValidElement(e)){var n=e.key!==void 0?String(e.key):void 0;return $($({key:n},e.props),{},{node:e})}return null}).filter(function(e){return e})}function Cg(t,e){var n,r=t.id,i=t.prefixCls,o=i===void 0?"rc-tabs":i,a=t.className,s=t.children,l=t.direction,c=t.activeKey,d=t.defaultActiveKey,f=t.editable,h=t.animated,v=h===void 0?{inkBar:!0,tabPane:!1}:h,m=t.tabPosition,b=m===void 0?"top":m,g=t.tabBarGutter,w=t.tabBarStyle,D=t.tabBarExtraContent,E=t.locale,y=t.moreIcon,S=t.moreTransitionName,x=t.destroyInactiveTabPane,I=t.renderTabBar,_=t.onChange,F=t.onTabClick,k=t.onTabScroll,P=Oe(t,wg),O=xg(s),j=l==="rtl",N;v===!1?N={inkBar:!1,tabPane:!1}:v===!0?N={inkBar:!0,tabPane:!0}:N=$({inkBar:!0,tabPane:!1},Zt(v)==="object"?v:{});var R=u.exports.useState(!1),V=U(R,2),T=V[0],C=V[1];u.exports.useEffect(function(){C(vl())},[]);var M=Nn(function(){var ue;return(ue=O[0])===null||ue===void 0?void 0:ue.key},{value:c,defaultValue:d}),A=U(M,2),W=A[0],L=A[1],K=u.exports.useState(function(){return O.findIndex(function(ue){return ue.key===W})}),Q=U(K,2),z=Q[0],q=Q[1];u.exports.useEffect(function(){var ue=O.findIndex(function(se){return se.key===W});if(ue===-1){var je;ue=Math.max(0,Math.min(z,O.length-1)),L((je=O[ue])===null||je===void 0?void 0:je.key)}q(ue)},[O.map(function(ue){return ue.key}).join("_"),W,z]);var J=Nn(null,{value:r}),le=U(J,2),ve=le[0],me=le[1],be=b;T&&!["left","right"].includes(b)&&(be="top"),u.exports.useEffect(function(){r||(me("rc-tabs-".concat(Qc)),Qc+=1)},[]);function ze(ue,je){F==null||F(ue,je),L(ue),_==null||_(ue)}var Fe={id:ve,activeKey:W,animated:N,tabPosition:be,rtl:j,mobile:T},tt,Ne=$($({},Fe),{},{editable:f,locale:E,moreIcon:y,moreTransitionName:S,tabBarGutter:g,onTabClick:ze,onTabScroll:k,extra:D,style:w,panes:s});return I?tt=I(Ne,Zc):tt=u.exports.createElement(Zc,Ne),u.exports.createElement(da.Provider,{value:{tabs:O,prefixCls:o}},u.exports.createElement("div",Z({ref:e,id:r,className:fe(o,"".concat(o,"-").concat(be),(n={},G(n,"".concat(o,"-mobile"),T),G(n,"".concat(o,"-editable"),f),G(n,"".concat(o,"-rtl"),j),n),a)},P),tt,u.exports.createElement(bg,Z({destroyInactiveTabPane:x},Fe,{animated:N}))))}var eu=u.exports.forwardRef(Cg);eu.TabPane=yg;var Sg=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,i){r.__proto__=i}||function(r,i){for(var o in i)i.hasOwnProperty(o)&&(r[o]=i[o])},t(e,n)};return function(e,n){t(e,n);function r(){this.constructor=e}e.prototype=n===null?Object.create(n):(r.prototype=n.prototype,new r)}}(),tu=u.exports.createContext(null),Eg=function(t){Sg(e,t);function e(){return t!==null&&t.apply(this,arguments)||this}return e.prototype.render=function(){return u.exports.createElement(tu.Provider,{value:this.props.store},this.props.children)},e}(u.exports.Component),Dg=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,i){r.__proto__=i}||function(r,i){for(var o in i)i.hasOwnProperty(o)&&(r[o]=i[o])},t(e,n)};return function(e,n){t(e,n);function r(){this.constructor=e}e.prototype=n===null?Object.create(n):(r.prototype=n.prototype,new r)}}(),vn=function(){return vn=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++){e=arguments[n];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])}return t},vn.apply(this,arguments)};function Mg(t){return t.displayName||t.name||"Component"}var Og=function(){return{}};function fa(t,e){e===void 0&&(e={});var n=!!t,r=t||Og;return function(o){var a=function(l){Dg(c,l);function c(d,f){var h=l.call(this,d,f)||this;return h.unsubscribe=null,h.handleChange=function(){if(!!h.unsubscribe){var v=r(h.store.getState(),h.props);h.setState({subscribed:v})}},h.store=h.context,h.state={subscribed:r(h.store.getState(),d),store:h.store,props:d},h}return c.getDerivedStateFromProps=function(d,f){return t&&t.length===2&&d!==f.props?{subscribed:r(f.store.getState(),d),props:d}:{props:d}},c.prototype.componentDidMount=function(){this.trySubscribe()},c.prototype.componentWillUnmount=function(){this.tryUnsubscribe()},c.prototype.shouldComponentUpdate=function(d,f){return!lr(this.props,d)||!lr(this.state.subscribed,f.subscribed)},c.prototype.trySubscribe=function(){n&&(this.unsubscribe=this.store.subscribe(this.handleChange),this.handleChange())},c.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null)},c.prototype.render=function(){var d=vn(vn(vn({},this.props),this.state.subscribed),{store:this.store});return u.exports.createElement(o,vn({},d,{ref:this.props.miniStoreForwardedRef}))},c.displayName="Connect("+Mg(o)+")",c.contextType=tu,c}(u.exports.Component);if(e.forwardRef){var s=u.exports.forwardRef(function(l,c){return u.exports.createElement(a,vn({},l,{miniStoreForwardedRef:c}))});return ts(s,o)}return ts(a,o)}}var zi=function(){return zi=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++){e=arguments[n];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])}return t},zi.apply(this,arguments)};function Tg(t){var e=t,n=[];function r(a){e=zi(zi({},e),a);for(var s=0;s<n.length;s++)n[s]()}function i(){return e}function o(a){return n.push(a),function(){var l=n.indexOf(a);n.splice(l,1)}}return{setState:r,getState:i,subscribe:o}}function Pg(){var t=[].slice.call(arguments,0);return t.length===1?t[0]:function(){for(var n=0;n<t.length;n++)t[n]&&t[n].apply&&t[n].apply(this,arguments)}}var pa=/iPhone/i,nu=/iPod/i,ru=/iPad/i,ha=/\bAndroid(?:.+)Mobile\b/i,iu=/Android/i,Kn=/\bAndroid(?:.+)SD4930UR\b/i,Fi=/\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,Ut=/Windows Phone/i,ou=/\bWindows(?:.+)ARM\b/i,au=/BlackBerry/i,su=/BB10/i,lu=/Opera Mini/i,cu=/\b(CriOS|Chrome)(?:.+)Mobile/i,uu=/Mobile(?:.+)Firefox\b/i;function ie(t,e){return t.test(e)}function du(t){var e=t||(typeof navigator!="undefined"?navigator.userAgent:""),n=(e||"").split("[FBAN");if(typeof n[1]!="undefined"){var r=n,i=U(r,1);e=i[0]}if(n=e.split("Twitter"),typeof n[1]!="undefined"){var o=n,a=U(o,1);e=a[0]}var s={apple:{phone:ie(pa,e)&&!ie(Ut,e),ipod:ie(nu,e),tablet:!ie(pa,e)&&ie(ru,e)&&!ie(Ut,e),device:(ie(pa,e)||ie(nu,e)||ie(ru,e))&&!ie(Ut,e)},amazon:{phone:ie(Kn,e),tablet:!ie(Kn,e)&&ie(Fi,e),device:ie(Kn,e)||ie(Fi,e)},android:{phone:!ie(Ut,e)&&ie(Kn,e)||!ie(Ut,e)&&ie(ha,e),tablet:!ie(Ut,e)&&!ie(Kn,e)&&!ie(ha,e)&&(ie(Fi,e)||ie(iu,e)),device:!ie(Ut,e)&&(ie(Kn,e)||ie(Fi,e)||ie(ha,e)||ie(iu,e))||ie(/\bokhttp\b/i,e)},windows:{phone:ie(Ut,e),tablet:ie(ou,e),device:ie(Ut,e)||ie(ou,e)},other:{blackberry:ie(au,e),blackberry10:ie(su,e),opera:ie(lu,e),firefox:ie(uu,e),chrome:ie(cu,e),device:ie(au,e)||ie(su,e)||ie(lu,e)||ie(uu,e)||ie(cu,e)},any:null,phone:null,tablet:null};return s.any=s.apple.device||s.android.device||s.windows.device||s.other.device,s.phone=s.apple.phone||s.android.phone||s.windows.phone,s.tablet=s.apple.tablet||s.android.tablet||s.windows.tablet,s}var _g=$($({},du()),{},{isMobile:du});function Ve(){}function va(t,e,n){var r=e||"";return t.key||"".concat(r,"item_").concat(n)}function fu(t){return"".concat(t,"-menu-")}function pu(t,e){var n=-1;u.exports.Children.forEach(t,function(r){n+=1,r&&r.type&&r.type.isMenuItemGroup?u.exports.Children.forEach(r.props.children,function(i){n+=1,e(i,n)}):e(r,n)})}function hu(t,e,n){!t||n.find||u.exports.Children.forEach(t,function(r){if(r){var i=r.type;if(!i||!(i.isSubMenu||i.isMenuItem||i.isMenuItemGroup))return;e.indexOf(r.key)!==-1?n.find=!0:r.props.children&&hu(r.props.children,e,n)}})}var Bi=["defaultSelectedKeys","selectedKeys","defaultOpenKeys","openKeys","mode","getPopupContainer","onSelect","onDeselect","onDestroy","openTransitionName","openAnimation","subMenuOpenDelay","subMenuCloseDelay","forceSubMenuRender","triggerSubMenuAction","level","selectable","multiple","onOpenChange","visible","focusable","defaultActiveFirst","prefixCls","inlineIndent","parentMenu","title","rootPrefixCls","eventKey","active","onItemHover","onTitleMouseEnter","onTitleMouseLeave","onTitleClick","popupAlign","popupOffset","isOpen","renderMenuItem","manualRef","subMenuKey","disabled","index","isSelected","store","activeKey","builtinPlacements","overflowedIndicator","motion","attribute","value","popupClassName","inlineCollapsed","menu","theme","itemIcon","expandIcon"],ma=function(e){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,r=e&&typeof e.getBoundingClientRect=="function"&&e.getBoundingClientRect().width;if(r){if(n){var i=getComputedStyle(e),o=i.marginLeft,a=i.marginRight;r+=+o.replace("px","")+ +a.replace("px","")}r=+r.toFixed(6)}return r||0},ji=function(e,n,r){e&&Zt(e.style)==="object"&&(e.style[n]=r)},Ig=function(){return _g.any},en={adjustX:1,adjustY:1},kg={topLeft:{points:["bl","tl"],overflow:en,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:en,offset:[0,7]},leftTop:{points:["tr","tl"],overflow:en,offset:[-4,0]},rightTop:{points:["tl","tr"],overflow:en,offset:[4,0]}},Rg={topLeft:{points:["bl","tl"],overflow:en,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:en,offset:[0,7]},rightTop:{points:["tr","tl"],overflow:en,offset:[-4,0]},leftTop:{points:["tl","tr"],overflow:en,offset:[4,0]}},vu=0,Ng={horizontal:"bottomLeft",vertical:"rightTop","vertical-left":"rightTop","vertical-right":"leftTop"},Tr=function(e,n,r){var i=fu(n),o=e.getState();e.setState({defaultActiveFirst:$($({},o.defaultActiveFirst),{},G({},i,r))})},mu=function(t){Ft(n,t);var e=Wt(n);function n(r){var i;Bt(this,n),i=e.call(this,r),i.onDestroy=function(d){i.props.onDestroy(d)},i.onKeyDown=function(d){var f=d.keyCode,h=i.menuInstance,v=i.props.store,m=i.getVisible();if(f===we.ENTER)return i.onTitleClick(d),Tr(v,i.props.eventKey,!0),!0;if(f===we.RIGHT)return m?h.onKeyDown(d):(i.triggerOpenChange(!0),Tr(v,i.props.eventKey,!0)),!0;if(f===we.LEFT){var b;if(m)b=h.onKeyDown(d);else return;return b||(i.triggerOpenChange(!1),b=!0),b}if(m&&(f===we.UP||f===we.DOWN))return h.onKeyDown(d)},i.onOpenChange=function(d){i.props.onOpenChange(d)},i.onPopupVisibleChange=function(d){i.triggerOpenChange(d,d?"mouseenter":"mouseleave")},i.onMouseEnter=function(d){var f=i.props,h=f.eventKey,v=f.onMouseEnter,m=f.store;Tr(m,i.props.eventKey,!1),v({key:h,domEvent:d})},i.onMouseLeave=function(d){var f=i.props,h=f.parentMenu,v=f.eventKey,m=f.onMouseLeave;h.subMenuInstance=Ae(i),m({key:v,domEvent:d})},i.onTitleMouseEnter=function(d){var f=i.props,h=f.eventKey,v=f.onItemHover,m=f.onTitleMouseEnter;v({key:h,hover:!0}),m({key:h,domEvent:d})},i.onTitleMouseLeave=function(d){var f=i.props,h=f.parentMenu,v=f.eventKey,m=f.onItemHover,b=f.onTitleMouseLeave;h.subMenuInstance=Ae(i),m({key:v,hover:!1}),b({key:v,domEvent:d})},i.onTitleClick=function(d){var f=Ae(i),h=f.props;h.onTitleClick({key:h.eventKey,domEvent:d}),h.triggerSubMenuAction!=="hover"&&(i.triggerOpenChange(!i.getVisible(),"click"),Tr(h.store,i.props.eventKey,!1))},i.onSubMenuClick=function(d){typeof i.props.onClick=="function"&&i.props.onClick(i.addKeyPath(d))},i.onSelect=function(d){i.props.onSelect(d)},i.onDeselect=function(d){i.props.onDeselect(d)},i.getPrefixCls=function(){return"".concat(i.props.rootPrefixCls,"-submenu")},i.getActiveClassName=function(){return"".concat(i.getPrefixCls(),"-active")},i.getDisabledClassName=function(){return"".concat(i.getPrefixCls(),"-disabled")},i.getSelectedClassName=function(){return"".concat(i.getPrefixCls(),"-selected")},i.getOpenClassName=function(){return"".concat(i.props.rootPrefixCls,"-submenu-open")},i.getVisible=function(){return i.state.isOpen},i.getMode=function(){return i.state.mode},i.saveMenuInstance=function(d){i.menuInstance=d},i.addKeyPath=function(d){return $($({},d),{},{keyPath:(d.keyPath||[]).concat(i.props.eventKey)})},i.triggerOpenChange=function(d,f){var h=i.props.eventKey,v=function(){i.onOpenChange({key:h,item:Ae(i),trigger:f,open:d})};f==="mouseenter"?i.mouseenterTimeout=setTimeout(function(){v()},0):v()},i.isChildrenSelected=function(){var d={find:!1};return hu(i.props.children,i.props.selectedKeys,d),d.find},i.isInlineMode=function(){return i.getMode()==="inline"},i.adjustWidth=function(){if(!(!i.subMenuTitle||!i.menuInstance)){var d=os.exports.findDOMNode(i.menuInstance);d.offsetWidth>=i.subMenuTitle.offsetWidth||(d.style.minWidth="".concat(i.subMenuTitle.offsetWidth,"px"))}},i.saveSubMenuTitle=function(d){i.subMenuTitle=d},i.getBaseProps=function(){var d=Ae(i),f=d.props,h=i.getMode();return{mode:h==="horizontal"?"vertical":h,visible:i.getVisible(),level:f.level+1,inlineIndent:f.inlineIndent,focusable:!1,onClick:i.onSubMenuClick,onSelect:i.onSelect,onDeselect:i.onDeselect,onDestroy:i.onDestroy,selectedKeys:f.selectedKeys,eventKey:"".concat(f.eventKey,"-menu-"),openKeys:f.openKeys,motion:f.motion,onOpenChange:i.onOpenChange,subMenuOpenDelay:f.subMenuOpenDelay,parentMenu:Ae(i),subMenuCloseDelay:f.subMenuCloseDelay,forceSubMenuRender:f.forceSubMenuRender,triggerSubMenuAction:f.triggerSubMenuAction,builtinPlacements:f.builtinPlacements,defaultActiveFirst:f.store.getState().defaultActiveFirst[fu(f.eventKey)],multiple:f.multiple,prefixCls:f.rootPrefixCls,id:i.internalMenuId,manualRef:i.saveMenuInstance,itemIcon:f.itemIcon,expandIcon:f.expandIcon,direction:f.direction}},i.getMotion=function(d,f){var h=Ae(i),v=h.haveRendered,m=i.props,b=m.motion,g=m.rootPrefixCls,w=$($({},b),{},{leavedClassName:"".concat(g,"-hidden"),removeOnLeave:!1,motionAppear:v||!f||d!=="inline"});return w};var o=r.store,a=r.eventKey,s=o.getState(),l=s.defaultActiveFirst;i.isRootMenu=!1;var c=!1;return l&&(c=l[a]),Tr(o,a,c),i.state={mode:r.mode,isOpen:r.isOpen},i}return jt(n,[{key:"componentDidMount",value:function(){this.componentDidUpdate()}},{key:"componentDidUpdate",value:function(){var i=this,o=this.props,a=o.mode,s=o.parentMenu,l=o.manualRef,c=o.isOpen,d=function(){i.setState({mode:a,isOpen:c})},f=c!==this.state.isOpen,h=a!==this.state.mode;(h||f)&&(Ce.cancel(this.updateStateRaf),h?this.updateStateRaf=Ce(d):d()),l&&l(this),!(a!=="horizontal"||!(s==null?void 0:s.isRootMenu)||!c)&&(this.minWidthTimeout=setTimeout(function(){return i.adjustWidth()},0))}},{key:"componentWillUnmount",value:function(){var i=this.props,o=i.onDestroy,a=i.eventKey;o&&o(a),this.minWidthTimeout&&clearTimeout(this.minWidthTimeout),this.mouseenterTimeout&&clearTimeout(this.mouseenterTimeout),Ce.cancel(this.updateStateRaf)}},{key:"renderPopupMenu",value:function(i,o){var a=this.getBaseProps();return u.exports.createElement(xu,Z({},a,{id:this.internalMenuId,className:i,style:o}),this.props.children)}},{key:"renderChildren",value:function(){var i=this,o=this.getBaseProps(),a=o.mode,s=o.visible,l=o.forceSubMenuRender,c=o.direction,d=this.getMotion(a,s);if(this.haveRendered=!0,this.haveOpened=this.haveOpened||s||l,!this.haveOpened)return u.exports.createElement("div",null);var f=fe("".concat(o.prefixCls,"-sub"),G({},"".concat(o.prefixCls,"-rtl"),c==="rtl"));return this.isInlineMode()?u.exports.createElement(Cr,Z({visible:o.visible,forceRender:l},d),function(h){var v=h.className,m=h.style,b=fe(f,v);return i.renderPopupMenu(b,m)}):this.renderPopupMenu(f)}},{key:"render",value:function(){var i,o,a,s=$({},this.props),l=this.getVisible(),c=this.getPrefixCls(),d=this.isInlineMode(),f=this.getMode(),h=fe(c,"".concat(c,"-").concat(f),(i={},G(i,s.className,!!s.className),G(i,this.getOpenClassName(),l),G(i,this.getActiveClassName(),s.active||l&&!d),G(i,this.getDisabledClassName(),s.disabled),G(i,this.getSelectedClassName(),this.isChildrenSelected()),i));this.internalMenuId||(s.eventKey?this.internalMenuId="".concat(s.eventKey,"$Menu"):(vu+=1,this.internalMenuId="$__$".concat(vu,"$Menu")));var v={},m={},b={};s.disabled||(v={onMouseLeave:this.onMouseLeave,onMouseEnter:this.onMouseEnter},m={onClick:this.onTitleClick},b={onMouseEnter:this.onTitleMouseEnter,onMouseLeave:this.onTitleMouseLeave});var g={},w=s.direction,D=w==="rtl";d&&(D?g.paddingRight=s.inlineIndent*s.level:g.paddingLeft=s.inlineIndent*s.level);var E={};this.getVisible()&&(E={"aria-owns":this.internalMenuId});var y=null;f!=="horizontal"&&(y=this.props.expandIcon,typeof this.props.expandIcon=="function"&&(y=u.exports.createElement(this.props.expandIcon,$({},this.props))));var S=u.exports.createElement("div",Z({ref:this.saveSubMenuTitle,style:g,className:"".concat(c,"-title"),role:"button"},b,m,{"aria-expanded":l},E,{"aria-haspopup":"true",title:typeof s.title=="string"?s.title:void 0}),s.title,y||u.exports.createElement("i",{className:"".concat(c,"-arrow")})),x=this.renderChildren(),I=((o=s.parentMenu)===null||o===void 0?void 0:o.isRootMenu)?s.parentMenu.props.getPopupContainer:function(A){return A.parentNode},_=Ng[f],F=s.popupOffset?{offset:s.popupOffset}:{},k=fe((a={},G(a,s.popupClassName,s.popupClassName&&!d),G(a,"".concat(c,"-rtl"),D),a)),P=s.disabled,O=s.triggerSubMenuAction,j=s.subMenuOpenDelay,N=s.forceSubMenuRender,R=s.subMenuCloseDelay,V=s.builtinPlacements;Bi.forEach(function(A){return delete s[A]}),delete s.onClick;var T=D?$($({},Rg),V):$($({},kg),V);delete s.direction;var C=this.getBaseProps(),M=d?null:this.getMotion(C.mode,C.visible);return u.exports.createElement("li",Z({},s,v,{className:h,role:"menuitem"}),u.exports.createElement(oa,{prefixCls:c,popupClassName:fe("".concat(c,"-popup"),k),getPopupContainer:I,builtinPlacements:T,popupPlacement:_,popupVisible:d?!1:l,popupAlign:F,popup:d?null:x,action:P||d?[]:[O],mouseEnterDelay:j,mouseLeaveDelay:R,onPopupVisibleChange:this.onPopupVisibleChange,forceRender:N,popupMotion:M},S),d?x:null)}}]),n}(u.exports.Component);mu.defaultProps={onMouseEnter:Ve,onMouseLeave:Ve,onTitleMouseEnter:Ve,onTitleMouseLeave:Ve,onTitleClick:Ve,manualRef:Ve,mode:"vertical",title:""};var gu=fa(function(t,e){var n=t.openKeys,r=t.activeKey,i=t.selectedKeys,o=e.eventKey,a=e.subMenuKey;return{isOpen:n.indexOf(o)>-1,active:r[a]===o,selectedKeys:i}})(mu);gu.isSubMenu=!0;var bu="menuitem-overflowed",Ag=.5,yu=function(t){Ft(n,t);var e=Wt(n);function n(){var r;return Bt(this,n),r=e.apply(this,arguments),r.resizeObserver=null,r.mutationObserver=null,r.originalTotalWidth=0,r.overflowedItems=[],r.menuItemSizes=[],r.cancelFrameId=null,r.state={lastVisibleIndex:void 0},r.childRef=u.exports.createRef(),r.getMenuItemNodes=function(){var i=r.props.prefixCls,o=r.childRef.current;return o?[].slice.call(o.children).filter(function(a){return a.className.split(" ").indexOf("".concat(i,"-overflowed-submenu"))<0}):[]},r.getOverflowedSubMenuItem=function(i,o,a){var s=r.props,l=s.overflowedIndicator,c=s.level,d=s.mode,f=s.prefixCls,h=s.theme;if(c!==1||d!=="horizontal")return null;var v=r.props.children[0],m=v.props;m.children,m.title;var b=m.style,g=Oe(m,["children","title","style"]),w=$({},b),D="".concat(i,"-overflowed-indicator"),E="".concat(i,"-overflowed-indicator");o.length===0&&a!==!0?w=$($({},w),{},{display:"none"}):a&&(w=$($({},w),{},{visibility:"hidden",position:"absolute"}),D="".concat(D,"-placeholder"),E="".concat(E,"-placeholder"));var y=h?"".concat(f,"-").concat(h):"",S={};return Bi.forEach(function(x){g[x]!==void 0&&(S[x]=g[x])}),u.exports.createElement(gu,Z({title:l,className:"".concat(f,"-overflowed-submenu"),popupClassName:y},S,{key:D,eventKey:E,disabled:!1,style:w}),o)},r.setChildrenWidthAndResize=function(){if(r.props.mode==="horizontal"){var i=r.childRef.current;if(!!i){var o=i.children;if(!(!o||o.length===0)){var a=i.children[o.length-1];ji(a,"display","inline-block");var s=r.getMenuItemNodes(),l=s.filter(function(c){return c.className.split(" ").indexOf(bu)>=0});l.forEach(function(c){ji(c,"display","inline-block")}),r.menuItemSizes=s.map(function(c){return ma(c,!0)}),l.forEach(function(c){ji(c,"display","none")}),r.overflowedIndicatorWidth=ma(i.children[i.children.length-1],!0),r.originalTotalWidth=r.menuItemSizes.reduce(function(c,d){return c+d},0),r.handleResize(),ji(a,"display","none")}}}},r.handleResize=function(){if(r.props.mode==="horizontal"){var i=r.childRef.current;if(!!i){var o=ma(i);r.overflowedItems=[];var a=0,s;r.originalTotalWidth>o+Ag&&(s=-1,r.menuItemSizes.forEach(function(l){a+=l,a+r.overflowedIndicatorWidth<=o&&(s+=1)})),r.setState({lastVisibleIndex:s})}}},r}return jt(n,[{key:"componentDidMount",value:function(){var i=this;if(this.setChildrenWidthAndResize(),this.props.level===1&&this.props.mode==="horizontal"){var o=this.childRef.current;if(!o)return;this.resizeObserver=new zo(function(a){a.forEach(function(){var s=i.cancelFrameId;cancelAnimationFrame(s),i.cancelFrameId=requestAnimationFrame(i.setChildrenWidthAndResize)})}),[].slice.call(o.children).concat(o).forEach(function(a){i.resizeObserver.observe(a)}),typeof MutationObserver!="undefined"&&(this.mutationObserver=new MutationObserver(function(){i.resizeObserver.disconnect(),[].slice.call(o.children).concat(o).forEach(function(a){i.resizeObserver.observe(a)}),i.setChildrenWidthAndResize()}),this.mutationObserver.observe(o,{attributes:!1,childList:!0,subTree:!1}))}}},{key:"componentWillUnmount",value:function(){this.resizeObserver&&this.resizeObserver.disconnect(),this.mutationObserver&&this.mutationObserver.disconnect(),cancelAnimationFrame(this.cancelFrameId)}},{key:"renderChildren",value:function(i){var o=this,a=this.state.lastVisibleIndex;return(i||[]).reduce(function(s,l,c){var d=l;if(o.props.mode==="horizontal"){var f=o.getOverflowedSubMenuItem(l.props.eventKey,[]);a!==void 0&&o.props.className.indexOf("".concat(o.props.prefixCls,"-root"))!==-1&&(c>a&&(d=u.exports.cloneElement(l,{style:{display:"none"},eventKey:"".concat(l.props.eventKey,"-hidden"),className:"".concat(bu)})),c===a+1&&(o.overflowedItems=i.slice(a+1).map(function(v){return u.exports.cloneElement(v,{key:v.props.eventKey,mode:"vertical-left"})}),f=o.getOverflowedSubMenuItem(l.props.eventKey,o.overflowedItems)));var h=[].concat(mt(s),[f,d]);return c===i.length-1&&h.push(o.getOverflowedSubMenuItem(l.props.eventKey,[],!0)),h}return[].concat(mt(s),[d])},[])}},{key:"render",value:function(){var i=this.props;i.visible,i.prefixCls,i.overflowedIndicator,i.mode,i.level;var o=i.tag,a=i.children;i.theme;var s=Oe(i,["visible","prefixCls","overflowedIndicator","mode","level","tag","children","theme"]),l=o;return u.exports.createElement(l,Z({ref:this.childRef},s),this.renderChildren(a))}}]),n}(u.exports.Component);yu.defaultProps={tag:"div",className:""};function Lg(t){return t.length?t.every(function(e){return!!e.props.disabled}):!0}function Wi(t,e,n){var r=t.getState();t.setState({activeKey:$($({},r.activeKey),{},G({},e,n))})}function Vn(t){return t.eventKey||"0-menu-"}function Hi(t,e){var n=e,r=t.children,i=t.eventKey;if(n){var o;if(pu(r,function(a,s){a&&a.props&&!a.props.disabled&&n===va(a,i,s)&&(o=!0)}),o)return n}return n=null,t.defaultActiveFirst&&pu(r,function(a,s){!n&&a&&!a.props.disabled&&(n=va(a,i,s))}),n}function zg(t){if(!!t){var e=this.instanceArray.indexOf(t);e!==-1?this.instanceArray[e]=t:this.instanceArray.push(t)}}var wu=function(t){Ft(n,t);var e=Wt(n);function n(r){var i;return Bt(this,n),i=e.call(this,r),i.onKeyDown=function(o,a){var s=o.keyCode,l;if(i.getFlatInstanceArray().forEach(function(d){d&&d.props.active&&d.onKeyDown&&(l=d.onKeyDown(o))}),l)return 1;var c=null;if((s===we.UP||s===we.DOWN)&&(c=i.step(s===we.UP?-1:1)),c)return o.preventDefault(),Wi(i.props.store,Vn(i.props),c.props.eventKey),typeof a=="function"&&a(c),1},i.onItemHover=function(o){var a=o.key,s=o.hover;Wi(i.props.store,Vn(i.props),s?a:null)},i.onDeselect=function(o){i.props.onDeselect(o)},i.onSelect=function(o){i.props.onSelect(o)},i.onClick=function(o){i.props.onClick(o)},i.onOpenChange=function(o){i.props.onOpenChange(o)},i.onDestroy=function(o){i.props.onDestroy(o)},i.getFlatInstanceArray=function(){return i.instanceArray},i.step=function(o){var a=i.getFlatInstanceArray(),s=i.props.store.getState().activeKey[Vn(i.props)],l=a.length;if(!l)return null;o<0&&(a=a.concat().reverse());var c=-1;if(a.every(function(v,m){return v&&v.props.eventKey===s?(c=m,!1):!0}),!(!i.props.defaultActiveFirst&&c!==-1&&Lg(a.slice(c,l-1)))){var d=(c+1)%l,f=d;do{var h=a[f];if(!h||h.props.disabled)f=(f+1)%l;else return h}while(f!==d);return null}},i.renderCommonMenuItem=function(o,a,s){var l=i.props.store.getState(),c=Ae(i),d=c.props,f=va(o,d.eventKey,a),h=o.props;if(!h||typeof o.type=="string")return o;var v=f===l.activeKey,m=$($({mode:h.mode||d.mode,level:d.level,inlineIndent:d.inlineIndent,renderMenuItem:i.renderMenuItem,rootPrefixCls:d.prefixCls,index:a,parentMenu:d.parentMenu,manualRef:h.disabled?void 0:Pg(o.ref,zg.bind(Ae(i))),eventKey:f,active:!h.disabled&&v,multiple:d.multiple,onClick:function(g){(h.onClick||Ve)(g),i.onClick(g)},onItemHover:i.onItemHover,motion:d.motion,subMenuOpenDelay:d.subMenuOpenDelay,subMenuCloseDelay:d.subMenuCloseDelay,forceSubMenuRender:d.forceSubMenuRender,onOpenChange:i.onOpenChange,onDeselect:i.onDeselect,onSelect:i.onSelect,builtinPlacements:d.builtinPlacements,itemIcon:h.itemIcon||i.props.itemIcon,expandIcon:h.expandIcon||i.props.expandIcon},s),{},{direction:d.direction});return(d.mode==="inline"||Ig())&&(m.triggerSubMenuAction="click"),u.exports.cloneElement(o,$($({},m),{},{key:f||a}))},i.renderMenuItem=function(o,a,s){if(!o)return null;var l=i.props.store.getState(),c={openKeys:l.openKeys,selectedKeys:l.selectedKeys,triggerSubMenuAction:i.props.triggerSubMenuAction,subMenuKey:s};return i.renderCommonMenuItem(o,a,c)},r.store.setState({activeKey:$($({},r.store.getState().activeKey),{},G({},r.eventKey,Hi(r,r.activeKey)))}),i.instanceArray=[],i}return jt(n,[{key:"componentDidMount",value:function(){this.props.manualRef&&this.props.manualRef(this)}},{key:"shouldComponentUpdate",value:function(i){return this.props.visible||i.visible||this.props.className!==i.className||!lr(this.props.style,i.style)}},{key:"componentDidUpdate",value:function(i){var o=this.props,a="activeKey"in o?o.activeKey:o.store.getState().activeKey[Vn(o)],s=Hi(o,a);if(s!==a)Wi(o.store,Vn(o),s);else if("activeKey"in i){var l=Hi(i,i.activeKey);s!==l&&Wi(o.store,Vn(o),s)}}},{key:"render",value:function(){var i=this,o=Z({},this.props);this.instanceArray=[];var a=fe(o.prefixCls,o.className,"".concat(o.prefixCls,"-").concat(o.mode)),s={className:a,role:o.role||"menu"};o.id&&(s.id=o.id),o.focusable&&(s.tabIndex=0,s.onKeyDown=this.onKeyDown);var l=o.prefixCls,c=o.eventKey,d=o.visible,f=o.level,h=o.mode,v=o.overflowedIndicator,m=o.theme;return Bi.forEach(function(b){return delete o[b]}),delete o.onClick,u.exports.createElement(yu,Z({},o,{prefixCls:l,mode:h,tag:"ul",level:f,theme:m,visible:d,overflowedIndicator:v},s),Rn(o.children).map(function(b,g){return i.renderMenuItem(b,g,c||"0-menu-")}))}}]),n}(u.exports.Component);wu.defaultProps={prefixCls:"rc-menu",className:"",mode:"vertical",level:1,inlineIndent:24,visible:!0,focusable:!0,style:{},manualRef:Ve};var xu=fa()(wu);function Fg(t,e,n){var r=t.prefixCls,i=t.motion,o=t.defaultMotions,a=o===void 0?{}:o,s=t.openAnimation,l=t.openTransitionName,c=e.switchingModeFromInline;if(i)return i;if(Zt(s)==="object"&&s)cr(!1,"Object type of `openAnimation` is removed. Please use `motion` instead.");else if(typeof s=="string")return{motionName:"".concat(r,"-open-").concat(s)};if(l)return{motionName:l};var d=a[n];return d||(c?null:a.other)}var Cu=function(t){Ft(n,t);var e=Wt(n);function n(r){var i;Bt(this,n),i=e.call(this,r),i.onSelect=function(s){var l=Ae(i),c=l.props;if(c.selectable){var d=i.store.getState(),f=d.selectedKeys,h=s.key;c.multiple?f=f.concat([h]):f=[h],"selectedKeys"in c||i.store.setState({selectedKeys:f}),c.onSelect($($({},s),{},{selectedKeys:f}))}},i.onClick=function(s){var l=i.getRealMenuMode(),c=Ae(i),d=c.store,f=c.props.onOpenChange;l!=="inline"&&!("openKeys"in i.props)&&(d.setState({openKeys:[]}),f([])),i.props.onClick(s)},i.onKeyDown=function(s,l){i.innerMenu.getWrappedInstance().onKeyDown(s,l)},i.onOpenChange=function(s){var l=Ae(i),c=l.props,d=i.store.getState().openKeys.concat(),f=!1,h=function(m){var b=!1;if(m.open)b=d.indexOf(m.key)===-1,b&&d.push(m.key);else{var g=d.indexOf(m.key);b=g!==-1,b&&d.splice(g,1)}f=f||b};Array.isArray(s)?s.forEach(h):h(s),f&&("openKeys"in i.props||i.store.setState({openKeys:d}),c.onOpenChange(d))},i.onDeselect=function(s){var l=Ae(i),c=l.props;if(c.selectable){var d=i.store.getState().selectedKeys.concat(),f=s.key,h=d.indexOf(f);h!==-1&&d.splice(h,1),"selectedKeys"in c||i.store.setState({selectedKeys:d}),c.onDeselect($($({},s),{},{selectedKeys:d}))}},i.onMouseEnter=function(s){i.restoreModeVerticalFromInline();var l=i.props.onMouseEnter;l&&l(s)},i.onTransitionEnd=function(s){var l=s.propertyName==="width"&&s.target===s.currentTarget,c=s.target.className,d=Object.prototype.toString.call(c)==="[object SVGAnimatedString]"?c.animVal:c,f=s.propertyName==="font-size"&&d.indexOf("anticon")>=0;(l||f)&&i.restoreModeVerticalFromInline()},i.setInnerMenu=function(s){i.innerMenu=s},i.isRootMenu=!0;var o=r.defaultSelectedKeys,a=r.defaultOpenKeys;return"selectedKeys"in r&&(o=r.selectedKeys||[]),"openKeys"in r&&(a=r.openKeys||[]),i.store=Tg({selectedKeys:o,openKeys:a,activeKey:{"0-menu-":Hi(r,r.activeKey)}}),i.state={switchingModeFromInline:!1,prevProps:r,inlineOpenKeys:[],store:i.store},i}return jt(n,[{key:"componentDidMount",value:function(){this.updateMiniStore(),this.updateMenuDisplay()}},{key:"componentDidUpdate",value:function(i){var o=this.props,a=o.siderCollapsed,s=o.inlineCollapsed,l=o.onOpenChange;(!i.inlineCollapsed&&s||!i.siderCollapsed&&a)&&l([]),this.updateMiniStore(),this.updateMenuDisplay()}},{key:"updateMenuDisplay",value:function(){var i=this.props.collapsedWidth,o=this.store,a=this.prevOpenKeys,s=this.getInlineCollapsed()&&(i===0||i==="0"||i==="0px");s?(this.prevOpenKeys=o.getState().openKeys.concat(),this.store.setState({openKeys:[]})):a&&(this.store.setState({openKeys:a}),this.prevOpenKeys=null)}},{key:"getRealMenuMode",value:function(){var i=this.props.mode,o=this.state.switchingModeFromInline,a=this.getInlineCollapsed();return o&&a?"inline":a?"vertical":i}},{key:"getInlineCollapsed",value:function(){var i=this.props,o=i.inlineCollapsed,a=i.siderCollapsed;return a!==void 0?a:o}},{key:"restoreModeVerticalFromInline",value:function(){var i=this.state.switchingModeFromInline;i&&this.setState({switchingModeFromInline:!1})}},{key:"updateMiniStore",value:function(){"selectedKeys"in this.props&&this.store.setState({selectedKeys:this.props.selectedKeys||[]}),"openKeys"in this.props&&this.store.setState({openKeys:this.props.openKeys||[]})}},{key:"render",value:function(){var i=$({},xi(this.props,["collapsedWidth","siderCollapsed","defaultMotions"])),o=this.getRealMenuMode();return i.className+=" ".concat(i.prefixCls,"-root"),i.direction==="rtl"&&(i.className+=" ".concat(i.prefixCls,"-rtl")),i=$($({},i),{},{mode:o,onClick:this.onClick,onOpenChange:this.onOpenChange,onDeselect:this.onDeselect,onSelect:this.onSelect,onMouseEnter:this.onMouseEnter,onTransitionEnd:this.onTransitionEnd,parentMenu:this,motion:Fg(this.props,this.state,o)}),delete i.openAnimation,delete i.openTransitionName,u.exports.createElement(Eg,{store:this.store},u.exports.createElement(xu,Z({},i,{ref:this.setInnerMenu}),this.props.children))}}],[{key:"getDerivedStateFromProps",value:function(i,o){var a=o.prevProps,s=o.store,l=s.getState(),c={},d={prevProps:i};return a.mode==="inline"&&i.mode!=="inline"&&(d.switchingModeFromInline=!0),"openKeys"in i?c.openKeys=i.openKeys||[]:((i.inlineCollapsed&&!a.inlineCollapsed||i.siderCollapsed&&!a.siderCollapsed)&&(d.switchingModeFromInline=!0,d.inlineOpenKeys=l.openKeys,c.openKeys=[]),(!i.inlineCollapsed&&a.inlineCollapsed||!i.siderCollapsed&&a.siderCollapsed)&&(c.openKeys=o.inlineOpenKeys,d.inlineOpenKeys=[])),Object.keys(c).length&&s.setState(c),d}}]),n}(u.exports.Component);Cu.defaultProps={selectable:!0,onClick:Ve,onSelect:Ve,onOpenChange:Ve,onDeselect:Ve,defaultSelectedKeys:[],defaultOpenKeys:[],subMenuOpenDelay:.1,subMenuCloseDelay:.1,triggerSubMenuAction:"hover",prefixCls:"rc-menu",className:"",mode:"vertical",style:{},builtinPlacements:{},overflowedIndicator:u.exports.createElement("span",null,"\xB7\xB7\xB7")};var ga=function(t){Ft(n,t);var e=Wt(n);function n(){var r;return Bt(this,n),r=e.apply(this,arguments),r.onKeyDown=function(i){var o=i.keyCode;if(o===we.ENTER)return r.onClick(i),!0},r.onMouseLeave=function(i){var o=r.props,a=o.eventKey,s=o.onItemHover,l=o.onMouseLeave;s({key:a,hover:!1}),l({key:a,domEvent:i})},r.onMouseEnter=function(i){var o=r.props,a=o.eventKey,s=o.onItemHover,l=o.onMouseEnter;s({key:a,hover:!0}),l({key:a,domEvent:i})},r.onClick=function(i){var o=r.props,a=o.eventKey,s=o.multiple,l=o.onClick,c=o.onSelect,d=o.onDeselect,f=o.isSelected,h={key:a,keyPath:[a],item:Ae(r),domEvent:i};l(h),s?f?d(h):c(h):f||c(h)},r.saveNode=function(i){r.node=i},r}return jt(n,[{key:"componentDidMount",value:function(){this.callRef()}},{key:"componentDidUpdate",value:function(){this.callRef()}},{key:"componentWillUnmount",value:function(){var i=this.props;i.onDestroy&&i.onDestroy(i.eventKey)}},{key:"getPrefixCls",value:function(){return"".concat(this.props.rootPrefixCls,"-item")}},{key:"getActiveClassName",value:function(){return"".concat(this.getPrefixCls(),"-active")}},{key:"getSelectedClassName",value:function(){return"".concat(this.getPrefixCls(),"-selected")}},{key:"getDisabledClassName",value:function(){return"".concat(this.getPrefixCls(),"-disabled")}},{key:"callRef",value:function(){this.props.manualRef&&this.props.manualRef(this)}},{key:"render",value:function(){var i,o=$({},this.props),a=fe(this.getPrefixCls(),o.className,(i={},G(i,this.getActiveClassName(),!o.disabled&&o.active),G(i,this.getSelectedClassName(),o.isSelected),G(i,this.getDisabledClassName(),o.disabled),i)),s=$($({},o.attribute),{},{title:typeof o.title=="string"?o.title:void 0,className:a,role:o.role||"menuitem","aria-disabled":o.disabled});o.role==="option"?s=$($({},s),{},{role:"option","aria-selected":o.isSelected}):(o.role===null||o.role==="none")&&(s.role="none");var l={onClick:o.disabled?null:this.onClick,onMouseLeave:o.disabled?null:this.onMouseLeave,onMouseEnter:o.disabled?null:this.onMouseEnter},c=$({},o.style);o.mode==="inline"&&(o.direction==="rtl"?c.paddingRight=o.inlineIndent*o.level:c.paddingLeft=o.inlineIndent*o.level),Bi.forEach(function(f){return delete o[f]}),delete o.direction;var d=this.props.itemIcon;return typeof this.props.itemIcon=="function"&&(d=u.exports.createElement(this.props.itemIcon,this.props)),u.exports.createElement("li",Z({},xi(o,["onClick","onMouseEnter","onMouseLeave","onSelect"]),s,l,{style:c,ref:this.saveNode}),o.children,d)}}]),n}(u.exports.Component);ga.isMenuItem=!0;ga.defaultProps={onSelect:Ve,onMouseEnter:Ve,onMouseLeave:Ve,manualRef:Ve};var Bg=fa(function(t,e){var n=t.activeKey,r=t.selectedKeys,i=e.eventKey,o=e.subMenuKey;return{active:n[o]===i,isSelected:Array.isArray(r)?r.indexOf(i)!==-1:r===i}})(ga);class Pe{constructor(e,n,r=!1){if(this.pageX=0,this.pageY=0,this.clientX=0,this.clientY=0,this.dx=0,this.dy=0,this.event=e,this.component=n,this._init=r,e){if(e.type.startsWith("touch")){let i;e.type==="touchend"?i=e.changedTouches[0]:i=e.touches[0],this.pageX=i.pageX,this.pageY=i.pageY,this.clientX=i.clientX,this.clientY=i.clientY}else"pageX"in e&&(this.pageX=e.pageX,this.pageY=e.pageY,this.clientX=e.clientX,this.clientY=e.clientY);this.dx=(this.pageX-n.baseX)*n.scaleX,this.dy=(this.pageY-n.baseY)*n.scaleY}}moved(){return Math.abs(this.dx)>=1||Math.abs(this.dy)>=1}startDrag(e,n){if(!this._init)throw new Error("startDrag can only be used in onDragStart callback");e===void 0&&(e=this.component.element),Wg(this,e,n),this.component.ownerDocument.body.classList.add("dock-dragging")}setData(e,n){if(!this._init)throw new Error("setData can only be used in onDragStart callback");Pr=n,_r=e}static getData(e,n){return n===Pr&&_r?_r[e]:null}get dragType(){return this.component.dragType}accept(e=""){this.acceptMessage=e,this.rejected=!1}reject(){this.rejected=!0}_onMove(){if(_r){let e=this.component.ownerDocument,n=e.elementFromPoint(this.clientX,this.clientY),r;for(;n&&n!==e.body;){if(Ir.has(n)){let i=Ir.get(n);if(i.onDragOverT&&(i.onDragOverT(this),this.acceptMessage!=null)){r=i;break}}n=n.parentElement}Eu(r,this)}Hg(this)}_onDragEnd(e=!1){Rt&&Rt.onDropT&&!e&&(Rt.onDropT(this),this.component.dragType==="right"&&(this.component.ownerDocument.addEventListener("contextmenu",Su,!0),setTimeout(()=>{this.component.ownerDocument.removeEventListener("contextmenu",Su,!0)},0))),$g(this),this.component.ownerDocument.body.classList.remove("dock-dragging")}}function Su(t){t.preventDefault(),t.stopPropagation()}let Pr,_r,ba,$i,Rt;function Eu(t,e){Rt!==t&&(Rt&&Rt.onDragLeaveT&&Rt.onDragLeaveT(e),Rt=t)}let Ir=new WeakMap;function kr(){return ba!=null}function Du(t,e){Ir.set(t,e)}function ya(t){Ir.get(t)===Rt&&(Rt=null),Ir.delete(t)}let Ue,Rr;function jg(t){Ue=t.createElement("div"),Rr=t.createElement("div"),Ue.className="dragging-layer",Ue.appendChild(document.createElement("div")),Ue.appendChild(Rr)}function Wg(t,e,n){ba=t,e&&(e.classList.add("dragging"),$i=e),jg(t.component.ownerDocument),t.component.ownerDocument.body.appendChild(Ue);let r=0,i=0;n===void 0&&(n=t.component.element),n&&"outerHTML"in n&&(r=n.offsetWidth,i=n.offsetHeight,n=n.outerHTML),n&&(Ue.firstElementChild.outerHTML=n,window.getComputedStyle(Ue.firstElementChild).backgroundColor==="rgba(0, 0, 0, 0)"&&(Ue.firstElementChild.style.backgroundColor=window.getComputedStyle(Ue).getPropertyValue("--default-background-color")),r&&(r>400&&(r=400),Ue.firstElementChild.style.width=`${r}px`),i&&(i>300&&(i=300),Ue.firstElementChild.style.height=`${i}px`));for(let o of Ki)o(Pr||!0)}function Hg(t){Ue.style.left=`${t.pageX}px`,Ue.style.top=`${t.pageY}px`,t.rejected?Rr.className="drag-accept-reject":t.acceptMessage?Rr.className=t.acceptMessage:Rr.className=""}function $g(t){$i&&($i.classList.remove("dragging"),$i=null),Ue&&(Ue.remove(),Ue=null),ba=null,Eu(null,t),Pr=null,_r=null;for(let e of Ki)e(null)}let Ki=new Set;function Kg(t){Ki.add(t)}function Vg(t){Ki.delete(t)}typeof window!="undefined"&&window.navigator&&window.navigator.platform&&/iP(ad|hone|od)/.test(window.navigator.platform)&&document.addEventListener("touchmove",t=>{t.touches.length===1&&document.body.classList.contains("dock-dragging")&&t.preventDefault()},{passive:!1});class Mu{constructor(e,n,r=!1){if(this.dx1=0,this.dy1=0,this.dx2=0,this.dy2=0,this.scale=1,this.rotate=0,this.dx=0,this.dy=0,this.event=e,this.component=n,this._init=r,e&&e.touches.length===2){let i=e.touches[0],o=e.touches[1];this.dx1=(i.pageX-n.baseX)*n.scaleX,this.dy1=(i.pageY-n.baseY)*n.scaleY,this.dx2=(o.pageX-n.baseX2)*n.scaleX,this.dy2=(o.pageY-n.baseY2)*n.scaleY,this.dx1*this.dx2>=0&&(this.dx=(this.dx1+this.dx2)/2),this.dy1*this.dy2>=0&&(this.dy=(this.dy1+this.dy2)/2),this.scale=Math.sqrt(Math.pow(o.pageX-i.pageX,2)+Math.pow(o.pageY-i.pageY,2))/n.baseDis,this.rotate=Math.atan2(o.pageY-i.pageY,o.pageX-i.pageX)-n.baseAng,this.rotate>Math.PI?this.rotate-=Math.PI*2:this.rotate<-Math.PI&&(this.rotate+=Math.PI*2)}}moved(){return Math.max(Math.abs(this.dx1),Math.abs(this.dx2),Math.abs(this.dy1),Math.abs(this.dy2))}pageCenter(){let e=this.event.touches[0],n=this.event.touches[1];return[(e.pageX+n.pageX)/2,(e.pageY+n.pageY)/2]}clientCenter(){let e=this.event.touches[0],n=this.event.touches[1];return[(e.clientX+n.clientX)/2,(e.clientY+n.clientY)/2]}}var Ug=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]]);return n};class Nt extends p.PureComponent{constructor(){super(...arguments);this._getRef=e=>{if(e===this.element)return;let{getRef:n,onDragOverT:r}=this.props;this.element&&r&&ya(this.element),this.element=e,e&&(this.ownerDocument=e.ownerDocument),n&&n(e),e&&r&&Du(e,this.props)},this.dragType=null,this.waitingMove=!1,this.listening=!1,this.gesturing=!1,this.onPointerDown=e=>{let n=e.nativeEvent.target;if(n instanceof HTMLInputElement||n instanceof HTMLTextAreaElement||n.classList.contains("drag-ignore"))return;let{onDragStartT:r,onGestureStartT:i,onGestureMoveT:o,useRightButtonDragT:a}=this.props,s=e.nativeEvent;if(this.cancel(),s.type==="touchstart")s.touches.length===1?r&&this.onDragStart(s):s.touches.length===2&&i&&o&&this.onGestureStart(s);else if(r){if(s.button===2&&!a)return;this.onDragStart(s)}},this.onMouseMove=e=>{let{onDragMoveT:n}=this.props;if(this.waitingMove){if(kr()){this.onDragEnd();return}if(!this.checkFirstMove(e))return}else{let r=new Pe(e,this);r._onMove(),n&&n(r)}e.preventDefault()},this.onTouchMove=e=>{let{onDragMoveT:n}=this.props;if(this.waitingMove){if(kr()){this.onDragEnd();return}if(!this.checkFirstMove(e))return}else if(e.touches.length!==1)this.onDragEnd();else{let r=new Pe(e,this);r._onMove(),n&&n(r)}e.preventDefault()},this.onDragEnd=e=>{let{onDragEndT:n}=this.props,r=new Pe(e,this);this.removeListeners(),this.waitingMove||(r._onDragEnd(e==null),n&&n(r)),this.cleanupDrag(r)},this.onGestureMove=e=>{let{onGestureMoveT:n,gestureSensitivity:r}=this.props,i=new Mu(e,this);if(this.waitingMove)if(r>0||(r=10),i.moved()>r)this.waitingMove=!1;else return;n&&n(i)},this.onGestureEnd=e=>{let{onGestureEndT:n}=this.props;new Pe(e,this),this.removeListeners(),n&&n()},this.onKeyDown=e=>{e.key==="Escape"&&this.cancel()}}onDragStart(e){if(kr())return;let n=new Pe(e,this,!0);this.baseX=n.pageX,this.baseY=n.pageY;let r=this.element.parentElement,i=r.getBoundingClientRect();this.scaleX=r.offsetWidth/Math.round(i.width),this.scaleY=r.offsetHeight/Math.round(i.height),this.addDragListeners(e),this.props.directDragT&&this.executeFirstMove(n)}addDragListeners(e){this.props,e.type==="touchstart"?(this.ownerDocument.addEventListener("touchmove",this.onTouchMove),this.ownerDocument.addEventListener("touchend",this.onDragEnd),this.dragType="touch"):(this.ownerDocument.addEventListener("mousemove",this.onMouseMove),this.ownerDocument.addEventListener("mouseup",this.onDragEnd),e.button===2?this.dragType="right":this.dragType="left"),this.waitingMove=!0,this.listening=!0}checkFirstMove(e){let n=new Pe(e,this,!0);return n.moved()?this.executeFirstMove(n):!1}executeFirstMove(e){let{onDragStartT:n}=this.props;return this.waitingMove=!1,n(e),kr()?(e._onMove(),this.ownerDocument.addEventListener("keydown",this.onKeyDown),!0):(this.onDragEnd(),!1)}addGestureListeners(e){this.ownerDocument.addEventListener("touchmove",this.onGestureMove),this.ownerDocument.addEventListener("touchend",this.onGestureEnd),this.ownerDocument.addEventListener("keydown",this.onKeyDown),this.gesturing=!0,this.waitingMove=!0}onGestureStart(e){if(!kr())return;let{onGestureStartT:n}=this.props;this.baseX=e.touches[0].pageX,this.baseY=e.touches[0].pageY,this.baseX2=e.touches[1].pageX,this.baseY2=e.touches[1].pageY;let r=this.element.parentElement,i=r.getBoundingClientRect();this.scaleX=r.offsetWidth/Math.round(i.width),this.scaleY=r.offsetHeight/Math.round(i.height),this.baseDis=Math.sqrt(Math.pow(this.baseX-this.baseX2,2)+Math.pow(this.baseY-this.baseY2,2)),this.baseAng=Math.atan2(this.baseY2-this.baseY,this.baseX2-this.baseX);let o=new Mu(e,this,!0);n(o)&&(this.addGestureListeners(e),e.preventDefault())}cancel(){this.listening&&this.onDragEnd(),this.gesturing&&this.onGestureEnd()}removeListeners(){this.gesturing?(this.ownerDocument.removeEventListener("touchmove",this.onGestureMove),this.ownerDocument.removeEventListener("touchend",this.onGestureEnd)):this.listening&&(this.dragType==="touch"?(this.ownerDocument.removeEventListener("touchmove",this.onTouchMove),this.ownerDocument.removeEventListener("touchend",this.onDragEnd)):(this.ownerDocument.removeEventListener("mousemove",this.onMouseMove),this.ownerDocument.removeEventListener("mouseup",this.onDragEnd))),this.ownerDocument.removeEventListener("keydown",this.onKeyDown),this.listening=!1,this.gesturing=!1}cleanupDrag(e){this.dragType=null,this.waitingMove=!1}render(){let e=this.props,{getRef:n,children:r,className:i,directDragT:o,onDragStartT:a,onDragMoveT:s,onDragEndT:l,onDragOverT:c,onDragLeaveT:d,onDropT:f,onGestureStartT:h,onGestureMoveT:v,onGestureEndT:m,useRightButtonDragT:b}=e,g=Ug(e,["getRef","children","className","directDragT","onDragStartT","onDragMoveT","onDragEndT","onDragOverT","onDragLeaveT","onDropT","onGestureStartT","onGestureMoveT","onGestureEndT","useRightButtonDragT"]),w=this.onPointerDown,D=this.onPointerDown;return a||(D=null,h||(w=null)),(a||h)&&(i?i=`${i} drag-initiator`:i="drag-initiator"),p.createElement("div",Object.assign({ref:this._getRef,className:i},g,{onMouseDown:D,onTouchStart:w}),r)}componentDidUpdate(e){let{onDragOverT:n,onDragEndT:r,onDragLeaveT:i}=this.props;this.element&&(e.onDragOverT!==n||e.onDragLeaveT!==i||e.onDragEndT!==r)&&(n?Du(this.element,this.props):ya(this.element))}componentWillUnmount(){let{onDragOverT:e}=this.props;this.element&&e&&ya(this.element),this.cancel()}}var Gg=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]]);return n};function qg(t,e){if(t==="ArrowLeft"||t==="ArrowRight"){let n=Array.from(e.querySelectorAll(".dock-tab-btn")),r=e.querySelector(".dock-tab-active>.dock-tab-btn"),i=n.indexOf(r);if(i>=0){if(t==="ArrowLeft"){if(i>0)return n[i-1].click(),n[i-1].focus(),!0}else if(i<n.length-1)return n[i+1].click(),n[i+1].focus(),!0}}return!1}function Yg(t){const{onDragStart:e,onDragMove:n,onDragEnd:r,TabNavList:i,isMaximized:o}=t,a=Gg(t,["onDragStart","onDragMove","onDragEnd","TabNavList","isMaximized"]),s=p.useContext(ut),l=p.useRef(),c=f=>{l.current=f},d=f=>{f.key.startsWith("Arrow")&&(!qg(f.key,l.current)&&!o&&s.navigateToPanel(l.current,f.key),f.stopPropagation(),f.preventDefault())};return p.createElement(Nt,{onDragStartT:e,onDragMoveT:n,onDragEndT:r,role:"tablist",className:"dock-bar",onKeyDown:d,getRef:c,tabIndex:-1},p.createElement(i,Object.assign({},a)))}class Ou extends p.PureComponent{constructor(){super(...arguments);this.getRef=e=>{this._ref=e}}updateCache(){const{cached:e,children:n,cacheId:r}=this.props;this._cache&&(!e||r!==this._cache.id)&&(this.context.removeTabCache(this._cache.id,this),this._cache=null),e&&this._ref&&(this._cache=this.context.getTabCache(r,this),this._ref.appendChild(this._cache.div),this.context.updateTabCache(this._cache.id,n))}render(){const{cacheId:e,cached:n,prefixCls:r,forceRender:i,className:o,style:a,id:s,active:l,animated:c,destroyInactiveTabPane:d,tabKey:f,children:h}=this.props;l?this.visited=!0:d&&(this.visited=!1);const v={};l||(c?(v.visibility="hidden",v.height=0,v.overflowY="hidden"):v.display="none");const m=n===!1?l:this.visited;let b=null;n?b=null:(m||i)&&(b=h);let g=n?this.getRef:null;return p.createElement("div",{ref:g,id:e,role:"tabpanel","aria-labelledby":s&&`${s}-tab-${f}`,"aria-hidden":!l,style:Object.assign(Object.assign({},v),a),className:fe(`${r}-tabpane`,l&&`${r}-tabpane-active`,o)},(l||this.visited||i)&&b)}componentDidMount(){this.updateCache()}componentDidUpdate(e,n,r){this.updateCache()}componentWillUnmount(){this._cache&&this.context.removeTabCache(this._cache.id,this)}}Ou.contextType=ut;let wa=new WeakMap;function Vi(t){let e=wa.get(t);return e?Vi(e):t}function Xg(){wa=new WeakMap}function Qe(t,e){let n=Object.assign(Object.assign({},t),e);return Array.isArray(n.tabs)&&(n.tabs=n.tabs.concat()),Array.isArray(n.children)&&(n.children=n.children.concat()),wa.set(t,n),n}function Tu(t,e){return t==null?e:Math.max(t,e)}function Pu(t,e){return t==null||t===e?e:t>=1?e<=1?1:Math.min(t,e):e>=1?1:Math.max(t,e)}let Ui=0;function Jg(){return++Ui,`+${Ui}`}let Gi=0;function xa(t){return t===Gi?t:++Gi}function Zg(t,e,n){if(t.id===e&&n&dt.Panel)return t;if(n&dt.Tab){for(let r of t.tabs)if(r.id===e)return r}return null}function Nr(t,e,n){let r;if(n|dt.Box&&t.id===e)return t;for(let i of t.children)if("children"in i){if(r=Nr(i,e,n))break}else if("tabs"in i&&(r=Zg(i,e,n)))break;return r}var dt;(function(t){t[t.Tab=1]="Tab",t[t.Panel=2]="Panel",t[t.Box=4]="Box",t[t.Docked=8]="Docked",t[t.Floated=16]="Floated",t[t.Windowed=32]="Windowed",t[t.Max=64]="Max",t[t.EveryWhere=120]="EveryWhere",t[t.AnyTab=121]="AnyTab",t[t.AnyPanel=122]="AnyPanel",t[t.AnyTabPanel=123]="AnyTabPanel",t[t.All=127]="All"})(dt||(dt={}));function Ca(t,e,n=dt.AnyTabPanel){let r;return n&dt.Docked&&(r=Nr(t.dockbox,e,n)),r||(n&dt.Floated&&(r=Nr(t.floatbox,e,n)),r)||(n&dt.Windowed&&(r=Nr(t.windowbox,e,n)),r)||n&dt.Max&&(r=Nr(t.maxbox,e,n)),r}function Qg(t,e,n,r){let i=n.parent.tabs.indexOf(n);return i>=0?(r==="after-tab"&&++i,Sa(t,e,n.parent,i)):t}function Sa(t,e,n,r=-1){r===-1&&(r=n.tabs.length);let i,o;if("tabs"in e?(i=e.tabs,o=e.activeId):i=[e],i.length){let a=Qe(n);a.tabs.splice(r,0,...i),a.activeId=i[i.length-1].id;for(let s of i)s.parent=a;o&&(a.activeId=o),t=Lr(t,n,a)}return t}function qi(t){if("tabs"in t)return t;{let e={tabs:[t],group:t.group,activeId:t.id};return t.parent=e,e}}function eb(t,e,n,r){let i=n.parent,o=r==="left"||r==="right"?"horizontal":"vertical",a=r==="bottom"||r==="right",s=i.children.indexOf(n);if(s>=0){let l=Qe(i);if(o===i.mode)a&&++s,n.size*=.5,e.size=n.size,l.children.splice(s,0,e);else{let c={mode:o,children:[]};c.size=n.size,a?c.children=[n,e]:c.children=[e,n],n.parent=c,n.size=200,e.parent=c,e.size=200,l.children[s]=c,c.parent=l}return bt(t,i,l)}return t}function Ea(t,e,n,r){let i=n.parent,o=r==="left"||r==="right"?"horizontal":"vertical",a=r==="bottom"||r==="right";if(i){let s=i.children.indexOf(n);if(s>=0){let l=Qe(i);if(o===i.mode)a&&++s,e.size=n.size*.3,n.size*=.7,l.children.splice(s,0,e);else{let c={mode:o,children:[]};c.size=n.size,a?c.children=[n,e]:c.children=[e,n],n.parent=c,n.size=280,e.parent=c,e.size=120,l.children[s]=c}return bt(t,i,l)}}else if(n===t.dockbox){let s=Qe(n);if(o===n.mode){let l=0;return a&&(l=s.children.length),e.size=n.size*.3,n.size*=.7,s.children.splice(l,0,e),bt(t,n,s)}else{let l={mode:o,children:[]};return l.size=n.size,a?l.children=[s,e]:l.children=[e,s],s.size=280,e.size=120,bt(t,n,l)}}else if(n===t.maxbox){let s=Qe(n);return s.children.push(e),bt(t,n,s)}return t}function _u(t,e,n){let r=Qe(t.floatbox);return n&&(e.x=n.left,e.y=n.top,e.w=n.width,e.h=n.height),r.children.push(e),bt(t,t.floatbox,r)}function tb(t,e){let n=Qe(t.windowbox);return n.children.push(e),bt(t,t.windowbox,n)}function Iu(t,e){if(e){let n;if("tabs"in e?(n=e,t=Da(t,n)):(n=e.parent,t=nb(t,e)),n&&n.parent&&n.parent.mode==="maximize"){let r=t.maxbox.children[0];if(!r||r.tabs.length===0&&!r.panelLock){let i=Ca(t,mi);if(i)return Da(t,i)}}}return t}function Da(t,e){let n=e.parent;if(n){let r=n.children.indexOf(e);if(r>=0){let i=Qe(n);return i.children.splice(r,1),bt(t,n,i)}}return t}function nb(t,e){let n=e.parent;if(n){let r=n.tabs.indexOf(e);if(r>=0){let i=Qe(n);return i.tabs.splice(r,1),i.activeId===e.id&&(i.tabs.length>r?i.activeId=i.tabs[r].id:i.tabs.length&&(i.activeId=i.tabs[0].id)),Lr(t,n,i)}}return t}function rb(t,e){if(e){let n,r=!1,i={};if("tabs"in e?n=e:(n=e.parent,n.activeId!==e.id&&(i.activeId=e.id,r=!0)),n&&n.parent&&n.parent.mode==="float"){let o=xa(n.z);o!==n.z&&(i.z=o,r=!0)}r&&(t=Lr(t,n,Qe(n,i)))}return t}function ib(t,e){return e?"tabs"in e?e.parent.mode==="maximize"?ab(t,e):ob(t,e):sb(t):t}function ob(t,e){if(t.maxbox.children.length)return t;let r=Object.assign(Object.assign({},e),{id:mi,tabs:[],panelLock:{}});return t=Lr(t,e,r),t=Ea(t,e,t.maxbox,"middle"),t}function ab(t,e){t=Da(t,e);let n=Ca(t,mi);if(n){let{x:r,y:i,z:o,w:a,h:s}=n;return e=Object.assign(Object.assign({},e),{x:r,y:i,z:o,w:a,h:s}),Lr(t,n,e)}else return Ea(t,e,t.dockbox,"right")}function sb(t,e){return t}function Ma(t,e,n){let r=!1;if(t&&t.floatbox&&e>200&&n>200){let i=t.floatbox.children.concat();for(let o=0;o<i.length;++o){let a=i[o],s={};a.w>e&&(s.w=e),a.h>n&&(s.h=n),a.y>n-16?s.y=Math.max(n-16-(a.h>>1),0):a.y<0&&(s.y=0),a.x+a.w<16?s.x=16-(a.w>>1):a.x>e-16&&(s.x=e-16-(a.w>>1)),Object.keys(s).length&&(i[o]=Qe(a,s),r=!0)}if(r){let o=Qe(t.floatbox);return o.children=i,bt(t,t.floatbox,o)}}return t}function Ar(t,e,n){function r(a){if(a.id==null)a.id=Jg();else if(a.id.startsWith("+")){let s=Number(a.id);s>Ui&&(Ui=s)}a.size>=0||(a.size=200),a.minWidth=0,a.minHeight=0,a.widthFlex=null,a.heightFlex=null}function i(a){r(a);let s=!1;if(n)for(let d=0;d<a.tabs.length;++d)a.tabs[d]=n(a.tabs[d]);a.group==null&&a.tabs.length&&(a.group=a.tabs[0].group);let l=e==null?void 0:e[a.group];l&&(l.widthFlex!=null&&(a.widthFlex=l.widthFlex),l.heightFlex!=null&&(a.heightFlex=l.heightFlex));for(let d of a.tabs)d.parent=a,d.id===a.activeId&&(s=!0),d.minWidth>a.minWidth&&(a.minWidth=d.minWidth),d.minHeight>a.minHeight&&(a.minHeight=d.minHeight);!s&&a.tabs.length&&(a.activeId=a.tabs[0].id),a.minWidth<=0&&(a.minWidth=1),a.minHeight<=0&&(a.minHeight=1);let{panelLock:c}=a;return c&&(a.minWidth<c.minWidth&&(a.minWidth=c.minWidth),a.minHeight<c.minHeight&&(a.minHeight=c.minHeight),a.panelLock.widthFlex!=null&&(a.widthFlex=c.widthFlex),a.panelLock.heightFlex!=null&&(a.heightFlex=c.heightFlex)),a.z>Gi&&(Gi=a.z),a}function o(a){r(a);for(let s=0;s<a.children.length;++s){let l=a.children[s];if(l.parent=a,"children"in l){if(o(l),l.children.length===0)a.children.splice(s,1),--s;else if(l.children.length===1){let c=l.children[0];if(c.mode===a.mode){let d=0;for(let h of c.children)d+=h.size;let f=l.size/d;for(let h of c.children)h.size*=f;a.children.splice(s,1,...c.children)}else c.size=l.size,a.children[s]=c;--s}}else"tabs"in l&&(i(l),l.tabs.length===0&&(l.panelLock?l.group===vi&&(a.children.length>1||a.parent)&&(a.children.splice(s,1),--s):(a.children.splice(s,1),--s)));switch(a.mode){case"horizontal":l.minWidth>0&&(a.minWidth+=l.minWidth),l.minHeight>a.minHeight&&(a.minHeight=l.minHeight),l.widthFlex!=null&&(a.widthFlex=Tu(a.widthFlex,l.widthFlex)),l.heightFlex!=null&&(a.heightFlex=Pu(a.heightFlex,l.heightFlex));break;case"vertical":l.minWidth>a.minWidth&&(a.minWidth=l.minWidth),l.minHeight>0&&(a.minHeight+=l.minHeight),l.heightFlex!=null&&(a.heightFlex=Tu(a.heightFlex,l.heightFlex)),l.widthFlex!=null&&(a.widthFlex=Pu(a.widthFlex,l.widthFlex));break}}if(a.children.length>1)switch(a.mode){case"horizontal":a.minWidth+=(a.children.length-1)*4;break;case"vertical":a.minHeight+=(a.children.length-1)*4;break}return a}if(t.floatbox?t.floatbox.mode="float":t.floatbox={mode:"float",children:[],size:1},t.windowbox?t.windowbox.mode="window":t.windowbox={mode:"window",children:[],size:1},t.maxbox?t.maxbox.mode="maximize":t.maxbox={mode:"maximize",children:[],size:1},o(t.dockbox),o(t.floatbox),o(t.windowbox),o(t.maxbox),t.dockbox.children.length===0){let a={id:"+0",group:vi,panelLock:{},size:200,tabs:[]};a.parent=t.dockbox,t.dockbox.children.push(a)}else for(;t.dockbox.children.length===1&&"children"in t.dockbox.children[0];){let a=Qe(t.dockbox.children[0]);t.dockbox=a;for(let s of a.children)s.parent=a}return t.dockbox.parent=null,t.floatbox.parent=null,t.windowbox.parent=null,t.maxbox.parent=null,Xg(),t}function Lr(t,e,n){for(let i of n.tabs)i.parent=n;let r=e.parent;if(r){let i=r.children.indexOf(e);if(i>=0){let o=Qe(r);return o.children[i]=n,bt(t,r,o)}}return t}function bt(t,e,n){for(let i of n.children)i.parent=n;let r=e.parent;if(r){let i=r.children.indexOf(e);if(i>=0){let o=Qe(r);return o.children[i]=n,bt(t,r,o)}}else{if(e.id===t.dockbox.id||e===t.dockbox)return Object.assign(Object.assign({},t),{dockbox:n});if(e.id===t.floatbox.id||e===t.floatbox)return Object.assign(Object.assign({},t),{floatbox:n});if(e.id===t.windowbox.id||e===t.windowbox)return Object.assign(Object.assign({},t),{windowbox:n});if(e.id===t.maxbox.id||e===t.maxbox)return Object.assign(Object.assign({},t),{maxbox:n})}return t}function ku(t,e){if(!t)return[300,300];let n=t.offsetWidth,r=t.offsetHeight,[i,o]=e.preferredFloatWidth||[100,600],[a,s]=e.preferredFloatHeight||[50,500];return n>=i?n<=o||(n=o):n=i,r>=a?r<=s||(r=s):r=a,[n,r]}function lb(t,e,n){let r=-1,i=-1,o=0;switch(n){case"ArrowUp":{r=t.top-e.bottom+t.height,i=Math.min(t.right,e.right)-Math.max(t.left,e.left);break}case"ArrowDown":{r=e.top-t.bottom+t.height,i=Math.min(t.right,e.right)-Math.max(t.left,e.left);break}case"ArrowLeft":{r=t.left-e.right+t.width,i=Math.min(t.bottom,e.bottom)-Math.max(t.top,e.top),o=Math.abs(t.top-e.top);break}case"ArrowRight":{r=e.left-t.right+t.width,i=Math.min(t.bottom,e.bottom)-Math.max(t.top,e.top),o=Math.abs(t.top-e.top);break}}return r<0||i<=0?-1:r*(o+1)-i*.001}const cb={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"},Ru={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"},_e={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"},et={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"},tn={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};class B{static getFirstMatch(e,n){const r=n.match(e);return r&&r.length>0&&r[1]||""}static getSecondMatch(e,n){const r=n.match(e);return r&&r.length>1&&r[2]||""}static matchAndReturnConst(e,n,r){if(e.test(n))return r}static getWindowsVersionName(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}static getMacOSVersionName(e){const n=e.split(".").splice(0,2).map(r=>parseInt(r,10)||0);if(n.push(0),n[0]===10)switch(n[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}}static getAndroidVersionName(e){const n=e.split(".").splice(0,2).map(r=>parseInt(r,10)||0);if(n.push(0),!(n[0]===1&&n[1]<5)){if(n[0]===1&&n[1]<6)return"Cupcake";if(n[0]===1&&n[1]>=6)return"Donut";if(n[0]===2&&n[1]<2)return"Eclair";if(n[0]===2&&n[1]===2)return"Froyo";if(n[0]===2&&n[1]>2)return"Gingerbread";if(n[0]===3)return"Honeycomb";if(n[0]===4&&n[1]<1)return"Ice Cream Sandwich";if(n[0]===4&&n[1]<4)return"Jelly Bean";if(n[0]===4&&n[1]>=4)return"KitKat";if(n[0]===5)return"Lollipop";if(n[0]===6)return"Marshmallow";if(n[0]===7)return"Nougat";if(n[0]===8)return"Oreo";if(n[0]===9)return"Pie"}}static getVersionPrecision(e){return e.split(".").length}static compareVersions(e,n,r=!1){const i=B.getVersionPrecision(e),o=B.getVersionPrecision(n);let a=Math.max(i,o),s=0;const l=B.map([e,n],c=>{const d=a-B.getVersionPrecision(c),f=c+new Array(d+1).join(".0");return B.map(f.split("."),h=>new Array(20-h.length).join("0")+h).reverse()});for(r&&(s=a-Math.min(i,o)),a-=1;a>=s;){if(l[0][a]>l[1][a])return 1;if(l[0][a]===l[1][a]){if(a===s)return 0;a-=1}else if(l[0][a]<l[1][a])return-1}}static map(e,n){const r=[];let i;if(Array.prototype.map)return Array.prototype.map.call(e,n);for(i=0;i<e.length;i+=1)r.push(n(e[i]));return r}static find(e,n){let r,i;if(Array.prototype.find)return Array.prototype.find.call(e,n);for(r=0,i=e.length;r<i;r+=1){const o=e[r];if(n(o,r))return o}}static assign(e,...n){const r=e;let i,o;if(Object.assign)return Object.assign(e,...n);for(i=0,o=n.length;i<o;i+=1){const a=n[i];typeof a=="object"&&a!==null&&Object.keys(a).forEach(l=>{r[l]=a[l]})}return e}static getBrowserAlias(e){return cb[e]}static getBrowserTypeByAlias(e){return Ru[e]||""}}const ye=/version\/(\d+(\.?_?\d+)+)/i,ub=[{test:[/googlebot/i],describe(t){const e={name:"Googlebot"},n=B.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/opera/i],describe(t){const e={name:"Opera"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/opr\/|opios/i],describe(t){const e={name:"Opera"},n=B.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/SamsungBrowser/i],describe(t){const e={name:"Samsung Internet for Android"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/Whale/i],describe(t){const e={name:"NAVER Whale Browser"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/MZBrowser/i],describe(t){const e={name:"MZ Browser"},n=B.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/focus/i],describe(t){const e={name:"Focus"},n=B.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/swing/i],describe(t){const e={name:"Swing"},n=B.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/coast/i],describe(t){const e={name:"Opera Coast"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe(t){const e={name:"Opera Touch"},n=B.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/yabrowser/i],describe(t){const e={name:"Yandex Browser"},n=B.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/ucbrowser/i],describe(t){const e={name:"UC Browser"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/Maxthon|mxios/i],describe(t){const e={name:"Maxthon"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/epiphany/i],describe(t){const e={name:"Epiphany"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/puffin/i],describe(t){const e={name:"Puffin"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/sleipnir/i],describe(t){const e={name:"Sleipnir"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/k-meleon/i],describe(t){const e={name:"K-Meleon"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/micromessenger/i],describe(t){const e={name:"WeChat"},n=B.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/qqbrowser/i],describe(t){const e={name:/qqbrowserlite/i.test(t)?"QQ Browser Lite":"QQ Browser"},n=B.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/msie|trident/i],describe(t){const e={name:"Internet Explorer"},n=B.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/\sedg\//i],describe(t){const e={name:"Microsoft Edge"},n=B.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/edg([ea]|ios)/i],describe(t){const e={name:"Microsoft Edge"},n=B.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/vivaldi/i],describe(t){const e={name:"Vivaldi"},n=B.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/seamonkey/i],describe(t){const e={name:"SeaMonkey"},n=B.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/sailfish/i],describe(t){const e={name:"Sailfish"},n=B.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,t);return n&&(e.version=n),e}},{test:[/silk/i],describe(t){const e={name:"Amazon Silk"},n=B.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/phantom/i],describe(t){const e={name:"PhantomJS"},n=B.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/slimerjs/i],describe(t){const e={name:"SlimerJS"},n=B.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe(t){const e={name:"BlackBerry"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/(web|hpw)[o0]s/i],describe(t){const e={name:"WebOS Browser"},n=B.getFirstMatch(ye,t)||B.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/bada/i],describe(t){const e={name:"Bada"},n=B.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/tizen/i],describe(t){const e={name:"Tizen"},n=B.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/qupzilla/i],describe(t){const e={name:"QupZilla"},n=B.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/firefox|iceweasel|fxios/i],describe(t){const e={name:"Firefox"},n=B.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/electron/i],describe(t){const e={name:"Electron"},n=B.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/MiuiBrowser/i],describe(t){const e={name:"Miui"},n=B.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/chromium/i],describe(t){const e={name:"Chromium"},n=B.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,t)||B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/chrome|crios|crmo/i],describe(t){const e={name:"Chrome"},n=B.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/GSA/i],describe(t){const e={name:"Google Search"},n=B.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test(t){const e=!t.test(/like android/i),n=t.test(/android/i);return e&&n},describe(t){const e={name:"Android Browser"},n=B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/playstation 4/i],describe(t){const e={name:"PlayStation 4"},n=B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/safari|applewebkit/i],describe(t){const e={name:"Safari"},n=B.getFirstMatch(ye,t);return n&&(e.version=n),e}},{test:[/.*/i],describe(t){const e=/^(.*)\/(.*) /,n=/^(.*)\/(.*)[ \t]\((.*)/,i=t.search("\\(")!==-1?n:e;return{name:B.getFirstMatch(i,t),version:B.getSecondMatch(i,t)}}}];var db=[{test:[/Roku\/DVP/],describe(t){const e=B.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,t);return{name:et.Roku,version:e}}},{test:[/windows phone/i],describe(t){const e=B.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,t);return{name:et.WindowsPhone,version:e}}},{test:[/windows /i],describe(t){const e=B.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,t),n=B.getWindowsVersionName(e);return{name:et.Windows,version:e,versionName:n}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe(t){const e={name:et.iOS},n=B.getSecondMatch(/(Version\/)(\d[\d.]+)/,t);return n&&(e.version=n),e}},{test:[/macintosh/i],describe(t){const e=B.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,t).replace(/[_\s]/g,"."),n=B.getMacOSVersionName(e),r={name:et.MacOS,version:e};return n&&(r.versionName=n),r}},{test:[/(ipod|iphone|ipad)/i],describe(t){const e=B.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,t).replace(/[_\s]/g,".");return{name:et.iOS,version:e}}},{test(t){const e=!t.test(/like android/i),n=t.test(/android/i);return e&&n},describe(t){const e=B.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,t),n=B.getAndroidVersionName(e),r={name:et.Android,version:e};return n&&(r.versionName=n),r}},{test:[/(web|hpw)[o0]s/i],describe(t){const e=B.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,t),n={name:et.WebOS};return e&&e.length&&(n.version=e),n}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe(t){const e=B.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,t)||B.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,t)||B.getFirstMatch(/\bbb(\d+)/i,t);return{name:et.BlackBerry,version:e}}},{test:[/bada/i],describe(t){const e=B.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,t);return{name:et.Bada,version:e}}},{test:[/tizen/i],describe(t){const e=B.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,t);return{name:et.Tizen,version:e}}},{test:[/linux/i],describe(){return{name:et.Linux}}},{test:[/CrOS/],describe(){return{name:et.ChromeOS}}},{test:[/PlayStation 4/],describe(t){const e=B.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,t);return{name:et.PlayStation4,version:e}}}],fb=[{test:[/googlebot/i],describe(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe(t){const e=B.getFirstMatch(/(can-l01)/i,t)&&"Nova",n={type:_e.mobile,vendor:"Huawei"};return e&&(n.model=e),n}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe(){return{type:_e.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe(){return{type:_e.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe(){return{type:_e.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe(){return{type:_e.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe(){return{type:_e.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe(){return{type:_e.tablet}}},{test(t){const e=t.test(/ipod|iphone/i),n=t.test(/like (ipod|iphone)/i);return e&&!n},describe(t){const e=B.getFirstMatch(/(ipod|iphone)/i,t);return{type:_e.mobile,vendor:"Apple",model:e}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe(){return{type:_e.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe(){return{type:_e.mobile}}},{test(t){return t.getBrowserName(!0)==="blackberry"},describe(){return{type:_e.mobile,vendor:"BlackBerry"}}},{test(t){return t.getBrowserName(!0)==="bada"},describe(){return{type:_e.mobile}}},{test(t){return t.getBrowserName()==="windows phone"},describe(){return{type:_e.mobile,vendor:"Microsoft"}}},{test(t){const e=Number(String(t.getOSVersion()).split(".")[0]);return t.getOSName(!0)==="android"&&e>=3},describe(){return{type:_e.tablet}}},{test(t){return t.getOSName(!0)==="android"},describe(){return{type:_e.mobile}}},{test(t){return t.getOSName(!0)==="macos"},describe(){return{type:_e.desktop,vendor:"Apple"}}},{test(t){return t.getOSName(!0)==="windows"},describe(){return{type:_e.desktop}}},{test(t){return t.getOSName(!0)==="linux"},describe(){return{type:_e.desktop}}},{test(t){return t.getOSName(!0)==="playstation 4"},describe(){return{type:_e.tv}}},{test(t){return t.getOSName(!0)==="roku"},describe(){return{type:_e.tv}}}],pb=[{test(t){return t.getBrowserName(!0)==="microsoft edge"},describe(t){if(/\sedg\//i.test(t))return{name:tn.Blink};const n=B.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,t);return{name:tn.EdgeHTML,version:n}}},{test:[/trident/i],describe(t){const e={name:tn.Trident},n=B.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test(t){return t.test(/presto/i)},describe(t){const e={name:tn.Presto},n=B.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test(t){const e=t.test(/gecko/i),n=t.test(/like gecko/i);return e&&!n},describe(t){const e={name:tn.Gecko},n=B.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/(apple)?webkit\/537\.36/i],describe(){return{name:tn.Blink}}},{test:[/(apple)?webkit/i],describe(t){const e={name:tn.WebKit},n=B.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}}];class Nu{constructor(e,n=!1){if(e==null||e==="")throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},n!==!0&&this.parse()}getUA(){return this._ua}test(e){return e.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const e=B.find(ub,n=>{if(typeof n.test=="function")return n.test(this);if(n.test instanceof Array)return n.test.some(r=>this.test(r));throw new Error("Browser's test function is not valid")});return e&&(this.parsedResult.browser=e.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const e=B.find(db,n=>{if(typeof n.test=="function")return n.test(this);if(n.test instanceof Array)return n.test.some(r=>this.test(r));throw new Error("Browser's test function is not valid")});return e&&(this.parsedResult.os=e.describe(this.getUA())),this.parsedResult.os}getOSName(e){const{name:n}=this.getOS();return e?String(n).toLowerCase()||"":n||""}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(e=!1){const{type:n}=this.getPlatform();return e?String(n).toLowerCase()||"":n||""}parsePlatform(){this.parsedResult.platform={};const e=B.find(fb,n=>{if(typeof n.test=="function")return n.test(this);if(n.test instanceof Array)return n.test.some(r=>this.test(r));throw new Error("Browser's test function is not valid")});return e&&(this.parsedResult.platform=e.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}getEngineName(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""}parseEngine(){this.parsedResult.engine={};const e=B.find(pb,n=>{if(typeof n.test=="function")return n.test(this);if(n.test instanceof Array)return n.test.some(r=>this.test(r));throw new Error("Browser's test function is not valid")});return e&&(this.parsedResult.engine=e.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return B.assign({},this.parsedResult)}satisfies(e){const n={};let r=0;const i={};let o=0;if(Object.keys(e).forEach(s=>{const l=e[s];typeof l=="string"?(i[s]=l,o+=1):typeof l=="object"&&(n[s]=l,r+=1)}),r>0){const s=Object.keys(n),l=B.find(s,d=>this.isOS(d));if(l){const d=this.satisfies(n[l]);if(d!==void 0)return d}const c=B.find(s,d=>this.isPlatform(d));if(c){const d=this.satisfies(n[c]);if(d!==void 0)return d}}if(o>0){const s=Object.keys(i),l=B.find(s,c=>this.isBrowser(c,!0));if(l!==void 0)return this.compareVersion(i[l])}}isBrowser(e,n=!1){const r=this.getBrowserName().toLowerCase();let i=e.toLowerCase();const o=B.getBrowserTypeByAlias(i);return n&&o&&(i=o.toLowerCase()),i===r}compareVersion(e){let n=[0],r=e,i=!1;const o=this.getBrowserVersion();if(typeof o=="string")return e[0]===">"||e[0]==="<"?(r=e.substr(1),e[1]==="="?(i=!0,r=e.substr(2)):n=[],e[0]===">"?n.push(1):n.push(-1)):e[0]==="="?r=e.substr(1):e[0]==="~"&&(i=!0,r=e.substr(1)),n.indexOf(B.compareVersions(o,r,i))>-1}isOS(e){return this.getOSName(!0)===String(e).toLowerCase()}isPlatform(e){return this.getPlatformType(!0)===String(e).toLowerCase()}isEngine(e){return this.getEngineName(!0)===String(e).toLowerCase()}is(e,n=!1){return this.isBrowser(e,n)||this.isOS(e)||this.isPlatform(e)}some(e=[]){return e.some(n=>this.is(n))}}/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2019
 */class Au{static getParser(e,n=!1){if(typeof e!="string")throw new Error("UserAgent should be a string");return new Nu(e,n)}static parse(e){return new Nu(e).getResult()}static get BROWSER_MAP(){return Ru}static get ENGINE_MAP(){return tn}static get OS_MAP(){return et}static get PLATFORMS_MAP(){return _e}}var hb=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:Au});const yt=typeof window=="object"&&Au.getParser(window.navigator.userAgent);function vb(){switch(yt==null?void 0:yt.getOSName(!0)){case"windows":{let t;switch(yt.getBrowserName(!0)){case"firefox":t=[68,8,8];break;case"microsoft edge":t=[62,8,8];break;default:t=[60,8,8]}return window.devicePixelRatio>1&&(t[0]-=2,t[1]-=1,t[2]-=1),t}case"macos":switch(yt.getBrowserName(!0)){case"safari":return[22,0,0];case"firefox":return[59,0,0];default:return[51,0,0]}}return[60,8,8]}const Lu=(yt==null?void 0:yt.getBrowserName(!0))==="safari",mb=(yt==null?void 0:yt.getPlatformType())==="desktop",zu=vb(),gb=us(()=>{let t=document.createElement("div");document.body.append(t),t.remove()},200);class Oa extends p.PureComponent{constructor(e){super(e);this.released=!1,this.container=document.createElement("div"),this.state={mounted:!1},this.onMainWindowUnload=()=>{this.window&&this.window.close()},this.release=n=>{if(!this.released&&(this.released=!0,this.windowCheckerInterval&&(clearInterval(this.windowCheckerInterval),this.windowCheckerInterval=null),window.removeEventListener("beforeunload",this.onMainWindowUnload),this.window.removeEventListener("beforeunload",this.release),n)){const{onClose:r}=this.props;typeof r=="function"&&r()}}}render(){return this.state.mounted?On.createPortal(this.props.children,this.container):null}componentDidMount(){this.openChild(),this.setState({mounted:!0})}openChild(){const{url:e,title:n,name:r,width:i,height:o,initPopupInnerRect:a,initPopupOuterRect:s,onBlock:l,onOpen:c,onClose:d}=this.props;let f={width:i,height:o};if(s){f=s();const[h,v,m]=zu;Lu||(f.width-=v*2,f.height-=h+m)}else if(a){f=a();const[h,v]=zu;f.left-=v,f.top-=h,Lu&&(f.height+=h)}else f.left=window.top.outerWidth/2+window.top.screenX-i/2,f.top=window.top.outerHeight/2+window.top.screenY-o/2;this.window=window.open(e,r,yb(f)),this.window?(window.addEventListener("beforeunload",this.onMainWindowUnload),this.window.addEventListener("resize",gb),this.window.document.title=n||document.title,this.window.document.body.appendChild(this.container),this.props.copyStyles&&setTimeout(()=>bb(document,this.window.document),0),typeof c=="function"&&c(this.window),e&&d&&(this.windowCheckerInterval=setInterval(()=>{(!this.window||this.window.closed)&&this.release(!0)},50)),this.window.addEventListener("beforeunload",this.release)):typeof l=="function"?l():console.warn("A new window could not be opened. Maybe it was blocked.")}componentWillUnmount(){this.window&&(this.release(),this.window.close())}}Oa.supported=mb;Oa.defaultProps={url:"",name:"",width:640,height:480,copyStyles:!0};function bb(t,e){Array.from(t.styleSheets).forEach(n=>{let r;if(n.href){const i=t.createElement("link");i.rel="stylesheet",i.href=n.href,e.head.appendChild(i)}else{try{r=n.cssRules}catch(i){}if(r){const i=t.createElement("style");Array.from(n.cssRules).forEach(o=>{const{cssText:a,type:s}=o;let l=a;[3,5].includes(s)&&(l=a.split("url(").map(c=>c[1]==="/"?`${c.slice(0,1)}${window.location.origin}${c.slice(1)}`:c).join("url(")),i.appendChild(t.createTextNode(l))}),e.head.appendChild(i)}}})}function yb(t){return Object.keys(t).reduce((e,n)=>{const r=t[n];return typeof r=="boolean"?e.push(`${n}=${r?"yes":"no"}`):e.push(`${n}=${r}`),e},[]).join(",")}class mn extends p.PureComponent{constructor(){super(...arguments);this.state={dropping:!1},this.onDragOver=e=>{let{panelElement:n,direction:r,depth:i,panelData:o}=this.props;this.setState({dropping:!0});for(let a=0;a<i;++a)n=n.parentElement;if(o.group===vi&&r!=="float")this.context.setDropRect(n,"middle",this,e);else{let a=this.context.getDockId(),s=Pe.getData("panelSize",a);this.context.setDropRect(n,r,this,e,s)}e.accept("")},this.onDragLeave=e=>{this.props,this.setState({dropping:!1}),this.context.setDropRect(null,"remove",this)},this.onDrop=e=>{let n=this.context.getDockId(),r=Pe.getData("tab",n);if(r||(r=Pe.getData("panel",n)),r){let{panelData:i,direction:o,depth:a}=this.props,s=i;for(let l=0;l<a;++l)s=s.parent;this.context.dockMove(r,s,o)}}}render(){let{direction:e,depth:n}=this.props,{dropping:r}=this.state,i=["dock-drop-square"];return i.push(`dock-drop-${e}`),n&&i.push("dock-drop-deep"),r&&i.push("dock-drop-square-dropping"),p.createElement(Nt,{className:i.join(" "),onDragOverT:this.onDragOver,onDragLeaveT:this.onDragLeave,onDropT:this.onDrop},p.createElement("div",{className:"dock-drop-square-box"}))}componentWillUnmount(){this.context.setDropRect(null,"remove",this)}}mn.contextType=ut;class gn extends p.PureComponent{static addDepthSquare(e,n,r,i,o){n==="horizontal"?(e.push(p.createElement(mn,{key:`top${o}`,direction:"top",depth:o,panelData:r,panelElement:i})),e.push(p.createElement(mn,{key:`bottom${o}`,direction:"bottom",depth:o,panelData:r,panelElement:i}))):(e.push(p.createElement(mn,{key:`left${o}`,direction:"left",depth:o,panelData:r,panelElement:i})),e.push(p.createElement(mn,{key:`right${o}`,direction:"right",depth:o,panelData:r,panelElement:i})))}render(){var e;let{panelData:n,panelElement:r,dropFromPanel:i}=this.props,o=this.context.getDockId(),a=[],s=Pe.getData("panel",o),l=this.context.getGroup(i.group);if(l.floatable!==!1&&(!s||!s.panelLock&&((e=s.parent)===null||e===void 0?void 0:e.mode)!=="float")&&a.push(p.createElement(mn,{key:"float",direction:"float",panelData:n,panelElement:r})),s!==n&&!l.disableDock){gn.addDepthSquare(a,"horizontal",n,r,0),gn.addDepthSquare(a,"vertical",n,r,0),!(s==null?void 0:s.panelLock)&&n.group===i.group&&n!==i&&a.push(p.createElement(mn,{key:"middle",direction:"middle",panelData:n,panelElement:r}));let c=n.parent;c&&c.children.length>1&&(gn.addDepthSquare(a,c.mode,n,r,1),c.parent&&gn.addDepthSquare(a,c.parent.mode,n,r,2))}return p.createElement("div",{className:"dock-drop-layer"},a)}}gn.contextType=ut;class Fu extends p.PureComponent{constructor(){super(...arguments);this.getRef=e=>{this._ref=e},this.onDragOver=e=>{var n;let{panelData:r,panelElement:i,dropFromPanel:o}=this.props,a=this.context.getDockId(),s=Pe.getData("panel",a),l=this.context.getGroup(o.group);if(s&&((n=s.parent)===null||n===void 0?void 0:n.mode)==="float")return;let{direction:c,mode:d,depth:f}=this.getDirection(e,l,s===r);if(f=this.getActualDepth(f,d,c),!c||c==="float"&&o.panelLock){this.context.setDropRect(null,"remove",this);return}let h=i;for(let m=0;m<f;++m)h=h.parentElement;let v=Pe.getData("panelSize",a);this.context.setDropRect(h,c,this,e,v),e.accept("")},this.onDragLeave=e=>{this.context.setDropRect(null,"remove",this)},this.onDrop=e=>{let{panelData:n,dropFromPanel:r}=this.props,i=this.context.getDockId(),o=this.context.getGroup(r.group),a=Pe.getData("tab",i),s=Pe.getData("panel",i);if(a||(a=s),a){let{direction:l,mode:c,depth:d}=this.getDirection(e,o,s===n);if(d=this.getActualDepth(d,c,l),!l)return;let f=n;for(let h=0;h<d;++h)f=f.parent;this.context.dockMove(a,f,l)}}}getDirection(e,n,r){let i=this._ref.getBoundingClientRect(),o=Math.min(i.width,500),a=Math.min(i.height,500),s=(e.clientX-i.left)/o,l=(i.right-e.clientX)/o,c=(e.clientY-i.top)/a,d=(i.bottom-e.clientY)/a,f=Math.min(s,l,c,d),h=0;if((n.disableDock||r)&&(f=1),f<0)return{direction:null,depth:0};if(f<.075)h=3;else if(f<.15)h=1;else if(!(f<.3)){if(n.floatable)return{direction:"float",mode:"float",depth:0}}switch(f){case s:return{direction:"left",mode:"horizontal",depth:h};case l:return{direction:"right",mode:"horizontal",depth:h};case c:return{direction:"top",mode:"vertical",depth:h};case d:return{direction:"bottom",mode:"vertical",depth:h}}return{direction:null,depth:0}}getActualDepth(e,n,r){let i=r==="bottom"||r==="right";if(!e)return e;let{panelData:o}=this.props,a=o,s=o.parent,l=0;for(o.parent.mode===n&&++e;s&&l<e;){if(s.mode===n){if(i){if(s.children[s.children.length-1]!==a)break}else if(s.children[0]!==a)break}a=s,s=s.parent,++l}for(;e>l;)e-=2;return e}render(){return p.createElement(Nt,{getRef:this.getRef,className:"dock-drop-edge",onDragOverT:this.onDragOver,onDragLeaveT:this.onDragLeave,onDropT:this.onDrop})}componentWillUnmount(){this.context.setDropRect(null,"remove",this)}}Fu.contextType=ut;class Ge extends p.PureComponent{constructor(){super(...arguments);this.getRef=e=>{this._ref=e},this.state={dropFromPanel:null,draggingHeader:!1},this.onDragOver=e=>{if(Ge._droppingPanel===this)return;this.props;let n=this.context.getDockId(),r=Pe.getData("tab",n),i=Pe.getData("panel",n);(r||i)&&(Ge.droppingPanel=this),r?r.parent?this.setState({dropFromPanel:r.parent}):this.setState({dropFromPanel:{activeId:"",tabs:[],group:r.group}}):i&&this.setState({dropFromPanel:i})},this.onPanelHeaderDragStart=e=>{let{panelData:n}=this.props,{parent:r,x:i,y:o,z:a}=n,s=this.context.getDockId();if(r&&r.mode==="float")this._movingX=i,this._movingY=o,e.setData({panel:this.props.panelData},s),e.startDrag(null,null),this.onFloatPointerDown();else{let l=this.context.getGroup(n.group),[c,d]=ku(this._ref,l);e.setData({panel:n,panelSize:[c,d]},s),e.startDrag(null)}this.setState({draggingHeader:!0})},this.onPanelHeaderDragMove=e=>{let{width:n,height:r}=this.context.getLayoutSize(),{panelData:i}=this.props;i.x=this._movingX+e.dx,i.y=this._movingY+e.dy,n>200&&r>200&&(i.y<0?i.y=0:i.y>r-16&&(i.y=r-16),i.x+i.w<16?i.x=16-i.w:i.x>n-16&&(i.x=n-16)),this.forceUpdate()},this.onPanelHeaderDragEnd=e=>{this._unmounted||(this.setState({draggingHeader:!1}),this.context.onSilentChange(this.props.panelData.activeId,"move"))},this.onPanelCornerDragTL=e=>{this.onPanelCornerDrag(e,"tl")},this.onPanelCornerDragTR=e=>{this.onPanelCornerDrag(e,"tr")},this.onPanelCornerDragBL=e=>{this.onPanelCornerDrag(e,"bl")},this.onPanelCornerDragBR=e=>{this.onPanelCornerDrag(e,"br")},this.onPanelCornerDragMove=e=>{let{panelData:n}=this.props,{dx:r,dy:i}=e;if(this._movingCorner.startsWith("t")){let{width:o,height:a}=this.context.getLayoutSize();this._movingY+i<0?i=-this._movingY:this._movingY+i>a-16&&(i=a-16-this._movingY)}switch(this._movingCorner){case"tl":{n.x=this._movingX+r,n.w=this._movingW-r,n.y=this._movingY+i,n.h=this._movingH-i;break}case"tr":{n.w=this._movingW+r,n.y=this._movingY+i,n.h=this._movingH-i;break}case"bl":{n.x=this._movingX+r,n.w=this._movingW-r,n.h=this._movingH+i;break}case"br":{n.w=this._movingW+r,n.h=this._movingH+i;break}}this.forceUpdate()},this.onPanelCornerDragEnd=e=>{this.context.onSilentChange(this.props.panelData.activeId,"move")},this.onFloatPointerDown=()=>{let{panelData:e}=this.props,{z:n}=e,r=xa(n);r!==n&&(e.z=r,this.forceUpdate())},this.onPanelClicked=e=>{const n=e.nativeEvent.target;!this._ref.contains(this._ref.ownerDocument.activeElement)&&n instanceof Node&&this._ref.contains(n)&&this._ref.querySelector(".dock-bar").focus()},this._unmounted=!1}static set droppingPanel(e){Ge._droppingPanel!==e&&(Ge._droppingPanel&&Ge._droppingPanel.onDragOverOtherPanel(),Ge._droppingPanel=e)}onDragOverOtherPanel(){this.state.dropFromPanel&&this.setState({dropFromPanel:null})}onPanelCornerDrag(e,n){let{parent:r,x:i,y:o,w:a,h:s}=this.props.panelData;r&&r.mode==="float"&&(this._movingCorner=n,this._movingX=i,this._movingY=o,this._movingW=a,this._movingH=s,e.startDrag(null,null))}render(){let{dropFromPanel:e,draggingHeader:n}=this.state,{panelData:r,size:i}=this.props,{minWidth:o,minHeight:a,group:s,id:l,parent:c,panelLock:d}=r,f=s,h=this.context.getGroup(s),{widthFlex:v,heightFlex:m}=h;if(d){let{panelStyle:O,widthFlex:j,heightFlex:N}=d;O&&(f=O),typeof j=="number"&&(v=j),typeof N=="number"&&(m=N)}let b;f&&(b=f.split(" ").map(O=>`dock-style-${O}`).join(" "));let g=(c==null?void 0:c.mode)==="maximize",w=(c==null?void 0:c.mode)==="float",D=(c==null?void 0:c.mode)==="horizontal",E=(c==null?void 0:c.mode)==="vertical",y=this.onFloatPointerDown,S=this.onPanelHeaderDragStart;(!w||g)&&(y=null),g&&(e=null,S=null);let x=`dock-panel ${b||""}${e?" dock-panel-dropping":""}${n?" dragging":""}`,I=1;D&&v!=null?I=v:E&&m!=null&&(I=m);let _=I*i,F=I*1e6;F<1&&(F=1);let k={minWidth:o,minHeight:a,flex:`${_} ${F} ${i}px`};w&&(k.left=r.x,k.top=r.y,k.width=r.w,k.height=r.h,k.zIndex=r.z);let P;if(e){let O=this.context.getGroup(e.group),j=this.context.getDockId();if(!O.tabLocked||Pe.getData("tab",j)==null){let N=this.context.useEdgeDrop()?Fu:gn;P=p.createElement(N,{panelData:r,panelElement:this._ref,dropFromPanel:e})}}return p.createElement(Nt,{getRef:this.getRef,className:x,style:k,"data-dockid":l,onMouseDownCapture:y,onTouchStartCapture:y,onDragOverT:w?null:this.onDragOver,onClick:this.onPanelClicked},p.createElement(_a,{panelData:r,onPanelDragStart:S,onPanelDragMove:this.onPanelHeaderDragMove,onPanelDragEnd:this.onPanelHeaderDragEnd}),w?[p.createElement(Nt,{key:"drag-size-t-l",className:"dock-panel-drag-size dock-panel-drag-size-t-l",onDragStartT:this.onPanelCornerDragTL,onDragMoveT:this.onPanelCornerDragMove,onDragEndT:this.onPanelCornerDragEnd}),p.createElement(Nt,{key:"drag-size-t-r",className:"dock-panel-drag-size dock-panel-drag-size-t-r",onDragStartT:this.onPanelCornerDragTR,onDragMoveT:this.onPanelCornerDragMove,onDragEndT:this.onPanelCornerDragEnd}),p.createElement(Nt,{key:"drag-size-b-l",className:"dock-panel-drag-size dock-panel-drag-size-b-l",onDragStartT:this.onPanelCornerDragBL,onDragMoveT:this.onPanelCornerDragMove,onDragEndT:this.onPanelCornerDragEnd}),p.createElement(Nt,{key:"drag-size-b-r",className:"dock-panel-drag-size dock-panel-drag-size-b-r",onDragStartT:this.onPanelCornerDragBR,onDragMoveT:this.onPanelCornerDragMove,onDragEndT:this.onPanelCornerDragEnd})]:null,P)}componentWillUnmount(){Ge._droppingPanel===this&&(Ge.droppingPanel=null),this._unmounted=!0}}Ge.contextType=ut;var Gt={},At={},wb=as(hb),xb=ss&&ss.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(At,"__esModule",{value:!0});At.popupWindowBorder=At.popupSupported=At.isSafari=At.gerWindowBorder=void 0;const Cb=xb(wb),wt=typeof window=="object"&&Cb.default.getParser(window.navigator.userAgent);function Bu(){switch(wt==null?void 0:wt.getOSName(!0)){case"windows":{let t;switch(wt.getBrowserName(!0)){case"firefox":t=[68,8,8];break;case"microsoft edge":t=[62,8,8];break;default:t=[60,8,8]}return window.devicePixelRatio>1&&(t[0]-=2,t[1]-=1,t[2]-=1),t}case"macos":switch(wt.getBrowserName(!0)){case"safari":return[22,0,0];case"firefox":return[59,0,0];default:return[51,0,0]}}return[60,8,8]}At.gerWindowBorder=Bu;At.isSafari=(wt==null?void 0:wt.getBrowserName(!0))==="safari";At.popupSupported=(wt==null?void 0:wt.getPlatformType())==="desktop";At.popupWindowBorder=Bu();Object.defineProperty(Gt,"__esModule",{value:!0});var ju=Gt.mapWindowToElement=Vu=Gt.mapElementToScreenRect=Gt.estimateWindowBorder=Gt.estimateBrowserZoom=void 0;const Wu=At;function Hu(t){let[e,n,r]=Wu.gerWindowBorder();t.outerWidth===t.screen.availWidth&&(n=0,r=0);let i=(t.outerWidth-n*2)/t.innerWidth,o=(t.outerHeight-e-r)/t.innerHeight,a=Math.min(o,i);return a>1.8?a=Math.round(a):a>.73?a=Math.round(a*20)/20:a=2/Math.round(2/a),a}Gt.estimateBrowserZoom=Hu;function Ta(t,e=!1){let n=t?Hu(t):1,r=t.outerWidth-t.innerWidth*n>>1,i=Math.round(t.outerHeight-t.innerHeight*n);return r>32?r=8:i-=r,[r,i,n]}Gt.estimateWindowBorder=Ta;class $u{init(e,n,r,i,o,a,s,l){this.scaleX=s/r,this.scaleY=l/i,this.offsetX=o-e*this.scaleX,this.offsetY=a-n*this.scaleY}map(e){return{x:e.x*this.scaleX+this.offsetX,y:e.y*this.scaleY+this.offsetY}}revertMap(e){return{x:(e.x-this.offsetX)/this.scaleX,y:(e.y-this.offsetY)/this.scaleY}}}function Ku(t,e){if(!t)return null;let n=t.getBoundingClientRect(),r=new $u;r.init(0,0,t.offsetWidth,t.offsetHeight,n.x,n.y,n.width,n.height);let i;if(e){let{x:d,y:f}=r.map({x:e.left,y:e.top}),{x:h,y:v}=r.map({x:e.left+e.width,y:e.top+e.height});i={left:d,top:f,width:h-d,height:v-f}}else i={left:n.left,top:n.top,width:n.width,height:n.height};let a=t.ownerDocument.defaultView;if(!a)return n;if(a.frameElement)return Ku(a.frameElement,i);let[s,l,c]=Ta(a);return c!==1&&(i.left*=c,i.top*=c,i.width*=c,i.height*=c),i.left+=a.screenX+s,i.top+=a.screenY+l,i}var Vu=Gt.mapElementToScreenRect=Ku;function Uu(t,e,n,r=!0){if(!t)return null;if(e){if(n={left:e.screenX,top:e.screenY,width:e.outerWidth,height:e.outerHeight},r){const[v,m,b]=Wu.popupWindowBorder;n.left+=m,n.top+=v,n.width-=m*2,n.height-=v+b}}else if(!n)return null;let o=t.ownerDocument.defaultView;if(!o)return n;if(o.frameElement)n=Uu(o.frameElement,null,n);else{let[v,m,b]=Ta(o);n.left-=o.screenX+v,n.top-=o.screenY+m,b!==1&&(n.left/=b,n.top/=b,n.width/=b,n.height/=b)}let a=t.getBoundingClientRect(),s=new $u;s.init(0,0,t.offsetWidth,t.offsetHeight,a.x,a.y,a.width,a.height);let l,{x:c,y:d}=s.revertMap({x:n.left,y:n.top}),{x:f,y:h}=s.revertMap({x:n.left+n.width,y:n.top+n.height});return l={left:c,top:d,width:f-c,height:h-d},l}ju=Gt.mapWindowToElement=Uu;class Gu extends p.PureComponent{constructor(){super(...arguments);this.onOpen=e=>{!this._window&&e&&(this._window=e)},this.onUnload=()=>{let{panelData:e}=this.props,n=this.context.getRootElement();const r=ju(n,this._window);r.width>0&&r.height>0&&(e.x=r.left,e.y=r.top,e.w=r.width,e.h=r.height),this.context.dockMove(e,null,"float")},this.initPopupInnerRect=()=>{let{panelData:e}=this.props;return Vu(this.context.getRootElement(),{left:e.x,top:e.y,width:e.w,height:e.h})}}render(){let{panelData:e}=this.props,{x:n,y:r,w:i,h:o}=e;return p.createElement(Oa,{copyStyles:!0,onOpen:this.onOpen,onClose:this.onUnload,onBlock:this.onUnload,initPopupInnerRect:this.initPopupInnerRect,width:i,height:o},p.createElement("div",{className:"dock-wbox"},p.createElement(Ge,{size:e.size,panelData:e,key:e.id})))}}Gu.contextType=ut;class Pa extends p.PureComponent{render(){let{children:e}=this.props.boxData,n=[];for(let r of e)"tabs"in r&&n.push(p.createElement(Gu,{key:r.id,panelData:r}));return p.createElement(p.Fragment,null,n)}}Pa.enabled=typeof window=="object"&&((window==null?void 0:window.navigator.platform)==="Win32"||(window==null?void 0:window.navigator.platform)==="MacIntel");function Sb(t){for(let e=0;e<10;++e){if(!t)return null;if(t.classList.contains("dock-panel"))return t;t=t.parentElement}return null}function qu(t){var e,n;return t==null||((e=t.parentElement)===null||e===void 0?void 0:e.tagName)==="LI"||((n=t.parentElement)===null||n===void 0?void 0:n.parentElement.tagName)==="LI"}class Eb{constructor(e){this.getRef=n=>{qu(n)||(this._ref=n)},this.getHitAreaRef=n=>{qu(n)||(this._hitAreaRef=n)},this.onCloseClick=n=>{this.context.dockMove(this.data,null,"remove"),n.stopPropagation()},this.onDragStart=n=>{let r=this.data.parent;if(r.parent.mode==="float"&&r.tabs.length===1)return;let i=Sb(this._ref),o=this.context.getGroup(this.data.group),[a,s]=ku(i,o);n.setData({tab:this.data,panelSize:[a,s]},this.context.getDockId()),n.startDrag(this._ref.parentElement,this._ref.parentElement)},this.onDragOver=n=>{let r=this.context.getDockId(),i=Pe.getData("tab",r),o=Pe.getData("panel",r),a;if(i)o=i.parent,a=i.group;else{if(!o)return;if(o==null?void 0:o.panelLock){n.reject();return}a=o.group}if(a!==this.data.group)n.reject();else if(i&&i!==this.data){let s=this.getDropDirection(n);this.context.setDropRect(this._hitAreaRef,s,this),n.accept("")}else if(o&&o!==this.data.parent){let s=this.getDropDirection(n);this.context.setDropRect(this._hitAreaRef,s,this),n.accept("")}},this.onDragLeave=n=>{this.context.setDropRect(null,"remove",this)},this.onDrop=n=>{let r=this.context.getDockId(),i,o=Pe.getData("tab",r);if(o?i=o.parent:i=Pe.getData("panel",r),o&&o!==this.data){let a=this.getDropDirection(n);this.context.dockMove(o,this.data,a)}else if(i&&i!==this.data.parent){let a=this.getDropDirection(n);this.context.dockMove(i,this.data,a)}},this.context=e}setData(e){return e!==this.data?(this.data=e,this.content=this.render(),!0):!1}getDropDirection(e){let n=this._hitAreaRef.getBoundingClientRect(),r=n.left+n.width*.5;return e.clientX>r?"after-tab":"before-tab"}render(){let{id:e,title:n,group:r,content:i,closable:o,cached:a,parent:s}=this.data,{onDragStart:l,onDragOver:c,onDrop:d,onDragLeave:f}=this;s.parent.mode==="window"&&(l=null,c=null,d=null,f=null),this.context.getGroup(r),typeof i=="function"&&(i=i(this.data));let h=p.createElement(Nt,{getRef:this.getRef,onDragStartT:l,onDragOverT:c,onDropT:d,onDragLeaveT:f},n,o?p.createElement("div",{className:"dock-tab-close-btn",onClick:this.onCloseClick}):null,p.createElement("div",{className:"dock-tab-hit-area",ref:this.getHitAreaRef}));return p.createElement(Ou,{key:e,cacheId:e,cached:a,tab:h},i)}destroy(){}}class _a extends p.PureComponent{constructor(){super(...arguments);this._cache=new Map,this.onMaximizeClick=e=>{let{panelData:n}=this.props;this.context.dockMove(n,null,"maximize"),e.stopPropagation()},this.onNewWindowClick=()=>{let{panelData:e}=this.props;this.context.dockMove(e,null,"new-window")},this.renderTabBar=(e,n)=>{let{panelData:r,onPanelDragStart:i,onPanelDragMove:o,onPanelDragEnd:a}=this.props,{group:s,panelLock:l}=r,c=this.context.getGroup(s),{panelExtra:d}=c,f=c.maximizable;r.parent.mode==="window"&&(i=null,f=!1),l&&l.panelExtra&&(d=l.panelExtra);let h=c.newWindow&&Pa.enabled&&r.parent.mode==="float",v;return d?v=d(r,this.context):(f||h)&&(v=p.createElement("div",{className:"dock-panel-max-btn",onClick:f?this.onMaximizeClick:null}),h&&(v=this.addNewWindowMenu(v,!f))),p.createElement(Yg,Object.assign({onDragStart:i,onDragMove:o,onDragEnd:a,TabNavList:n,isMaximized:r.parent.mode==="maximize"},e,{extra:v}))},this.onTabChange=e=>{this.props.panelData.activeId=e,this.context.onSilentChange(e,"active"),this.forceUpdate()}}updateTabs(e){if(e===this.cachedTabs)return;this.cachedTabs=e;let n=new Map,r=0;for(let i of e){let{id:o}=i;if(this._cache.has(o)){let a=this._cache.get(o);n.set(o,a),a.setData(i),++r}else{let a=new Eb(this.context);n.set(o,a),a.setData(i)}}if(r!==this._cache.size)for(let[i,o]of this._cache)n.has(i)||o.destroy();this._cache=n}addNewWindowMenu(e,n){const r=p.createElement(Cu,{onClick:this.onNewWindowClick},p.createElement(Bg,null,"New Window"));let i=n?["contextMenu","click"]:["contextMenu"];return p.createElement(Uc,{prefixCls:"dock-dropdown",overlay:r,trigger:i,mouseEnterDelay:.1,mouseLeaveDelay:.1},e)}render(){let{group:e,tabs:n,activeId:r}=this.props.panelData,i=this.context.getGroup(e),{animated:o}=i;o==null&&(o=!0),this.updateTabs(n);let a=[];for(let[s,l]of this._cache)a.push(l.content);return p.createElement(eu,{prefixCls:"dock",moreIcon:"...",animated:o,renderTabBar:this.renderTabBar,activeKey:r,onChange:this.onTabChange},a)}}_a.contextType=ut;_a.propKeys=["group","tabs","activeId","onTabChange"];class Db{constructor(e){this.beforeSize=0,this.beforeMinSize=0,this.afterSize=0,this.afterMinSize=0,this.element=e.element,this.beforeDivider=e.beforeDivider,this.afterDivider=e.afterDivider;for(let n of this.beforeDivider)this.beforeSize+=n.size,n.minSize>0&&(this.beforeMinSize+=n.minSize);for(let n of this.afterDivider)this.afterSize+=n.size,n.minSize>0&&(this.afterMinSize+=n.minSize)}}function Yu(t,e,n){let r=-1,i=[],o=0;for(;o!==r;){r=o,o=0;let a=(t-r)/(e-r);if(!(a>=0))break;for(let s=0;s<n.length;++s){let l=n[s].size*a;l<n[s].minSize&&(l=n[s].minSize,o+=l),i[s]=l}}return i}class Xu extends p.PureComponent{constructor(){super(...arguments);this.startDrag=e=>{this.boxData=new Db(this.props.getDividerData(this.props.idx)),e.startDrag(this.boxData.element,null)},this.dragMove=e=>{e.event.shiftKey||e.event.ctrlKey||e.event.altKey?this.dragMoveAll(e,e.dx,e.dy):this.dragMove2(e,e.dx,e.dy)},this.dragEnd=e=>{let{onDragEnd:n}=this.props;this.boxData=null,n&&n()}}dragMove2(e,n,r){let{isVertical:i,changeSizes:o}=this.props,{beforeDivider:a,afterDivider:s}=this.boxData;if(!(a.length&&s.length))return;let l=i?r:n,c=a[a.length-1],d=s[0],f=c.size+l,h=d.size-l;l>0?h<d.minSize&&(h=d.minSize,f=c.size+d.size-h):f<c.minSize&&(f=c.minSize,h=c.size+d.size-f);let v=a.concat(s).map(m=>m.size);v[a.length-1]=f,v[a.length]=h,o(v)}dragMoveAll(e,n,r){let{isVertical:i,changeSizes:o}=this.props,{beforeSize:a,beforeMinSize:s,afterSize:l,afterMinSize:c,beforeDivider:d,afterDivider:f}=this.boxData,h=i?r:n,v=a+h,m=l-h;h>0?m<c&&(m=c,v=a+l-c):v<s&&(v=s,m=a+l-s),o(Yu(v,a,d).concat(Yu(m,l,f)))}render(){let{className:e}=this.props;return e||(e="dock-divider"),p.createElement(Nt,{className:e,onDragStartT:this.startDrag,onDragMoveT:this.dragMove,onDragEndT:this.dragEnd})}}class Yi extends p.PureComponent{constructor(){super(...arguments);this.getRef=e=>{this._ref=e},this.getDividerData=e=>{if(this._ref){let{children:n,mode:r}=this.props.boxData,i=this._ref.childNodes;if(i.length===n.length*2-1){let o=[];for(let a=0;a<n.length;++a)r==="vertical"?o.push({size:i[a*2].offsetHeight,minSize:n[a].minHeight}):o.push({size:i[a*2].offsetWidth,minSize:n[a].minWidth});return{element:this._ref,beforeDivider:o.slice(0,e),afterDivider:o.slice(e)}}}return null},this.changeSizes=e=>{let{children:n}=this.props.boxData;if(n.length===e.length){for(let r=0;r<n.length;++r)n[r].size=e[r];this.forceUpdate()}},this.onDragEnd=()=>{this.context.onSilentChange(null,"move")}}render(){let{boxData:e}=this.props,{minWidth:n,minHeight:r,size:i,children:o,mode:a,id:s,widthFlex:l,heightFlex:c}=e,d=a==="vertical",f=[];for(let g=0;g<o.length;++g){g>0&&f.push(p.createElement(Xu,{idx:g,key:g,isVertical:d,onDragEnd:this.onDragEnd,getDividerData:this.getDividerData,changeSizes:this.changeSizes}));let w=o[g];"tabs"in w?f.push(p.createElement(Ge,{size:w.size,panelData:w,key:w.id})):"children"in w&&f.push(p.createElement(Yi,{size:w.size,boxData:w,key:w.id}))}let h,v=1;a==="vertical"?(h="dock-box dock-vbox",l!=null&&(v=l)):(h="dock-box dock-hbox",c!=null&&(v=c));let m=v*i,b=v*1e6;return b<1&&(b=1),p.createElement("div",{ref:this.getRef,className:h,"data-dockid":s,style:{minWidth:n,minHeight:r,flex:`${m} ${b} ${i}px`}},f)}}Yi.contextType=ut;class Mb extends p.PureComponent{render(){let{children:e}=this.props.boxData,n=[];for(let r of e)"tabs"in r&&n.push(p.createElement(Ge,{size:r.size,panelData:r,key:r.id}));return p.createElement("div",{className:"dock-box dock-fbox"},n)}}function Ob(t,e){e.panels.set(t.id,t);for(let n of t.tabs)e.tabs.set(n.id,n)}function Xi(t,e){for(let n of t.children)"tabs"in n?Ob(n,e):"children"in n&&Xi(n,e)}function Tb(t){let e={panels:new Map,tabs:new Map};return t&&("children"in t?Xi(t,e):("dockbox"in t&&Xi(t.dockbox,e),"floatbox"in t&&Xi(t.floatbox,e))),e}function Ju(t,e,n){function r(a){return e?e(a):{id:a.id}}function i(a){let s=[];for(let h of a.tabs){let v=r(h);v&&s.push(v)}let{id:l,size:c,activeId:d}=a,f;if(a.parent.mode==="float"||a.parent.mode==="window"){let{x:h,y:v,z:m,w:b,h:g}=a;f={id:l,size:c,tabs:s,activeId:d,x:h,y:v,z:m,w:b,h:g}}else f={id:l,size:c,tabs:s,activeId:d};return n&&n(f,a),f}function o(a){let s=[];for(let f of a.children)"tabs"in f?s.push(i(f)):"children"in f&&s.push(o(f));let{id:l,size:c,mode:d}=a;return{id:l,size:c,mode:d,children:s}}return{dockbox:o(t.dockbox),floatbox:o(t.floatbox),windowbox:o(t.windowbox),maxbox:o(t.maxbox)}}function Pb(t,e,n,r){var i,o,a;let s=Tb(e);function l(f){if(n)return n(f);let{id:h}=f;return s.tabs.has(h)?s.tabs.get(h):null}function c(f){let{id:h,size:v,activeId:m,x:b,y:g,z:w,w:D,h:E}=f,y=[];for(let x of f.tabs){let I=l(x);I&&y.push(I)}let S;return D||E||b||g||w?S={id:h,size:v,activeId:m,x:b,y:g,z:w,w:D,h:E,tabs:y}:S={id:h,size:v,activeId:m,tabs:y},f.id===mi?S.panelLock={}:r?r(f,S):s.panels.has(h)&&(S=Object.assign(Object.assign({},s.panels.get(h)),S)),S}function d(f){if(!f)return null;let h=[];for(let g of f.children)"tabs"in g?h.push(c(g)):"children"in g&&h.push(d(g));let{id:v,size:m,mode:b}=f;return{id:v,size:m,mode:b,children:h}}return{dockbox:d(t.dockbox),floatbox:d((i=t.floatbox)!==null&&i!==void 0?i:{mode:"float",children:[],size:0}),windowbox:d((o=t.windowbox)!==null&&o!==void 0?o:{mode:"window",children:[],size:0}),maxbox:d((a=t.maxbox)!==null&&a!==void 0?a:{mode:"maximize",children:[],size:1})}}class Zu extends p.PureComponent{render(){let e=this.props.boxData.children[0];if(e)return this.hidePanelData=Object.assign(Object.assign({},e),{id:"",tabs:[]}),p.createElement("div",{className:"dock-box dock-mbox dock-mbox-show"},p.createElement(Ge,{size:100,panelData:e}));if(this.hidePanelData){let n=this.hidePanelData;return this.hidePanelData=null,p.createElement("div",{className:"dock-box dock-mbox dock-mbox-hide"},p.createElement(Ge,{size:100,panelData:n}))}else return p.createElement("div",{className:"dock-box dock-mbox dock-mbox-hide"})}}var _b=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]]);return n};class Ib extends p.PureComponent{constructor(){super(...arguments);this._caches=new Map,this.destroyRemovedPane=()=>{this._pendingDestroy=null;let e=!1;for(let[n,r]of this._caches)r.owner==null&&(this._caches.delete(n),e=!0);e&&this.forceUpdate()}}getTabCache(e,n){let r=this._caches.get(e);if(r)r.owner=n;else{let i=document.createElement("div");i.className="dock-pane-cache",r={div:i,id:e,owner:n},this._caches.set(e,r)}return r}removeTabCache(e,n){let r=this._caches.get(e);r&&r.owner===n&&(r.owner=null,this._pendingDestroy||(this._pendingDestroy=setTimeout(this.destroyRemovedPane,1)))}updateTabCache(e,n){let r=this._caches.get(e);r&&(r.portal=On.createPortal(n,r.div,r.id),this.forceUpdate())}}class Un extends Ib{constructor(e){super(e);this.getRef=a=>{this._ref=a},this.onDragStateChange=a=>{a==null&&(Ge.droppingPanel=null,this.state.dropRect&&this.setState({dropRect:null}))},this._onWindowResize=us(()=>{let a=this.getLayout();if(this._ref){let s=Ma(a,this._ref.offsetWidth,this._ref.offsetHeight);a!==s&&(s=Ar(s,this.props.groups),this.changeLayout(s,null,"move"))}},200);let{layout:n,defaultLayout:r,loadTab:i}=e,o;if(r)o=this.prepareInitData(e.defaultLayout);else if(!i)throw new Error("DockLayout.loadTab and DockLayout.defaultLayout should not both be undefined.");n?this.state={layout:Un.loadLayoutData(n,e),dropRect:null}:this.state={layout:o,dropRect:null},Kg(this.onDragStateChange),window.addEventListener("resize",this._onWindowResize)}getRootElement(){return this._ref}prepareInitData(e){let n=Object.assign({},e);return Ar(n,this.props.groups,this.props.loadTab),n}getDockId(){return this.props.dockId||this}getGroup(e){if(e){let{groups:n}=this.props;if(n&&e in n)return n[e];if(e===vi)return nv}return tv}dockMove(e,n,r){let i=this.getLayout();if(r==="maximize"?(i=ib(i,e),this.panelToFocus=e.id):r==="front"?i=rb(i,e):i=Iu(i,e),typeof n=="string"?n=this.find(n,dt.All):n=Vi(n),r==="float"){let o=qi(e);o.z=xa(null),this.state.dropRect?i=_u(i,o,this.state.dropRect):(i=_u(i,o),this._ref&&(i=Ma(i,this._ref.offsetWidth,this._ref.offsetHeight)))}else if(r==="new-window"){let o=qi(e);i=tb(i,o)}else if(n)if("tabs"in n)if(r==="middle")i=Sa(i,e,n);else{let o=qi(e);i=eb(i,o,n,r)}else if("children"in n){let o=qi(e);i=Ea(i,o,n,r)}else i=Qg(i,e,n,r);if(i!==this.getLayout()){i=Ar(i,this.props.groups);let o=null;e.hasOwnProperty("tabs")?o=e.activeId:o=e.id,this.changeLayout(i,o,r)}this.onDragStateChange(!1)}find(e,n){return Ca(this.getLayout(),e,n)}getLayoutSize(){return this._ref?{width:this._ref.offsetWidth,height:this._ref.offsetHeight}:{width:0,height:0}}updateTab(e,n,r=!0){let i=this.find(e,dt.AnyTab);if(i){let o=i.parent,a=o.tabs.indexOf(i);if(a>=0){let{loadTab:s}=this.props,l=this.getLayout(),c=o.activeId;return n&&(s&&!("content"in n&&"title"in n)&&(n=s(n)),l=Iu(l,i),o=Vi(o),l=Sa(l,n,o,a),o=Vi(o)),r||(o.activeId=c,this.panelToFocus=o.id),l=Ar(l,this.props.groups),this.changeLayout(l,n.id,"update"),!0}}return!1}navigateToPanel(e,n){if(!n){e||(e=this._ref.querySelector(".dock-tab-active>.dock-tab-btn")),e.focus();return}let r,i=n==="ArrowUp"||n==="ArrowDown"?".dock>.dock-bar":".dock-box>.dock-panel",o=Array.from(this._ref.querySelectorAll(i)),a=o.find(c=>c.contains(e)),s=a.getBoundingClientRect(),l=[];for(let c of o)if(c!==a){let d=c.getBoundingClientRect(),f=lb(s,d,n);f>=0&&l.push({panel:c,rect:d,distance:f})}l.sort((c,d)=>c.distance-d.distance);for(let c of l)if(r=c.panel.querySelector(".dock-tab-active>.dock-tab-btn"),r)break;r&&r.focus()}useEdgeDrop(){return this.props.dropMode==="edge"}setDropRect(e,n,r,i,o=[300,300]){let{dropRect:a}=this.state;if(a){if(n==="remove"){a.source===r&&this.setState({dropRect:null});return}else if(a.element===e&&a.direction===n&&n!=="float")return}if(!e){this.setState({dropRect:null});return}let s=this._ref.getBoundingClientRect(),l=this._ref.offsetWidth/s.width,c=this._ref.offsetHeight/s.height,d=e.getBoundingClientRect(),f=(d.left-s.left)*l,h=(d.top-s.top)*c,v=d.width*l,m=d.height*c,b=.5;switch(e.classList.contains("dock-box")&&(b=.3),n){case"float":{let g=(i.clientX-s.left)*l;h=(i.clientY-s.top)*c-15,v=o[0],m=o[1],f=g-(v>>1);break}case"right":f+=v*(1-b);case"left":v*=b;break;case"bottom":h+=m*(1-b);case"top":m*=b;break;case"after-tab":f+=v-15,v=30;break;case"before-tab":f-=15,v=30;break}this.setState({dropRect:{left:f,top:h,width:v,height:m,element:e,source:r,direction:n}})}render(){this.tempLayout=null;let{style:e,maximizeTo:n}=this.props,{layout:r,dropRect:i}=this.state,o;if(i){let{element:l,direction:c}=i,d=_b(i,["element","direction"]);o=Object.assign(Object.assign({},d),{display:"block"}),c==="float"&&(o.transition="none")}let a;n?(typeof n=="string"&&(n=document.getElementById(n)),a=On.createPortal(p.createElement(Zu,{boxData:r.maxbox}),n)):a=p.createElement(Zu,{boxData:r.maxbox});let s=[];for(let[l,c]of this._caches)c.portal&&s.push(c.portal);return p.createElement("div",{ref:this.getRef,className:"dock-layout",style:e},p.createElement(rv,{value:this},p.createElement(Yi,{size:1,boxData:r.dockbox}),p.createElement(Mb,{boxData:r.floatbox}),p.createElement(Pa,{boxData:r.windowbox}),a,s),p.createElement("div",{className:"dock-drop-indicator",style:o}))}componentDidUpdate(e,n,r){var i;if(this.panelToFocus){let o=this._ref.querySelector(`.dock-panel[data-dockid="${this.panelToFocus}"]`);o&&!o.contains(this._ref.ownerDocument.activeElement)&&((i=o.querySelector(".dock-bar"))===null||i===void 0||i.focus()),this.panelToFocus=null}}componentWillUnmount(){window.removeEventListener("resize",this._onWindowResize),Vg(this.onDragStateChange),this._onWindowResize.cancel()}setLayout(e){this.tempLayout=e,this.setState({layout:e})}getLayout(){return this.tempLayout||this.state.layout}changeLayout(e,n,r,i=!1){let{layout:o,onLayoutChange:a}=this.props,s;a&&(s=Ju(e,this.props.saveTab,this.props.afterPanelSaved),e.loadedFrom=s,a(s,n,r),o&&this.forceUpdate()),!o&&!i&&this.setLayout(e)}onSilentChange(e=null,n){let{onLayoutChange:r}=this.props;if(r){let i=this.getLayout();this.changeLayout(i,e,n,!0)}}saveLayout(){return Ju(this.getLayout(),this.props.saveTab,this.props.afterPanelSaved)}loadLayout(e){this.setLayout(Un.loadLayoutData(e,this.props,this._ref.offsetWidth,this._ref.offsetHeight))}static loadLayoutData(e,n,r=0,i=0){let{defaultLayout:o,loadTab:a,afterPanelLoaded:s,groups:l}=n,c=Pb(e,o,a,s);return c=Ma(c,r,i),c=Ar(c,l),c.loadedFrom=e,c}static getDerivedStateFromProps(e,n){let{layout:r}=e,{layout:i}=n;return r&&r!==i.loadedFrom?{layout:Un.loadLayoutData(r,e)}:null}}var kb=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]]);return n};class Rb extends p.PureComponent{constructor(){super(...arguments);this.getRef=e=>{this._ref=e},this.getDividerData=e=>{if(this._ref){let{children:n,mode:r}=this.props,i=this._ref.childNodes,o=1;if(Array.isArray(n)&&(o=n.length),i.length===o*2-1){let a=[];for(let s=0;s<o;++s)r==="vertical"?a.push({size:i[s*2].offsetHeight}):a.push({size:i[s*2].offsetWidth});return{element:this._ref,beforeDivider:a.slice(0,e),afterDivider:a.slice(e)}}}return null},this.changeSizes=e=>{let{mode:n}=this.props,r=this._ref.childNodes;if(r.length===e.length*2-1){for(let i=0;i<e.length;++i)n==="vertical"?r[i*2].style.height=`${e[i]}px`:r[i*2].style.width=`${e[i]}px`;this.forceUpdate()}}}render(){let e=this.props,{children:n,mode:r,className:i}=e,o=kb(e,["children","mode","className"]),a=r==="vertical",s=[];if(Array.isArray(n))for(let c=0;c<n.length;++c)c>0&&s.push(p.createElement(Xu,{idx:c,key:c,isVertical:a,getDividerData:this.getDividerData,changeSizes:this.changeSizes})),s.push(n[c]);else s=n;let l;return r==="vertical"?l="divider-box dock-vbox":l="divider-box dock-hbox",i&&(l=`${l} ${i}`),p.createElement("div",Object.assign({ref:this.getRef,className:l},o),s)}}Rb.contextType=ut;var Ia={exports:{}},bn={},ka={exports:{}},xt={},Ji={exports:{}};(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=s;/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */var n=/input|select|textarea|button|object/;function r(l){var c=l.offsetWidth<=0&&l.offsetHeight<=0;if(c&&!l.innerHTML)return!0;try{var d=window.getComputedStyle(l);return c?d.getPropertyValue("overflow")!=="visible"||l.scrollWidth<=0&&l.scrollHeight<=0:d.getPropertyValue("display")=="none"}catch(f){return console.warn("Failed to inspect element style"),!1}}function i(l){for(var c=l;c&&c!==document.body;){if(r(c))return!1;c=c.parentNode}return!0}function o(l,c){var d=l.nodeName.toLowerCase(),f=n.test(d)&&!l.disabled||d==="a"&&l.href||c;return f&&i(l)}function a(l){var c=l.getAttribute("tabindex");c===null&&(c=void 0);var d=isNaN(c);return(d||c>=0)&&o(l,!d)}function s(l){return[].slice.call(l.querySelectorAll("*"),0).filter(a)}t.exports=e.default})(Ji,Ji.exports);Object.defineProperty(xt,"__esModule",{value:!0});xt.resetState=zb;xt.log=Fb;xt.handleBlur=zr;xt.handleFocus=Fr;xt.markForFocusLater=Bb;xt.returnFocus=jb;xt.popWithoutFocus=Wb;xt.setupScopedFocus=Hb;xt.teardownScopedFocus=$b;var Nb=Ji.exports,Ab=Lb(Nb);function Lb(t){return t&&t.__esModule?t:{default:t}}var Gn=[],qn=null,Ra=!1;function zb(){Gn=[]}function Fb(){}function zr(){Ra=!0}function Fr(){if(Ra){if(Ra=!1,!qn)return;setTimeout(function(){if(!qn.contains(document.activeElement)){var t=(0,Ab.default)(qn)[0]||qn;t.focus()}},0)}}function Bb(){Gn.push(document.activeElement)}function jb(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,e=null;try{Gn.length!==0&&(e=Gn.pop(),e.focus({preventScroll:t}));return}catch(n){console.warn(["You tried to return focus to",e,"but it is not in the DOM anymore"].join(" "))}}function Wb(){Gn.length>0&&Gn.pop()}function Hb(t){qn=t,window.addEventListener?(window.addEventListener("blur",zr,!1),document.addEventListener("focus",Fr,!0)):(window.attachEvent("onBlur",zr),document.attachEvent("onFocus",Fr))}function $b(){qn=null,window.addEventListener?(window.removeEventListener("blur",zr),document.removeEventListener("focus",Fr)):(window.detachEvent("onBlur",zr),document.detachEvent("onFocus",Fr))}var Na={exports:{}};(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=o;var n=Ji.exports,r=i(n);function i(a){return a&&a.__esModule?a:{default:a}}function o(a,s){var l=(0,r.default)(a);if(!l.length){s.preventDefault();return}var c=void 0,d=s.shiftKey,f=l[0],h=l[l.length-1];if(a===document.activeElement){if(!d)return;c=h}if(h===document.activeElement&&!d&&(c=f),f===document.activeElement&&d&&(c=h),c){s.preventDefault(),c.focus();return}var v=/(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent),m=v!=null&&v[1]!="Chrome"&&/\biPod\b|\biPad\b/g.exec(navigator.userAgent)==null;if(!!m){var b=l.indexOf(document.activeElement);if(b>-1&&(b+=d?-1:1),c=l[b],typeof c=="undefined"){s.preventDefault(),c=d?h:f,c.focus();return}s.preventDefault(),c.focus()}}t.exports=e.default})(Na,Na.exports);var Ct={},Kb=function(){},Vb=Kb,St={},Qu={exports:{}};/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/(function(t){(function(){var e=!!(typeof window!="undefined"&&window.document&&window.document.createElement),n={canUseDOM:e,canUseWorkers:typeof Worker!="undefined",canUseEventListeners:e&&!!(window.addEventListener||window.attachEvent),canUseViewport:e&&!!window.screen};t.exports?t.exports=n:window.ExecutionEnvironment=n})()})(Qu);Object.defineProperty(St,"__esModule",{value:!0});St.canUseDOM=St.SafeNodeList=St.SafeHTMLCollection=void 0;var Ub=Qu.exports,Gb=qb(Ub);function qb(t){return t&&t.__esModule?t:{default:t}}var Zi=Gb.default,Yb=Zi.canUseDOM?window.HTMLElement:{};St.SafeHTMLCollection=Zi.canUseDOM?window.HTMLCollection:{};St.SafeNodeList=Zi.canUseDOM?window.NodeList:{};St.canUseDOM=Zi.canUseDOM;St.default=Yb;Object.defineProperty(Ct,"__esModule",{value:!0});Ct.resetState=ey;Ct.log=ty;Ct.assertNodeList=ed;Ct.setElement=ny;Ct.validateElement=Aa;Ct.hide=ry;Ct.show=iy;Ct.documentNotReadyOrSSRTesting=oy;var Xb=Vb,Jb=Qb(Xb),Zb=St;function Qb(t){return t&&t.__esModule?t:{default:t}}var ft=null;function ey(){ft&&(ft.removeAttribute?ft.removeAttribute("aria-hidden"):ft.length!=null?ft.forEach(function(t){return t.removeAttribute("aria-hidden")}):document.querySelectorAll(ft).forEach(function(t){return t.removeAttribute("aria-hidden")})),ft=null}function ty(){}function ed(t,e){if(!t||!t.length)throw new Error("react-modal: No elements were found for selector "+e+".")}function ny(t){var e=t;if(typeof e=="string"&&Zb.canUseDOM){var n=document.querySelectorAll(e);ed(n,e),e=n}return ft=e||ft,ft}function Aa(t){var e=t||ft;return e?Array.isArray(e)||e instanceof HTMLCollection||e instanceof NodeList?e:[e]:((0,Jb.default)(!1,["react-modal: App element is not defined.","Please use `Modal.setAppElement(el)` or set `appElement={el}`.","This is needed so screen readers don't see main content","when modal is opened. It is not recommended, but you can opt-out","by setting `ariaHideApp={false}`."].join(" ")),[])}function ry(t){var e=!0,n=!1,r=void 0;try{for(var i=Aa(t)[Symbol.iterator](),o;!(e=(o=i.next()).done);e=!0){var a=o.value;a.setAttribute("aria-hidden","true")}}catch(s){n=!0,r=s}finally{try{!e&&i.return&&i.return()}finally{if(n)throw r}}}function iy(t){var e=!0,n=!1,r=void 0;try{for(var i=Aa(t)[Symbol.iterator](),o;!(e=(o=i.next()).done);e=!0){var a=o.value;a.removeAttribute("aria-hidden")}}catch(s){n=!0,r=s}finally{try{!e&&i.return&&i.return()}finally{if(n)throw r}}}function oy(){ft=null}var Yn={};Object.defineProperty(Yn,"__esModule",{value:!0});Yn.resetState=ay;Yn.log=sy;var Br={},jr={};function td(t,e){t.classList.remove(e)}function ay(){var t=document.getElementsByTagName("html")[0];for(var e in Br)td(t,Br[e]);var n=document.body;for(var r in jr)td(n,jr[r]);Br={},jr={}}function sy(){}var ly=function(e,n){return e[n]||(e[n]=0),e[n]+=1,n},cy=function(e,n){return e[n]&&(e[n]-=1),n},uy=function(e,n,r){r.forEach(function(i){ly(n,i),e.add(i)})},dy=function(e,n,r){r.forEach(function(i){cy(n,i),n[i]===0&&e.remove(i)})};Yn.add=function(e,n){return uy(e.classList,e.nodeName.toLowerCase()=="html"?Br:jr,n.split(" "))};Yn.remove=function(e,n){return dy(e.classList,e.nodeName.toLowerCase()=="html"?Br:jr,n.split(" "))};var Xn={};Object.defineProperty(Xn,"__esModule",{value:!0});Xn.log=py;Xn.resetState=hy;function fy(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var nd=function t(){var e=this;fy(this,t),this.register=function(n){e.openInstances.indexOf(n)===-1&&(e.openInstances.push(n),e.emit("register"))},this.deregister=function(n){var r=e.openInstances.indexOf(n);r!==-1&&(e.openInstances.splice(r,1),e.emit("deregister"))},this.subscribe=function(n){e.subscribers.push(n)},this.emit=function(n){e.subscribers.forEach(function(r){return r(n,e.openInstances.slice())})},this.openInstances=[],this.subscribers=[]},Qi=new nd;function py(){console.log("portalOpenInstances ----------"),console.log(Qi.openInstances.length),Qi.openInstances.forEach(function(t){return console.log(t)}),console.log("end portalOpenInstances ----------")}function hy(){Qi=new nd}Xn.default=Qi;var La={};Object.defineProperty(La,"__esModule",{value:!0});La.resetState=by;La.log=yy;var vy=Xn,my=gy(vy);function gy(t){return t&&t.__esModule?t:{default:t}}var qe=void 0,Et=void 0,yn=[];function by(){for(var t=[qe,Et],e=0;e<t.length;e++){var n=t[e];!n||n.parentNode&&n.parentNode.removeChild(n)}qe=Et=null,yn=[]}function yy(){console.log("bodyTrap ----------"),console.log(yn.length);for(var t=[qe,Et],e=0;e<t.length;e++){var n=t[e],r=n||{};console.log(r.nodeName,r.className,r.id)}console.log("edn bodyTrap ----------")}function rd(){yn.length!==0&&yn[yn.length-1].focusContent()}function wy(t,e){!qe&&!Et&&(qe=document.createElement("div"),qe.setAttribute("data-react-modal-body-trap",""),qe.style.position="absolute",qe.style.opacity="0",qe.setAttribute("tabindex","0"),qe.addEventListener("focus",rd),Et=qe.cloneNode(),Et.addEventListener("focus",rd)),yn=e,yn.length>0?(document.body.firstChild!==qe&&document.body.insertBefore(qe,document.body.firstChild),document.body.lastChild!==Et&&document.body.appendChild(Et)):(qe.parentElement&&qe.parentElement.removeChild(qe),Et.parentElement&&Et.parentElement.removeChild(Et))}my.default.subscribe(wy);(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n=Object.assign||function(N){for(var R=1;R<arguments.length;R++){var V=arguments[R];for(var T in V)Object.prototype.hasOwnProperty.call(V,T)&&(N[T]=V[T])}return N},r=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(N){return typeof N}:function(N){return N&&typeof Symbol=="function"&&N.constructor===Symbol&&N!==Symbol.prototype?"symbol":typeof N},i=function(){function N(R,V){for(var T=0;T<V.length;T++){var C=V[T];C.enumerable=C.enumerable||!1,C.configurable=!0,"value"in C&&(C.writable=!0),Object.defineProperty(R,C.key,C)}}return function(R,V,T){return V&&N(R.prototype,V),T&&N(R,T),R}}(),o=u.exports,a=ns.exports,s=S(a),l=xt,c=y(l),d=Na.exports,f=S(d),h=Ct,v=y(h),m=Yn,b=y(m),g=St,w=S(g),D=Xn,E=S(D);function y(N){if(N&&N.__esModule)return N;var R={};if(N!=null)for(var V in N)Object.prototype.hasOwnProperty.call(N,V)&&(R[V]=N[V]);return R.default=N,R}function S(N){return N&&N.__esModule?N:{default:N}}function x(N,R){if(!(N instanceof R))throw new TypeError("Cannot call a class as a function")}function I(N,R){if(!N)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return R&&(typeof R=="object"||typeof R=="function")?R:N}function _(N,R){if(typeof R!="function"&&R!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof R);N.prototype=Object.create(R&&R.prototype,{constructor:{value:N,enumerable:!1,writable:!0,configurable:!0}}),R&&(Object.setPrototypeOf?Object.setPrototypeOf(N,R):N.__proto__=R)}var F={overlay:"ReactModal__Overlay",content:"ReactModal__Content"},k=9,P=27,O=0,j=function(N){_(R,N);function R(V){x(this,R);var T=I(this,(R.__proto__||Object.getPrototypeOf(R)).call(this,V));return T.setOverlayRef=function(C){T.overlay=C,T.props.overlayRef&&T.props.overlayRef(C)},T.setContentRef=function(C){T.content=C,T.props.contentRef&&T.props.contentRef(C)},T.afterClose=function(){var C=T.props,M=C.appElement,A=C.ariaHideApp,W=C.htmlOpenClassName,L=C.bodyOpenClassName;L&&b.remove(document.body,L),W&&b.remove(document.getElementsByTagName("html")[0],W),A&&O>0&&(O-=1,O===0&&v.show(M)),T.props.shouldFocusAfterRender&&(T.props.shouldReturnFocusAfterClose?(c.returnFocus(T.props.preventScroll),c.teardownScopedFocus()):c.popWithoutFocus()),T.props.onAfterClose&&T.props.onAfterClose(),E.default.deregister(T)},T.open=function(){T.beforeOpen(),T.state.afterOpen&&T.state.beforeClose?(clearTimeout(T.closeTimer),T.setState({beforeClose:!1})):(T.props.shouldFocusAfterRender&&(c.setupScopedFocus(T.node),c.markForFocusLater()),T.setState({isOpen:!0},function(){T.openAnimationFrame=requestAnimationFrame(function(){T.setState({afterOpen:!0}),T.props.isOpen&&T.props.onAfterOpen&&T.props.onAfterOpen({overlayEl:T.overlay,contentEl:T.content})})}))},T.close=function(){T.props.closeTimeoutMS>0?T.closeWithTimeout():T.closeWithoutTimeout()},T.focusContent=function(){return T.content&&!T.contentHasFocus()&&T.content.focus({preventScroll:!0})},T.closeWithTimeout=function(){var C=Date.now()+T.props.closeTimeoutMS;T.setState({beforeClose:!0,closesAt:C},function(){T.closeTimer=setTimeout(T.closeWithoutTimeout,T.state.closesAt-Date.now())})},T.closeWithoutTimeout=function(){T.setState({beforeClose:!1,isOpen:!1,afterOpen:!1,closesAt:null},T.afterClose)},T.handleKeyDown=function(C){C.keyCode===k&&(0,f.default)(T.content,C),T.props.shouldCloseOnEsc&&C.keyCode===P&&(C.stopPropagation(),T.requestClose(C))},T.handleOverlayOnClick=function(C){T.shouldClose===null&&(T.shouldClose=!0),T.shouldClose&&T.props.shouldCloseOnOverlayClick&&(T.ownerHandlesClose()?T.requestClose(C):T.focusContent()),T.shouldClose=null},T.handleContentOnMouseUp=function(){T.shouldClose=!1},T.handleOverlayOnMouseDown=function(C){!T.props.shouldCloseOnOverlayClick&&C.target==T.overlay&&C.preventDefault()},T.handleContentOnClick=function(){T.shouldClose=!1},T.handleContentOnMouseDown=function(){T.shouldClose=!1},T.requestClose=function(C){return T.ownerHandlesClose()&&T.props.onRequestClose(C)},T.ownerHandlesClose=function(){return T.props.onRequestClose},T.shouldBeClosed=function(){return!T.state.isOpen&&!T.state.beforeClose},T.contentHasFocus=function(){return document.activeElement===T.content||T.content.contains(document.activeElement)},T.buildClassName=function(C,M){var A=(typeof M=="undefined"?"undefined":r(M))==="object"?M:{base:F[C],afterOpen:F[C]+"--after-open",beforeClose:F[C]+"--before-close"},W=A.base;return T.state.afterOpen&&(W=W+" "+A.afterOpen),T.state.beforeClose&&(W=W+" "+A.beforeClose),typeof M=="string"&&M?W+" "+M:W},T.attributesFromObject=function(C,M){return Object.keys(M).reduce(function(A,W){return A[C+"-"+W]=M[W],A},{})},T.state={afterOpen:!1,beforeClose:!1},T.shouldClose=null,T.moveFromContentToOverlay=null,T}return i(R,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.open()}},{key:"componentDidUpdate",value:function(T,C){this.props.isOpen&&!T.isOpen?this.open():!this.props.isOpen&&T.isOpen&&this.close(),this.props.shouldFocusAfterRender&&this.state.isOpen&&!C.isOpen&&this.focusContent()}},{key:"componentWillUnmount",value:function(){this.state.isOpen&&this.afterClose(),clearTimeout(this.closeTimer),cancelAnimationFrame(this.openAnimationFrame)}},{key:"beforeOpen",value:function(){var T=this.props,C=T.appElement,M=T.ariaHideApp,A=T.htmlOpenClassName,W=T.bodyOpenClassName;W&&b.add(document.body,W),A&&b.add(document.getElementsByTagName("html")[0],A),M&&(O+=1,v.hide(C)),E.default.register(this)}},{key:"render",value:function(){var T=this.props,C=T.id,M=T.className,A=T.overlayClassName,W=T.defaultStyles,L=T.children,K=M?{}:W.content,Q=A?{}:W.overlay;if(this.shouldBeClosed())return null;var z={ref:this.setOverlayRef,className:this.buildClassName("overlay",A),style:n({},Q,this.props.style.overlay),onClick:this.handleOverlayOnClick,onMouseDown:this.handleOverlayOnMouseDown},q=n({id:C,ref:this.setContentRef,style:n({},K,this.props.style.content),className:this.buildClassName("content",M),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentOnMouseDown,onMouseUp:this.handleContentOnMouseUp,onClick:this.handleContentOnClick,role:this.props.role,"aria-label":this.props.contentLabel},this.attributesFromObject("aria",n({modal:!0},this.props.aria)),this.attributesFromObject("data",this.props.data||{}),{"data-testid":this.props.testId}),J=this.props.contentElement(q,L);return this.props.overlayElement(z,J)}}]),R}(o.Component);j.defaultProps={style:{overlay:{},content:{}},defaultStyles:{}},j.propTypes={isOpen:s.default.bool.isRequired,defaultStyles:s.default.shape({content:s.default.object,overlay:s.default.object}),style:s.default.shape({content:s.default.object,overlay:s.default.object}),className:s.default.oneOfType([s.default.string,s.default.object]),overlayClassName:s.default.oneOfType([s.default.string,s.default.object]),bodyOpenClassName:s.default.string,htmlOpenClassName:s.default.string,ariaHideApp:s.default.bool,appElement:s.default.oneOfType([s.default.instanceOf(w.default),s.default.instanceOf(g.SafeHTMLCollection),s.default.instanceOf(g.SafeNodeList),s.default.arrayOf(s.default.instanceOf(w.default))]),onAfterOpen:s.default.func,onAfterClose:s.default.func,onRequestClose:s.default.func,closeTimeoutMS:s.default.number,shouldFocusAfterRender:s.default.bool,shouldCloseOnOverlayClick:s.default.bool,shouldReturnFocusAfterClose:s.default.bool,preventScroll:s.default.bool,role:s.default.string,contentLabel:s.default.string,aria:s.default.object,data:s.default.object,children:s.default.node,shouldCloseOnEsc:s.default.bool,overlayRef:s.default.func,contentRef:s.default.func,id:s.default.string,overlayElement:s.default.func,contentElement:s.default.func,testId:s.default.string},e.default=j,t.exports=e.default})(ka,ka.exports);function id(){var t=this.constructor.getDerivedStateFromProps(this.props,this.state);t!=null&&this.setState(t)}function od(t){function e(n){var r=this.constructor.getDerivedStateFromProps(t,n);return r??null}this.setState(e.bind(this))}function ad(t,e){try{var n=this.props,r=this.state;this.props=t,this.state=e,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}id.__suppressDeprecationWarning=!0;od.__suppressDeprecationWarning=!0;ad.__suppressDeprecationWarning=!0;function xy(t){var e=t.prototype;if(!e||!e.isReactComponent)throw new Error("Can only polyfill class components");if(typeof t.getDerivedStateFromProps!="function"&&typeof e.getSnapshotBeforeUpdate!="function")return t;var n=null,r=null,i=null;if(typeof e.componentWillMount=="function"?n="componentWillMount":typeof e.UNSAFE_componentWillMount=="function"&&(n="UNSAFE_componentWillMount"),typeof e.componentWillReceiveProps=="function"?r="componentWillReceiveProps":typeof e.UNSAFE_componentWillReceiveProps=="function"&&(r="UNSAFE_componentWillReceiveProps"),typeof e.componentWillUpdate=="function"?i="componentWillUpdate":typeof e.UNSAFE_componentWillUpdate=="function"&&(i="UNSAFE_componentWillUpdate"),n!==null||r!==null||i!==null){var o=t.displayName||t.name,a=typeof t.getDerivedStateFromProps=="function"?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

`+o+" uses "+a+" but also contains the following legacy lifecycles:"+(n!==null?`
  `+n:"")+(r!==null?`
  `+r:"")+(i!==null?`
  `+i:"")+`

The above lifecycles should be removed. Learn more about this warning here:
https://fb.me/react-async-component-lifecycle-hooks`)}if(typeof t.getDerivedStateFromProps=="function"&&(e.componentWillMount=id,e.componentWillReceiveProps=od),typeof e.getSnapshotBeforeUpdate=="function"){if(typeof e.componentDidUpdate!="function")throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");e.componentWillUpdate=ad;var s=e.componentDidUpdate;e.componentDidUpdate=function(c,d,f){var h=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:f;s.call(this,c,d,h)}}return t}var Cy=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",polyfill:xy}),Sy=as(Cy);Object.defineProperty(bn,"__esModule",{value:!0});bn.bodyOpenClassName=bn.portalClassName=void 0;var sd=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},Ey=function(){function t(e,n){for(var r=0;r<n.length;r++){var i=n[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),ld=u.exports,eo=Wr(ld),Dy=os.exports,to=Wr(Dy),My=ns.exports,oe=Wr(My),Oy=ka.exports,cd=Wr(Oy),Ty=Ct,Py=Iy(Ty),nn=St,ud=Wr(nn),_y=Sy;function Iy(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function Wr(t){return t&&t.__esModule?t:{default:t}}function ky(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function dd(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Ry(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var Ny=bn.portalClassName="ReactModalPortal",Ay=bn.bodyOpenClassName="ReactModal__Body--open",wn=nn.canUseDOM&&to.default.createPortal!==void 0,fd=function(e){return document.createElement(e)},pd=function(){return wn?to.default.createPortal:to.default.unstable_renderSubtreeIntoContainer};function no(t){return t()}var Hr=function(t){Ry(e,t);function e(){var n,r,i,o;ky(this,e);for(var a=arguments.length,s=Array(a),l=0;l<a;l++)s[l]=arguments[l];return o=(r=(i=dd(this,(n=e.__proto__||Object.getPrototypeOf(e)).call.apply(n,[this].concat(s))),i),i.removePortal=function(){!wn&&to.default.unmountComponentAtNode(i.node);var c=no(i.props.parentSelector);c&&c.contains(i.node)?c.removeChild(i.node):console.warn('React-Modal: "parentSelector" prop did not returned any DOM element. Make sure that the parent element is unmounted to avoid any memory leaks.')},i.portalRef=function(c){i.portal=c},i.renderPortal=function(c){var d=pd(),f=d(i,eo.default.createElement(cd.default,sd({defaultStyles:e.defaultStyles},c)),i.node);i.portalRef(f)},r),dd(i,o)}return Ey(e,[{key:"componentDidMount",value:function(){if(!!nn.canUseDOM){wn||(this.node=fd("div")),this.node.className=this.props.portalClassName;var r=no(this.props.parentSelector);r.appendChild(this.node),!wn&&this.renderPortal(this.props)}}},{key:"getSnapshotBeforeUpdate",value:function(r){var i=no(r.parentSelector),o=no(this.props.parentSelector);return{prevParent:i,nextParent:o}}},{key:"componentDidUpdate",value:function(r,i,o){if(!!nn.canUseDOM){var a=this.props,s=a.isOpen,l=a.portalClassName;r.portalClassName!==l&&(this.node.className=l);var c=o.prevParent,d=o.nextParent;d!==c&&(c.removeChild(this.node),d.appendChild(this.node)),!(!r.isOpen&&!s)&&!wn&&this.renderPortal(this.props)}}},{key:"componentWillUnmount",value:function(){if(!(!nn.canUseDOM||!this.node||!this.portal)){var r=this.portal.state,i=Date.now(),o=r.isOpen&&this.props.closeTimeoutMS&&(r.closesAt||i+this.props.closeTimeoutMS);o?(r.beforeClose||this.portal.closeWithTimeout(),setTimeout(this.removePortal,o-i)):this.removePortal()}}},{key:"render",value:function(){if(!nn.canUseDOM||!wn)return null;!this.node&&wn&&(this.node=fd("div"));var r=pd();return r(eo.default.createElement(cd.default,sd({ref:this.portalRef,defaultStyles:e.defaultStyles},this.props)),this.node)}}],[{key:"setAppElement",value:function(r){Py.setElement(r)}}]),e}(ld.Component);Hr.propTypes={isOpen:oe.default.bool.isRequired,style:oe.default.shape({content:oe.default.object,overlay:oe.default.object}),portalClassName:oe.default.string,bodyOpenClassName:oe.default.string,htmlOpenClassName:oe.default.string,className:oe.default.oneOfType([oe.default.string,oe.default.shape({base:oe.default.string.isRequired,afterOpen:oe.default.string.isRequired,beforeClose:oe.default.string.isRequired})]),overlayClassName:oe.default.oneOfType([oe.default.string,oe.default.shape({base:oe.default.string.isRequired,afterOpen:oe.default.string.isRequired,beforeClose:oe.default.string.isRequired})]),appElement:oe.default.oneOfType([oe.default.instanceOf(ud.default),oe.default.instanceOf(nn.SafeHTMLCollection),oe.default.instanceOf(nn.SafeNodeList),oe.default.arrayOf(oe.default.instanceOf(ud.default))]),onAfterOpen:oe.default.func,onRequestClose:oe.default.func,closeTimeoutMS:oe.default.number,ariaHideApp:oe.default.bool,shouldFocusAfterRender:oe.default.bool,shouldCloseOnOverlayClick:oe.default.bool,shouldReturnFocusAfterClose:oe.default.bool,preventScroll:oe.default.bool,parentSelector:oe.default.func,aria:oe.default.object,data:oe.default.object,role:oe.default.string,contentLabel:oe.default.string,shouldCloseOnEsc:oe.default.bool,overlayRef:oe.default.func,contentRef:oe.default.func,id:oe.default.string,overlayElement:oe.default.func,contentElement:oe.default.func};Hr.defaultProps={isOpen:!1,portalClassName:Ny,bodyOpenClassName:Ay,role:"dialog",ariaHideApp:!0,closeTimeoutMS:0,shouldFocusAfterRender:!0,shouldCloseOnEsc:!0,shouldCloseOnOverlayClick:!0,shouldReturnFocusAfterClose:!0,preventScroll:!1,parentSelector:function(){return document.body},overlayElement:function(e,n){return eo.default.createElement("div",e,n)},contentElement:function(e,n){return eo.default.createElement("div",e,n)}};Hr.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}};(0,_y.polyfill)(Hr);bn.default=Hr;(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n=bn,r=i(n);function i(o){return o&&o.__esModule?o:{default:o}}e.default=r.default,t.exports=e.default})(Ia,Ia.exports);var Ly=ef(Ia.exports);const zy=async t=>{let e;try{e=await He.instance.feathersClient.service("project").get(t)}catch(n){throw console.log("Can't get URL from id"+n),new Error(n)}return e.scenes[0]},hd={},Fy=p.createContext({settings:hd,updateSetting:()=>{}}),By=Fy.Provider;function vd(t){const{message:e}=t;return p.createElement(Xr,{...t},e)}vd.defaultProps={title:"Confirm",message:"Confirm action?"};const jy=te.div`
  margin-bottom: 16px;

  label {
    display: block;
    margin-bottom: 8px;
  }
`,Wy=te.div`
  display: flex;
  justify-content: space-between;

  & > * {
    margin-left: 30px;
    align-self: center;
  }

  & > :first-child {
    margin-left: 0;
  }
`;function ro({inline:t,children:e,...n}){return t?p.createElement(Wy,{...n},e):p.createElement(jy,{...n},e)}const Hy=te.div`
  display: flex;
  flex-direction: column;
  flex: 1;
`;function $y({defaultOptions:t,onConfirm:e,onCancel:n}){const{t:r}=Pt(),[i,o]=u.exports.useState(t),a=u.exports.useCallback(d=>{o({...i,combineMeshes:d})},[i,o]),s=u.exports.useCallback(d=>{o({...i,removeUnusedObjects:d})},[i,o]),l=u.exports.useCallback(d=>{d.preventDefault(),e(i)},[i,e]),c=u.exports.useCallback(d=>{d.preventDefault(),n()},[n]);return p.createElement(Xr,{title:r("editor:dialog.exportProject.title"),onConfirm:l,onCancel:c,confirmLabel:r("editor:dialog.exportProject.lbl-confirm")},p.createElement(Hy,null,p.createElement(ro,null,p.createElement("label",{htmlFor:"combineMeshes"},r("editor:dialog.exportProject.lbl-combineMesh")),p.createElement(dr,{id:"combineMeshes",value:i.combineMeshes,onChange:a})),p.createElement(ro,null,p.createElement("label",{htmlFor:"removeUnusedObjects"},r("editor:dialog.exportProject.lbl-removeUnused")),p.createElement(dr,{id:"removeUnusedObjects",value:i.removeUnusedObjects,onChange:s}))))}const Ky=te.div`
  display: flex;
  width: 360px;
  border-top-left-radius: inherit;
  align-items: center;
  padding: 30px;

  img {
    border-radius: 6px;
  }
`,Vy=te.div`
  display: flex;
  flex-direction: column;
  flex: 1;
  padding: 30px 30px;
`;function za({imageSrc:t,children:e,...n}){return p.createElement(Xr,{...n},p.createElement(Ky,null,p.createElement("img",{src:t})),p.createElement(Vy,null,e))}function Uy({thumbnailUrl:t,initialName:e,onConfirm:n,onCancel:r}){const[i,o]=u.exports.useState(e),{t:a}=Pt(),s=u.exports.useCallback(d=>{o(d)},[o]),l=u.exports.useCallback(d=>{d.preventDefault(),n({name:i})},[i,n]),c=u.exports.useCallback(d=>{d.preventDefault(),r()},[r]);return p.createElement(za,{imageSrc:t,title:a("editor:dialog.saveNewProject.title"),onConfirm:l,onCancel:c,confirmLabel:a("editor:dialog.saveNewProject.lbl-confirm")},p.createElement(ro,null,p.createElement("label",{htmlFor:"name"},a("editor:dialog.saveNewProject.lbl-name")),p.createElement(po,{id:"name",required:!0,pattern:`[A-Za-z0-9-':"!@#$%^&*(),.?~ ]{4,64}`,title:a("editor:dialog.saveNewProject.info-name"),value:i,onChange:s})))}const Gy=te.div`
  position: fixed;
  pointer-events: none;
  z-index: 99999;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
`,qy=te.div.attrs(t=>({style:{transform:`translate(${t.offset.x}px, ${t.offset.y}px)`}}))`
  background-color: ${t=>t.theme.blue};
  opacity: 0.3;
  color: ${t=>t.theme.text};
  padding: 4px;
  border-radius: 4px;
  display: inline-block;
`;function Yy(){const{t}=Pt(),{item:e,itemType:n,currentOffset:r,isDragging:i}=Ih(a=>({item:a.getItem(),itemType:a.getItemType(),currentOffset:a.getClientOffset(),isDragging:a.isDragging()}));if(!i||!r)return null;let o;return n===Te.Node?e.multiple?o=p.createElement("div",null,t("editor:dnd.nodes",{count:e.value.length})):o=p.createElement("div",null,e.value.name):n===Te.Model?e.multiple?o=p.createElement("div",null,t("editor:dnd.models",{count:e.value.length})):o=p.createElement("div",null,e.value.label):n===Te.Image?e.multiple?o=p.createElement("div",null,t("editor:dnd.images",{count:e.value.length})):o=p.createElement("div",null,e.value.label):n===Te.Video?e.multiple?o=p.createElement("div",null,t("editor:dnd.videos",{count:e.value.length})):o=p.createElement("div",null,e.value.label):n===Te.Audio?e.multiple?o=p.createElement("div",null,t("editor:dnd.audio",{count:e.value.length})):o=p.createElement("div",null,e.value.label):o=p.createElement("div",null,e.type),p.createElement(Gy,null,p.createElement(qy,{offset:r},o))}class md extends u.exports.Component{render(){return p.createElement(cf,{...this.props})}}var Xy=typeof performance=="object"&&typeof performance.now=="function",gd=Xy?function(){return performance.now()}:function(){return Date.now()};function bd(t){cancelAnimationFrame(t.id)}function Jy(t,e){var n=gd();function r(){gd()-n>=e?t.call(null):i.id=requestAnimationFrame(r)}var i={id:requestAnimationFrame(r)};return i}var Jn=null;function yd(t){if(t===void 0&&(t=!1),Jn===null||t){var e=document.createElement("div"),n=e.style;n.width="50px",n.height="50px",n.overflow="scroll",n.direction="rtl";var r=document.createElement("div"),i=r.style;return i.width="100px",i.height="100px",e.appendChild(r),document.body.appendChild(e),e.scrollLeft>0?Jn="positive-descending":(e.scrollLeft=1,e.scrollLeft===0?Jn="negative":Jn="positive-ascending"),document.body.removeChild(e),Jn}return Jn}var Zy=150,Qy=function(e,n){return e};function e0(t){var e,n,r=t.getItemOffset,i=t.getEstimatedTotalSize,o=t.getItemSize,a=t.getOffsetForIndexAndAlignment,s=t.getStartIndexForOffset,l=t.getStopIndexForStartIndex,c=t.initInstanceProps,d=t.shouldResetStyleCacheOnItemSizeChange,f=t.validateProps;return n=e=function(h){Xd(v,h);function v(b){var g;return g=h.call(this,b)||this,g._instanceProps=c(g.props,Ae(Ae(g))),g._outerRef=void 0,g._resetIsScrollingTimeoutId=null,g.state={instance:Ae(Ae(g)),isScrolling:!1,scrollDirection:"forward",scrollOffset:typeof g.props.initialScrollOffset=="number"?g.props.initialScrollOffset:0,scrollUpdateWasRequested:!1},g._callOnItemsRendered=void 0,g._callOnItemsRendered=ho(function(w,D,E,y){return g.props.onItemsRendered({overscanStartIndex:w,overscanStopIndex:D,visibleStartIndex:E,visibleStopIndex:y})}),g._callOnScroll=void 0,g._callOnScroll=ho(function(w,D,E){return g.props.onScroll({scrollDirection:w,scrollOffset:D,scrollUpdateWasRequested:E})}),g._getItemStyle=void 0,g._getItemStyle=function(w){var D=g.props,E=D.direction,y=D.itemSize,S=D.layout,x=g._getItemStyleCache(d&&y,d&&S,d&&E),I;if(x.hasOwnProperty(w))I=x[w];else{var _=r(g.props,w,g._instanceProps),F=o(g.props,w,g._instanceProps),k=E==="horizontal"||S==="horizontal",P=E==="rtl",O=k?_:0;x[w]=I={position:"absolute",left:P?void 0:O,right:P?O:void 0,top:k?0:_,height:k?"100%":F,width:k?F:"100%"}}return I},g._getItemStyleCache=void 0,g._getItemStyleCache=ho(function(w,D,E){return{}}),g._onScrollHorizontal=function(w){var D=w.currentTarget,E=D.clientWidth,y=D.scrollLeft,S=D.scrollWidth;g.setState(function(x){if(x.scrollOffset===y)return null;var I=g.props.direction,_=y;if(I==="rtl")switch(yd()){case"negative":_=-y;break;case"positive-descending":_=S-E-y;break}return _=Math.max(0,Math.min(_,S-E)),{isScrolling:!0,scrollDirection:x.scrollOffset<y?"forward":"backward",scrollOffset:_,scrollUpdateWasRequested:!1}},g._resetIsScrollingDebounced)},g._onScrollVertical=function(w){var D=w.currentTarget,E=D.clientHeight,y=D.scrollHeight,S=D.scrollTop;g.setState(function(x){if(x.scrollOffset===S)return null;var I=Math.max(0,Math.min(S,y-E));return{isScrolling:!0,scrollDirection:x.scrollOffset<I?"forward":"backward",scrollOffset:I,scrollUpdateWasRequested:!1}},g._resetIsScrollingDebounced)},g._outerRefSetter=function(w){var D=g.props.outerRef;g._outerRef=w,typeof D=="function"?D(w):D!=null&&typeof D=="object"&&D.hasOwnProperty("current")&&(D.current=w)},g._resetIsScrollingDebounced=function(){g._resetIsScrollingTimeoutId!==null&&bd(g._resetIsScrollingTimeoutId),g._resetIsScrollingTimeoutId=Jy(g._resetIsScrolling,Zy)},g._resetIsScrolling=function(){g._resetIsScrollingTimeoutId=null,g.setState({isScrolling:!1},function(){g._getItemStyleCache(-1,null)})},g}v.getDerivedStateFromProps=function(g,w){return t0(g,w),f(g),null};var m=v.prototype;return m.scrollTo=function(g){g=Math.max(0,g),this.setState(function(w){return w.scrollOffset===g?null:{scrollDirection:w.scrollOffset<g?"forward":"backward",scrollOffset:g,scrollUpdateWasRequested:!0}},this._resetIsScrollingDebounced)},m.scrollToItem=function(g,w){w===void 0&&(w="auto");var D=this.props.itemCount,E=this.state.scrollOffset;g=Math.max(0,Math.min(g,D-1)),this.scrollTo(a(this.props,g,w,E,this._instanceProps))},m.componentDidMount=function(){var g=this.props,w=g.direction,D=g.initialScrollOffset,E=g.layout;if(typeof D=="number"&&this._outerRef!=null){var y=this._outerRef;w==="horizontal"||E==="horizontal"?y.scrollLeft=D:y.scrollTop=D}this._callPropsCallbacks()},m.componentDidUpdate=function(){var g=this.props,w=g.direction,D=g.layout,E=this.state,y=E.scrollOffset,S=E.scrollUpdateWasRequested;if(S&&this._outerRef!=null){var x=this._outerRef;if(w==="horizontal"||D==="horizontal")if(w==="rtl")switch(yd()){case"negative":x.scrollLeft=-y;break;case"positive-ascending":x.scrollLeft=y;break;default:var I=x.clientWidth,_=x.scrollWidth;x.scrollLeft=_-I-y;break}else x.scrollLeft=y;else x.scrollTop=y}this._callPropsCallbacks()},m.componentWillUnmount=function(){this._resetIsScrollingTimeoutId!==null&&bd(this._resetIsScrollingTimeoutId)},m.render=function(){var g=this.props,w=g.children,D=g.className,E=g.direction,y=g.height,S=g.innerRef,x=g.innerElementType,I=g.innerTagName,_=g.itemCount,F=g.itemData,k=g.itemKey,P=k===void 0?Qy:k,O=g.layout,j=g.outerElementType,N=g.outerTagName,R=g.style,V=g.useIsScrolling,T=g.width,C=this.state.isScrolling,M=E==="horizontal"||O==="horizontal",A=M?this._onScrollHorizontal:this._onScrollVertical,W=this._getRangeToRender(),L=W[0],K=W[1],Q=[];if(_>0)for(var z=L;z<=K;z++)Q.push(u.exports.createElement(w,{data:F,key:P(z,F),index:z,isScrolling:V?C:void 0,style:this._getItemStyle(z)}));var q=i(this.props,this._instanceProps);return u.exports.createElement(j||N||"div",{className:D,onScroll:A,ref:this._outerRefSetter,style:Z({position:"relative",height:y,width:T,overflow:"auto",WebkitOverflowScrolling:"touch",willChange:"transform",direction:E},R)},u.exports.createElement(x||I||"div",{children:Q,ref:S,style:{height:M?"100%":q,pointerEvents:C?"none":void 0,width:M?q:"100%"}}))},m._callPropsCallbacks=function(){if(typeof this.props.onItemsRendered=="function"){var g=this.props.itemCount;if(g>0){var w=this._getRangeToRender(),D=w[0],E=w[1],y=w[2],S=w[3];this._callOnItemsRendered(D,E,y,S)}}if(typeof this.props.onScroll=="function"){var x=this.state,I=x.scrollDirection,_=x.scrollOffset,F=x.scrollUpdateWasRequested;this._callOnScroll(I,_,F)}},m._getRangeToRender=function(){var g=this.props,w=g.itemCount,D=g.overscanCount,E=this.state,y=E.isScrolling,S=E.scrollDirection,x=E.scrollOffset;if(w===0)return[0,0,0,0];var I=s(this.props,x,this._instanceProps),_=l(this.props,I,x,this._instanceProps),F=!y||S==="backward"?Math.max(1,D):1,k=!y||S==="forward"?Math.max(1,D):1;return[Math.max(0,I-F),Math.max(0,Math.min(w-1,_+k)),I,_]},v}(u.exports.PureComponent),e.defaultProps={direction:"ltr",itemData:void 0,layout:"vertical",overscanCount:2,useIsScrolling:!1},n}var t0=function(e,n){e.children,e.direction,e.height,e.layout,e.innerTagName,e.outerTagName,e.width,n.instance},n0=e0({getItemOffset:function(e,n){var r=e.itemSize;return n*r},getItemSize:function(e,n){var r=e.itemSize;return r},getEstimatedTotalSize:function(e){var n=e.itemCount,r=e.itemSize;return r*n},getOffsetForIndexAndAlignment:function(e,n,r,i){var o=e.direction,a=e.height,s=e.itemCount,l=e.itemSize,c=e.layout,d=e.width,f=o==="horizontal"||c==="horizontal",h=f?d:a,v=Math.max(0,s*l-h),m=Math.min(v,n*l),b=Math.max(0,n*l-h+l);switch(r==="smart"&&(i>=b-h&&i<=m+h?r="auto":r="center"),r){case"start":return m;case"end":return b;case"center":{var g=Math.round(b+(m-b)/2);return g<Math.ceil(h/2)?0:g>v+Math.floor(h/2)?v:g}case"auto":default:return i>=b&&i<=m?i:i<b?b:m}},getStartIndexForOffset:function(e,n){var r=e.itemCount,i=e.itemSize;return Math.max(0,Math.min(r-1,Math.floor(n/i)))},getStopIndexForStartIndex:function(e,n,r){var i=e.direction,o=e.height,a=e.itemCount,s=e.itemSize,l=e.layout,c=e.width,d=i==="horizontal"||l==="horizontal",f=n*s,h=d?c:o,v=Math.ceil((h+r-f)/s);return Math.max(0,Math.min(a-1,n+v-1))},initInstanceProps:function(e){},shouldResetStyleCacheOnItemSizeChange:!0,validateProps:function(e){e.itemSize}});function wd(t,e){for(var n in t)if(!(n in e))return!0;for(var r in e)if(t[r]!==e[r])return!0;return!1}function r0(t,e){var n=t.style,r=ls(t,["style"]),i=e.style,o=ls(e,["style"]);return!wd(n,i)&&!wd(r,o)}var i0=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},o0=function(){function t(e,n){for(var r=0;r<n.length;r++){var i=n[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a0=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},s0=function(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},xd=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t},l0=function(){function t(e,n){var r=[],i=!0,o=!1,a=void 0;try{for(var s=e[Symbol.iterator](),l;!(i=(l=s.next()).done)&&(r.push(l.value),!(n&&r.length===n));i=!0);}catch(c){o=!0,a=c}finally{try{!i&&s.return&&s.return()}finally{if(o)throw a}}return r}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),pt=void 0;typeof window!="undefined"?pt=window:typeof self!="undefined"?pt=self:pt=global;var Fa=null,Ba=null,Cd=20,ja=pt.clearTimeout,Sd=pt.setTimeout,Wa=pt.cancelAnimationFrame||pt.mozCancelAnimationFrame||pt.webkitCancelAnimationFrame,Ed=pt.requestAnimationFrame||pt.mozRequestAnimationFrame||pt.webkitRequestAnimationFrame;Wa==null||Ed==null?(Fa=ja,Ba=function(e){return Sd(e,Cd)}):(Fa=function(e){var n=l0(e,2),r=n[0],i=n[1];Wa(r),ja(i)},Ba=function(e){var n=Ed(function(){ja(r),e()}),r=Sd(function(){Wa(n),e()},Cd);return[n,r]});function c0(t){var e=void 0,n=void 0,r=void 0,i=void 0,o=void 0,a=void 0,s=void 0,l=typeof document!="undefined"&&document.attachEvent;if(!l){a=function(y){var S=y.__resizeTriggers__,x=S.firstElementChild,I=S.lastElementChild,_=x.firstElementChild;I.scrollLeft=I.scrollWidth,I.scrollTop=I.scrollHeight,_.style.width=x.offsetWidth+1+"px",_.style.height=x.offsetHeight+1+"px",x.scrollLeft=x.scrollWidth,x.scrollTop=x.scrollHeight},o=function(y){return y.offsetWidth!==y.__resizeLast__.width||y.offsetHeight!==y.__resizeLast__.height},s=function(y){if(!(y.target.className&&typeof y.target.className.indexOf=="function"&&y.target.className.indexOf("contract-trigger")<0&&y.target.className.indexOf("expand-trigger")<0)){var S=this;a(this),this.__resizeRAF__&&Fa(this.__resizeRAF__),this.__resizeRAF__=Ba(function(){o(S)&&(S.__resizeLast__.width=S.offsetWidth,S.__resizeLast__.height=S.offsetHeight,S.__resizeListeners__.forEach(function(_){_.call(S,y)}))})}};var c=!1,d="";r="animationstart";var f="Webkit Moz O ms".split(" "),h="webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),v="";{var m=document.createElement("fakeelement");if(m.style.animationName!==void 0&&(c=!0),c===!1){for(var b=0;b<f.length;b++)if(m.style[f[b]+"AnimationName"]!==void 0){v=f[b],d="-"+v.toLowerCase()+"-",r=h[b],c=!0;break}}}n="resizeanim",e="@"+d+"keyframes "+n+" { from { opacity: 0; } to { opacity: 0; } } ",i=d+"animation: 1ms "+n+"; "}var g=function(y){if(!y.getElementById("detectElementResize")){var S=(e||"")+".resize-triggers { "+(i||"")+'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',x=y.head||y.getElementsByTagName("head")[0],I=y.createElement("style");I.id="detectElementResize",I.type="text/css",t!=null&&I.setAttribute("nonce",t),I.styleSheet?I.styleSheet.cssText=S:I.appendChild(y.createTextNode(S)),x.appendChild(I)}},w=function(y,S){if(l)y.attachEvent("onresize",S);else{if(!y.__resizeTriggers__){var x=y.ownerDocument,I=pt.getComputedStyle(y);I&&I.position==="static"&&(y.style.position="relative"),g(x),y.__resizeLast__={},y.__resizeListeners__=[],(y.__resizeTriggers__=x.createElement("div")).className="resize-triggers";var _=x.createElement("div");_.className="expand-trigger",_.appendChild(x.createElement("div"));var F=x.createElement("div");F.className="contract-trigger",y.__resizeTriggers__.appendChild(_),y.__resizeTriggers__.appendChild(F),y.appendChild(y.__resizeTriggers__),a(y),y.addEventListener("scroll",s,!0),r&&(y.__resizeTriggers__.__animationListener__=function(P){P.animationName===n&&a(y)},y.__resizeTriggers__.addEventListener(r,y.__resizeTriggers__.__animationListener__))}y.__resizeListeners__.push(S)}},D=function(y,S){if(l)y.detachEvent("onresize",S);else if(y.__resizeListeners__.splice(y.__resizeListeners__.indexOf(S),1),!y.__resizeListeners__.length){y.removeEventListener("scroll",s,!0),y.__resizeTriggers__.__animationListener__&&(y.__resizeTriggers__.removeEventListener(r,y.__resizeTriggers__.__animationListener__),y.__resizeTriggers__.__animationListener__=null);try{y.__resizeTriggers__=!y.removeChild(y.__resizeTriggers__)}catch(x){}}};return{addResizeListener:w,removeResizeListener:D}}var Dd=function(t){s0(e,t);function e(){var n,r,i,o;i0(this,e);for(var a=arguments.length,s=Array(a),l=0;l<a;l++)s[l]=arguments[l];return o=(r=(i=xd(this,(n=e.__proto__||Object.getPrototypeOf(e)).call.apply(n,[this].concat(s))),i),i.state={height:i.props.defaultHeight||0,width:i.props.defaultWidth||0},i._onResize=function(){var c=i.props,d=c.disableHeight,f=c.disableWidth,h=c.onResize;if(i._parentNode){var v=i._parentNode.offsetHeight||0,m=i._parentNode.offsetWidth||0,b=window.getComputedStyle(i._parentNode)||{},g=parseInt(b.paddingLeft,10)||0,w=parseInt(b.paddingRight,10)||0,D=parseInt(b.paddingTop,10)||0,E=parseInt(b.paddingBottom,10)||0,y=v-D-E,S=m-g-w;(!d&&i.state.height!==y||!f&&i.state.width!==S)&&(i.setState({height:v-D-E,width:m-g-w}),h({height:v,width:m}))}},i._setRef=function(c){i._autoSizer=c},r),xd(i,o)}return o0(e,[{key:"componentDidMount",value:function(){var r=this.props.nonce;this._autoSizer&&this._autoSizer.parentNode&&this._autoSizer.parentNode.ownerDocument&&this._autoSizer.parentNode.ownerDocument.defaultView&&this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement&&(this._parentNode=this._autoSizer.parentNode,this._detectElementResize=c0(r),this._detectElementResize.addResizeListener(this._parentNode,this._onResize),this._onResize())}},{key:"componentWillUnmount",value:function(){this._detectElementResize&&this._parentNode&&this._detectElementResize.removeResizeListener(this._parentNode,this._onResize)}},{key:"render",value:function(){var r=this.props,i=r.children,o=r.className,a=r.disableHeight,s=r.disableWidth,l=r.style,c=this.state,d=c.height,f=c.width,h={overflow:"visible"},v={},m=!1;return a||(d===0&&(m=!0),h.height=0,v.height=d),s||(f===0&&(m=!0),h.width=0,v.width=f),u.exports.createElement("div",{className:o,ref:this._setRef,style:a0({},h,l)},!m&&i(v))}}]),e}(u.exports.PureComponent);Dd.defaultProps={onResize:function(){},disableHeight:!1,disableWidth:!1,style:{}};function io(t,e,n){if(Pn(t)){const{nodeClass:r,initialProps:i}=t,o=new r;return i&&Object.assign(o,i),H.instance.executeCommandWithHistory(Re.ADD_OBJECTS,o,{parents:e,befores:n}),!0}return!1}function u0(t,e){if(Pn(t)){const{nodeClass:n,initialProps:r}=t,i=new n;return r&&Object.assign(i,r),ee.instance.getCursorSpawnPosition(e,i.position),H.instance.executeCommandWithHistory(Re.ADD_OBJECTS,i),!0}return!1}const d0=te.div`
  display: inline-block;
  pointer-events: none;
  background-color: rgba(21, 23, 27, 0.9);
  border-radius: 3px;
  padding: 8px;
  max-width: 320px;
  overflow: hidden;
  overflow-wrap: break-word;
  user-select: none;

  h6 {
    font-size: 14px;
  }

  ul {
    margin-top: 4px;
  }

  li {
    margin-bottom: 4px;
    margin-left: 4px;
    font-family: "Lucida Console", Monaco, monospace;
    font-size: 12px;
  }
`,Md=te(ll)`
  color: ${t=>t.color};
`;function f0({node:t}){const e=u.exports.useContext(rs),{t:n}=Pt(),r=u.exports.useMemo(()=>({warning:e.yellow,error:e.red}),[e]),i=u.exports.useCallback(()=>p.createElement(d0,null,p.createElement("h6",null,n("editor:hierarchy.isseus")),p.createElement("ul",null,t.issues.map((a,s)=>p.createElement("li",{key:s},p.createElement(Md,{size:12,color:r[a.severity]})," ",a.message)))),[t,r]);let o="warning";for(const a of t.issues)if(a.severity==="error"){o="error";break}return p.createElement(uf,{renderContent:i},p.createElement(Md,{size:14,color:r[o]}))}const p0={multiple:!0,accepts:Hf};function h0({node:t}){return t}const v0=te.div`
  outline: none;
  user-select: none;
  width: 100%;
  height: 100%;
  position: relative;
  display: flex;
  flex-direction: column;
  color: ${t=>t.theme.text2};
`,m0=te.li``;function g0({root:t,selected:e,active:n,theme:r}){return e?n?r.bluePressed:r.selected:t?r.panel2:r.panel}function b0(t,e){return e.nodes[t].object.id}function Ha(t){return"hierarchy-node-"+t.id}const y0=te.div`
  display: flex;
  flex-direction: column;
  outline: none;
  overflow: hidden;

  background-color: ${g0};
  border-bottom: ${t=>t.root?t.theme.borderStyle:"none"};

  color: ${t=>t.selected||t.focused?t.theme.text:t.theme.text2};

  :hover,
  :focus {
    background-color: ${t=>t.selected?t.theme.blueHover:t.theme.hover};
    color: ${t=>t.theme.text};
  }

  :active {
    background-color: ${t=>t.theme.bluePressed};
    color: ${t=>t.theme.text};
  }
`,w0=te.div`
  display: flex;
  flex: 1;
  padding: 2px 4px 2px 0;
`,x0=te.div`
  display: flex;
  flex: 1;
`,C0=te.div`
  outline: none;
  display: flex;
  padding-right: 8px;
  padding-left: ${t=>t.depth*8+2+"px"};
`,S0=te.div`
  padding: 2px 4px;
  margin: 0 4px;

  :hover {
    color: ${t=>t.theme.text};
    background-color: ${t=>t.theme.hover2};
    border-radius: 3px;
  }
`,E0=te.div`
  width: 20px;
`,D0=te.div`
  width: 12px;
  height: 12px;
  margin: 2px 4px;
`,M0=te.div`
  background-color: ${t=>t.isOver&&t.canDrop?"rgba(255, 255, 255, 0.3)":"transparent"};
  color: ${t=>t.isOver&&t.canDrop?t.theme.text:"inherit"};
  border-radius: 4px;
  padding: 0 2px;
`;function O0({isOver:t,canDrop:e,position:n}){return t&&e?`border-${n==="before"?"top":"bottom"}: 2px solid rgba(255, 255, 255, 0.3)`:""}const Od=te.div`
  height: 4px;
  box-sizing: content-box;
  ${O0};
  margin-left: ${t=>t.depth>0?t.depth*8+20:0}px;
`,T0=te.input`
  position: absolute;
  top: -3px;
  background-color: ${t=>t.theme.inputBackground};
  color: ${t=>t.theme.text};
  border: ${t=>t.theme.borderStyle};
  padding: 2px 4px;
`,P0=te.div`
  position: relative;
  height: 15px;
`;function rn(t,e){return!vf(t,n=>n!==e)}function _0({index:t,data:{nodes:e,renamingNode:n,onToggle:r,onKeyDown:i,onMouseDown:o,onClick:a,onChangeName:s,onRenameSubmit:l,onUpload:c},style:d}){const f=e[t],{isLeaf:h,object:v,depth:m,selected:b,active:g,iconComponent:w,isCollapsed:D,childIndex:E,lastChild:y}=f,S=u.exports.useCallback(z=>{z.stopPropagation(),r&&r(z,f)},[r,f]),x=u.exports.useCallback(z=>{z.stopPropagation(),i&&i(z,f)},[i,f]),I=u.exports.useCallback(z=>{z.key==="Escape"?l(f,null):z.key==="Enter"&&l(f,z.target.value)},[l,f]),_=u.exports.useCallback(z=>{a(z,f)},[f,a]),F=u.exports.useCallback(z=>{o(z,f)},[f,o]),k=u.exports.useCallback(z=>{s(f,z.target.value)},[f,s]),P=u.exports.useCallback(z=>{l(f,z.target.value)},[l,f]),O=n&&n.id===f.id,[j,N,R]=df({type:Te.Node,item(){const z=H.instance.selected.length>1;return{type:Te.Node,multiple:z,value:z?H.instance.selected:H.instance.selected[0]}},canDrag(){return!H.instance.selected.some(z=>!z.parent)},collect:z=>({isDragging:!!z.isDragging()})});u.exports.useEffect(()=>{R(ff(),{captureDraggingState:!0})},[R]);const[{canDropBefore:V,isOverBefore:T},C]=fr({accept:[Te.Node,Te.File,...pr],drop(z){if(z.files){c(z.files).then(q=>{if(q)for(const J of q)H.instance.addMedia({url:J.url},v.parent,v)});return}io(z,v.parent,v)||H.instance.executeCommandWithHistory(Re.REPARENT,z.value,{parents:v.parent,befores:v})},canDrop(z,q){return!q.isOver()||!v.parent?!1:Pn(z)?!0:z.type===Te.Node?v.parent&&!(z.multiple?z.value.some(J=>rn(J,v)):rn(z.value,v)):!0},collect:z=>({canDropBefore:z.canDrop(),isOverBefore:z.isOver()})}),[{canDropAfter:M,isOverAfter:A},W]=fr({accept:[Te.Node,Te.File,...pr],drop(z){const q=!y&&v.parent.children[E+1];if(z.files){c(z.files).then(J=>{if(J)for(const le of J)H.instance.addMedia({url:le.url},v.parent,q)});return}io(z,v.parent,q)||H.instance.executeCommandWithHistory(Re.REPARENT,z.value,{parents:v.parent,befores:q})},canDrop(z,q){return!q.isOver()||!v.parent?!1:Pn(z)?!0:z.type===Te.Node?v.parent&&!(z.multiple?z.value.some(J=>rn(J,v)):rn(z.value,v)):!0},collect:z=>({canDropAfter:z.canDrop(),isOverAfter:z.isOver()})}),[{canDropOn:L,isOverOn:K},Q]=fr({accept:[Te.Node,Te.File,...pr],drop(z){if(z.files){c(z.files).then(q=>{if(q)for(const J of q)H.instance.addMedia({url:J.url},v)});return}io(z,v)||H.instance.executeCommandWithHistory(Re.REPARENT,z.value,{parents:v})},canDrop(z,q){return q.isOver()?Pn(z)?!0:z.type===Te.Node?!(z.multiple?z.value.some(J=>rn(J,v)):rn(z.value,v)):!0:!1},collect:z=>({canDropOn:z.canDrop(),isOverOn:z.isOver()})});return p.createElement(m0,{style:d},p.createElement(pf,{holdToDisplay:-1,id:"hierarchy-node-menu",node:f,collect:h0},p.createElement(y0,{ref:N,id:Ha(f),onMouseDown:F,onClick:_,tabIndex:"0",onKeyDown:x,root:m===0,selected:b,active:g},p.createElement(Od,{ref:C,depth:m,position:"before",canDrop:V,isOver:T}),p.createElement(C0,{depth:m,ref:Q},h?p.createElement(E0,null):p.createElement(S0,{collapsed:D,onClick:S},D?p.createElement(al,{size:12}):p.createElement(ol,{size:12})),p.createElement(w0,null,p.createElement(D0,{as:w}),p.createElement(x0,null,O?p.createElement(P0,null,p.createElement(T0,{type:"text",onChange:k,onKeyDown:I,onBlur:P,value:n.name,autoFocus:!0})):p.createElement(M0,{canDrop:L,isOver:K},v.name)),f.object.issues&&f.object.issues.length>0&&p.createElement(f0,{node:f.object}))),p.createElement(Od,{depth:m,ref:W,position:"after",canDrop:M,isOver:A}))))}const I0=u.exports.memo(_0,r0);function*k0(t){const e=[];if(!!ee.instance.scene)for(e.push({depth:0,object:ee.instance.scene,childIndex:0,lastChild:!0});e.length!==0;){const{depth:n,object:r,childIndex:i,lastChild:o}=e.pop(),a=hr.instance.getEditorFromNode(r)||md,s=a.WrappedComponent?a.WrappedComponent.iconComponent:a.iconComponent,l=t[r.id];if(yield{id:r.id,isLeaf:r.children.filter(c=>c.isNode).length===0,isCollapsed:l,depth:n,object:r,iconComponent:s,selected:H.instance.selected.indexOf(r)!==-1,active:H.instance.selected.length>0&&r===H.instance.selected[H.instance.selected.length-1],childIndex:i,lastChild:o},r.children.length!==0&&!l)for(let c=r.children.length-1;c>=0;c--){const d=r.children[c];d.isNode&&e.push({depth:n+1,object:d,childIndex:c,lastChild:c===0})}}}function R0(){const t=hf(p0),[e,n]=u.exports.useState(null),[r,i]=u.exports.useState({}),[o,a]=u.exports.useState([]),s=u.exports.useCallback(()=>{const P=Array.from(k0(r));a(P)},[r]),{t:l}=Pt(),c=u.exports.useCallback(P=>{delete r[P.id],i({...r})},[r]),d=u.exports.useCallback(P=>{i({...r,[P.id]:!0})},[i,r]),f=u.exports.useCallback(P=>{P.object.traverse(O=>{O.isNode&&delete r[O.id]}),i({...r})},[i,r]),h=u.exports.useCallback(P=>{P.object.traverse(O=>{O.isNode&&(r[O.id]=!0)}),i({...r})},[i,r]),v=u.exports.useCallback(()=>{i({})},[i]),m=u.exports.useCallback(()=>{const P={};ee.instance.scene.traverse(O=>{O.isNode&&(P[O.id]=!0)}),i(P)},[i]),b=u.exports.useCallback((P,O)=>{(O==="name"||!O)&&s()},[s]);u.exports.useEffect(()=>(H.instance.addListener(Y.SCENE_GRAPH_CHANGED.toString(),s),H.instance.addListener(Y.SELECTION_CHANGED.toString(),s),H.instance.addListener(Y.OBJECTS_CHANGED.toString(),b),()=>{H.instance.removeListener(Y.SCENE_GRAPH_CHANGED.toString(),s),H.instance.removeListener(Y.SELECTION_CHANGED.toString(),s),H.instance.removeListener(Y.OBJECTS_CHANGED.toString(),b)}),[s,b]);const g=u.exports.useCallback((P,O)=>{P.detail===1&&(P.shiftKey?H.instance.executeCommandWithHistory(Re.TOGGLE_SELECTION,O.object):O.selected||H.instance.executeCommandWithHistory(Re.REPLACE_SELECTION,O.object))},[]),w=u.exports.useCallback((P,O)=>{P.detail===2&&Le.instance.editorControls.focus([O.object])},[]),D=u.exports.useCallback((P,O)=>{r[O.id]?c(O):d(O)},[r,c,d]),E=u.exports.useCallback((P,O)=>{if(P.key==="ArrowDown"){P.preventDefault();const j=o.indexOf(O),N=j!==-1&&o[j+1];if(N){P.shiftKey&&H.instance.executeCommandWithHistory(Re.ADD_TO_SELECTION,N.object);const R=document.getElementById(Ha(N));R&&R.focus()}}else if(P.key==="ArrowUp"){P.preventDefault();const j=o.indexOf(O),N=j!==-1&&o[j-1];if(N){P.shiftKey&&H.instance.executeCommandWithHistory(Re.ADD_TO_SELECTION,N.object);const R=document.getElementById(Ha(N));R&&R.focus()}}else P.key==="ArrowLeft"&&O.object.children.filter(j=>j.isNode).length>0?P.shiftKey?h(O):d(O):P.key==="ArrowRight"&&O.object.children.filter(j=>j.isNode).length>0?P.shiftKey?f(O):O.object.children.filter(j=>j.isNode).length>0&&c(O):P.key==="Enter"&&(P.shiftKey?H.instance.executeCommandWithHistory(Re.TOGGLE_SELECTION,O.object):H.instance.executeCommandWithHistory(Re.REPLACE_SELECTION,O.object))},[o,c,d,f,h]),y=u.exports.useCallback((P,O)=>{let j=O.selected?H.instance.selected:O.object;H.instance.executeCommandWithHistory(Re.REMOVE_OBJECTS,j)},[]),S=u.exports.useCallback((P,O)=>{let j=O.selected?H.instance.selected:O.object;H.instance.executeCommandWithHistory(Re.DUPLICATE_OBJECTS,j)},[]),x=u.exports.useCallback((P,O)=>{const j=O.selected?H.instance.selected:O.object;H.instance.executeCommandWithHistory(Re.GROUP,j)},[]),I=u.exports.useCallback((P,O)=>{n({id:O.id,name:O.object.name})},[n]),_=u.exports.useCallback((P,O)=>{n({id:P.id,name:O})},[n]),F=u.exports.useCallback((P,O)=>{O!==null&&H.instance.executeCommand(Re.MODIFY_PROPERTY,P.object,{properties:{name:O}}),n(null)},[]),[,k]=fr({accept:[Te.Node,Te.File,...pr],drop(P,O){if(!O.didDrop()){if(P.files){t(P.files).then(j=>{if(j)for(const N of j)H.instance.addMedia({url:N.url})});return}io(P)||H.instance.executeCommandWithHistory(Re.REPARENT,P.value,{parents:ee.instance.scene})}},canDrop(P,O){return O.isOver({shallow:!0})?Pn(P)?!0:P.type===Te.Node?!(P.multiple?P.value.some(j=>rn(j,ee.instance.scene)):rn(P.value,ee.instance.scene)):!0:!1}});return u.exports.useEffect(()=>{s()},[r,s]),p.createElement(u.exports.Fragment,null,p.createElement(v0,null,ee.instance.scene&&p.createElement(Dd,null,({height:P,width:O})=>p.createElement(n0,{height:P,width:O,itemSize:32,itemCount:o.length,itemData:{renamingNode:e,nodes:o,onKeyDown:E,onChangeName:_,onRenameSubmit:F,onMouseDown:g,onClick:w,onToggle:D,onUpload:t},itemKey:b0,outerRef:k,innerElementType:"ul"},I0))),p.createElement(ds,{id:"hierarchy-node-menu"},p.createElement(fn,{onClick:I},l("editor:hierarchy.lbl-rename")),p.createElement(fn,{onClick:S},l("editor:hierarchy.lbl-duplicate"),p.createElement("div",null,vo+"+ D")),p.createElement(fn,{onClick:x},l("editor:hierarchy.lbl-group"),p.createElement("div",null,vo+"+ G")),p.createElement(fn,{onClick:y},l("editor:hierarchy.lbl-delete")),p.createElement(fn,{onClick:v},l("editor:hierarchy.lbl-expandAll")),p.createElement(fn,{onClick:m},l("editor:hierarchy.lbl-collapseAll"))))}const $a=te.div`
  display: flex;
  flex: 1;
  flex-direction: row;
  align-items: center;
`;te.div`
  position: relative;
  display: flex;
  flex: 1;
  flex-direction: column;
  border-radius: 4px;
  background-color: ${t=>t.theme.panel};
  overflow: hidden;
  user-select: none;
`;te.div`
  display: flex;
  padding: 4px;
  height: 24px;
  align-items: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.2);
`;const Ka=te.div`
  margin-right: 8px;
`,Va=te.div``;te.div`
  display: flex;
  flex: 1;
  flex-direction: column;
  position: relative;
  overflow: hidden;
`;class N0 extends u.exports.Component{constructor(e){super(e);this.translation=new Kf}componentDidMount(){H.instance.addListener(Y.OBJECTS_CHANGED.toString(),this.onObjectsChanged)}shouldComponentUpdate(e){return e.node!==this.props.node}componentWillUnmount(){H.instance.removeListener(Y.OBJECTS_CHANGED.toString(),this.onObjectsChanged)}translation;onObjectsChanged=(e,n)=>{for(let r=0;r<e.length;r++)if(e[r]===this.props.node&&(n==="position"||n==="rotation"||n==="scale"||n==="matrix"||n==null)){this.forceUpdate();return}};onChangePosition=e=>{H.instance.executeCommandWithHistoryOnSelection(Re.POSITION,{positions:e})};onChangeRotation=e=>{H.instance.executeCommandWithHistoryOnSelection(Re.ROTATION,{rotations:e})};onChangeScale=e=>{H.instance.executeCommandWithHistoryOnSelection(Re.SCALE,{scales:e,overrideScale:!0})};render(){const{node:e}=this.props;return p.createElement(mf,{name:this.props.t("editor:properties.transform.title")},p.createElement(pn,{name:"Position",label:this.props.t("editor:properties.transform.lbl-postition")},p.createElement(fs,{value:e.position,smallStep:.01,mediumStep:.1,largeStep:1,onChange:this.onChangePosition})),p.createElement(pn,{name:"Rotation",label:this.props.t("editor:properties.transform.lbl-rotation")},p.createElement(gf,{value:e.rotation,onChange:this.onChangeRotation,unit:"\xB0"})),p.createElement(pn,{name:"Scale",label:this.props.t("editor:properties.transform.lbl-scale")},p.createElement(fs,{uniformScaling:!0,smallStep:.01,mediumStep:.1,largeStep:1,value:e.scale,onChange:this.onChangeScale})))}}var A0=Tn()(N0);const L0=te(pn)`
  label {
    width: auto !important;
    padding-right: 8px;
  }
`;class z0 extends u.exports.Component{constructor(e){super(e);this.state={name:this.props.node.name,focusedNode:null},this.t=this.props.t}t;onUpdateName=e=>{this.setState({name:e})};onFocus=()=>{this.setState({focusedNode:this.props.node,name:this.props.node.name})};onBlurName=()=>{this.props.node.name!==this.state.name&&this.props.node===this.state.focusedNode&&H.instance.setPropertyOnSelection("name",this.state.name),this.setState({focusedNode:null})};onKeyUpName=e=>{e.key==="Enter"&&(e.preventDefault(),H.instance.setPropertyOnSelection("name",this.state.name))};render(){const e=this.state.focusedNode?this.state.name:this.props.node.name;return p.createElement(L0,{name:"Name",label:this.t("editor:properties.name.lbl-name")},p.createElement(po,{value:e,onChange:this.onUpdateName,onFocus:this.onFocus,onBlur:this.onBlurName,onKeyUp:this.onKeyUpName}))}}var F0=Tn()(z0);const B0=te.div`
  display: flex;
  flex: 1;
  flex-direction: column;
`,j0=te.div`
  background-color: ${t=>t.theme.panel2};
  border: none !important;
  padding-bottom: 0 !important;
`,W0=te.div`
  display: flex;
  flex-flow: row wrap;
  align-items: flex-start;
  padding: 8px 0;
`,Td=te(pn)`
  display: flex;
  flex: 0;

  & > label {
    width: auto !important;
    padding-right: 8px;
  }
`,H0=te(pn)`
 display: flex;
 flex: 0;

 & > label {
   width: auto !important;
   padding-right: 8px;
 }
`,$0=te.div`
  display: flex;
  flex-direction: column;
  flex: 1;
  overflow-y: auto;
  height: 100%;
`,Pd=te.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
`;class K0 extends u.exports.Component{constructor(e){super(e);this.state={selected:H.instance.selected}}componentDidMount(){H.instance.addListener(Y.SELECTION_CHANGED.toString(),this.onSelectionChanged),H.instance.addListener(Y.OBJECTS_CHANGED.toString(),this.onObjectsChanged)}componentWillUnmount(){H.instance.removeListener(Y.SELECTION_CHANGED.toString(),this.onSelectionChanged),H.instance.removeListener(Y.OBJECTS_CHANGED.toString(),this.onObjectsChanged)}onSelectionChanged=()=>{this.setState({selected:H.instance.selected})};onObjectsChanged=(e,n)=>{const r=H.instance.selected;if(!(n==="position"||n==="rotation"||n==="scale"||n==="matrix")){for(let i=0;i<e.length;i++)if(r.indexOf(e[i])!==-1){this.setState({selected:H.instance.selected});return}}};onChangeVisible=e=>{H.instance.setPropertyOnSelection("visible",e)};onChangeBakeStatic=e=>{H.instance.setPropertyOnSelection("includeInCubemapBake",e)};onChangePersist=e=>{H.instance.setPropertyOnSelection("persist",e)};render(){const e=H.instance.selected;let n;if(e.length===0)n=p.createElement(Pd,null,this.props.t("editor:properties.noNodeSelected"));else{const r=e[e.length-1],i=hr.instance.getEditorFromNode(r)||md,o=e.length>1;let a=!0;for(let d=0;d<e.length-1;d++)if(hr.instance.getEditorFromNode(e[d])!==i){a=!1;break}let s;a?s=p.createElement(i,{multiEdit:o,node:r}):s=p.createElement(Pd,null,this.props.t("editor:properties.multipleNodeSelected"));const l=e.some(d=>d.disableTransform),c=e.some(d=>d.haveStaticTags);n=p.createElement(B0,null,p.createElement(j0,null,p.createElement(W0,null,p.createElement(F0,{node:r}),r.nodeName!=="Scene"&&p.createElement(p.Fragment,null,p.createElement(Td,{name:"Visible",label:this.props.t("editor:properties.lbl-visible")},p.createElement(dr,{value:r.visible,onChange:this.onChangeVisible})),c&&p.createElement(Td,{name:"Bake Static",label:"Bake Static"},p.createElement(dr,{value:r.includeInCubemapBake,onChange:this.onChangeBakeStatic})))),p.createElement(H0,{name:"Persist",label:this.props.t("editor:properties.lbl-persist")},p.createElement(dr,{value:r.persist,onChange:this.onChangePersist})),!l&&p.createElement(A0,{node:r})),s)}return p.createElement($0,null,n)}}var V0=Tn()(K0);const U0=4,G0="2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",q0={name:"Crater"},Y0={"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC":{name:"default_scene",components:[{name:"mtdata",props:{meta_data:""}},{name:"fog",props:{type:"disabled",color:"#ffffff",near:.0025,far:1e3,density:.0025}},{name:"audio-settings",props:{avatarDistanceModel:"inverse",avatarRolloffFactor:2,avatarRefDistance:1,avatarMaxDistance:1e4,mediaVolume:1,mediaDistanceModel:"inverse",mediaRolloffFactor:1,mediaRefDistance:20,mediaMaxDistance:1e4,mediaConeInnerAngle:360,mediaConeOuterAngle:0,mediaConeOuterGain:0}},{name:"simple-materials",props:{simpleMaterials:!1}},{name:"renderer-settings",props:{LODs:{x:5,y:15,z:30},overrideRendererSettings:!1,csm:!0,toneMapping:1,toneMappingExposure:.8,shadowMapType:2}},{name:"envmap",props:{type:1,envMapIntensity:1,envMapTextureType:0,envMapSourceURL:"/hdr/cubemap/Bridge2/"}}]},"1463EAC0-883F-493A-9A33-6757CC8FF48B":{name:"scene preview camera",components:[{name:"transform",props:{position:{x:0,y:5,z:10},rotation:{x:-.4636,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"scene-preview-camera",props:{}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:0},"ED0888E7-4032-4DD9-9B43-59B02ECCCB7E":{name:"skybox",components:[{name:"transform",props:{position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"skybox",props:{backgroundColor:"#000000",equirectangularPath:"/hdr/city.jpg",cubemapPath:"/hdr/cubemap/Bridge2/",backgroundType:3,skyboxProps:{turbidity:10,rayleigh:1,luminance:1,mieCoefficient:.004999999999999893,mieDirectionalG:.99,inclination:.10471975511965978,azimuth:.16666666666666666,distance:1}}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:1},"1B698482-C15A-4CEC-9247-03873520DF70":{name:"ground plane",components:[{name:"transform",props:{position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"ground-plane",props:{color:"#7ed321"}},{name:"shadow",props:{receive:!0}},{name:"walkable",props:{}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:2},"1B698483-C15A-4CEC-9247-03873520DF70":{name:"spawn point",components:[{name:"transform",props:{position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"spawn-point",props:{}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:3},"1B698484-C15A-4CEC-9247-03873520DF70":{name:"post processing",components:[{name:"transform",props:{position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!1}},{name:"postprocessing",props:{options:{FXAAEffect:{isActive:!0,blendFunction:13},OutlineEffect:{isActive:!0,blendFunction:16,patternTexture:null,edgeStrength:1,pulseSpeed:0,visibleEdgeColor:16777215,hiddenEdgeColor:2230538,resolutionScale:.5,width:-1,height:-1,kernelSize:0,blur:!1,xRay:!0},SSAOEffect:{isActive:!1,blendFunction:10,distanceScaling:!0,depthAwareUpsampling:!0,samples:16,rings:7,distanceThreshold:.125,distanceFalloff:.02,minRadiusScale:1,bias:.25,radius:.01,intensity:2,fade:.05},DepthOfFieldEffect:{isActive:!1,blendFunction:13,focusDistance:.02,focalLength:.5,bokehScale:1},BloomEffect:{isActive:!0,blendFunction:16,kernelSize:2,luminanceThreshold:1,luminanceSmoothing:.1,intensity:.2},ToneMappingEffect:{isActive:!1,blendFunction:13,adaptive:!0,resolution:512,middleGrey:.6,maxLuminance:32,averageLuminance:1,adaptationRate:2},BrightnessContrastEffect:{isActive:!1,brightness:.05,contrast:.1},HueSaturationEffect:{isActive:!1,hue:0,saturation:-.15},ColorDepthEffect:{isActive:!1,bits:16},LinearTosRGBEffect:{isActive:!1}}}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:4},"1B698484-C15A-4CEC-9247-03873520DF71":{name:"hemisphere light",components:[{name:"transform",props:{position:{x:0,y:10,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"hemisphere-light",props:{skyColor:"#ffffff",groundColor:"#ffffff",intensity:1}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:5},"46BB52A2-E365-410F-BC37-5873691B48C9":{name:"directional light",components:[{name:"transform",props:{position:{x:0,y:10,z:0},rotation:{x:-.5235987755982988,y:.2617993877991494,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"directional-light",props:{color:"#ffffff",intensity:1,castShadow:!0,shadowMapResolution:[512,512],shadowBias:0,shadowRadius:1,cameraFar:100,showCameraHelper:!1}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:6}};var _d={version:U0,root:G0,metadata:q0,entities:Y0};const X0=4,J0="2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",Z0={name:"Crater"},Q0={"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC":{name:"Crater"},"E8D3129B-68BF-473F-92B9-6DAEC83514BB":{name:"Skybox",components:[{name:"transform",props:{position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"skybox",props:{turbidity:6.09,rayleigh:.82,luminance:1.055,mieCoefficient:.043,mieDirectionalG:.8,inclination:.10471975511965978,azimuth:.2333333333333333,distance:8e3}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:0},"D8061EA5-F0C4-4452-ADFE-B179E2F20CB1":{name:"Directional Light",components:[{name:"transform",props:{position:{x:-1,y:3,z:0},rotation:{x:1.0256860445560714,y:.3490658503988659,z:-.4417643021697627},scale:{x:.9999999999999996,y:.9999999999999998,z:.9999999999999997}}},{name:"visible",props:{visible:!0}},{name:"directional-light",props:{color:"#ffffff",intensity:3,castShadow:!0,shadowMapResolution:[512,512],shadowBias:0,shadowRadius:1}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:1},"633CD01A-BC2A-4584-99E2-2A3CFE2C8AD9":{name:"Spawn Point",components:[{name:"transform",props:{position:{x:2,y:0,z:2},rotation:{x:3.141592653589793,y:-.7853981633974483,z:3.141592653589793},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"spawn-point",props:{}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:2},"2D490729-384D-49AF-A755-9D6F70D56325":{name:"Floor Plan",components:[{name:"transform",props:{position:{x:0,y:.005,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1}}},{name:"visible",props:{visible:!0}},{name:"floor-plan",props:{autoCellSize:!1,cellSize:.1200000000000001,cellHeight:.1,agentHeight:1.7,agentRadius:.19999999999999996,agentMaxClimb:.5,agentMaxSlope:60,regionMinSize:4,maxTriangles:1e3,forceTrimesh:!1}}],parent:"2266BED7-6CC4-48A6-95DD-9BCD3CF9EAFC",index:3}};var Id={version:X0,root:J0,metadata:Z0,entities:Q0};const ew=te.button`
  width: 40px;
  height: 40px;
  border: none;
  color: ${t=>t.theme.white};
  cursor: pointer;
  position: relative;

  background-color: ${t=>t.isSelected?t.theme.blue:t.theme.toolbar};

  &:hover {
    background-color: ${t=>t.isSelected?t.theme.blueHover:t.theme.panel};
  }
`,tw=te.div`
  width: 14px;
  height: 14px;
  font-size: 14px;
`;function nw({id:t,icon:e,onClick:n,isSelected:r,tooltip:i}){return p.createElement(ot,{id:t,info:i,position:"bottom"},p.createElement(ew,{isSelected:r,onClick:n},p.createElement(tw,{as:e})))}class rw extends p.Component{constructor(e){super(e);this.state={isMenuOpen:!1},this.t=this.props.t}t;toggleMenu=e=>{if(this.state.isMenuOpen){this.setState({isMenuOpen:!1});return}const n=0,r=e.currentTarget.offsetHeight;bf({position:{x:n,y:r},target:e.currentTarget,id:"menu"}),this.setState({isMenuOpen:!0})};renderMenu=e=>!e.subCommnads||e.subCommnads.length===0?p.createElement(fn,{key:e.name,onClick:e.action},e.name,e.hotkey&&p.createElement("div",null,e.hotkey)):p.createElement(yf,{key:e.name,title:e.name,hoverDelay:0},e.subCommnads.map(n=>this.renderMenu(n)));render(){return p.createElement(p.Fragment,null,p.createElement(nw,{icon:il,onClick:this.toggleMenu,isSelected:this.state.isMenuOpen,id:"menu"}),p.createElement(ds,{id:"menu",onHide:()=>this.setState({isMenuOpen:!1})},this.props.commands.map(e=>this.renderMenu(e))))}}var iw=Tn()(rw),kd=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},t,{ref:e}),u.exports.createElement("path",{d:"M15 3H4.984c-1.103 0-2 .897-2 2v14.016c0 1.103.897 2 2 2H19c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2h-4zm4 5h-3V5h3v3zM4.984 10h3v4.016h-3V10zm5 0H14v4.016H9.984V10zM16 10h3v4.016h-3V10zm-2-5v3H9.984V5H14zM7.984 5v3h-3V5h3zm-3 11.016h3v3h-3v-3zm5 3v-3H14v3H9.984zm6.016 0v-3h3.001v3H16z"}))});kd.displayName="Grid";const Ua="_toolbarContainer_r8qha_1",ow="_statsContainer_r8qha_14",Rd="_toolbarNumericStepperInput_r8qha_43",on="_toolbarInputGroup_r8qha_63",qt="_toolButton_r8qha_73",xn="_selected_r8qha_89",Nd="_toolIcon_r8qha_95",Zn="_selectInput_r8qha_107",Ad="_playButtonContainer_r8qha_133";var $r={toolbarContainer:Ua,statsContainer:ow,toolbarNumericStepperInput:Rd,toolbarInputGroup:on,toolButton:qt,selected:xn,toolIcon:Nd,selectInput:Zn,playButtonContainer:Ad},Ld=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},t,{ref:e}),u.exports.createElement("path",{d:"M15 19V5l-8 7z"}))});Ld.displayName="CaretLeft";var zd=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},t,{ref:e}),u.exports.createElement("path",{d:"m9 19 8-7-8-7z"}))});zd.displayName="CaretRight";const aw=te.div`
  display: flex;
  flex: 1;
  width: 100%;
  height: 24px;

  input {
    border-left-width: 0;
    border-right-width: 0;
    border-radius: 0;
  }
`,Fd=te.button`
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ${t=>t.value?t.theme.blue:t.theme.toolbar};

  border: 1px solid ${t=>t.theme.border};
  color: ${t=>t.theme.text};

  width: 20px;
  padding: 0;

  ${t=>t.left?"border-top-left-radius: 4px; border-bottom-left-radius: 4px;":"border-top-right-radius: 4px; border-bottom-right-radius: 4px;"}

  :hover {
    background-color: ${t=>t.theme.blueHover};
  }

  :active {
    background-color: ${t=>t.theme.blue};
  }
`;function sw({style:t,className:e,decrementTooltip:n,incrementTooltip:r,...i}){const o=u.exports.useRef(),a=u.exports.useCallback(()=>{o.current.decrement()},[o]),s=u.exports.useCallback(()=>{o.current.increment()},[o]);return p.createElement(aw,{style:t,className:e},p.createElement(ot,{info:n,position:"bottom"},p.createElement(Fd,{left:!0,onClick:a},p.createElement(Ld,{size:16}))),p.createElement(wf,{ref:o,...i}),p.createElement(ot,{info:r,position:"bottom"},p.createElement(Fd,{right:!0,onClick:s},p.createElement(zd,{size:16}))))}const lw=()=>{const[t,e]=u.exports.useState(!0),[n,r]=u.exports.useState(0);u.exports.useEffect(()=>(H.instance.addListener(Y.GRID_HEIGHT_CHANGED.toString(),o),H.instance.addListener(Y.GRID_VISIBILITY_CHANGED.toString(),i),()=>{H.instance.removeListener(Y.GRID_HEIGHT_CHANGED.toString(),o),H.instance.removeListener(Y.GRID_VISIBILITY_CHANGED.toString(),i)}),[]);const i=()=>{e(ee.instance.grid.visible)},o=()=>{r(ee.instance.grid.position.y)},a=()=>{ee.instance.grid.toggleGridVisible()},s=l=>{ee.instance.grid.setGridHeight(l)};return p.createElement("div",{id:"transform-grid",className:on},p.createElement(ot,{info:"Toggle Grid Visibility"},p.createElement("button",{onClick:a,className:qt+" "+(t?xn:"")},p.createElement(kd,{size:16}))),p.createElement(sw,{className:Rd,value:n,onChange:s,precision:.01,smallStep:.5,mediumStep:1,largeStep:5,unit:"m",incrementTooltip:"[-] Increment Grid Height",decrementTooltip:"[=] Decrement Grid Height"}))},cw=()=>{const[t,e]=u.exports.useState(Ht.Translate),n=Le.instance.editorControls;u.exports.useEffect(()=>(H.instance.addListener(Y.TRANSFROM_MODE_CHANGED.toString(),r),()=>{H.instance.removeListener(Y.TRANSFROM_MODE_CHANGED.toString(),r)}),[]);const r=()=>{e(n.transformMode)};return p.createElement("div",{className:on},p.createElement(ot,{id:"translate-button",info:"[T] Translate",position:"bottom"},p.createElement("button",{className:qt+" "+(t===Ht.Translate?xn:""),onClick:()=>n.setTransformMode(Ht.Translate)},p.createElement(nl,{size:12}))),p.createElement(ot,{id:"rotate-button",info:"[R] Rotate",position:"bottom"},p.createElement("button",{className:qt+" "+(t===Ht.Rotate?xn:""),onClick:()=>n.setTransformMode(Ht.Rotate)},p.createElement(hl,{size:12}))),p.createElement(ot,{id:"scale-button",info:"[Y] Scale",position:"bottom"},p.createElement("button",{className:qt+" "+(t===Ht.Scale?xn:""),onClick:()=>n.setTransformMode(Ht.Scale)},p.createElement(rl,{size:12}))))},uw=[{label:"Selection",value:Jr.Selection},{label:"Center",value:Jr.Center},{label:"Bottom",value:Jr.Bottom}],dw=()=>{const[t,e]=u.exports.useState(Jr.Selection),n=Le.instance.editorControls;u.exports.useEffect(()=>(H.instance.addListener(Y.TRANSFORM_PIVOT_CHANGED.toString(),r),()=>{H.instance.removeListener(Y.TRANSFORM_PIVOT_CHANGED.toString(),r)}),[]);const r=()=>{e(n.transformPivot)},i=a=>{n.setTransformPivot(a)},o=()=>{n.changeTransformPivot()};return p.createElement("div",{className:on,id:"transform-pivot"},p.createElement(ot,{info:"[X] Toggle Transform Pivot"},p.createElement("button",{onClick:o,className:qt},p.createElement(xf,{size:12}))),p.createElement(_n,{className:Zn,onChange:i,options:uw,value:t,creatable:!1,isSearchable:!1}))},fw=[{label:"Selection",value:mo.LocalSelection},{label:"World",value:mo.World}],pw=()=>{const[t,e]=u.exports.useState(mo.World),n=Le.instance.editorControls;u.exports.useEffect(()=>(H.instance.addListener(Y.TRANSFORM_SPACE_CHANGED.toString(),r),()=>{H.instance.removeListener(Y.TRANSFORM_SPACE_CHANGED.toString(),r)}),[]);const r=()=>{e(n.transformSpace)},i=a=>{n.setTransformSpace(a)},o=()=>{n.toggleTransformSpace()};return p.createElement("div",{className:on,id:"transform-space"},p.createElement(ot,{info:"[Z] Toggle Transform Space"},p.createElement("button",{onClick:o,className:qt},p.createElement(Cf,{size:12}))),p.createElement(_n,{className:Zn,onChange:i,options:fw,value:t,creatable:!1,isSearchable:!1}))},hw=[{label:"0.1m",value:.1},{label:"0.125m",value:.125},{label:"0.25m",value:.25},{label:"0.5m",value:.5},{label:"1m",value:1},{label:"2m",value:2},{label:"4m",value:4}],vw=[{label:"1\xB0",value:1},{label:"5\xB0",value:5},{label:"10\xB0",value:10},{label:"15\xB0",value:15},{label:"30\xB0",value:30},{label:"45\xB0",value:45},{label:"90\xB0",value:90}],mw={mode:Zr.Grid,translationSnap:.5,rotationSnap:10},gw=()=>{const[t,e]=u.exports.useState(mw),n=Le.instance.editorControls;u.exports.useEffect(()=>(H.instance.addListener(Y.SNAP_SETTINGS_CHANGED.toString(),r),()=>{H.instance.removeListener(Y.SNAP_SETTINGS_CHANGED.toString(),r)}),[]);const r=()=>{e({mode:n.snapMode,translationSnap:n.translationSnap,rotationSnap:n.rotationSnap})},i=s=>{n.setTranslationSnap(s),n.setSnapMode(Zr.Grid)},o=s=>{n.setRotationSnap(s),n.setSnapMode(Zr.Grid)},a=()=>{n.toggleSnapMode()};return p.createElement("div",{className:on,id:"transform-snap"},p.createElement(ot,{info:"[C] Toggle Snap Mode"},p.createElement("button",{onClick:a,className:qt+" "+(t.mode===Zr.Grid?xn:"")},p.createElement(cl,{size:12}))),p.createElement(_n,{className:Zn,onChange:i,options:hw,value:t.translationSnap,creatable:!1,isSearchable:!1}),p.createElement(_n,{className:Zn,onChange:o,options:vw,value:t.rotationSnap,creatable:!1,isSearchable:!1}))},bw=()=>{const[t,e]=u.exports.useState(!1);u.exports.useEffect(()=>(H.instance.addListener(Y.PLAY_MODE_CHANGED.toString(),n),()=>{H.instance.removeListener(Y.PLAY_MODE_CHANGED.toString(),n)}),[]);const n=()=>{e(Le.instance.isInPlayMode)},r=()=>{t?Le.instance.leavePlayMode():Le.instance.enterPlayMode()};return p.createElement("div",{className:on+" "+Ad,id:"preview"},p.createElement(ot,{info:t?"Stop Previewing Scene":"Preview Scene"},p.createElement("button",{onClick:r,className:qt+" "+(t?xn:"")},t?p.createElement(ul,{size:16}):p.createElement(dl,{size:16}))))},yw=()=>{const[t,e]=u.exports.useState({}),[n,r]=u.exports.useState(!1),{t:i}=Pt();u.exports.useEffect(()=>(ee.instance.renderer.onUpdateStats=a=>{a.render.frame%3==0&&e({geometries:a.memory.geometries,textures:a.memory.textures,fps:a.render.fps,frameTime:a.render.frameTime,calls:a.render.calls,triangles:a.render.triangles,points:a.render.points,lines:a.render.lines})},()=>{ee.instance.renderer.onUpdateStats=void 0}),[]);const o=()=>{r(!n)};return p.createElement(p.Fragment,null,p.createElement("div",{className:$r.toolbarInputGroup+" "+$r.playButtonContainer,id:"stats"},p.createElement(ot,{info:"Toggle Stats"},p.createElement("button",{onClick:o,className:$r.toolButton+" "+(n?$r.selected:"")},p.createElement(sl,{size:12})))),n&&p.createElement("div",{className:$r.statsContainer},p.createElement("h3",null,i("editor:viewport.state.header")),t&&p.createElement("ul",null,p.createElement("li",null,i("editor:viewport.state.memory"),p.createElement("ul",null,p.createElement("li",null,i("editor:viewport.state.geometries"),": ",t.geometries),p.createElement("li",null,i("editor:viewport.state.textures"),": ",t.textures))),p.createElement("li",null,i("editor:viewport.state.render"),":",p.createElement("ul",null,p.createElement("li",null,i("editor:viewport.state.FPS"),": ",Math.round(t.fps)),p.createElement("li",null,i("editor:viewport.state.frameTime"),": ",Math.round(t.frameTime),"ms"),p.createElement("li",null,i("editor:viewport.state.calls"),": ",t.calls),p.createElement("li",null,i("editor:viewport.state.triangles"),": ",t.triangles),p.createElement("li",null,i("editor:viewport.state.points"),": ",t.points),p.createElement("li",null,i("editor:viewport.state.lines"),": ",t.lines))))))};var Bd=u.exports.forwardRef(function(t,e){var n={fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"};return u.exports.createElement(Be,Z({iconAttrs:n,iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},t,{ref:e}),u.exports.createElement("path",{d:"M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z"}))});Bd.displayName="Sun";const ww=()=>{const[t,e]=u.exports.useState(Qr.UNLIT),n=[];for(let o of Object.keys(Qr))n.push({label:Qr[o],value:Qr[o]});u.exports.useEffect(()=>(H.instance.addListener(Y.RENDER_MODE_CHANGED.toString(),i),()=>{H.instance.removeListener(Y.RENDER_MODE_CHANGED.toString(),i)}),[]);const r=u.exports.useCallback(o=>ee.instance.renderer.changeRenderMode(o),[]),i=u.exports.useCallback(()=>e(ee.instance.renderer.renderMode),[]);return p.createElement("div",{className:on,id:"transform-pivot"},p.createElement(ot,{info:"Render Mode"},p.createElement("div",{className:Nd},p.createElement(Bd,{size:16}))),p.createElement(_n,{className:Zn,onChange:r,options:n,value:t,creatable:!1,isSearchable:!1}))};class xw extends u.exports.Component{constructor(e){super(e);this.state={editorInitialized:!1}}componentDidMount(){H.instance.addListener(Y.RENDERER_INITIALIZED.toString(),this.onRendererInitialized),H.instance.addListener(Y.SETTINGS_CHANGED.toString(),this.onForceUpdate)}componentWillUnmount(){H.instance.removeListener(Y.SETTINGS_CHANGED.toString(),this.onForceUpdate)}onRendererInitialized=()=>{this.setState({editorInitialized:!0}),H.instance.removeListener(Y.RENDERER_INITIALIZED.toString(),this.onRendererInitialized)};onForceUpdate=()=>{this.forceUpdate()};render(){const{editorInitialized:e}=this.state;return e?p.createElement("div",{className:Ua},p.createElement(iw,{commands:this.props.menu}),p.createElement(cw,null),p.createElement(pw,null),p.createElement(dw,null),p.createElement(gw,null),p.createElement(lw,null),p.createElement(ww,null),p.createElement(bw,null),p.createElement(yw,null)):p.createElement("div",{className:Ua})}}const Cw="_viewportCanvas_1s1yi_1",Sw="_viewportContainer_1s1yi_7",Ew="_controlsText_1s1yi_22";const Ie={a:"",lato:"'Lato', sans-serif",zilla:"'Zilla Slab', sans-serif",background:"rgba(0,0,0,0)",inputBackground:"#070809",border:"#5D646C",panel:"#282C31",panel2:"#3A4048",selected:"#006EFF",selectedText:"#fff",hover:"#4B5562",hover2:"#636F80",text:"#FFFFFF",text2:"#9FA4B5",dropdown:"#000000",red:"#F44336",pink:"#E91E63",purple:"#9C27B0",deepPurple:"#673AB7",indigo:"#3F51B5",blue:"#006EFF",lightBlue:"#03A9F4",cyan:"#00BCD4",teal:"#009688",green:"#4CAF50",lightGreen:"#8BC34A",lime:"#CDDC39",yellow:"#FFEB3B",amber:"#FFC107",orange:"#FF9800",deepOrange:"#FF5722",brown:"#795548",blueHover:"#4D93F1",bluePressed:"#0554BC",disabled:"#222222",disabledText:"grey",deemphasized:"grey",toolbar:"rgba(0, 0, 0, 0.0)",toolbar2:"rgba(0, 0, 0, 0.0)",header:"#1b1b1b",white:"#fff",shadow15:"0px 4px 4px  rgba(0, 0, 0, 0.15)",shadow30:"0px 4px 4px  rgba(0, 0, 0, 0.3)",borderStyle:"1px solid #5D646C"};Ie.chartColors=[Ie.red,Ie.pink,Ie.purple,Ie.deepPurple,Ie.indigo,Ie.blue,Ie.lightBlue,Ie.cyan,Ie.teal,Ie.green,Ie.lightGreen,Ie.lime,Ie.yellow,Ie.amber,Ie.orange,Ie.deepOrange,Ie.brown];p.createContext(Ie);function Dw(){const t=u.exports.useRef(),[e,n]=u.exports.useState(!1),[r,i]=u.exports.useState(!1),[o,a]=u.exports.useState(null),{t:s}=Pt(),l=u.exports.useCallback(()=>{i(H.instance.selected.length>0)},[]),c=u.exports.useCallback(()=>{n(Le.instance.flyControls.enabled)},[]),d=u.exports.useCallback(w=>{a(w)},[]),f=u.exports.useCallback(()=>{H.instance.addListener(Y.SELECTION_CHANGED.toString(),l),Le.instance.editorControls.addListener(Y.FLY_MODE_CHANGED.toString(),c),Le.instance.editorControls.addListener(Y.TRANSFROM_MODE_CHANGED.toString(),d),H.instance.removeListener(Y.RENDERER_INITIALIZED.toString(),f)},[]);u.exports.useEffect(()=>{const w=()=>{ee.instance.initializeRenderer(t.current),H.instance.addListener(Y.PROJECT_LOADED.toString(),w)};return H.instance.addListener(Y.RENDERER_INITIALIZED.toString(),f),H.instance.addListener(Y.PROJECT_LOADED.toString(),w),()=>{H.instance.removeListener(Y.SELECTION_CHANGED.toString(),l),Le.instance.editorControls&&(Le.instance.editorControls.removeListener(Y.FLY_MODE_CHANGED.toString(),c),Le.instance.editorControls.removeListener(Y.TRANSFROM_MODE_CHANGED.toString(),d)),ee.instance.renderer&&ee.instance.renderer.dispose()}},[]);const[{canDrop:h,isOver:v},m]=fr({accept:[Te.Node,...pr],drop(w,D){const E=D.getClientOffset();if(w.type===Te.Node){w.multiple?ee.instance.reparentToSceneAtCursorPosition(w.value,E):ee.instance.reparentToSceneAtCursorPosition([w.value],E);return}u0(w,E)},collect:w=>({canDrop:w.canDrop(),isOver:w.isOver()})}),b=u.exports.useCallback(w=>{Promise.all(w.map(({url:D,name:E,id:y})=>{H.instance.addMedia({url:D,name:E,id:y})})).catch(D=>{H.instance.emitEvent(Y.ERROR,D)})},[]);let g;return e?g="[W][A][S][D] "+s("editor:viewport.command.movecamera")+" | [Shift] "+s("editor:viewport.command.flyFast"):g="[LMB] "+s("editor:viewport.command.orbit")+" | [MMB] "+s("editor:viewport.command.pan")+" | [RMB] "+s("editor:viewport.command.fly"),r&&(g+=" | [F] "+s("editor:viewport.command.focus")+" | [Q] "+s("editor:viewport.command.rotateLeft")+" | [E] "+s("editor:viewport.command.rotateRight")),o===Ht.Placement?g+=" | [ESC / G] "+s("editor:viewport.command.cancelPlacement"):o===Ht.Grab?g+=" | [Shift + Click] "+s("editor:viewport.command.placeDuplicate")+" | [ESC / G] "+s("editor:viewport.command.cancelGrab"):r&&(g+="| [G] "+s("editor:viewport.command.grab")+" | [ESC] "+s("editor:viewport.command.deselectAll")),p.createElement("div",{className:Sw,style:{borderColor:v?h?Ie.blue:Ie.red:"transparent"},ref:m},p.createElement("canvas",{className:Cw,ref:t,tabIndex:-1,id:"viewport-canvas"}),p.createElement("div",{className:Ew},g),p.createElement(Sf,{afterUpload:b}))}const Cn=te.span`
  color: ${t=>t.color};
`,Mw=te.li`
  display: flex;
  min-height: 100px;
  background-color: ${t=>t.theme.toolbar};
  border: 1px solid ${t=>t.theme.panel};
  border-radius: 4px;
  margin: 4px;
  color: white;
  max-width: 560px;

  & > :first-child {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100px;
  }

  & > :last-child {
    display: flex;
    flex-direction: column;
    flex: 1;
    padding: 12px;
    border-left: 1px solid ${t=>t.theme.panel2};
  }

  h5 {
    font-size: 20px;
  }

  h6 {
    font-size: 16px;
  }

  a {
    white-space: nowrap;
    color: ${t=>t.theme.blue};
  }

  p {
    margin: 0;
  }
`;function Kr({score:t,scoreColor:e,title:n,description:r,learnMoreUrl:i,children:o}){const{t:a}=Pt();return p.createElement(Mw,null,p.createElement("div",null,p.createElement(Cn,{as:"h5",color:e},t)),p.createElement("div",null,p.createElement("h6",null,n,": ",o),p.createElement("p",null,r," ",p.createElement("a",{rel:"noopener noreferrer",target:"_blank",href:i},a("editor:dialog.performance.learnMore")))))}const jd={Low:0,Medium:1,High:2};function Wd({scores:t,...e}){const n=u.exports.useContext(rs),{t:r}=Pt(),i={Low:n.green,Medium:n.yellow,High:n.red},o=jd[t.textures.largeTexturesScore]>jd[t.textures.score]?t.textures.largeTexturesScore:t.textures.score;return p.createElement(Xr,{...e},p.createElement("ul",null,p.createElement(Kr,{title:r("editor:dialog.performance.lbl-polycount"),description:r("editor:dialog.performance.info-polycount"),learnMoreUrl:"htts://xrengine.dev/docs/editor-optimization.html",score:t.polygons.score,scoreColor:i[t.polygons.score]},p.createElement(Cn,{color:i[t.polygons.score]},r("editor:dialog.performance.txt-polycount",{count:t.polygons.value.toLocaleString()}))),p.createElement(Kr,{title:r("editor:dialog.performance.lbl-material"),description:r("editor:dialog.performance.info-material"),learnMoreUrl:"htts://xrengine.dev/docs/editor-optimization.html",score:t.materials.score,scoreColor:i[t.materials.score]},p.createElement(Cn,{color:i[t.materials.score]},r("editor:dialog.performance.txt-material",{count:t.materials.value}))),p.createElement(Kr,{title:r("editor:dialog.performance.lbl-texture"),description:r("editor:dialog.performance.info-texture"),learnMoreUrl:"htts://xrengine.dev/docs/editor-optimization.html",score:o,scoreColor:i[o]},p.createElement(Cn,{color:i[t.textures.score]},r("editor:dialog.performance.txt-ram",{count:ps(t.textures.value)})),","," ",p.createElement(Cn,{color:i[t.textures.largeTexturesScore]},r("editor:dialog.performance.txt-texture",{count:t.textures.largeTexturesValue}))),p.createElement(Kr,{title:r("editor:dialog.performance.lbl-lights"),description:r("editor:dialog.performance.info-lights"),learnMoreUrl:"htts://xrengine.dev/docs/editor-optimization.html",score:t.lights.score,scoreColor:i[t.lights.score]},p.createElement(Cn,{color:i[t.lights.score]},r("editor:dialog.performance.txt-lights",{count:t.lights.value}))),p.createElement(Kr,{title:r("editor:dialog.performance.lbl-fileSize"),description:r("editor:dialog.performance.info-fileSize"),learnMoreUrl:"htts://xrengine.dev/docs/editor-optimization.html",score:t.fileSize.score,scoreColor:i[t.fileSize.score]},p.createElement(Cn,{color:i[t.fileSize.score]},ps(t.fileSize.value)))))}Wd.defaultProps={tag:"div",title:De.t("editor:dialog.performance.info-fileSize")||"Performance Check",confirmLabel:De.t("editor:dialog.performance.info-fileSize")||"Publish Scene"};class Ow extends u.exports.Component{constructor(e){super(e);this.state={name:"",...e.initialSceneParams}}onChangeName=e=>this.setState({name:e});onConfirm=()=>{const e={...this.state};e.name=e.name.trim(),this.props.onPublish(e)};render(){const{onCancel:e,screenshotUrl:n}=this.props,{name:r}=this.state;return p.createElement(za,{imageSrc:n,title:this.props.t("editor:dialog.publish.title"),onConfirm:this.onConfirm,onCancel:e,confirmLabel:this.props.t("editor:dialog.publish.lbl-confirm")},p.createElement(ro,null,p.createElement("label",{htmlFor:"sceneName"},this.props.t("editor:dialog.publish.lbl-name")),p.createElement(po,{id:"sceneName",required:!0,pattern:`[A-Za-z0-9-':"!@#$%^&*(),.?~ ]{4,64}`,title:this.props.t("editor:dialog.publish.info-name"),value:r,onChange:this.onChangeName})))}}var Tw=Tn()(Ow);function Pw({onCancel:t,sceneName:e,sceneUrl:n,screenshotUrl:r,...i}){const{t:o}=Pt();return p.createElement(za,{imageSrc:r,title:o("editor:dialog.published.title"),...i},p.createElement("h1",null,e),p.createElement("p",null,o("editor:dialog.published.header")),p.createElement(Ef,{as:"a",href:n,target:"_blank"},o("editor:dialog.published.lbl-view")))}const _w=async t=>{try{return await He.instance.feathersClient.service("static-resource-url").get(t)}catch(e){throw console.log("Can't get URL from id"+e),new Error(e)}throw new Error("Can't get URL from id")},Iw=async t=>Df(t)||await Mf(t);function kw({onSelectionChanged:t}){const[e,n]=u.exports.useState(go.instance.sources),[r,i]=u.exports.useState(e.length>0?e[1]:null);u.exports.useEffect(()=>{const S=I=>{i(e.find(_=>_.id===I))},x=()=>{const I=go.instance.sources;n(I)};return H.instance.addListener(Y.SETTINGS_CHANGED.toString(),x),H.instance.addListener(Y.SOURCE_CHANGED.toString(),S),()=>{H.instance.removeListener(Y.SOURCE_CHANGED.toString(),S),H.instance.removeListener(Y.SETTINGS_CHANGED.toString(),x)}},[i,e,n,r]);const{loadMore:o,hasMore:a,results:s}=Of(r),l={name:"Current",sid:"",ownedFileIds:{}},c=[];c.push(l),s.forEach(S=>{c.push(S.project)});const d=S=>{t({resourceUrl:S.description,name:S.id,contentType:S.contentType})},h=(S=>{const x=[];return S.forEach((I,_)=>{I.sid!==globalThis.currentProjectID&&x.push({label:I.name,value:_})}),x})(c),[v,m]=u.exports.useState(0),[b,g]=u.exports.useState([]),w=u.exports.useRef(v),D=async S=>{const x={};Object.assign(x,He.instance.ownedFileIds),Object.assign(x,He.instance.currentOwnedFileIds),c[0].ownedFileIds=JSON.stringify(x),c[0].sid=globalThis.currentProjectID;const I=c[S]?.ownedFileIds,_=I?JSON.parse(I):{},F=[];for(let k of Object.keys(_))if(k!=="thumbnailOwnedFileId"){const P=_[k],{url:O}=await _w(P);if(!O)continue;const j=await Iw(new URL(O)),N=kf[j],R=hr.instance.getEditorFromClass(N),V={description:O,fileId:P,projectId:c[S].sid,id:k,label:k,nodeClass:N,url:O,type:"Element",contentType:j,initialProps:{src:new URL(O)},iconComponent:R.WrappedComponent?R.WrappedComponent.iconComponent:R.iconComponent};F.push(V)}g(F)},E=S=>{w.current=S,m(S)};u.exports.useEffect(()=>{D(v)},[v]);const y=S=>{w.current===0&&D(v)};return u.exports.useEffect(()=>(H.instance.addListener(Y.FILE_UPLOADED.toString(),y),()=>{H.instance.removeListener(Y.FILE_UPLOADED.toString(),y)}),[]),p.createElement(p.Fragment,null,p.createElement(pn,{name:"Project Name",label:"Project Name"},p.createElement(_n,{options:h,onChange:E,value:v})),p.createElement(Tf,{id:"file-browser-panel",className:Pf.assetsPanel},p.createElement(_f,null,p.createElement(If,{source:r,items:b,onLoadMore:o,hasMore:a,onSelect:d,isLoading:!1}))))}const Rw=te.audio`
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-top:300px
  max-width:500px
`,Nw=t=>{const e=t.resourceProps.resourceUrl;return p.createElement(Rw,{src:e,controls:!0},"Your browser doesn't support Audio")},Aw=te.img`
  display: block;
  margin-left: auto;
  margin-right: auto;
`,Lw=t=>{const e=t.resourceProps.resourceUrl;return p.createElement(Aw,{src:e})},zw=te.canvas`
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  height: 100%;
  position: relative;
`,Fw=t=>{const e=t.resourceProps.resourceUrl,n=p.createRef(),r=new Vf,i=new Uf(75),[o,a]=u.exports.useState(!1),s=()=>{const d=n.current,f=new Gf({canvas:d});f.setSize(d.width,d.height);const h=new qf(4210752);r.add(h),i.aspect=d.width/d.width,r.add(i),f.render(r,i),new Xf().load(e,v=>{r.add(v.scene);const m=new Yf().setFromObject(v.scene);m.getCenter(i.position),i.position.z=m.max.z+1},void 0,()=>{console.log("Error Loading GLTF From URl")})},l=u.exports.useCallback(()=>{a(Le.instance.flyControls.enabled)},[a]),c=u.exports.useCallback(()=>{Le.instance.editorControls.addListener(Y.FLY_MODE_CHANGED.toString(),l),H.instance.removeListener(Y.RENDERER_INITIALIZED.toString(),c)},[l]);return u.exports.useEffect(()=>(H.instance.addListener(Y.RENDERER_INITIALIZED.toString(),c),He.instance.init(),ee.instance.initializeRenderer(n.current),s(),()=>{Le.instance.editorControls&&Le.instance.editorControls.removeListener(Y.FLY_MODE_CHANGED.toString(),l),ee.instance.renderer&&ee.instance.renderer.dispose(),He.instance.dispose()}),[]),p.createElement(p.Fragment,null,p.createElement("div",null,p.createElement(zw,{ref:n})))},Bw=t=>(t.resourceProps.resourceUrl,p.createElement("div",null,"Preview of this Asset is unavailable")),jw=te.video`
  display: block;
  margin-left: auto;
  margin-right: auto;
  max-width: 500px;
`,Ww=t=>{const e=t.resourceProps.resourceUrl;return p.createElement(jw,{src:e,controls:!0},"Your Browser doesn't support Video")},Hw=te.div`
  text-align: center;
  font-size: 150%;
  padding-bottom: 20px;
`,$w=p.forwardRef((t,e)=>{u.exports.useImperativeHandle(e,()=>({onLayoutChanged:i,onSelectionChanged:o})),u.exports.useState(0);const[n,r]=u.exports.useState({PreviewSource:null,resourceProps:{resourceUrl:"",name:""}}),i=()=>{console.log("Layout is Changed:")},o=s=>{a(s)},a=s=>{switch(s.contentType){case"model/gltf":case"model/gltf-binary":const l={PreviewSource:Fw,resourceProps:{resourceUrl:s.resourceUrl,name:s.name}};r(l);break;case"image/png":case"image/jpeg":const c={PreviewSource:Lw,resourceProps:{resourceUrl:s.resourceUrl,name:s.name}};r(c);break;case"video/mp4":const d={PreviewSource:Ww,resourceProps:{resourceUrl:s.resourceUrl,name:s.name}};r(d);break;case"audio/mpeg":const f={PreviewSource:Nw,resourceProps:{resourceUrl:s.resourceUrl,name:s.name}};r(f);break;default:const h={PreviewSource:Bw,resourceProps:{resourceUrl:s.resourceUrl,name:s.name}};r(h);break}};return p.createElement(p.Fragment,null,p.createElement("div",null,p.createElement(Hw,null,n.resourceProps.name)),n.PreviewSource&&p.createElement(n.PreviewSource,{resourceProps:n.resourceProps}))});function Kw(){const t=p.useRef(),e=()=>{t.current?.onLayoutChanged?.()},n=i=>{t.current?.onSelectionChanged?.(i)};let r={dockbox:{mode:"vertical",children:[{size:5,tabs:[{id:"projectFilesPanel",title:"Project Files",content:p.createElement(kw,{onSelectionChanged:n})}]},{size:5,tabs:[{id:"previewPanel",title:"Preview",content:p.createElement($w,{ref:t})}]}]}};return p.createElement(p.Fragment,null,p.createElement(Un,{defaultLayout:r,style:{pointerEvents:"none",position:"absolute",left:0,top:5,right:5,bottom:5},onLayoutChange:e}))}const Vw={name:()=>"Scene Editor",longName:()=>"Scene Editor",SERVER_URL:ei.publicRuntimeConfig.apiServer,APP_URL:ei.publicRuntimeConfig.appServer,FEATHERS_STORE_KEY:ei.publicRuntimeConfig.feathersStoreKey,ROOT_REDIRECT:ei.publicRuntimeConfig.rootRedirect},Uw=25,Hd=t=>`${Vw.APP_URL}/scenes/${t}`,Gw=async(t,e,n)=>{let r;try{const i=ee.instance.scene,o=new AbortController,a=o.signal;if(ee.instance.sceneModified&&(e(Ze,{title:De.t("editor:saving"),message:De.t("editor:savingMsg"),cancelable:!0,onCancel:()=>{o.abort()}}),t=await hs(t.project_id,a),a.aborted)){const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}e(Ze,{title:De.t("editor:generateScreenshot"),message:De.t("editor:generateScreenshotMsg")}),await new Promise(k=>setTimeout(k,5));const s=await ee.instance.takeScreenshot();console.log("Screenshot is"),console.log(s);const{blob:l,cameraTransform:c}=s;if(console.log("screenshotBlob is"),console.log(l),r=URL.createObjectURL(l),console.log("Screenshot url is",r),a.aborted){const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}let{name:d}=i.metadata;d=t.scene&&t.scene.name||d||ee.instance.scene.name;const f=await new Promise(k=>{e(Tw,{screenshotUrl:r,initialSceneParams:{name:d},onCancel:()=>k(null),onPublish:k})});if(!f){URL.revokeObjectURL(r),n();const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}i.setMetadata({name:f.name,previewCameraTransform:c}),e(Ze,{title:De.t("editor:publishingScene"),message:De.t("editor:publishingSceneMsg"),cancelable:!0,onCancel:()=>{o.abort()}});const{glbBlob:h,chunks:v}=await ee.instance.exportScene({scores:!0});if(a.aborted){const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}if(!await new Promise(k=>{e(Wd,{chunks:v,onCancel:()=>k(!1),onConfirm:()=>k(!0)})})){const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}const b=await ee.instance.scene.serialize(t.project_id),g=new Blob([JSON.stringify(b)],{type:"application/json"});e(Ze,{title:De.t("editor:publishingScene"),message:De.t("editor:publishingSceneMsg"),cancelable:!0,onCancel:()=>{o.abort()}});const w=h.size/1024/1024,D=Uw;if(w>D)throw new Error(De.t("editor:errors.sceneTooLarge",{size:w.toFixed(2),maxSize:D}));e(Ze,{title:De.t("editor:publishingScene"),message:De.t("editor:uploadingThumbnailMsg"),cancelable:!0,onCancel:()=>{o.abort()}});const{file_id:E,meta:{access_token:y}}=await bo(l,void 0,o.signal);if(a.aborted){const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}const{file_id:S,meta:{access_token:x}}=await bo(h,k=>{e(Ze,{title:De.t("editor:publishingScene"),message:De.t("editor:uploadingSceneMsg",{percentage:Math.floor(k*100)}),onCancel:()=>{o.abort()}},o.signal)});if(a.aborted){const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}const{file_id:I,meta:{access_token:_}}=await bo(g,void 0,o.signal);if(a.aborted){const k=new Error(De.t("editor:errors.publishProjectAborted"));throw k.aborted=!0,k}const F={screenshot_file_id:E,screenshot_file_token:y,model_file_id:S,model_file_token:x,scene_file_id:I,scene_file_token:_,name:f.name};try{t=await He.instance.feathersClient.service(`/publish-project/${t.project_id}`).create({scene:F})}catch(k){throw new Error(k)}e(Pw,{sceneName:F.name,screenshotUrl:r,sceneUrl:Hd(t.scene.scene_id),onConfirm:()=>{n()}})}finally{r&&URL.revokeObjectURL(r)}return t},qw=te.div`
  display: flex;
  flex: 1;
  flex-direction: column;
  height: 100%;
  width: 100%;
  position: fixed;
`,Yw=te.div`
  display: flex;
  flex: 1;
  overflow: hidden;
  margin: 0px;
`,Xw=te.div`
  .dock-panel {
    background: transparent;
    pointer-events: auto;
    opacity: 0.8;
    border: none;
  }
  .dock-panel:first-child {
    position: relative;
    z-index: 99;
  }
  .dock-panel[data-dockid="+3"] {
    visibility: hidden;
    pointer-events: none;
  }
  .dock-divider {
    pointer-events: auto;
  }
  .dock {
    border-radius: 4px;
    background: #282C31;
  }
  .dock-top .dock-bar {
    font-size: 12px;
    border-bottom: 1px solid rgba(0,0,0,0.2);
    background: #282C31;
  }
  .dock-tab {
    background: #282C31; 
    border-bottom: none;
  }
  .dock-tab:hover, .dock-tab-active, .dock-tab-active:hover {
    color: #ffffff; 
  }
  .dock-ink-bar {
    background-color: #ffffff; 
  }
`;class Jw extends u.exports.Component{constructor(e){super(e);let n=hd;const r=localStorage.getItem("editor-settings");r&&(n=JSON.parse(r)),He.buildProjectManager(n),H.buildCommandManager(),ee.buildSceneManager(),Le.buildControlManager(),hr.buildNodeManager(ee.instance.scene),go.buildSourceManager(),Rf.init(),Nf(),Af(),He.instance.initializeFeathersClient($f()),H.instance.addListener(Y.RENDERER_INITIALIZED.toString(),this.setDebuginfo),H.instance.addListener(Y.PROJECT_LOADED.toString(),this.onProjectLoaded),H.instance.addListener(Y.ERROR.toString(),this.onEditorError),H.instance.addListener(Y.SAVE_PROJECT.toString(),this.onSaveProject),this.state={project:null,parentSceneId:null,pathParams:new Map(Object.entries(e.match.params)),queryParams:new Map(new URLSearchParams(window.location.search).entries()),settingsContext:{settings:n,updateSetting:this.updateSetting},creatingProject:null,DialogComponent:null,dialogProps:{},modified:!1},this.t=this.props.t}componentDidMount(){const e=Zd.store.dispatch;is().locations.updateNeeded.value===!0&&e(vs.fetchAdminLocations()),Qd().scenes.updateNeeded.value===!0&&e(jf.fetchAdminScenes()),is().locationTypes.updateNeeded.value===!0&&e(vs.fetchLocationTypes());const n=this.state.pathParams,r=this.state.queryParams,i=n.get("projectId");i==="new"?r.has("template")?this.loadProjectTemplate(r.get("template")):r.has("sceneId")?this.loadScene(r.get("sceneId")):this.loadProjectTemplate(_d):i==="tutorial"?this.loadProjectTemplate(Id):this.loadProject(i)}componentDidUpdate(e){if(this.props.location.pathname!==e.location.pathname&&!this.state.creatingProject){const n=e.match.params.projectId,r=new Map(new URLSearchParams(window.location.search).entries());this.setState({queryParams:r});const o=this.state.pathParams.get("projectId");let a=null;o==="new"&&!r.has("sceneId")?a=r.get("template")||_d:o==="tutorial"&&(a=Id),o==="new"||o==="tutorial"?this.loadProjectTemplate(a):n!=="tutorial"&&n!=="new"&&this.loadProject(o)}}componentWillUnmount(){H.instance.removeListener(Y.SAVE_PROJECT.toString(),this.onSaveProject),H.instance.removeListener(Y.ERROR.toString(),this.onEditorError),H.instance.removeListener(Y.PROJECT_LOADED.toString(),this.onProjectLoaded),He.instance.dispose()}t;async loadProjectTemplate(e){this.setState({project:null,parentSceneId:null}),this.showDialog(Ze,{title:this.t("editor:loading"),message:this.t("editor:loadingMsg")});try{e.metadata&&(delete e.metadata.sceneUrl,delete e.metadata.sceneId),await He.instance.loadProject(e),this.hideDialog()}catch(n){console.error(n),this.showDialog($t,{title:this.t("editor:loadingError"),message:n.message||this.t("editor:loadingErrorMsg"),error:n})}}async loadScene(e){this.setState({project:null,parentSceneId:e}),this.showDialog(Ze,{title:this.t("editor:loading"),message:this.t("editor:loadingMsg")});try{const n=await zy(e);console.warn("loadScene:scene",n);const r=n.data;await He.instance.loadProject(r),this.hideDialog()}catch(n){console.error(n),this.showDialog($t,{title:this.t("editor:loadingError"),message:n.message||this.t("editor:loadingErrorMsg"),error:n})}}async importProject(e){const n=this.state.project;this.setState({project:null,parentSceneId:null}),this.showDialog(Ze,{title:this.t("editor:loading"),message:this.t("editor:loadingMsg")});try{await He.instance.loadProject(e),ee.instance.sceneModified=!0,this.updateModifiedState(),this.hideDialog()}catch(r){console.error(r),this.showDialog($t,{title:this.t("editor:loadingError"),message:r.message||this.t("editor:loadingErrorMsg"),error:r})}finally{n&&this.setState({project:n})}}async loadProject(e){this.setState({project:null,parentSceneId:null}),this.showDialog(Ze,{title:this.t("editor:loading"),message:this.t("editor:loadingMsg")});let n;try{n=await Lf(e),He.instance.ownedFileIds=JSON.parse(n.ownedFileIds),globalThis.currentProjectID=n.project_id;const r=n.project_url.split("collection/")[1],i=await He.instance.feathersClient.service("collection").get(r,{headers:{"content-type":"application/json"}});await He.instance.loadProject(i),this.hideDialog()}catch(r){console.error(r),this.showDialog($t,{title:this.t("editor:loadingError"),message:r.message||this.t("editor:loadingErrorMsg"),error:r})}finally{n&&this.setState({project:n})}}updateModifiedState(e){const n=ee.instance.sceneModified&&!this.state.creatingProject;n!==this.state.modified?this.setState({modified:n},e):e&&e()}generateToolbarMenu=()=>[{name:this.t("editor:menubar.newProject"),action:this.onNewProject},{name:this.t("editor:menubar.saveProject"),hotkey:`${vo} + S`,action:this.onSaveProject},{name:this.t("editor:menubar.saveAs"),action:this.onDuplicateProject},{name:this.t("editor:menubar.exportGLB"),action:this.onExportProject},{name:this.t("editor:menubar.importProject"),action:this.onImportLegacyProject},{name:this.t("editor:menubar.exportProject"),action:this.onExportLegacyProject},{name:this.t("editor:menubar.quit"),action:this.onOpenProject}];setDebuginfo=()=>{const e=ee.instance.renderer.webglRenderer.getContext(),n=e.getExtension("WEBGL_debug_renderer_info");n&&(e.getParameter(n.UNMASKED_VENDOR_WEBGL),e.getParameter(n.UNMASKED_RENDERER_WEBGL)),H.instance.removeListener(Y.RENDERER_INITIALIZED.toString(),this.setDebuginfo)};showDialog=(e,n={})=>{this.setState({DialogComponent:e,dialogProps:n})};hideDialog=()=>{this.setState({DialogComponent:null,dialogProps:{}})};dialogContext={showDialog:this.showDialog,hideDialog:this.hideDialog};onEditorError=e=>{if(e.aborted){this.hideDialog();return}console.error(e),this.showDialog($t,{title:e.title||this.t("editor:error"),message:e.message||this.t("editor:errorMsg"),error:e})};onProjectLoaded=()=>{this.updateModifiedState()};updateSetting(e,n){const r=Object.assign(this.state.settingsContext.settings,{[e]:n});localStorage.setItem("editor-settings",JSON.stringify(r)),He.instance.settings=r,H.instance.emitEvent(Y.SETTINGS_CHANGED),this.setState({settingsContext:{...this.state.settingsContext,settings:r}})}createProject=async()=>{const{parentSceneId:e}=this.state;this.showDialog(Ze,{title:this.t("editor:generateScreenshot"),message:this.t("editor:generateScreenshotMsg")}),await new Promise(s=>setTimeout(s,5));const n=await ee.instance.takeScreenshot(512,320),r=await new Promise(s=>{this.showDialog(Uy,{thumbnailUrl:URL.createObjectURL(n),initialName:ee.instance.scene.name,onConfirm:s,onCancel:s})});if(!r)return this.hideDialog(),null;const i=new AbortController;this.showDialog(Ze,{title:this.t("editor:saving"),message:this.t("editor:savingMsg"),cancelable:!0,onCancel:()=>{i.abort(),this.hideDialog()}}),H.instance.executeCommand(Re.MODIFY_PROPERTY,ee.instance.scene,{properties:{name:r.name}}),ee.instance.scene.setMetadata({name:r.name});const o=await zf(ee.instance.scene,e,n,i.signal,this.showDialog,this.hideDialog);ee.instance.sceneModified=!1,globalThis.currentProjectID=o.project_id;const a=this.state.pathParams;return a.set("projectId",o.project_id),this.updateModifiedState(()=>{this.setState({creatingProject:!0,project:o,pathParams:a},()=>{this.props.history.replace(`/editor/projects/${o.project_id}`),this.setState({creatingProject:!1})})}),o};onNewProject=async()=>{this.props.history.push("/editor/projects/new")};onOpenProject=()=>{this.props.history.push("/editor/projects")};onDuplicateProject=async()=>{const e=new AbortController;this.showDialog(Ze,{title:this.t("editor:duplicating"),message:this.t("editor:duplicatingMsg"),cancelable:!0,onCancel:()=>{e.abort(),this.hideDialog()}}),await new Promise(n=>setTimeout(n,5));try{const n=await this.createProject();ee.instance.sceneModified=!1,this.updateModifiedState(),this.hideDialog();const r=this.state.pathParams;r.set("projectId",n.project_id),this.setState({pathParams:r})}catch(n){console.error(n),this.showDialog($t,{title:this.t("editor:savingError"),message:n.message||this.t("editor:savingErrorMsg")})}};onExportProject=async()=>{const e=await new Promise(r=>{this.showDialog($y,{defaultOptions:Object.assign({},ee.DefaultExportOptions),onConfirm:r,onCancel:r})});if(!e){this.hideDialog();return}const n=new AbortController;this.showDialog(Ze,{title:this.t("editor:exporting"),message:this.t("editor:exportingMsg"),cancelable:!0,onCancel:()=>n.abort()});try{const{glbBlob:r}=await ee.instance.exportScene(e);this.hideDialog();const i=document.createElement("a");i.download=ee.instance.scene.name+".glb",i.href=URL.createObjectURL(r),document.body.appendChild(i),i.click(),document.body.removeChild(i)}catch(r){if(r.aborted){this.hideDialog();return}console.error(r),this.showDialog($t,{title:this.t("editor:exportingError"),message:r.message||this.t("editor:exportingErrorMsg"),error:r})}};onImportLegacyProject=async()=>{const e=await new Promise(r=>{this.showDialog(vd,{title:this.t("editor:importLegacy"),message:this.t("editor:importLegacyMsg"),onConfirm:()=>r(!0),onCancel:()=>r(!1)})});if(this.hideDialog(),!e)return;const n=document.createElement("input");n.type="file",n.accept=".world",n.style.display="none",n.onchange=()=>{if(n.files.length>0){const r=new FileReader;r.onload=()=>{const i=JSON.parse(r.result);i.metadata&&(delete i.metadata.sceneUrl,delete i.metadata.sceneId),this.importProject(i)},r.readAsText(n.files[0])}},n.click()};onExportLegacyProject=async()=>{const{project:e}=this.state,n=await ee.instance.scene.serialize(e.project_id);n.metadata&&(delete n.metadata.sceneUrl,delete n.metadata.sceneId);const r=JSON.stringify(n),i=new Blob([r]),o=document.createElement("a"),a=ee.instance.scene.name.toLowerCase().replace(/\s+/g,"-");o.download=a+".world",o.href=URL.createObjectURL(i),document.body.appendChild(o),o.click(),document.body.removeChild(o)};onSaveProject=async()=>{const e=new AbortController;this.showDialog(Ze,{title:this.t("editor:saving"),message:this.t("editor:savingMsg"),cancelable:!0,onCancel:()=>{e.abort(),this.hideDialog()}}),await new Promise(n=>setTimeout(n,5));try{const{project:n}=this.state;if(n){const r=await hs(n.project_id,e.signal);this.setState({project:r});const i=this.state.pathParams;i.set("projectId",r.project_id),this.setState({pathParams:i})}else await this.createProject();ee.instance.sceneModified=!1,this.updateModifiedState(),this.hideDialog()}catch(n){console.error(n),this.showDialog($t,{title:this.t("editor:savingError"),message:n.message||this.t("editor:savingErrorMsg")})}};onPublishProject=async()=>{try{let e=this.state.project;if(e||(e=await this.createProject()),!e||(e=await Gw(e,this.showDialog,this.hideDialog),!e))return;ee.instance.sceneModified=!1,this.updateModifiedState(),this.setState({project:e})}catch(e){if(e.abortedsettingsContext){this.hideDialog();return}console.error(e),this.showDialog($t,{title:this.t("editor:publishingError"),message:e.message||this.t("editor:publishingErrorMsg"),error:e})}};getSceneId(){const{project:e}=this.state;return e&&e.scene&&e.scene.scene_id||ee.instance.scene&&ee.instance.scene.metadata&&ee.instance.scene.metadata.sceneId}onOpenScene=()=>{const e=this.getSceneId();if(e){const n=Hd(e);window.open(n)}};render(){const{DialogComponent:e,dialogProps:n,settingsContext:r}=this.state,i=this.generateToolbarMenu();let o={dockbox:{mode:"horizontal",children:[{mode:"vertical",size:8,children:[{tabs:[{id:"viewPanel",title:"Viewport",content:p.createElement("div",null)}],size:1}]},{mode:"vertical",size:2,children:[{tabs:[{id:"hierarchyPanel",title:p.createElement($a,null,p.createElement(Ka,{as:fl,size:12}),p.createElement(Va,null,"Hierarchy")),content:p.createElement(R0,null)}]},{tabs:[{id:"propertiesPanel",title:p.createElement($a,null,p.createElement(Ka,{as:pl,size:12}),p.createElement(Va,null,"Properties")),content:p.createElement(V0,null)},{id:"assetsPanel",title:"Elements",content:p.createElement(Bf,null)},{id:"fileBrowserPanel",title:p.createElement($a,null,p.createElement(Ka,{as:tl,size:12}),p.createElement(Va,null,"File Browser")),content:p.createElement(Kw,null)}]}]}]}};return p.createElement(qw,{id:"editor-container"},p.createElement(By,{value:r},p.createElement(Ff,{value:this.dialogContext},p.createElement(Sh,{backend:ev},p.createElement(Yy,null),i&&p.createElement(xw,{menu:i}),p.createElement(Yw,null,p.createElement(Dw,null),p.createElement(Xw,null,p.createElement(Un,{defaultLayout:o,style:{pointerEvents:"none",position:"absolute",left:5,top:55,right:5,bottom:5}}))),p.createElement(Ly,{ariaHideApp:!1,isOpen:!!e,onRequestClose:this.hideDialog,shouldCloseOnOverlayClick:!1,className:"Modal",overlayClassName:"Overlay"},e&&p.createElement(e,{onConfirm:this.hideDialog,onCancel:this.hideDialog,...n}))))))}}var Sx=Tn()(Jd(Jw));export{Sx as default,Hd as getSceneUrl,Gw as publishProject};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
