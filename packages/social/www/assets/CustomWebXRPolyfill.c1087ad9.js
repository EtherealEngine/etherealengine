import{b as V}from"./avatarFunctions.6d66cf01.js";import"./three.module.493739a3.js";import"./index.7b02be28.js";import"./vendor.475cb2ff.js";const ae=Symbol("@@webxr-polyfill/EventTarget");class Te{constructor(){this[ae]={listeners:new Map}}addEventListener(e,s){if(typeof e!="string")throw new Error("`type` must be a string");if(typeof s!="function")throw new Error("`listener` must be a function");const i=this[ae].listeners.get(e)||[];i.push(s),this[ae].listeners.set(e,i)}removeEventListener(e,s){if(typeof e!="string")throw new Error("`type` must be a string");if(typeof s!="function")throw new Error("`listener` must be a function");const i=this[ae].listeners.get(e)||[];for(let r=i.length;r>=0;r--)i[r]===s&&i.pop()}dispatchEvent(e,s){const i=this[ae].listeners.get(e)||[],r=[];for(let n=0;n<i.length;n++)r[n]=i[n];for(let n of r)n(s);typeof this[`on${e}`]=="function"&&this[`on${e}`](s)}}const A=Symbol("@@webxr-polyfill/XR"),Vt=["inline","immersive-vr","immersive-ar"],zt={inline:{requiredFeatures:["viewer"],optionalFeatures:[]},"immersive-vr":{requiredFeatures:["viewer","local"],optionalFeatures:[]},"immersive-ar":{requiredFeatures:["viewer","local"],optionalFeatures:[]}},Nt=`Polyfill Error: Must call navigator.xr.isSessionSupported() with any XRSessionMode
or navigator.xr.requestSession('inline') prior to requesting an immersive
session. This is a limitation specific to the WebXR Polyfill and does not apply
to native implementations of the API.`;class ve extends Te{constructor(e){super();this[A]={device:null,devicePromise:e,immersiveSession:null,inlineSessions:new Set},e.then(s=>{this[A].device=s})}async isSessionSupported(e){return this[A].device||await this[A].devicePromise,e!="inline"?Promise.resolve(this[A].device.isSessionSupported(e)):Promise.resolve(!0)}async requestSession(e,s){if(!this[A].device){if(e!="inline")throw new Error(Nt);await this[A].devicePromise}if(!Vt.includes(e))throw new TypeError(`The provided value '${e}' is not a valid enum value of type XRSessionMode`);const i=zt[e],r=i.requiredFeatures.concat(s&&s.requiredFeatures?s.requiredFeatures:[]),n=i.optionalFeatures.concat(s&&s.optionalFeatures?s.optionalFeatures:[]),a=new Set;let o=!1;for(let u of r)this[A].device.isFeatureSupported(u)?a.add(u):(console.error(`The required feature '${u}' is not supported`),o=!0);if(o)throw new DOMException("Session does not support some required features","NotSupportedError");for(let u of n)this[A].device.isFeatureSupported(u)?a.add(u):console.log(`The optional feature '${u}' is not supported`);const l=await this[A].device.requestSession(e,a),c=new XRSession(this[A].device,e,l);e=="inline"?this[A].inlineSessions.add(c):this[A].immersiveSession=c;const d=()=>{e=="inline"?this[A].inlineSessions.delete(c):this[A].immersiveSession=null,c.removeEventListener("end",d)};return c.addEventListener("end",d),c}}const Me=Symbol("@@webxr-polyfill/XRPose");class je{constructor(e,s){this[Me]={transform:e,emulatedPosition:s}}get transform(){return this[Me].transform}get emulatedPosition(){return this[Me].emulatedPosition}}const Ge=Symbol("@@webxr-polyfill/XRViewerPose");class $e extends je{constructor(e,s,i=!1){super(e,i);this[Ge]={views:s}}get views(){return this[Ge].views}}const oe=Symbol("@@webxr-polyfill/XRViewport");class We{constructor(e){this[oe]={target:e}}get x(){return this[oe].target.x}get y(){return this[oe].target.y}get width(){return this[oe].target.width}get height(){return this[oe].target.height}}var qe=1e-6,O=typeof Float32Array!="undefined"?Float32Array:Array;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});function Xt(){var t=new O(9);return O!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function E(){var t=new O(16);return O!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function ge(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function B(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function z(t,e){var s=e[0],i=e[1],r=e[2],n=e[3],a=e[4],o=e[5],l=e[6],c=e[7],d=e[8],u=e[9],p=e[10],f=e[11],g=e[12],y=e[13],m=e[14],R=e[15],M=s*o-i*a,w=s*l-r*a,x=s*c-n*a,S=i*l-r*o,v=i*c-n*o,X=r*c-n*l,ee=d*y-u*g,te=d*m-p*g,se=d*R-f*g,ie=u*m-p*y,re=u*R-f*y,ne=p*R-f*m,P=M*ne-w*re+x*ie+S*se-v*te+X*ee;return P?(P=1/P,t[0]=(o*ne-l*re+c*ie)*P,t[1]=(r*re-i*ne-n*ie)*P,t[2]=(y*X-m*v+R*S)*P,t[3]=(p*v-u*X-f*S)*P,t[4]=(l*se-a*ne-c*te)*P,t[5]=(s*ne-r*se+n*te)*P,t[6]=(m*x-g*X-R*w)*P,t[7]=(d*X-p*x+f*w)*P,t[8]=(a*re-o*se+c*ee)*P,t[9]=(i*se-s*re-n*ee)*P,t[10]=(g*v-y*x+R*M)*P,t[11]=(u*x-d*v-f*M)*P,t[12]=(o*te-a*ie-l*ee)*P,t[13]=(s*ie-i*te+r*ee)*P,t[14]=(y*w-g*S-m*M)*P,t[15]=(d*S-u*w+p*M)*P,t):null}function L(t,e,s){var i=e[0],r=e[1],n=e[2],a=e[3],o=e[4],l=e[5],c=e[6],d=e[7],u=e[8],p=e[9],f=e[10],g=e[11],y=e[12],m=e[13],R=e[14],M=e[15],w=s[0],x=s[1],S=s[2],v=s[3];return t[0]=w*i+x*o+S*u+v*y,t[1]=w*r+x*l+S*p+v*m,t[2]=w*n+x*c+S*f+v*R,t[3]=w*a+x*d+S*g+v*M,w=s[4],x=s[5],S=s[6],v=s[7],t[4]=w*i+x*o+S*u+v*y,t[5]=w*r+x*l+S*p+v*m,t[6]=w*n+x*c+S*f+v*R,t[7]=w*a+x*d+S*g+v*M,w=s[8],x=s[9],S=s[10],v=s[11],t[8]=w*i+x*o+S*u+v*y,t[9]=w*r+x*l+S*p+v*m,t[10]=w*n+x*c+S*f+v*R,t[11]=w*a+x*d+S*g+v*M,w=s[12],x=s[13],S=s[14],v=s[15],t[12]=w*i+x*o+S*u+v*y,t[13]=w*r+x*l+S*p+v*m,t[14]=w*n+x*c+S*f+v*R,t[15]=w*a+x*d+S*g+v*M,t}function Bt(t,e,s){var i=s[0],r=s[1],n=s[2],a,o,l,c,d,u,p,f,g,y,m,R;return e===t?(t[12]=e[0]*i+e[4]*r+e[8]*n+e[12],t[13]=e[1]*i+e[5]*r+e[9]*n+e[13],t[14]=e[2]*i+e[6]*r+e[10]*n+e[14],t[15]=e[3]*i+e[7]*r+e[11]*n+e[15]):(a=e[0],o=e[1],l=e[2],c=e[3],d=e[4],u=e[5],p=e[6],f=e[7],g=e[8],y=e[9],m=e[10],R=e[11],t[0]=a,t[1]=o,t[2]=l,t[3]=c,t[4]=d,t[5]=u,t[6]=p,t[7]=f,t[8]=g,t[9]=y,t[10]=m,t[11]=R,t[12]=a*i+d*r+g*n+e[12],t[13]=o*i+u*r+y*n+e[13],t[14]=l*i+p*r+m*n+e[14],t[15]=c*i+f*r+R*n+e[15]),t}function Ut(t,e,s){var i=Math.sin(s),r=Math.cos(s),n=e[4],a=e[5],o=e[6],l=e[7],c=e[8],d=e[9],u=e[10],p=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=n*r+c*i,t[5]=a*r+d*i,t[6]=o*r+u*i,t[7]=l*r+p*i,t[8]=c*r-n*i,t[9]=d*r-a*i,t[10]=u*r-o*i,t[11]=p*r-l*i,t}function kt(t,e,s){var i=Math.sin(s),r=Math.cos(s),n=e[0],a=e[1],o=e[2],l=e[3],c=e[8],d=e[9],u=e[10],p=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=n*r-c*i,t[1]=a*r-d*i,t[2]=o*r-u*i,t[3]=l*r-p*i,t[8]=n*i+c*r,t[9]=a*i+d*r,t[10]=o*i+u*r,t[11]=l*i+p*r,t}function Ht(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function Qe(t,e,s){var i=s[0],r=s[1],n=s[2],a=Math.hypot(i,r,n),o,l,c;return a<qe?null:(a=1/a,i*=a,r*=a,n*=a,o=Math.sin(e),l=Math.cos(e),c=1-l,t[0]=i*i*c+l,t[1]=r*i*c+n*o,t[2]=n*i*c-r*o,t[3]=0,t[4]=i*r*c-n*o,t[5]=r*r*c+l,t[6]=n*r*c+i*o,t[7]=0,t[8]=i*n*c+r*o,t[9]=r*n*c-i*o,t[10]=n*n*c+l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function j(t,e,s){var i=e[0],r=e[1],n=e[2],a=e[3],o=i+i,l=r+r,c=n+n,d=i*o,u=i*l,p=i*c,f=r*l,g=r*c,y=n*c,m=a*o,R=a*l,M=a*c;return t[0]=1-(f+y),t[1]=u+M,t[2]=p-R,t[3]=0,t[4]=u-M,t[5]=1-(d+y),t[6]=g+m,t[7]=0,t[8]=p+R,t[9]=g-m,t[10]=1-(d+f),t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function Ye(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function jt(t,e){var s=e[0],i=e[1],r=e[2],n=e[4],a=e[5],o=e[6],l=e[8],c=e[9],d=e[10];return t[0]=Math.hypot(s,i,r),t[1]=Math.hypot(n,a,o),t[2]=Math.hypot(l,c,d),t}function Ie(t,e){var s=new O(3);jt(s,e);var i=1/s[0],r=1/s[1],n=1/s[2],a=e[0]*i,o=e[1]*r,l=e[2]*n,c=e[4]*i,d=e[5]*r,u=e[6]*n,p=e[8]*i,f=e[9]*r,g=e[10]*n,y=a+d+g,m=0;return y>0?(m=Math.sqrt(y+1)*2,t[3]=.25*m,t[0]=(u-f)/m,t[1]=(p-l)/m,t[2]=(o-c)/m):a>d&&a>g?(m=Math.sqrt(1+a-d-g)*2,t[3]=(u-f)/m,t[0]=.25*m,t[1]=(o+c)/m,t[2]=(p+l)/m):d>g?(m=Math.sqrt(1+d-a-g)*2,t[3]=(p-l)/m,t[0]=(o+c)/m,t[1]=.25*m,t[2]=(u+f)/m):(m=Math.sqrt(1+g-a-d)*2,t[3]=(o-c)/m,t[0]=(p+l)/m,t[1]=(u+f)/m,t[2]=.25*m),t}function Ze(t,e,s,i){var r=e[0],n=e[1],a=e[2],o=e[3],l=r+r,c=n+n,d=a+a,u=r*l,p=r*c,f=r*d,g=n*c,y=n*d,m=a*d,R=o*l,M=o*c,w=o*d,x=i[0],S=i[1],v=i[2];return t[0]=(1-(g+m))*x,t[1]=(p+w)*x,t[2]=(f-M)*x,t[3]=0,t[4]=(p-w)*S,t[5]=(1-(u+m))*S,t[6]=(y+R)*S,t[7]=0,t[8]=(f+M)*v,t[9]=(y-R)*v,t[10]=(1-(u+g))*v,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function Q(t,e,s,i,r){var n=1/Math.tan(e/2),a;return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,r!=null&&r!==1/0?(a=1/(i-r),t[10]=(r+i)*a,t[14]=2*r*i*a):(t[10]=-1,t[14]=-2*i),t}function I(){var t=new O(3);return O!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Je(t){var e=new O(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Gt(t){var e=t[0],s=t[1],i=t[2];return Math.hypot(e,s,i)}function N(t,e,s){var i=new O(3);return i[0]=t,i[1]=e,i[2]=s,i}function Fe(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function G(t,e,s,i){return t[0]=e,t[1]=s,t[2]=i,t}function le(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function Ke(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function $t(t,e){var s=e[0],i=e[1],r=e[2],n=s*s+i*i+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function ye(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function we(t,e,s){var i=e[0],r=e[1],n=e[2],a=s[0],o=s[1],l=s[2];return t[0]=r*l-n*o,t[1]=n*a-i*l,t[2]=i*o-r*a,t}function Wt(t,e,s){var i=e[0],r=e[1],n=e[2],a=s[3]*i+s[7]*r+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*i+s[4]*r+s[8]*n+s[12])/a,t[1]=(s[1]*i+s[5]*r+s[9]*n+s[13])/a,t[2]=(s[2]*i+s[6]*r+s[10]*n+s[14])/a,t}function $(t,e,s){var i=s[0],r=s[1],n=s[2],a=s[3],o=e[0],l=e[1],c=e[2],d=r*c-n*l,u=n*o-i*c,p=i*l-r*o,f=r*p-n*u,g=n*d-i*p,y=i*u-r*d,m=a*2;return d*=m,u*=m,p*=m,f*=2,g*=2,y*=2,t[0]=o+d+f,t[1]=l+u+g,t[2]=c+p+y,t}function qt(t,e){var s=t[0],i=t[1],r=t[2],n=e[0],a=e[1],o=e[2],l=Math.sqrt(s*s+i*i+r*r),c=Math.sqrt(n*n+a*a+o*o),d=l*c,u=d&&ye(t,e)/d;return Math.acos(Math.min(Math.max(u,-1),1))}var Qt=Gt;(function(){var t=I();return function(e,s,i,r,n,a){var o,l;for(s||(s=3),i||(i=0),r?l=Math.min(r*s+i,e.length):l=e.length,o=i;o<l;o+=s)t[0]=e[o],t[1]=e[o+1],t[2]=e[o+2],n(t,t,a),e[o]=t[0],e[o+1]=t[1],e[o+2]=t[2];return e}})();function Ae(){var t=new O(4);return O!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function Yt(t){var e=new O(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Zt(t,e,s,i){var r=new O(4);return r[0]=t,r[1]=e,r[2]=s,r[3]=i,r}function Jt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function et(t,e,s,i,r){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t}function Kt(t,e){var s=e[0],i=e[1],r=e[2],n=e[3],a=s*s+i*i+r*r+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=s*a,t[1]=i*a,t[2]=r*a,t[3]=n*a,t}function tt(t,e,s){var i=e[0],r=e[1],n=e[2],a=e[3];return t[0]=s[0]*i+s[4]*r+s[8]*n+s[12]*a,t[1]=s[1]*i+s[5]*r+s[9]*n+s[13]*a,t[2]=s[2]*i+s[6]*r+s[10]*n+s[14]*a,t[3]=s[3]*i+s[7]*r+s[11]*n+s[15]*a,t}(function(){var t=Ae();return function(e,s,i,r,n,a){var o,l;for(s||(s=4),i||(i=0),r?l=Math.min(r*s+i,e.length):l=e.length,o=i;o<l;o+=s)t[0]=e[o],t[1]=e[o+1],t[2]=e[o+2],t[3]=e[o+3],n(t,t,a),e[o]=t[0],e[o+1]=t[1],e[o+2]=t[2],e[o+3]=t[3];return e}})();function C(){var t=new O(4);return O!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function es(t,e,s){s=s*.5;var i=Math.sin(s);return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=Math.cos(s),t}function st(t,e,s){var i=e[0],r=e[1],n=e[2],a=e[3],o=s[0],l=s[1],c=s[2],d=s[3];return t[0]=i*d+a*o+r*c-n*l,t[1]=r*d+a*l+n*o-i*c,t[2]=n*d+a*c+i*l-r*o,t[3]=a*d-i*o-r*l-n*c,t}function ce(t,e,s,i){var r=e[0],n=e[1],a=e[2],o=e[3],l=s[0],c=s[1],d=s[2],u=s[3],p,f,g,y,m;return f=r*l+n*c+a*d+o*u,f<0&&(f=-f,l=-l,c=-c,d=-d,u=-u),1-f>qe?(p=Math.acos(f),g=Math.sin(p),y=Math.sin((1-i)*p)/g,m=Math.sin(i*p)/g):(y=1-i,m=i),t[0]=y*r+m*l,t[1]=y*n+m*c,t[2]=y*a+m*d,t[3]=y*o+m*u,t}function it(t,e){var s=e[0],i=e[1],r=e[2],n=e[3],a=s*s+i*i+r*r+n*n,o=a?1/a:0;return t[0]=-s*o,t[1]=-i*o,t[2]=-r*o,t[3]=n*o,t}function ts(t,e){var s=e[0]+e[4]+e[8],i;if(s>0)i=Math.sqrt(s+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{var r=0;e[4]>e[0]&&(r=1),e[8]>e[r*3+r]&&(r=2);var n=(r+1)%3,a=(r+2)%3;i=Math.sqrt(e[r*3+r]-e[n*3+n]-e[a*3+a]+1),t[r]=.5*i,i=.5/i,t[3]=(e[n*3+a]-e[a*3+n])*i,t[n]=(e[n*3+r]+e[r*3+n])*i,t[a]=(e[a*3+r]+e[r*3+a])*i}return t}function ss(t,e,s,i){var r=.5*Math.PI/180;e*=r,s*=r,i*=r;var n=Math.sin(e),a=Math.cos(e),o=Math.sin(s),l=Math.cos(s),c=Math.sin(i),d=Math.cos(i);return t[0]=n*l*d-a*o*c,t[1]=a*o*d+n*l*c,t[2]=a*l*c-n*o*d,t[3]=a*l*d+n*o*c,t}var rt=Yt,is=Zt,Oe=Jt,Se=Kt;(function(){var t=I(),e=N(1,0,0),s=N(0,1,0);return function(i,r,n){var a=ye(r,n);return a<-.999999?(we(t,e,r),Qt(t)<1e-6&&we(t,s,r),$t(t,t),es(i,t,Math.PI),i):a>.999999?(i[0]=0,i[1]=0,i[2]=0,i[3]=1,i):(we(t,r,n),i[0]=t[0],i[1]=t[1],i[2]=t[2],i[3]=1+a,Se(i,i))}})();(function(){var t=C(),e=C();return function(s,i,r,n,a,o){return ce(t,i,a,o),ce(e,r,n,o),ce(s,t,e,2*o*(1-o)),s}})();(function(){var t=Xt();return function(e,s,i,r){return t[0]=i[0],t[3]=i[1],t[6]=i[2],t[1]=r[0],t[4]=r[1],t[7]=r[2],t[2]=-s[0],t[5]=-s[1],t[8]=-s[2],Se(e,ts(e,t))}})();const b=Symbol("@@webxr-polyfill/XRRigidTransform");class W{constructor(){if(this[b]={matrix:null,position:null,orientation:null,inverse:null},arguments.length===0)this[b].matrix=B(new Float32Array(16));else if(arguments.length===1)arguments[0]instanceof Float32Array?this[b].matrix=arguments[0]:(this[b].position=this._getPoint(arguments[0]),this[b].orientation=DOMPointReadOnly.fromPoint({x:0,y:0,z:0,w:1}));else if(arguments.length===2)this[b].position=this._getPoint(arguments[0]),this[b].orientation=this._getPoint(arguments[1]);else throw new Error("Too many arguments!");if(this[b].matrix){let e=I();Ye(e,this[b].matrix),this[b].position=DOMPointReadOnly.fromPoint({x:e[0],y:e[1],z:e[2]});let s=C();Ie(s,this[b].matrix),this[b].orientation=DOMPointReadOnly.fromPoint({x:s[0],y:s[1],z:s[2],w:s[3]})}else this[b].matrix=B(new Float32Array(16)),j(this[b].matrix,is(this[b].orientation.x,this[b].orientation.y,this[b].orientation.z,this[b].orientation.w),N(this[b].position.x,this[b].position.y,this[b].position.z))}_getPoint(e){return e instanceof DOMPointReadOnly?e:DOMPointReadOnly.fromPoint(e)}get matrix(){return this[b].matrix}get position(){return this[b].position}get orientation(){return this[b].orientation}get inverse(){if(this[b].inverse===null){let e=B(new Float32Array(16));z(e,this[b].matrix),this[b].inverse=new W(e),this[b].inverse[b].inverse=this}return this[b].inverse}}const nt=["left","right","none"],U=Symbol("@@webxr-polyfill/XRView");class at{constructor(e,s,i,r){if(!nt.includes(i))throw new Error(`XREye must be one of: ${nt}`);const n=Object.create(null),a=new We(n);this[U]={device:e,eye:i,viewport:a,temp:n,sessionId:r,transform:s}}get eye(){return this[U].eye}get projectionMatrix(){return this[U].device.getProjectionMatrix(this.eye)}get transform(){return this[U].transform}_getViewport(e){if(this[U].device.getViewport(this[U].sessionId,this.eye,e,this[U].temp))return this[U].viewport}}const T=Symbol("@@webxr-polyfill/XRFrame"),ot="XRFrame access outside the callback that produced it is invalid.",rs="getViewerPose can only be called on XRFrame objects passed to XRSession.requestAnimationFrame callbacks.";let ns=0;class he{constructor(e,s,i){this[T]={id:++ns,active:!1,animationFrame:!1,device:e,session:s,sessionId:i}}get session(){return this[T].session}getViewerPose(e){if(!this[T].animationFrame)throw new DOMException(rs,"InvalidStateError");if(!this[T].active)throw new DOMException(ot,"InvalidStateError");const s=this[T].device,i=this[T].session;i[h].viewerSpace._ensurePoseUpdated(s,this[T].id),e._ensurePoseUpdated(s,this[T].id);let r=e._getSpaceRelativeTransform(i[h].viewerSpace);const n=[];for(let o of i[h].viewSpaces){o._ensurePoseUpdated(s,this[T].id);let l=e._getSpaceRelativeTransform(o),c=new at(s,l,o.eye,this[T].sessionId);n.push(c)}return new $e(r,n,!1)}getPose(e,s){if(!this[T].active)throw new DOMException(ot,"InvalidStateError");const i=this[T].device;if(e._specialType==="target-ray"||e._specialType==="grip")return i.getInputPose(e._inputSource,s,e._specialType);{e._ensurePoseUpdated(i,this[T].id),s._ensurePoseUpdated(i,this[T].id);let r=s._getSpaceRelativeTransform(e);return r?new XRPose(r,!1):null}}}const _=Symbol("@@webxr-polyfill/XRSpace");class Y{constructor(e=null,s=null){this[_]={specialType:e,inputSource:s,baseMatrix:null,inverseBaseMatrix:null,lastFrameId:-1}}get _specialType(){return this[_].specialType}get _inputSource(){return this[_].inputSource}_ensurePoseUpdated(e,s){s!=this[_].lastFrameId&&(this[_].lastFrameId=s,this._onPoseUpdate(e))}_onPoseUpdate(e){this[_].specialType=="viewer"&&(this._baseMatrix=e.getBasePoseMatrix())}set _baseMatrix(e){this[_].baseMatrix=e,this[_].inverseBaseMatrix=null}get _baseMatrix(){return this[_].baseMatrix||this[_].inverseBaseMatrix&&(this[_].baseMatrix=new Float32Array(16),z(this[_].baseMatrix,this[_].inverseBaseMatrix)),this[_].baseMatrix}set _inverseBaseMatrix(e){this[_].inverseBaseMatrix=e,this[_].baseMatrix=null}get _inverseBaseMatrix(){return this[_].inverseBaseMatrix||this[_].baseMatrix&&(this[_].inverseBaseMatrix=new Float32Array(16),z(this[_].inverseBaseMatrix,this[_].baseMatrix)),this[_].inverseBaseMatrix}_getSpaceRelativeTransform(e){if(!this._inverseBaseMatrix||!e._baseMatrix)return null;let s=new Float32Array(16);return L(s,this._inverseBaseMatrix,e._baseMatrix),new W(s)}}const as=1.6,k=Symbol("@@webxr-polyfill/XRReferenceSpace"),xe=["viewer","local","local-floor","bounded-floor","unbounded"];function os(t){return t==="bounded-floor"||t==="local-floor"}class de extends Y{constructor(e,s=null){if(!xe.includes(e))throw new Error(`XRReferenceSpaceType must be one of ${xe}`);super(e);if(e==="bounded-floor"&&!s)throw new Error("XRReferenceSpace cannot use 'bounded-floor' type if the platform does not provide the floor level");os(e)&&!s&&(s=B(new Float32Array(16)),s[13]=as),this._inverseBaseMatrix=s||B(new Float32Array(16)),this[k]={type:e,transform:s,originOffset:B(new Float32Array(16))}}_transformBasePoseMatrix(e,s){L(e,this._inverseBaseMatrix,s)}_originOffsetMatrix(){return this[k].originOffset}_adjustForOriginOffset(e){let s=new Float32Array(16);z(s,this[k].originOffset),L(e,s,e)}_getSpaceRelativeTransform(e){let s=super._getSpaceRelativeTransform(e);return this._adjustForOriginOffset(s.matrix),new XRRigidTransform(s.matrix)}getOffsetReferenceSpace(e){let s=new de(this[k].type,this[k].transform,this[k].bounds);return L(s[k].originOffset,this[k].originOffset,e.matrix),s}}const ue=Symbol("@@webxr-polyfill/XRRenderState"),ls=Object.freeze({depthNear:.1,depthFar:1e3,inlineVerticalFieldOfView:null,baseLayer:null});class Ce{constructor(e={}){const s=Object.assign({},ls,e);this[ue]={config:s}}get depthNear(){return this[ue].config.depthNear}get depthFar(){return this[ue].config.depthFar}get inlineVerticalFieldOfView(){return this[ue].config.inlineVerticalFieldOfView}get baseLayer(){return this[ue].config.baseLayer}}const Le=Symbol("@@webxr-polyfill/XRInputSourceEvent");class be extends Event{constructor(e,s){super(e,s);this[Le]={frame:s.frame,inputSource:s.inputSource},Object.setPrototypeOf(this,be.prototype)}get frame(){return this[Le].frame}get inputSource(){return this[Le].inputSource}}const lt=Symbol("@@webxr-polyfill/XRSessionEvent");class pe extends Event{constructor(e,s){super(e,s);this[lt]={session:s.session},Object.setPrototypeOf(this,pe.prototype)}get session(){return this[lt].session}}const Ee=Symbol("@@webxr-polyfill/XRInputSourcesChangeEvent");class Re extends Event{constructor(e,s){super(e,s);this[Ee]={session:s.session,added:s.added,removed:s.removed},Object.setPrototypeOf(this,Re.prototype)}get session(){return this[Ee].session}get added(){return this[Ee].added}get removed(){return this[Ee].removed}}const h=Symbol("@@webxr-polyfill/XRSession");class De extends Y{constructor(e){super(e)}get eye(){return this._specialType}_onPoseUpdate(e){this._inverseBaseMatrix=e.getBaseViewMatrix(this._specialType)}}class Z extends Te{constructor(e,s,i){super();let r=s!="inline",n=new Ce({inlineVerticalFieldOfView:r?null:Math.PI*.5});this[h]={device:e,mode:s,immersive:r,ended:!1,suspended:!1,frameCallbacks:[],currentFrameCallbacks:null,frameHandle:0,deviceFrameHandle:null,id:i,activeRenderState:n,pendingRenderState:null,viewerSpace:new de("viewer"),viewSpaces:[],currentInputSources:[]},r?this[h].viewSpaces.push(new De("left"),new De("right")):this[h].viewSpaces.push(new De("none")),this[h].onDeviceFrame=()=>{if(this[h].ended||this[h].suspended||(this[h].deviceFrameHandle=null,this[h].startDeviceFrameLoop(),this[h].pendingRenderState!==null&&(this[h].activeRenderState=new Ce(this[h].pendingRenderState),this[h].pendingRenderState=null,this[h].activeRenderState.baseLayer&&this[h].device.onBaseLayerSet(this[h].id,this[h].activeRenderState.baseLayer)),this[h].activeRenderState.baseLayer===null))return;const a=new he(e,this,this[h].id),o=this[h].currentFrameCallbacks=this[h].frameCallbacks;this[h].frameCallbacks=[],a[T].active=!0,a[T].animationFrame=!0,this[h].device.onFrameStart(this[h].id,this[h].activeRenderState),this._checkInputSourcesChange();const l=performance.now();for(let c=0;c<o.length;c++)try{!o[c].cancelled&&typeof o[c].callback=="function"&&o[c].callback(l,a)}catch(d){console.error(d)}this[h].currentFrameCallbacks=null,a[T].active=!1,this[h].device.onFrameEnd(this[h].id)},this[h].startDeviceFrameLoop=()=>{this[h].deviceFrameHandle===null&&(this[h].deviceFrameHandle=this[h].device.requestAnimationFrame(this[h].onDeviceFrame))},this[h].stopDeviceFrameLoop=()=>{const a=this[h].deviceFrameHandle;a!==null&&(this[h].device.cancelAnimationFrame(a),this[h].deviceFrameHandle=null)},this[h].onPresentationEnd=a=>{if(a!==this[h].id){this[h].suspended=!1,this[h].startDeviceFrameLoop(),this.dispatchEvent("focus",{session:this});return}this[h].ended=!0,this[h].stopDeviceFrameLoop(),e.removeEventListener("@@webxr-polyfill/vr-present-end",this[h].onPresentationEnd),e.removeEventListener("@@webxr-polyfill/vr-present-start",this[h].onPresentationStart),e.removeEventListener("@@webxr-polyfill/input-select-start",this[h].onSelectStart),e.removeEventListener("@@webxr-polyfill/input-select-end",this[h].onSelectEnd),this.dispatchEvent("end",new pe("end",{session:this}))},e.addEventListener("@@webxr-polyfill/vr-present-end",this[h].onPresentationEnd),this[h].onPresentationStart=a=>{a!==this[h].id&&(this[h].suspended=!0,this[h].stopDeviceFrameLoop(),this.dispatchEvent("blur",{session:this}))},e.addEventListener("@@webxr-polyfill/vr-present-start",this[h].onPresentationStart),this[h].onSelectStart=a=>{a.sessionId===this[h].id&&this[h].dispatchInputSourceEvent("selectstart",a.inputSource)},e.addEventListener("@@webxr-polyfill/input-select-start",this[h].onSelectStart),this[h].onSelectEnd=a=>{a.sessionId===this[h].id&&(this[h].dispatchInputSourceEvent("selectend",a.inputSource),this[h].dispatchInputSourceEvent("select",a.inputSource))},e.addEventListener("@@webxr-polyfill/input-select-end",this[h].onSelectEnd),this[h].onSqueezeStart=a=>{a.sessionId===this[h].id&&this[h].dispatchInputSourceEvent("squeezestart",a.inputSource)},e.addEventListener("@@webxr-polyfill/input-squeeze-start",this[h].onSqueezeStart),this[h].onSqueezeEnd=a=>{a.sessionId===this[h].id&&(this[h].dispatchInputSourceEvent("squeezeend",a.inputSource),this[h].dispatchInputSourceEvent("squeeze",a.inputSource))},e.addEventListener("@@webxr-polyfill/input-squeeze-end",this[h].onSqueezeEnd),this[h].dispatchInputSourceEvent=(a,o)=>{const l=new he(e,this,this[h].id),c=new be(a,{frame:l,inputSource:o});l[T].active=!0,this.dispatchEvent(a,c),l[T].active=!1},this[h].startDeviceFrameLoop(),this.onblur=void 0,this.onfocus=void 0,this.onresetpose=void 0,this.onend=void 0,this.onselect=void 0,this.onselectstart=void 0,this.onselectend=void 0}get renderState(){return this[h].activeRenderState}get environmentBlendMode(){return this[h].device.environmentBlendMode||"opaque"}async requestReferenceSpace(e){if(this[h].ended)return;if(!xe.includes(e))throw new TypeError(`XRReferenceSpaceType must be one of ${xe}`);if(!this[h].device.doesSessionSupportReferenceSpace(this[h].id,e))throw new DOMException(`The ${e} reference space is not supported by this session.`,"NotSupportedError");if(e==="viewer")return this[h].viewerSpace;let s=await this[h].device.requestFrameOfReferenceTransform(e);if(e==="bounded-floor")throw s?this[h].device.requestStageBounds()?new DOMException(`The WebXR polyfill does not support the ${e} reference space yet.`,"NotSupportedError"):new DOMException(`${e} XRReferenceSpace not supported by this device.`,"NotSupportedError"):new DOMException(`${e} XRReferenceSpace not supported by this device.`,"NotSupportedError");return new de(e,s)}requestAnimationFrame(e){if(this[h].ended)return;const s=++this[h].frameHandle;return this[h].frameCallbacks.push({handle:s,callback:e,cancelled:!1}),s}cancelAnimationFrame(e){let s=this[h].frameCallbacks,i=s.findIndex(r=>r&&r.handle===e);i>-1&&(s[i].cancelled=!0,s.splice(i,1)),s=this[h].currentFrameCallbacks,s&&(i=s.findIndex(r=>r&&r.handle===e),i>-1&&(s[i].cancelled=!0))}get inputSources(){return this[h].device.getInputSources()}async end(){if(!this[h].ended)return this[h].immersive&&(this[h].ended=!0,this[h].device.removeEventListener("@@webxr-polyfill/vr-present-start",this[h].onPresentationStart),this[h].device.removeEventListener("@@webxr-polyfill/vr-present-end",this[h].onPresentationEnd),this[h].device.removeEventListener("@@webxr-polyfill/input-select-start",this[h].onSelectStart),this[h].device.removeEventListener("@@webxr-polyfill/input-select-end",this[h].onSelectEnd),this.dispatchEvent("end",new pe("end",{session:this}))),this[h].stopDeviceFrameLoop(),this[h].device.endSession(this[h].id)}updateRenderState(e){if(this[h].ended){const i="Can't call updateRenderState on an XRSession that has already ended.";throw new Error(i)}if(e.baseLayer&&e.baseLayer._session!==this){const i="Called updateRenderState with a base layer that was created by a different session.";throw new Error(i)}if(e.inlineVerticalFieldOfView!==null&&e.inlineVerticalFieldOfView!==void 0)if(this[h].immersive){const i="inlineVerticalFieldOfView must not be set for an XRRenderState passed to updateRenderState for an immersive session.";throw new Error(i)}else e.inlineVerticalFieldOfView=Math.min(3.13,Math.max(.01,e.inlineVerticalFieldOfView));if(this[h].pendingRenderState===null){const i=this[h].activeRenderState;this[h].pendingRenderState={depthNear:i.depthNear,depthFar:i.depthFar,inlineVerticalFieldOfView:i.inlineVerticalFieldOfView,baseLayer:i.baseLayer}}Object.assign(this[h].pendingRenderState,e)}_checkInputSourcesChange(){const e=[],s=[],i=this.inputSources,r=this[h].currentInputSources;for(const n of i)r.includes(n)||e.push(n);for(const n of r)i.includes(n)||s.push(n);(e.length>0||s.length>0)&&this.dispatchEvent("inputsourceschange",new Re("inputsourceschange",{session:this,added:e,removed:s})),this[h].currentInputSources.length=0;for(const n of i)this[h].currentInputSources.push(n)}}const H=Symbol("@@webxr-polyfill/XRInputSource");class ct{constructor(e){this[H]={impl:e,gripSpace:new Y("grip",this),targetRaySpace:new Y("target-ray",this)}}get handedness(){return this[H].impl.handedness}get targetRayMode(){return this[H].impl.targetRayMode}get gripSpace(){let e=this[H].impl.targetRayMode;return e==="gaze"||e==="screen"?null:this[H].gripSpace}get targetRaySpace(){return this[H].targetRaySpace}get profiles(){return this[H].impl.profiles}get gamepad(){return this[H].impl.gamepad}}const ht=Symbol("@@webxr-polyfill/polyfilled-xr-compatible"),_e=Symbol("@@webxr-polyfill/xr-compatible"),q=Symbol("@@webxr-polyfill/XRWebGLLayer"),cs=Object.freeze({antialias:!0,depth:!1,stencil:!1,alpha:!0,multiview:!1,ignoreDepthValues:!1,framebufferScaleFactor:1});class hs{constructor(e,s,i={}){const r=Object.assign({},cs,i);if(!(e instanceof Z))throw new Error("session must be a XRSession");if(e.ended)throw new Error("InvalidStateError");if(s[ht]&&s[_e]!==!0)throw new Error("InvalidStateError");const n=s.getParameter(s.FRAMEBUFFER_BINDING);this[q]={context:s,config:r,framebuffer:n,session:e}}get context(){return this[q].context}get antialias(){return this[q].config.antialias}get ignoreDepthValues(){return!0}get framebuffer(){return this[q].framebuffer}get framebufferWidth(){return this[q].context.drawingBufferWidth}get framebufferHeight(){return this[q].context.drawingBufferHeight}get _session(){return this[q].session}getViewport(e){return e._getViewport(this)}static getNativeFramebufferScaleFactor(e){if(!e)throw new TypeError("getNativeFramebufferScaleFactor must be passed a session.");return e[h].ended?0:1}}const Ve=Symbol("@@webxr-polyfill/XRReferenceSpaceEvent");class ze extends Event{constructor(e,s){super(e,s);this[Ve]={referenceSpace:s.referenceSpace,transform:s.transform||null},Object.setPrototypeOf(this,ze.prototype)}get referenceSpace(){return this[Ve].referenceSpace}get transform(){return this[Ve].transform}}var fe={XRSystem:ve,XRSession:Z,XRSessionEvent:pe,XRFrame:he,XRView:at,XRViewport:We,XRViewerPose:$e,XRWebGLLayer:hs,XRSpace:Y,XRReferenceSpace:de,XRReferenceSpaceEvent:ze,XRInputSource:ct,XRInputSourceEvent:be,XRInputSourcesChangeEvent:Re,XRRenderState:Ce,XRRigidTransform:W,XRPose:je};const dt=t=>typeof t.prototype.makeXRCompatible=="function"?!1:(t.prototype.makeXRCompatible=function(){return this[_e]=!0,Promise.resolve()},!0),ut=t=>{const e=t.prototype.getContext;t.prototype.getContext=function(s,i){const r=e.call(this,s,i);return r&&(r[ht]=!0,i&&"xrCompatible"in i&&(r[_e]=i.xrCompatible)),r}};class Ne extends Te{constructor(e){super();this.global=e,this.onWindowResize=this.onWindowResize.bind(this),this.global.window.addEventListener("resize",this.onWindowResize),this.environmentBlendMode="opaque"}onBaseLayerSet(e,s){throw new Error("Not implemented")}isSessionSupported(e){throw new Error("Not implemented")}isFeatureSupported(e){throw new Error("Not implemented")}async requestSession(e,s){throw new Error("Not implemented")}requestAnimationFrame(e){throw new Error("Not implemented")}onFrameStart(e){throw new Error("Not implemented")}onFrameEnd(e){throw new Error("Not implemented")}doesSessionSupportReferenceSpace(e,s){throw new Error("Not implemented")}requestStageBounds(){throw new Error("Not implemented")}async requestFrameOfReferenceTransform(e,s){}cancelAnimationFrame(e){throw new Error("Not implemented")}endSession(e){throw new Error("Not implemented")}getViewport(e,s,i,r){throw new Error("Not implemented")}getProjectionMatrix(e){throw new Error("Not implemented")}getBasePoseMatrix(){throw new Error("Not implemented")}getBaseViewMatrix(e){throw new Error("Not implemented")}getInputSources(){throw new Error("Not implemented")}getInputPose(e,s,i){throw new Error("Not implemented")}onWindowResize(){this.onWindowResize()}}let ds=0;class us{constructor(e,s){this.mode=e,this.enabledFeatures=s,this.ended=null,this.baseLayer=null,this.id=++ds}}class ps extends Ne{constructor(e){super(e);this.sessions=new Map,this.projectionMatrix=E(),this.identityMatrix=E()}onBaseLayerSet(e,s){const i=this.sessions.get(e);i.baseLayer=s}isSessionSupported(e){return e=="inline"}isFeatureSupported(e){switch(e){case"viewer":return!0;default:return!1}}async requestSession(e,s){if(!this.isSessionSupported(e))return Promise.reject();const i=new us(e,s);return this.sessions.set(i.id,i),Promise.resolve(i.id)}requestAnimationFrame(e){return window.requestAnimationFrame(e)}cancelAnimationFrame(e){window.cancelAnimationFrame(e)}onFrameStart(e,s){const i=this.sessions.get(e);if(i.baseLayer){const r=i.baseLayer.context.canvas;Q(this.projectionMatrix,s.inlineVerticalFieldOfView,r.width/r.height,s.depthNear,s.depthFar)}}onFrameEnd(e){}async endSession(e){const s=this.sessions.get(e);s.ended=!0}doesSessionSupportReferenceSpace(e,s){const i=this.sessions.get(e);return i.ended?!1:i.enabledFeatures.has(s)}requestStageBounds(){return null}async requestFrameOfReferenceTransform(e,s){return null}getProjectionMatrix(e){return this.projectionMatrix}getViewport(e,s,i,r){this.sessions.get(e);const{width:n,height:a}=i.context.canvas;return r.x=r.y=0,r.width=n,r.height=a,!0}getBasePoseMatrix(){return this.identityMatrix}getBaseViewMatrix(e){return this.identityMatrix}getInputSources(){return[]}getInputPose(e,s,i){return null}onWindowResize(){}}let fs={mapping:"",profiles:["google-daydream","generic-trigger-touchpad"],buttons:{length:3,0:null,1:null,2:0}},ms={mapping:"xr-standard",profiles:["htc-vive-focus","generic-trigger-touchpad"],buttons:{length:3,0:1,1:null,2:0}},vs={mapping:"xr-standard",profiles:["oculus-go","generic-trigger-touchpad"],buttons:{length:3,0:1,1:null,2:0},gripTransform:{orientation:[Math.PI*.11,0,0,1]}},pt={mapping:"xr-standard",displayProfiles:{"Oculus Quest":["oculus-touch-v2","oculus-touch","generic-trigger-squeeze-thumbstick"]},profiles:["oculus-touch","generic-trigger-squeeze-thumbstick"],axes:{length:4,0:null,1:null,2:0,3:1},buttons:{length:7,0:1,1:2,2:null,3:0,4:3,5:4,6:null},gripTransform:{position:[0,-.02,.04,1],orientation:[Math.PI*.11,0,0,1]}},gs={mapping:"xr-standard",profiles:["htc-vive","generic-trigger-squeeze-touchpad"],displayProfiles:{"HTC Vive":["htc-vive","generic-trigger-squeeze-touchpad"],"HTC Vive DVT":["htc-vive","generic-trigger-squeeze-touchpad"],"Valve Index":["valve-index","generic-trigger-squeeze-touchpad-thumbstick"]},buttons:{length:3,0:1,1:2,2:0},gripTransform:{position:[0,0,.05,1]},targetRayTransform:{orientation:[Math.PI*-.08,0,0,1]},userAgentOverrides:{Firefox:{axes:{invert:[1,3]}}}},ys={mapping:"xr-standard",profiles:["samsung-gearvr","generic-trigger-touchpad"],buttons:{length:3,0:1,1:null,2:0},gripTransform:{orientation:[Math.PI*.11,0,0,1]}},ws={mapping:"xr-standard",profiles:["samsung-odyssey","microsoft-mixed-reality","generic-trigger-squeeze-touchpad-thumbstick"],buttons:{length:4,0:1,1:0,2:2,3:4},gripTransform:{position:[0,-.02,.04,1],orientation:[Math.PI*.11,0,0,1]}},Xe={mapping:"xr-standard",profiles:["microsoft-mixed-reality","generic-trigger-squeeze-touchpad-thumbstick"],buttons:{length:4,0:1,1:0,2:2,3:4},gripTransform:{position:[0,-.02,.04,1],orientation:[Math.PI*.11,0,0,1]}},Ss={"Daydream Controller":fs,"Gear VR Controller":ys,"HTC Vive Focus Controller":ms,"Oculus Go Controller":vs,"Oculus Touch (Right)":pt,"Oculus Touch (Left)":pt,"OpenVR Gamepad":gs,"Spatial Controller (Spatial Interaction Source) 045E-065A":Xe,"Spatial Controller (Spatial Interaction Source) 045E-065D":ws,"Windows Mixed Reality (Right)":Xe,"Windows Mixed Reality (Left)":Xe};const ft=N(.155,-.465,-.15),xs=N(-.155,-.465,-.15),bs=N(0,0,-.25),Es=N(0,0,.05),mt=N(-.08,.14,.08),vt=.4,Rs=.4,_s=.61,Ps=.175,Ts=.12,Ms=.87,gt=180/Math.PI;function Is(t,e,s){function i(l,c,d){return l<c?c:l>d?d:l}var r=e[0]*e[0],n=e[1]*e[1],a=e[2]*e[2],o=e[3]*e[3];if(s==="XYZ")t[0]=Math.atan2(2*(e[0]*e[3]-e[1]*e[2]),o-r-n+a),t[1]=Math.asin(i(2*(e[0]*e[2]+e[1]*e[3]),-1,1)),t[2]=Math.atan2(2*(e[2]*e[3]-e[0]*e[1]),o+r-n-a);else if(s==="YXZ")t[0]=Math.asin(i(2*(e[0]*e[3]-e[1]*e[2]),-1,1)),t[1]=Math.atan2(2*(e[0]*e[2]+e[1]*e[3]),o-r-n+a),t[2]=Math.atan2(2*(e[0]*e[1]+e[2]*e[3]),o-r+n-a);else if(s==="ZXY")t[0]=Math.asin(i(2*(e[0]*e[3]+e[1]*e[2]),-1,1)),t[1]=Math.atan2(2*(e[1]*e[3]-e[2]*e[0]),o-r-n+a),t[2]=Math.atan2(2*(e[2]*e[3]-e[0]*e[1]),o-r+n-a);else if(s==="ZYX")t[0]=Math.atan2(2*(e[0]*e[3]+e[2]*e[1]),o-r-n+a),t[1]=Math.asin(i(2*(e[1]*e[3]-e[0]*e[2]),-1,1)),t[2]=Math.atan2(2*(e[0]*e[1]+e[2]*e[3]),o+r-n-a);else if(s==="YZX")t[0]=Math.atan2(2*(e[0]*e[3]-e[2]*e[1]),o-r+n-a),t[1]=Math.atan2(2*(e[1]*e[3]-e[0]*e[2]),o+r-n-a),t[2]=Math.asin(i(2*(e[0]*e[1]+e[2]*e[3]),-1,1));else if(s==="XZY")t[0]=Math.atan2(2*(e[0]*e[3]+e[1]*e[2]),o-r+n-a),t[1]=Math.atan2(2*(e[0]*e[2]+e[1]*e[3]),o+r-n-a),t[2]=Math.asin(i(2*(e[2]*e[3]-e[0]*e[1]),-1,1));else{console.log("No order given for quaternion to euler conversion.");return}}class Fs{constructor(){this.hand="right",this.headElbowOffset=ft,this.controllerQ=C(),this.lastControllerQ=C(),this.headQ=C(),this.headPos=I(),this.elbowPos=I(),this.wristPos=I(),this.time=null,this.lastTime=null,this.rootQ=C(),this.position=I()}setHandedness(e){this.hand!=e&&(this.hand=e,this.hand=="left"?this.headElbowOffset=xs:this.headElbowOffset=ft)}update(e,s){this.time=now(),e&&(Oe(this.lastControllerQ,this.controllerQ),Oe(this.controllerQ,e)),s&&(Ye(this.headPos,s),Ie(this.headQ,s));let i=this.getHeadYawOrientation_(),r=this.quatAngle_(this.lastControllerQ,this.controllerQ),n=(this.time-this.lastTime)/1e3;r/n>_s?ce(this.rootQ,this.rootQ,i,Math.min(r/Ps,1)):Oe(this.rootQ,i);let o=N(0,0,-1);$(o,o,this.controllerQ);let l=ye(o,[0,1,0]),c=this.clamp_((l-Ts)/Ms,0,1),d=rt(this.rootQ);it(d,d),st(d,d,this.controllerQ);let u=this.elbowPos;Fe(u,this.headPos),le(u,u,this.headElbowOffset);let p=Je(mt);Ke(p,p,c),le(u,u,p);let g=this.quatAngle_(d,C())*gt,y=1-Math.pow(g/180,4);sssss;let m=vt,R=1-vt,M=y*(m+R*c*Rs),w=C();ce(w,w,d,M);let x=it(C(),w),S=rt(d);st(S,S,x);let v=this.wristPos;Fe(v,Es),$(v,v,w),le(v,v,bs),$(v,v,S),le(v,v,u);let X=Je(mt);Ke(X,X,c),le(this.position,this.wristPos,X),$(this.position,this.position,this.rootQ),this.lastTime=this.time}getPosition(){return this.position}getHeadYawOrientation_(){let e=I();return Is(e,this.headQ,"YXZ"),ss(C(),0,e[1]*gt,0)}clamp_(e,s,i){return Math.min(Math.max(e,s),i)}quatAngle_(e,s){let i=[0,0,-1],r=[0,0,-1];return $(i,i,e),$(r,r,s),qt(i,r)}}const F=Symbol("@@webxr-polyfill/XRRemappedGamepad"),yt={pressed:!1,touched:!1,value:0};Object.freeze(yt);class As{constructor(e,s,i){if(i||(i={}),i.userAgentOverrides){for(let c in i.userAgentOverrides)if(navigator.userAgent.includes(c)){let d=i.userAgentOverrides[c];for(let u in d)u in i?Object.assign(i[u],d[u]):i[u]=d[u];break}}let r=new Array(i.axes&&i.axes.length?i.axes.length:e.axes.length),n=new Array(i.buttons&&i.buttons.length?i.buttons.length:e.buttons.length),a=null;if(i.gripTransform){let c=i.gripTransform.orientation||[0,0,0,1];a=E(),j(a,Se(c,c),i.gripTransform.position||[0,0,0])}let o=null;if(i.targetRayTransform){let c=i.targetRayTransform.orientation||[0,0,0,1];o=E(),j(o,Se(c,c),i.targetRayTransform.position||[0,0,0])}let l=i.profiles;i.displayProfiles&&s.displayName in i.displayProfiles&&(l=i.displayProfiles[s.displayName]),this[F]={gamepad:e,map:i,profiles:l||[e.id],mapping:i.mapping||e.mapping,axes:r,buttons:n,gripTransform:a,targetRayTransform:o},this._update()}_update(){let e=this[F].gamepad,s=this[F].map,i=this[F].axes;for(let n=0;n<i.length;++n)s.axes&&n in s.axes?s.axes[n]===null?i[n]=0:i[n]=e.axes[s.axes[n]]:i[n]=e.axes[n];if(s.axes&&s.axes.invert)for(let n of s.axes.invert)n<i.length&&(i[n]*=-1);let r=this[F].buttons;for(let n=0;n<r.length;++n)s.buttons&&n in s.buttons?s.buttons[n]===null?r[n]=yt:r[n]=e.buttons[s.buttons[n]]:r[n]=e.buttons[n]}get id(){return""}get _profiles(){return this[F].profiles}get index(){return-1}get connected(){return this[F].gamepad.connected}get timestamp(){return this[F].gamepad.timestamp}get mapping(){return this[F].mapping}get axes(){return this[F].axes}get buttons(){return this[F].buttons}get hapticActuators(){return this[F].gamepad.hapticActuators}}class wt{constructor(e,s,i=0,r=-1){this.polyfill=e,this.display=s,this.nativeGamepad=null,this.gamepad=null,this.inputSource=new ct(this),this.lastPosition=I(),this.emulatedPosition=!1,this.basePoseMatrix=E(),this.outputMatrix=E(),this.primaryButtonIndex=i,this.primaryActionPressed=!1,this.primarySqueezeButtonIndex=r,this.primarySqueezeActionPressed=!1,this.handedness="",this.targetRayMode="gaze",this.armModel=null}get profiles(){return this.gamepad?this.gamepad._profiles:[]}updateFromGamepad(e){this.nativeGamepad!==e&&(this.nativeGamepad=e,e?this.gamepad=new As(e,this.display,Ss[e.id]):this.gamepad=null),this.handedness=e.hand===""?"none":e.hand,this.gamepad&&this.gamepad._update(),e.pose?(this.targetRayMode="tracked-pointer",this.emulatedPosition=!e.pose.hasPosition):e.hand===""&&(this.targetRayMode="gaze",this.emulatedPosition=!1)}updateBasePoseMatrix(){if(this.nativeGamepad&&this.nativeGamepad.pose){let e=this.nativeGamepad.pose,s=e.position,i=e.orientation;if(!s&&!i)return;s?(this.lastPosition[0]=s[0],this.lastPosition[1]=s[1],this.lastPosition[2]=s[2]):e.hasPosition?s=this.lastPosition:(this.armModel||(this.armModel=new Fs),this.armModel.setHandedness(this.nativeGamepad.hand),this.armModel.update(i,this.polyfill.getBasePoseMatrix()),s=this.armModel.getPosition()),j(this.basePoseMatrix,i,s)}else ge(this.basePoseMatrix,this.polyfill.getBasePoseMatrix());return this.basePoseMatrix}getXRPose(e,s){switch(this.updateBasePoseMatrix(),s){case"target-ray":e._transformBasePoseMatrix(this.outputMatrix,this.basePoseMatrix),this.gamepad&&this.gamepad[F].targetRayTransform&&L(this.outputMatrix,this.outputMatrix,this.gamepad[F].targetRayTransform);break;case"grip":if(!this.nativeGamepad||!this.nativeGamepad.pose)return null;e._transformBasePoseMatrix(this.outputMatrix,this.basePoseMatrix),this.gamepad&&this.gamepad[F].gripTransform&&L(this.outputMatrix,this.outputMatrix,this.gamepad[F].gripTransform);break;default:return null}return e._adjustForOriginOffset(this.outputMatrix),new XRPose(new XRRigidTransform(this.outputMatrix),this.emulatedPosition)}}const Os=t=>!!(t.ImageBitmapRenderingContext&&t.createImageBitmap),Cs=t=>{t.style.display="block",t.style.position="absolute",t.style.width=t.style.height="1px",t.style.top=t.style.left="0px"},Ls=!1,St={highRefreshRate:!0},xt={oculus:1,openvr:1,"spatial controller (spatial interaction source)":1};let Ds=0;class Vs{constructor(e,s,i={}){if(this.mode=e,this.enabledFeatures=s,this.outputContext=null,this.immersive=e=="immersive-vr"||e=="immersive-ar",this.ended=null,this.baseLayer=null,this.id=++Ds,this.modifiedCanvasLayer=!1,this.outputContext&&!Ls){const r=i.renderContextType||"2d";this.renderContext=this.outputContext.canvas.getContext(r)}}}class zs extends Ne{constructor(e,s){const{canPresent:i}=s.capabilities;super(e);this.display=s,this.frame=new e.VRFrameData,this.sessions=new Map,this.immersiveSession=null,this.canPresent=i,this.baseModelMatrix=E(),this.gamepadInputSources={},this.tempVec3=new Float32Array(3),this.onVRDisplayPresentChange=this.onVRDisplayPresentChange.bind(this),e.window.addEventListener("vrdisplaypresentchange",this.onVRDisplayPresentChange),this.CAN_USE_GAMEPAD=e.navigator&&"getGamepads"in e.navigator,this.HAS_BITMAP_SUPPORT=Os(e)}get depthNear(){return this.display.depthNear}set depthNear(e){this.display.depthNear=e}get depthFar(){return this.display.depthFar}set depthFar(e){this.display.depthFar=e}onBaseLayerSet(e,s){const i=this.sessions.get(e),r=s.context.canvas;if(i.immersive){const n=this.display.getEyeParameters("left"),a=this.display.getEyeParameters("right");r.width=Math.max(n.renderWidth,a.renderWidth)*2,r.height=Math.max(n.renderHeight,a.renderHeight),this.display.requestPresent([{source:r,attributes:St}]).then(()=>{this.global.document.body.contains(r)||(i.modifiedCanvasLayer=!0,this.global.document.body.appendChild(r),Cs(r)),i.baseLayer=s})}else i.baseLayer=s}isSessionSupported(e){return!(e=="immersive-ar"||e=="immersive-vr"&&this.canPresent===!1)}isFeatureSupported(e){switch(e){case"viewer":return!0;case"local":return!0;case"local-floor":return!0;case"bounded":return!1;case"unbounded":return!1;default:return!1}}async requestSession(e,s){if(!this.isSessionSupported(e))return Promise.reject();let i=e=="immersive-vr";if(i){const n=this.global.document.createElement("canvas");n.getContext("webgl"),await this.display.requestPresent([{source:n,attributes:St}])}const r=new Vs(e,s,{renderContextType:this.HAS_BITMAP_SUPPORT?"bitmaprenderer":"2d"});return this.sessions.set(r.id,r),i&&(this.immersiveSession=r,this.dispatchEvent("@@webxr-polyfill/vr-present-start",r.id)),Promise.resolve(r.id)}requestAnimationFrame(e){return this.display.requestAnimationFrame(e)}getPrimaryButtonIndex(e){let s=0,i=e.id.toLowerCase();for(let r in xt)if(i.includes(r)){s=xt[r];break}return Math.min(s,e.buttons.length-1)}onFrameStart(e,s){this.display.depthNear=s.depthNear,this.display.depthFar=s.depthFar,this.display.getFrameData(this.frame);const i=this.sessions.get(e);if(i.immersive&&this.CAN_USE_GAMEPAD){let r=this.gamepadInputSources;this.gamepadInputSources={};let n=this.global.navigator.getGamepads();for(let a=0;a<n.length;++a){let o=n[a];if(o&&o.displayId>0){let l=r[a];if(l||(l=new wt(this,this.display,this.getPrimaryButtonIndex(o))),l.updateFromGamepad(o),this.gamepadInputSources[a]=l,l.primaryButtonIndex!=-1){let c=o.buttons[l.primaryButtonIndex].pressed;c&&!l.primaryActionPressed?this.dispatchEvent("@@webxr-polyfill/input-select-start",{sessionId:i.id,inputSource:l.inputSource}):!c&&l.primaryActionPressed&&this.dispatchEvent("@@webxr-polyfill/input-select-end",{sessionId:i.id,inputSource:l.inputSource}),l.primaryActionPressed=c}if(l.primarySqueezeButtonIndex!=-1){let c=o.buttons[l.primarySqueezeButtonIndex].pressed;c&&!l.primarySqueezeActionPressed?this.dispatchEvent("@@webxr-polyfill/input-squeeze-start",{sessionId:i.id,inputSource:l.inputSource}):!c&&l.primarySqueezeActionPressed&&this.dispatchEvent("@@webxr-polyfill/input-squeeze-end",{sessionId:i.id,inputSource:l.inputSource}),l.primarySqueezeActionPressed=c}}}}if(!i.immersive&&i.baseLayer){const r=i.baseLayer.context.canvas;Q(this.frame.leftProjectionMatrix,s.inlineVerticalFieldOfView,r.width/r.height,s.depthNear,s.depthFar)}}onFrameEnd(e){const s=this.sessions.get(e);if(!(s.ended||!s.baseLayer)){if(s.outputContext&&!(s.immersive&&!this.display.capabilities.hasExternalDisplay)){const i=s.immersive&&this.display.capabilities.hasExternalDisplay,r=s.baseLayer.context.canvas,n=i?r.width/2:r.width,a=r.height;{const o=s.outputContext.canvas,l=o.width,c=o.height,d=s.renderContext;this.HAS_BITMAP_SUPPORT?r.transferToImageBitmap?d.transferFromImageBitmap(r.transferToImageBitmap()):this.global.createImageBitmap(r,0,0,n,a,{resizeWidth:l,resizeHeight:c}).then(u=>d.transferFromImageBitmap(u)):d.drawImage(r,0,0,n,a,0,0,l,c)}}s.immersive&&s.baseLayer&&this.display.submitFrame()}}cancelAnimationFrame(e){this.display.cancelAnimationFrame(e)}async endSession(e){const s=this.sessions.get(e);if(!s.ended){if(s.immersive)return this.display.exitPresent();s.ended=!0}}doesSessionSupportReferenceSpace(e,s){const i=this.sessions.get(e);return i.ended?!1:i.enabledFeatures.has(s)}requestStageBounds(){if(this.display.stageParameters){const e=this.display.stageParameters.sizeX,s=this.display.stageParameters.sizeZ,i=[];return i.push(-e/2),i.push(-s/2),i.push(e/2),i.push(-s/2),i.push(e/2),i.push(s/2),i.push(-e/2),i.push(s/2),i}return null}async requestFrameOfReferenceTransform(e,s){return(e==="local-floor"||e==="bounded-floor")&&this.display.stageParameters&&this.display.stageParameters.sittingToStandingTransform?this.display.stageParameters.sittingToStandingTransform:null}getProjectionMatrix(e){if(e==="left")return this.frame.leftProjectionMatrix;if(e==="right")return this.frame.rightProjectionMatrix;if(e==="none")return this.frame.leftProjectionMatrix;throw new Error("eye must be of type 'left' or 'right'")}getViewport(e,s,i,r){const n=this.sessions.get(e),{width:a,height:o}=i.context.canvas;if(!n.immersive)return r.x=r.y=0,r.width=a,r.height=o,!0;if(s==="left"||s==="none")r.x=0;else if(s==="right")r.x=a/2;else return!1;return r.y=0,r.width=a/2,r.height=o,!0}getBasePoseMatrix(){let{position:e,orientation:s}=this.frame.pose;return!e&&!s?this.baseModelMatrix:(e||(e=this.tempVec3,e[0]=e[1]=e[2]=0),j(this.baseModelMatrix,s,e),this.baseModelMatrix)}getBaseViewMatrix(e){if(e==="left"||e==="none")return this.frame.leftViewMatrix;if(e==="right")return this.frame.rightViewMatrix;throw new Error("eye must be of type 'left' or 'right'")}getInputSources(){let e=[];for(let s in this.gamepadInputSources)e.push(this.gamepadInputSources[s].inputSource);return e}getInputPose(e,s,i){if(!s)return null;for(let r in this.gamepadInputSources){let n=this.gamepadInputSources[r];if(n.inputSource===e)return n.getXRPose(s,i)}return null}onWindowResize(){}onVRDisplayPresentChange(e){this.display.isPresenting||this.sessions.forEach(s=>{if(s.immersive&&!s.ended){if(s.modifiedCanvasLayer){const i=s.baseLayer.context.canvas;document.body.removeChild(i),i.setAttribute("style","")}this.immersiveSession===s&&(this.immersiveSession=null),this.dispatchEvent("@@webxr-polyfill/vr-present-end",s.id)}})}}const Ns=async function(t){let e=null;if("getVRDisplays"in t.navigator)try{const s=await t.navigator.getVRDisplays();s&&s.length&&(e=new zs(t,s[0]))}catch(s){}return e},Xs=async function(t,e){if(e.webvr){let s=await Ns(t);if(s)return s}return new ps(t)},Bs=typeof global!="undefined"?global:typeof self!="undefined"?self:typeof window!="undefined"?window:{},Us={global:Bs,webvr:!0,cardboard:!0,cardboardConfig:null,allowCardboardOnDesktop:!1},Pe=["navigator","HTMLCanvasElement","WebGLRenderingContext"];class ks{constructor(e={}){this.config=Object.freeze(Object.assign({},Us,e)),this.global=this.config.global,this.nativeWebXR="xr"in this.global.navigator,this.injected=!1,this.nativeWebXR?this._injectCompatibilityShims(this.global):this._injectPolyfill(this.global)}_injectPolyfill(e){if(!Pe.every(s=>!!e[s]))throw new Error(`Global must have the following attributes : ${Pe}`);for(const s of Object.keys(fe))e[s]!==void 0?console.warn(`${s} already defined on global.`):e[s]=fe[s];dt(e.WebGLRenderingContext)&&(ut(e.HTMLCanvasElement),e.OffscreenCanvas&&ut(e.OffscreenCanvas),e.WebGL2RenderingContext&&dt(e.WebGL2RenderingContext),window.isSecureContext||console.warn(`WebXR Polyfill Warning:
This page is not running in a secure context (https:// or localhost)!
This means that although the page may be able to use the WebXR Polyfill it will
not be able to use native WebXR implementations, and as such will not be able to
access dedicated VR or AR hardware, and will not be able to take advantage of
any performance improvements a native WebXR implementation may offer. Please
host this content on a secure origin for the best user experience.
`)),this.injected=!0,this._patchNavigatorXR()}_patchNavigatorXR(){let e=Xs(this.global,this.config);console.log("patch xr nav"),this.xr=new fe.XRSystem(e),Object.defineProperty(this.global.navigator,"xr",{value:this.xr,configurable:!0})}_injectCompatibilityShims(e){if(!Pe.every(s=>!!e[s]))throw new Error(`Global must have the following attributes : ${Pe}`);if(e.navigator.xr&&"supportsSession"in e.navigator.xr&&!("isSessionSupported"in e.navigator.xr)){let s=e.navigator.xr.supportsSession;e.navigator.xr.isSessionSupported=function(i){return s.call(this,i).then(()=>!0).catch(()=>!1)},e.navigator.xr.supportsSession=function(i){return console.warn("navigator.xr.supportsSession() is deprecated. Please call navigator.xr.isSessionSupported() instead and check the boolean value returned when the promise resolves."),s.call(this,i)}}}}const D=Symbol("@@webxr-polyfill/XRRay");class bt{constructor(e,s){const i={x:0,y:0,z:0,w:1},r={x:0,y:0,z:-1,w:0};if(e&&e instanceof W){const o=e.matrix,l=et(Ae(),i.x,i.y,i.z,i.w),c=et(Ae(),r.x,r.y,r.z,r.w);tt(l,l,o),tt(c,c,o),i.x=l[0],i.y=l[1],i.z=l[2],i.w=l[3],_directionVec4.x=c[0],_directionVec4.y=c[1],_directionVec4.z=c[2],_directionVec4.w=c[3]}else e&&(i.x=e.x,i.y=e.y,i.z=e.z,i.w=e.w),s&&(r.x=s.x,r.y=s.y,r.z=s.z,r.w=s.w);const n=Math.sqrt(r.x*r.x+r.y*r.y+r.z*r.z)||1;r.x=r.x/n,r.y=r.y/n,r.z=r.z/n,this[D]={origin:new DOMPointReadOnly(i.x,i.y,i.z,i.w),direction:new DOMPointReadOnly(r.x,r.y,r.z,r.w),matrix:null}}get origin(){return this[D].origin}get direction(){return this[D].direction}get matrix(){if(this[D].matrix)return this[D].matrix;const e=G(I(),0,0,-1),s=G(I(),this[D].origin.x,this[D].origin.y,this[D].origin.z),i=G(I(),this[D].direction.x,this[D].direction.y,this[D].direction.z),r=we(I(),i,e),n=ye(i,e),a=E();n>-1&&n<1?Qe(a,Math.acos(n),r):n===-1&&Qe(a,Math.acos(n),G(I(),1,0,0));const o=Ht(E(),s),l=L(E(),o,a);return this[D].matrix=l,l}}const J=Symbol("@@webxr-polyfill/XRHitTestSource");class Et{constructor(e,s){if(s.entityTypes&&s.entityTypes.length>0)throw new Error("XRHitTestSource does not support entityTypes option yet.");this[J]={session:e,space:s.space,offsetRay:s.offsetRay||new bt,active:!0}}cancel(){this[J].active=!1}get _space(){return this[J].space}get _session(){return this[J].session}get _offsetRay(){return this[J].offsetRay}get _active(){return this[J].active}}const Be=Symbol("@@webxr-polyfill/XRHitTestResult");class Ue{constructor(e,s){this[Be]={frame:e,transform:s}}getPose(e){const s=new Y;return s._baseMatrix=ge(E(),this[Be].transform.matrix),this[Be].frame.getPose(s,e)}}const K=Symbol("@@webxr-polyfill/XRTransientInputHitTestSource");class ke{constructor(e,s){if(s.entityTypes&&s.entityTypes.length>0)throw new Error("XRHitTestSource does not support entityTypes option yet.");this[K]={session:e,profile:s.profile,offsetRay:s.offsetRay||new XRRay,active:!0}}cancel(){this[K].active=!1}get _profile(){return this[K].profile}get _session(){return this[K].session}get _offsetRay(){return this[K].offsetRay}get _active(){return this[K].active}}const He=Symbol("@@webxr-polyfill/XRTransientInputHitTestResult");class Rt{constructor(e,s,i){this[He]={frame:e,inputSource:i,results:s}}get inputSource(){return this[He].inputSource}get results(){return this[He].results}}var _t={XRHitTestResult:Ue,XRHitTestSource:Et,XRTransientInputHitTestResult:Rt,XRTransientInputHitTestSource:ke,XRRay:bt};const Pt=["inline"],Tt=[0,1.6,0],Mt="9999",Hs="10001",It={width:1024,height:2048},Ft={width:.05,height:.1,depth:.005},me=(t,e)=>{V.instance.dispatchEvent({type:t,detail:typeof cloneInto!="undefined"?cloneInto(e,window):e})};class js extends Ne{constructor(e,s={}){super(e);this.sessions=new Map,this.modes=s.modes||Pt,this.features=s.features||[],this.position=Fe(I(),Tt),this.quaternion=C(),this.scale=N(1,1,1),this.matrix=E(),this.projectionMatrix=E(),this.leftProjectionMatrix=E(),this.rightProjectionMatrix=E(),this.viewMatrix=E(),this.leftViewMatrix=E(),this.rightViewMatrix=E(),this.gamepads=[],this.gamepadInputSources=[],this.stereoEffectEnabled=s.stereoEffect!==void 0?s.stereoEffect:!0,this.div=document.createElement("div"),this.div.style.position="absolute",this.div.style.width="100%",this.div.style.height="100%",this.div.style.top="0",this.div.style.left="0",this.div.style.zIndex=Mt,this.originalCanvasParams={parentElement:null,width:0,height:0},this.domOverlayRoot=null,this.arDevice=this.modes.includes("immersive-ar"),this.resolution=s.resolution!==void 0?s.resolution:It,this.deviceSize=s.size!==void 0?s.size:Ft,this.arScene=null,this.touched=!1,this.isPointerAndTabledCloseEnough=!1,this.hitTestSources=[],this.hitTestResults=new Map,this.hitTestSourcesForTransientInput=[],this.hitTestResultsForTransientInput=new Map,this._initializeControllers(s),this._setupEventListeners()}onBaseLayerSet(e,s){const i=this.sessions.get(e);if(i.immersive&&i.baseLayer&&this._removeBaseLayerCanvasFromDiv(e),i.baseLayer=s,i.immersive&&i.baseLayer&&(this._appendBaseLayerCanvasToDiv(e),i.ar)){const r=i.baseLayer.context.canvas;r.width=this.resolution.width,r.height=this.resolution.height,this.arScene.setCanvas(r),r.parentElement&&r.parentElement.removeChild(r)}}isSessionSupported(e){return this.modes.includes(e)}isFeatureSupported(e){if(this.features.includes(e))return!0;switch(e){case"viewer":return!0;case"local":return!0;case"local-floor":return!0;case"bounded-floor":return!1;case"unbounded":return!1;case"dom-overlay":return!0;default:return!1}}async requestSession(e,s){if(!this.isSessionSupported(e))return Promise.reject();const i=e==="immersive-vr"||e==="immersive-ar",r=new $s(e,s);return this.sessions.set(r.id,r),e==="immersive-ar"&&this.arScene.inject(this.div),i&&(this.dispatchEvent("@@webxr-polyfill/vr-present-start",r.id),this._notifyEnterImmersive()),Promise.resolve(r.id)}requestAnimationFrame(e){return this.global.requestAnimationFrame(e)}cancelAnimationFrame(e){this.global.cancelAnimationFrame(e)}onFrameStart(e,s){const i=this.sessions.get(e),r=i.baseLayer.context,n=r.canvas,a=s.depthNear,o=s.depthFar,l=n.width,c=n.height;if(i.immersive){const d=r.getParameter(r.COLOR_CLEAR_VALUE),u=r.getParameter(r.DEPTH_CLEAR_VALUE),p=r.getParameter(r.STENCIL_CLEAR_VALUE);r.clearColor(0,0,0,0),r.clearDepth(1,0),r.clearStencil(0),r.clear(r.DEPTH_BUFFER_BIT|r.COLOR_BUFFER_BIT|r.STENCIL_BUFFER_BIT),r.clearColor(d[0],d[1],d[2],d[3]),r.clearDepth(u),r.clearStencil(p)}if(i.vr){const d=l*(this.stereoEffectEnabled?.5:1)/c;Q(this.leftProjectionMatrix,Math.PI/2,d,a,o),Q(this.rightProjectionMatrix,Math.PI/2,d,a,o)}else if(i.ar){const d=this.deviceSize.width/this.deviceSize.height;Q(this.projectionMatrix,Math.PI/2,d,a,o)}else{const d=l/c;Q(this.projectionMatrix,s.inlineVerticalFieldOfView,d,a,o)}if(i.ar?Ze(this.matrix,this.gamepads[1].pose.orientation,this.gamepads[1].pose.position,this.scale):Ze(this.matrix,this.quaternion,this.position,this.scale),z(this.viewMatrix,this.matrix),z(this.leftViewMatrix,Ot(ge(this.leftViewMatrix,this.matrix),-.02)),z(this.rightViewMatrix,Ot(ge(this.rightViewMatrix,this.matrix),.02)),i.immersive){if(this.arDevice)if(this.touched&&this._isPointerCloseEnoughToTablet()){this.isPointerAndTabledCloseEnough||(this._updateInputButtonPressed(!0,0,0),this.isPointerAndTabledCloseEnough=!0,this.arScene.touched());const d=this._getTouchCoordinates();this._updateInputAxes(0,d[0],-d[1])}else this.isPointerAndTabledCloseEnough&&(this._updateInputButtonPressed(!1,0,0),this.isPointerAndTabledCloseEnough=!1,this.arScene.released()),this._updateInputAxes(0,0,0);for(let d=0;d<this.gamepads.length;++d){const u=this.gamepads[d],p=this.gamepadInputSources[d];if(p.updateFromGamepad(u),this.arDevice&&d===0&&(p.targetRayMode="screen"),p.primaryButtonIndex!==-1){const f=u.buttons[p.primaryButtonIndex].pressed;f&&!p.primaryActionPressed?this.arDevice?p.active=!0:this.dispatchEvent("@@webxr-polyfill/input-select-start",{sessionId:i.id,inputSource:p.inputSource}):!f&&p.primaryActionPressed&&(this.arDevice&&(p.active=!1),this.dispatchEvent("@@webxr-polyfill/input-select-end",{sessionId:i.id,inputSource:p.inputSource}))}if(p.primarySqueezeButtonIndex!==-1){const f=u.buttons[p.primarySqueezeButtonIndex].pressed;f&&!p.primarySqueezeActionPressed?this.dispatchEvent("@@webxr-polyfill/input-squeeze-start",{sessionId:i.id,inputSource:p.inputSource}):!f&&p.primarySqueezeActionPressed&&this.dispatchEvent("@@webxr-polyfill/input-squeeze-end",{sessionId:i.id,inputSource:p.inputSource}),p.primarySqueezeActionPressed=f}}this._hitTest(e,this.hitTestSources,this.hitTestResults),this._hitTest(e,this.hitTestSourcesForTransientInput,this.hitTestResultsForTransientInput)}}onFrameEnd(e){const s=this.sessions.get(e);if(s.immersive)for(let i=0;i<this.gamepads.length;++i){const r=this.gamepads[i],n=this.gamepadInputSources[i];if(n.primaryButtonIndex!==-1){const a=r.buttons[n.primaryButtonIndex].pressed;a&&!n.primaryActionPressed&&this.arDevice&&this.dispatchEvent("@@webxr-polyfill/input-select-start",{sessionId:s.id,inputSource:n.inputSource}),n.primaryActionPressed=a}}}async requestFrameOfReferenceTransform(e,s){const i=E();switch(e){case"viewer":case"local":return i[13]=-Tt[1],i;case"local-floor":return i;case"bounded-floor":case"unbound":default:return i}}endSession(e){const s=this.sessions.get(e);s.immersive&&s.baseLayer&&(this._removeBaseLayerCanvasFromDiv(e),this.domOverlayRoot=null,s.ar&&(this.arScene.eject(),this.arScene.releaseCanvas()),this.dispatchEvent("@@webxr-polyfill/vr-present-end",e),this._notifyLeaveImmersive()),s.ended=!0}doesSessionSupportReferenceSpace(e,s){const i=this.sessions.get(e);return i.ended?!1:i.enabledFeatures.has(s)}getViewport(e,s,i,r){const n=this.sessions.get(e),a=n.baseLayer.context.canvas,o=a.width,l=a.height;return n.ar?(r.x=0,r.y=0,r.width=o,r.height=l):(s==="none"?(r.x=0,r.width=o):this.stereoEffectEnabled?(r.x=s==="left"?0:o/2,r.width=o/2):(r.x=0,r.width=s==="left"?o:0),r.y=0,r.height=l),!0}getProjectionMatrix(e){return this.arDevice||e==="none"?this.projectionMatrix:e==="left"?this.leftProjectionMatrix:this.rightProjectionMatrix}getBasePoseMatrix(){return this.matrix}getBaseViewMatrix(e){return e==="none"||this.arDevice||!this.stereoEffectEnabled?this.viewMatrix:e==="left"?this.leftViewMatrix:this.rightViewMatrix}getInputSources(){const e=[];for(const s of this.gamepadInputSources)s.active&&e.push(s.inputSource);return e}getInputPose(e,s,i){for(const r of this.gamepadInputSources)if(r.inputSource===e){const n=r.getXRPose(s,i);if(this.arDevice&&r===this.gamepadInputSources[0]){if(!r.active)return null;const a=z(E(),this.viewMatrix);s._transformBasePoseMatrix(a,a);const o=z(E(),a);L(n.transform.matrix,o,n.transform.matrix);const l=B(E()),c=.1,d=this.deviceSize.width/this.deviceSize.height,u=.005,p=n.transform.matrix[12]/((this.deviceSize.width-u)*.5)*d,f=n.transform.matrix[13]/((this.deviceSize.height-u)*.5);kt(l,l,-p*Math.PI/4),Ut(l,l,f*Math.PI/4),l[12]=p*c,l[13]=f*c,l[14]=-c,L(n.transform.matrix,a,l),z(n.transform.inverse.matrix,n.transform.matrix)}return n}return null}onWindowResize(){}setDomOverlayRoot(e){this.domOverlayRoot=e}addHitTestSource(e){this.hitTestSources.push(e)}getHitTestResults(e){return this.hitTestResults.get(e)||[]}addHitTestSourceForTransientInput(e){this.hitTestSourcesForTransientInput.push(e)}getHitTestResultsForTransientInput(e){return this.hitTestResultsForTransientInput.get(e)||[]}_appendBaseLayerCanvasToDiv(e){const i=this.sessions.get(e).baseLayer.context.canvas;if(this.originalCanvasParams.width=i.width,this.originalCanvasParams.height=i.height,document.body.appendChild(this.div),i instanceof HTMLCanvasElement&&(this.originalCanvasParams.parentElement=i.parentElement,i.width=window.innerWidth,i.height=window.innerHeight,this.div.appendChild(i),this.domOverlayRoot)){const r=this.domOverlayRoot;r.style._zIndex=r.style.zIndex,this.domOverlayRoot.contains(this.div)?this.div.style.zIndex="":r.style.zIndex=Hs}}_removeBaseLayerCanvasFromDiv(e){const i=this.sessions.get(e).baseLayer.context.canvas;if(i.width=this.originalCanvasParams.width,i.height=this.originalCanvasParams.height,this.div.parentElement===document.body&&document.body.removeChild(this.div),i.parentElement===this.div&&this.div.removeChild(i),i instanceof HTMLCanvasElement&&(this.originalCanvasParams.parentElement&&this.originalCanvasParams.parentElement.appendChild(i),this.originalCanvasParams.parentElement=null,this.domOverlayRoot)){const r=this.domOverlayRoot;r.style.zIndex=r.style._zIndex,delete r.style._zIndex,this.div.style.zIndex=Mt}}_isPointerCloseEnoughToTablet(){const e=this.gamepads[0].pose,s=j(E(),e.orientation,e.position);L(s,this.viewMatrix,s);const i=s[12]/(this.deviceSize.width*.5),r=s[13]/(this.deviceSize.height*.5),n=s[14];return i<=1&&i>=-1&&r<=1&&r>=-1&&n<=.01&&n>=0}_getTouchCoordinates(){const e=this.gamepads[0].pose,s=j(E(),e.orientation,e.position);L(s,this.viewMatrix,s);const i=s[12]/(this.deviceSize.width*.5),r=s[13]/(this.deviceSize.height*.5);return[i,r]}_hitTest(e,s,i){let r=0;for(let n=0;n<s.length;n++){const a=s[n];a._active&&(s[r++]=a)}s.length=r,i.clear();for(const n of s){if(e!==n._session[h].id)continue;let a;if(n instanceof ke){if(!this.gamepadInputSources[0].active||!n._profile.includes("touch"))continue;const p=this.gamepads[0],f=B(E());f[12]=p.axes[0],f[13]=-p.axes[1],a=L(f,this.matrix,f)}else if(a=n._space._baseMatrix,!a)continue;const o=n._offsetRay,l=G(I(),o.origin.x,o.origin.y,o.origin.z),c=G(I(),o.direction.x,o.direction.y,o.direction.z);Wt(l,l,a),$(c,c,Ie(C(),a));const d=this.arScene.getHitTestResults(l,c),u=[];for(const p of d){const f=E();f[12]=p.point.x,f[13]=p.point.y,f[14]=p.point.z,u.push(f)}i.set(n,u)}}_notifyPoseUpdate(){me("device-pose",{position:this.position,quaternion:this.quaternion})}_notifyInputPoseUpdate(e){const s=this.gamepads[e].pose,i=e===0?"rightController":"leftController";me("device-input-pose",{position:s.position,quaternion:s.orientation,objectName:i})}_notifyEnterImmersive(){me("device-enter-immersive",{})}_notifyLeaveImmersive(){me("device-leave-immersive",{})}_requestVirtualRoomAsset(){me("webxr-virtual-room-request",{})}_updateStereoEffect(e){this.stereoEffectEnabled=e}_updatePose(e,s){for(let i=0;i<3;i++)this.position[i]=e[i];for(let i=0;i<4;i++)this.quaternion[i]=s[i]}_updateInputPose(e,s,i){if(i>=this.gamepads.length)return;const n=this.gamepads[i].pose;for(let a=0;a<3;a++)n.position[a]=e[a];for(let a=0;a<4;a++)n.orientation[a]=s[a]}_updateInputButtonPressed(e,s,i){if(s>=this.gamepads.length)return;const r=this.gamepads[s];i>=r.buttons.length||(r.buttons[i].pressed=e,r.buttons[i].value=e?1:0)}_updateInputAxesChanged(e,s,i){if(s>=this.gamepads.length)return;const r=this.gamepads[s];i>=r.axes.length||(r.axes[i]=e)}_updateInputAxes(e,s,i){if(e>=this.gamepads.length)return;const r=this.gamepads[e];r.axes[0]=s,r.axes[1]=i}_initializeControllers(e){const i=e.controllers!==void 0?e.controllers.length:0;this.gamepads.length=0,this.gamepadInputSources.length=0;for(let r=0;r<i;r++){const n=e.controllers[r],a=n.id||"",o=n.hasPosition||!1,l=n.buttonNum||0,c=n.primaryButtonIndex!==void 0?n.primaryButtonIndex:0,d=n.primarySqueezeButtonIndex!==void 0?n.primarySqueezeButtonIndex:-1;this.gamepads.push(Ws(a,r===0?"right":"left",l,o));const u=new wt(this,{},c,d);u.active=!this.arDevice,this.gamepadInputSources.push(u)}}_setupEventListeners(){V.instance.addEventListener("webxr-device",e=>{const s=e.detail.deviceDefinition;this.modes=s.modes||Pt,this.features=s.features||[],this.arDevice=this.modes.includes("immersive-ar"),this.resolution=s.resolution!==void 0?s.resolution:It,this.deviceSize=s.size!==void 0?s.size:Ft;for(let i=0;i<this.gamepads.length;++i){const r=this.gamepads[i],n=this.gamepadInputSources[i];n.active=!this.arDevice,n.primaryButtonIndex!==-1&&(r.buttons[n.primaryButtonIndex].pressed=!1),n.primarySqueezeButtonIndex!==-1&&(r.buttons[n.primarySqueezeButtonIndex].pressed=!1)}this.requestAnimationFrame(()=>{this.requestAnimationFrame(()=>{this._initializeControllers(s)})})}),V.instance.addEventListener("webxr-pose",e=>{const s=e.detail.position,i=e.detail.quaternion;this.arDevice?this.arScene&&(this._updatePose(s,i),this.arScene.updateCameraTransform(s,i)):this._updatePose(s,i)},!1),V.instance.addEventListener("webxr-input-pose",e=>{const s=e.detail.position,i=e.detail.quaternion,r=e.detail.objectName;if(this.arDevice)switch(r){case"rightController":this._updateInputPose(s,i,0),this.arScene&&this.arScene.updatePointerTransform(s,i);break;case"leftController":this._updateInputPose(s,i,1),this.arScene&&this.arScene.updateTabletTransform(s,i);break}else switch(r){case"rightController":case"leftController":this._updateInputPose(s,i,r==="rightController"?0:1);break}}),V.instance.addEventListener("webxr-input-button",e=>{if(this.arDevice)return;const s=e.detail.pressed,i=e.detail.objectName,r=e.detail.buttonIndex;switch(i){case"rightController":case"leftController":this._updateInputButtonPressed(s,i==="rightController"?0:1,r);break}},!1),V.instance.addEventListener("webxr-input-axes",e=>{if(this.arDevice)return;const s=e.detail.value,i=e.detail.objectName,r=e.detail.axesIndex;switch(i){case"rightController":case"leftController":this._updateInputAxesChanged(s,i==="rightController"?0:1,r);break}},!1),V.instance.addEventListener("webxr-stereo-effect",e=>{this._updateStereoEffect(e.detail.enabled)}),V.instance.addEventListener("webxr-virtual-room-response",e=>{const s=e.detail.buffer;this.arScene.loadVirtualRoomAsset(s)})}}let Gs=0;class $s{constructor(e,s){this.mode=e,this.immersive=e=="immersive-vr"||e=="immersive-ar",this.vr=e==="immersive-vr",this.ar=e==="immersive-ar",this.id=++Gs,this.baseLayer=null,this.inlineVerticalFieldOfView=Math.PI*.5,this.ended=!1,this.enabledFeatures=s}}const Ws=(t,e,s,i)=>{const r=[];for(let n=0;n<s;n++)r.push({pressed:!1,touched:!1,value:0});return{id:t||"",pose:{hasPosition:i,position:[0,0,0],orientation:[0,0,0,1]},buttons:r,hand:e,mapping:"xr-standard",axes:[0,0]}},At=I(),Ot=(t,e)=>(G(At,e,0,0),Bt(t,t,At));class ei extends ks{constructor(){super({global:globalThis});this.global=this.global;let e=null;const s=ve.prototype.requestSession;ve.prototype.requestSession=function(r,n={}){return s.call(this,r,n).then(a=>{if(r==="immersive-vr"||r==="immersive-ar"){e=a;const o=n.optionalFeatures,l=n.domOverlay;o&&o.includes("dom-overlay")&&l&&l.root&&(a[h].device.setDomOverlayRoot(l.root),a.domOverlayState={type:"screen"})}return a})};const i=Z.prototype.end;if(Z.prototype.end=function(){return i.call(this).then(()=>{e===this&&(e=null)})},V.instance.addEventListener("webxr-exit-immersive",r=>{e&&!e.ended&&e.end().then(()=>{e=null})}),Z.prototype.requestHitTestSource=function(r){const n=new Et(this,r);return this[h].device.addHitTestSource(n),Promise.resolve(n)},Z.prototype.requestHitTestSourceForTransientInput=function(r){const n=new ke(this,r);return this[h].device.addHitTestSourceForTransientInput(n),Promise.resolve(n)},he.prototype.getHitTestResults=function(r){const a=this.session[h].device.getHitTestResults(r),o=[];for(const l of a)o.push(new Ue(this,new W(l)));return o},he.prototype.getHitTestResultsForTransientInput=function(r){const n=this.session[h].device,a=n.getHitTestResultsForTransientInput(r);if(a.length===0)return[];const o=[];for(const c of a)o.push(new Ue(this,new W(c)));const l=n.getInputSources()[0];return[new Rt(this,o,l)]},this.nativeWebXR)Ct(),this.injected=!0,this._patchNavigatorXR();else{Lt();let r=!1;const n=()=>r?!1:Qs(this.global.XRSystem)?(Ct(),r=!0,!0):!1,a=new MutationObserver(l=>{for(const c of l){for(const d of c.addedNodes)if(d.localName==="script"&&n()){a.disconnect();break}if(r)break}});a.observe(document,{subtree:!0,childList:!0});const o=l=>{r||(a.disconnect(),n()),document.removeEventListener("DOMContentLoaded",o)};document.addEventListener("DOMContentLoaded",o)}}_patchNavigatorXR(){const e=qs();this.xr=new ve(e),Object.defineProperty(this.global.navigator,"xr",{value:this.xr,configurable:!0})}}const qs=async()=>new Promise((t,e)=>{const s=i=>{V.instance.removeEventListener("webxr-device-init",s),t(new js(globalThis,Object.assign({},i.detail.deviceDefinition,{stereoEffect:i.detail.stereoEffect})))};V.instance.addEventListener("webxr-device-init",s,!1)}),Qs=t=>/\[native code\]/i.test(t.toString()),Ct=()=>{console.log("WebXR emulator extension overrides native WebXR API with polyfill.");for(const t in fe)globalThis[t]=fe[t];Lt(),typeof WebGLRenderingContext!="undefined"&&Dt(WebGLRenderingContext),typeof WebGL2RenderingContext!="undefined"&&Dt(WebGL2RenderingContext)},Lt=()=>{for(const t in _t)globalThis[t]=_t[t]},Dt=t=>{t.prototype.makeXRCompatible=function(){return this[_e]=!0,Promise.resolve()}};export{ei as XREngineWebXRPolyfill};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
