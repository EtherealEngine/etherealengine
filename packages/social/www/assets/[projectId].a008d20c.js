import{_ as C}from"./index.7b02be28.js";import{f as yr,r as Ye,R as Pt}from"./vendor.475cb2ff.js";import{$ as Sr,a as gr,h as Er}from"./_app.f0a72417.js";import{N as Jt,a as Zt,b as Fi,M as _r,A as Pr}from"./AuthService.e8999ddc.js";import{O as wr,aD as vr,aE as Tr,V as P,Q as Y,h as Fn,o as _e,aF as ki,aG as De,aH as kn,al as Ar,ak as Ce,ag as Me,aI as Or,a0 as Rr,ai as Ui,a3 as Wi,aJ as br,aK as Lr,aL as qe,aM as oe,a9 as J,G as Bi,av as Dr,P as Un,W as Cr,aN as Ir,s as Mr,aO as Nr,N as Hi,Y as xr,L as Fr,F as kr,aP as Ur,aQ as Wr,aR as Br,p as Hr,aq as jr,M as Vr,ap as Xr,B as ji,S as Wn}from"./three.module.493739a3.js";import{c as H,g as D,a as $,h as Qe,r as Gr,u as ae,E as f,A as Ne,i as ue,b as I,d as xe,e as Vi,f as wt,j as en,k as zr,l as $r,m as Kr,C as Xi,n as Yr,o as qr}from"./avatarFunctions.6d66cf01.js";import{C as ne,T as Pe,c as Qr,W as Bn,E as Gi,d as Jr,R as Zr,N as eo,D as to,e as no,S as io,a as so,O as ro,b as oo,B as ao,f as co,g as lo,h as O}from"./SystemUpdateType.772fc25d.js";import"./index.81138b53.js";import"./upload.bd537b46.js";var uo=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;for(var i=Array(e),s=0,t=0;t<n;t++)for(var r=arguments[t],o=0,a=r.length;o<a;o++,s++)i[s]=r[o];return i},fo=function(){function e(t,n,i){this.name=t,this.version=n,this.os=i,this.type="browser"}return e}(),ho=function(){function e(t){this.version=t,this.type="node",this.name="node",this.os=process.platform}return e}(),po=function(){function e(t,n,i,s){this.name=t,this.version=n,this.os=i,this.bot=s,this.type="bot-device"}return e}(),mo=function(){function e(){this.type="bot",this.bot=!0,this.name="bot",this.version=null,this.os=null}return e}(),yo=function(){function e(){this.type="react-native",this.name="react-native",this.version=null,this.os=null}return e}(),So=/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/,go=/(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/,zi=3,Eo=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/EdgA?\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["searchbot",So]],$i=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/]];function _o(e){return e?Ki(e):typeof document=="undefined"&&typeof navigator!="undefined"&&navigator.product==="ReactNative"?new yo:typeof navigator!="undefined"?Ki(navigator.userAgent):wo()}function Po(e){return e!==""&&Eo.reduce(function(t,n){var i=n[0],s=n[1];if(t)return t;var r=s.exec(e);return!!r&&[i,r]},!1)}function Ki(e){var t=Po(e);if(!t)return null;var n=t[0],i=t[1];if(n==="searchbot")return new mo;var s=i[1]&&i[1].split(/[._]/).slice(0,3);s?s.length<zi&&(s=uo(s,vo(zi-s.length))):s=[];var r=s.join("."),o=Yi(e),a=go.exec(e);return a&&a[1]?new po(n,r,o,a[1]):new fo(n,r,o)}function Yi(e){for(var t=0,n=$i.length;t<n;t++){var i=$i[t],s=i[0],r=i[1],o=r.exec(e);if(o)return s}return null}function wo(){var e=typeof process!="undefined"&&process.version;return e?new ho(process.version.slice(1)):null}function vo(e){for(var t=[],n=0;n<e;n++)t.push("0");return t}const To=new P,Ao=new Y,Oo=new P;class Ro extends wr{constructor(){super();this.type="AudioListener",this.context=vr.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Tr}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t),this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(To,Ao,Oo)}}const qi=0,bo=1,Lo=2,Qi=2,Ji=1.25,Do=1;class tn{constructor(){}}function we(e,t,n){return n.min.x=t[e],n.min.y=t[e+1],n.min.z=t[e+2],n.max.x=t[e+3],n.max.y=t[e+4],n.max.z=t[e+5],n}function Zi(e){let t=-1,n=-1/0;for(let i=0;i<3;i++){const s=e[i+3]-e[i];s>n&&(n=s,t=i)}return t}function es(e,t){t.set(e)}function ts(e,t,n){let i,s;for(let r=0;r<3;r++){const o=r+3;i=e[r],s=t[r],n[r]=i<s?i:s,i=e[o],s=t[o],n[o]=i>s?i:s}}function Hn(e){const t=e[3]-e[0],n=e[4]-e[1],i=e[5]-e[2];return 2*(t*n+n*i+i*t)}const Co=Math.pow(2,-24);function Io(e,t){if(!e.index){const n=e.attributes.position.count,i=t.useSharedArrayBuffer?SharedArrayBuffer:ArrayBuffer;let s;n>65535?s=new Uint32Array(new i(4*n)):s=new Uint16Array(new i(2*n)),e.setIndex(new Fn(s,1));for(let r=0;r<n;r++)s[r]=r}}function Mo(e){if(!e.groups||!e.groups.length)return[{offset:0,count:e.index.count/3}];const t=[],n=new Set;for(const s of e.groups)n.add(s.start),n.add(s.start+s.count);const i=Array.from(n.values()).sort((s,r)=>s-r);for(let s=0;s<i.length-1;s++){const r=i[s],o=i[s+1];t.push({offset:r/3,count:(o-r)/3})}return t}function jn(e,t,n,i,s=null){let r=1/0,o=1/0,a=1/0,c=-1/0,l=-1/0,u=-1/0,d=1/0,h=1/0,p=1/0,m=-1/0,y=-1/0,S=-1/0;const _=s!==null;for(let E=t*6,g=(t+n)*6;E<g;E+=6){const w=e[E+0],T=e[E+1],R=w-T,x=w+T;R<r&&(r=R),x>c&&(c=x),_&&w<d&&(d=w),_&&w>m&&(m=w);const b=e[E+2],A=e[E+3],M=b-A,B=b+A;M<o&&(o=M),B>l&&(l=B),_&&b<h&&(h=b),_&&b>y&&(y=b);const V=e[E+4],K=e[E+5],ie=V-K,te=V+K;ie<a&&(a=ie),te>u&&(u=te),_&&V<p&&(p=V),_&&V>S&&(S=V)}i[0]=r,i[1]=o,i[2]=a,i[3]=c,i[4]=l,i[5]=u,_&&(s[0]=d,s[1]=h,s[2]=p,s[3]=m,s[4]=y,s[5]=S)}function No(e,t,n,i){let s=1/0,r=1/0,o=1/0,a=-1/0,c=-1/0,l=-1/0;for(let u=t*6,d=(t+n)*6;u<d;u+=6){const h=e[u+0];h<s&&(s=h),h>a&&(a=h);const p=e[u+2];p<r&&(r=p),p>c&&(c=p);const m=e[u+4];m<o&&(o=m),m>l&&(l=m)}i[0]=s,i[1]=r,i[2]=o,i[3]=a,i[4]=c,i[5]=l}function xo(e,t,n,i,s){let r=n,o=n+i-1;const a=s.pos,c=s.axis*2;for(;;){for(;r<=o&&t[r*6+c]<a;)r++;for(;r<=o&&t[o*6+c]>=a;)o--;if(r<o){for(let l=0;l<3;l++){let u=e[r*3+l];e[r*3+l]=e[o*3+l],e[o*3+l]=u;let d=t[r*6+l*2+0];t[r*6+l*2+0]=t[o*6+l*2+0],t[o*6+l*2+0]=d;let h=t[r*6+l*2+1];t[r*6+l*2+1]=t[o*6+l*2+1],t[o*6+l*2+1]=h}r++,o--}else return r}}const Fe=32,Je=new Array(Fe).fill().map(()=>({count:0,bounds:new Float32Array(6),rightCacheBounds:new Float32Array(6),candidate:0})),nn=new Float32Array(6);function Fo(e,t,n,i,s,r){let o=-1,a=0;if(r===qi)o=Zi(t),o!==-1&&(a=(t[o]+t[o+3])/2);else if(r===bo)o=Zi(e),o!==-1&&(a=ko(n,i,s,o));else if(r===Lo){const c=Hn(e);let l=Ji*s;const u=i*6,d=(i+s)*6;for(let h=0;h<3;h++){const p=t[h],S=(t[h+3]-p)/Fe;for(let g=0;g<Fe;g++){const w=Je[g];w.count=0,w.candidate=p+S+g*S;const T=w.bounds;for(let R=0;R<3;R++)T[R]=1/0,T[R+3]=-1/0}for(let g=u;g<d;g+=6){let R=~~((n[g+2*h]-p)/S);R>=Fe&&(R=Fe-1);const x=Je[R];x.count++;const b=x.bounds;for(let A=0;A<3;A++){const M=n[g+2*A],B=n[g+2*A+1],V=M-B,K=M+B;V<b[A]&&(b[A]=V),K>b[A+3]&&(b[A+3]=K)}}const _=Je[Fe-1];es(_.bounds,_.rightCacheBounds);for(let g=Fe-2;g>=0;g--){const w=Je[g],T=Je[g+1];ts(w.bounds,T.rightCacheBounds,w.rightCacheBounds)}let E=0;for(let g=0;g<Fe-1;g++){const w=Je[g],T=w.count,R=w.bounds,b=Je[g+1].rightCacheBounds;T!==0&&(E===0?es(R,nn):ts(R,nn,nn)),E+=T;let A=0,M=0;E!==0&&(A=Hn(nn)/c);const B=s-E;B!==0&&(M=Hn(b)/c);const V=Do+Ji*(A*E+M*B);V<l&&(o=h,l=V,a=w.candidate)}}}return{axis:o,pos:a}}function ko(e,t,n,i){let s=0;for(let r=t,o=t+n;r<o;r++)s+=e[r*6+i*2];return s/n}function Uo(e,t){const n=e.attributes.position,i=n.array,s=e.index.array,r=s.length/3,o=new Float32Array(r*6),a=n.offset||0;let c=3;n.isInterleavedBufferAttribute&&(c=n.data.stride);for(let l=0;l<r;l++){const u=l*3,d=l*6,h=s[u+0]*c+a,p=s[u+1]*c+a,m=s[u+2]*c+a;for(let y=0;y<3;y++){const S=i[h+y],_=i[p+y],E=i[m+y];let g=S;_<g&&(g=_),E<g&&(g=E);let w=S;_>w&&(w=_),E>w&&(w=E);const T=(w-g)/2,R=y*2;o[d+R+0]=g+T,o[d+R+1]=T+(Math.abs(g)+T)*Co,g<t[y]&&(t[y]=g),w>t[y+3]&&(t[y+3]=w)}}return o}function Wo(e,t){function n(m,y,S,_=null,E=0){if(!d&&E>=a&&(d=!0,c&&(console.warn(`MeshBVH: Max depth of ${a} reached when generating BVH. Consider increasing maxDepth.`),console.warn(e))),S<=l||E>=a)return m.offset=y,m.count=S,m;const g=Fo(m.boundingData,_,r,y,S,u);if(g.axis===-1)return m.offset=y,m.count=S,m;const w=xo(o,r,y,S,g);if(w===y||w===y+S)m.offset=y,m.count=S;else{m.splitAxis=g.axis;const T=new tn,R=y,x=w-y;m.left=T,T.boundingData=new Float32Array(6),jn(r,R,x,T.boundingData,s),n(T,R,x,s,E+1);const b=new tn,A=w,M=S-x;m.right=b,b.boundingData=new Float32Array(6),jn(r,A,M,b.boundingData,s),n(b,A,M,s,E+1)}return m}Io(e,t);const i=new Float32Array(6),s=new Float32Array(6),r=Uo(e,i),o=e.index.array,a=t.maxDepth,c=t.verbose,l=t.maxLeafTris,u=t.strategy;let d=!1;const h=[],p=Mo(e);if(p.length===1){const m=p[0],y=new tn;y.boundingData=i,No(r,m.offset,m.count,s),n(y,m.offset,m.count,s),h.push(y)}else for(let m of p){const y=new tn;y.boundingData=new Float32Array(6),jn(r,m.offset,m.count,y.boundingData,s),n(y,m.offset,m.count,s),h.push(y)}return h}const sn=6*4+4+4,Vn=65535;function Bo(e,t){const n=Wo(e,t);let i,s,r;const o=[],a=t.useSharedArrayBuffer?SharedArrayBuffer:ArrayBuffer;for(let u=0;u<n.length;u++){const d=n[u];let h=c(d);const p=new a(sn*h);i=new Float32Array(p),s=new Uint32Array(p),r=new Uint16Array(p),l(0,d),o.push(p)}return o;function c(u){return u.count?1:1+c(u.left)+c(u.right)}function l(u,d){const h=u/4,p=u/2,m=!!d.count,y=d.boundingData;for(let S=0;S<6;S++)i[h+S]=y[S];if(m){const S=d.offset,_=d.count;return s[h+6]=S,r[p+14]=_,r[p+15]=Vn,u+sn}else{const S=d.left,_=d.right,E=d.splitAxis;let g;if(g=l(u+sn,S),g/4>Math.pow(2,32))throw new Error("MeshBVH: Cannot store child pointer greater than 32 bits.");return s[h+6]=g/4,g=l(g,_),s[h+7]=E,g}}}class ve{constructor(){this.min=1/0,this.max=-1/0}setFromPointsField(t,n){let i=1/0,s=-1/0;for(let r=0,o=t.length;r<o;r++){const c=t[r][n];i=c<i?c:i,s=c>s?c:s}this.min=i,this.max=s}setFromPoints(t,n){let i=1/0,s=-1/0;for(let r=0,o=n.length;r<o;r++){const a=n[r],c=t.dot(a);i=c<i?c:i,s=c>s?c:s}this.min=i,this.max=s}isSeparated(t){return this.min>t.max||t.min>this.max}}ve.prototype.setFromBox=function(){const e=new P;return function(n,i){const s=i.min,r=i.max;let o=1/0,a=-1/0;for(let c=0;c<=1;c++)for(let l=0;l<=1;l++)for(let u=0;u<=1;u++){e.x=s.x*c+r.x*(1-c),e.y=s.y*l+r.y*(1-l),e.z=s.z*u+r.z*(1-u);const d=n.dot(e);o=Math.min(d,o),a=Math.max(d,a)}this.min=o,this.max=a}}();(function(){const e=new ve;return function(n,i){const s=n.points,r=n.satAxes,o=n.satBounds,a=i.points,c=i.satAxes,l=i.satBounds;for(let u=0;u<3;u++){const d=o[u],h=r[u];if(e.setFromPoints(h,a),d.isSeparated(e))return!1}for(let u=0;u<3;u++){const d=l[u],h=c[u];if(e.setFromPoints(h,s),d.isSeparated(e))return!1}}})();const Ho=function(){const e=new P,t=new P,n=new P;return function(s,r,o){const a=s.start,c=e,l=r.start,u=t;n.subVectors(a,l),e.subVectors(s.end,r.start),t.subVectors(r.end,r.start);const d=n.dot(u),h=u.dot(c),p=u.dot(u),m=n.dot(c),S=c.dot(c)*p-h*h;let _,E;S!==0?_=(d*h-m*p)/S:_=0,E=(d+_*h)/p,o.x=_,o.y=E}}(),Xn=function(){const e=new _e,t=new P,n=new P;return function(s,r,o,a){Ho(s,r,e);let c=e.x,l=e.y;if(c>=0&&c<=1&&l>=0&&l<=1){s.at(c,o),r.at(l,a);return}else if(c>=0&&c<=1){l<0?r.at(0,a):r.at(1,a),s.closestPointToPoint(a,!0,o);return}else if(l>=0&&l<=1){c<0?s.at(0,o):s.at(1,o),r.closestPointToPoint(o,!0,a);return}else{let u;c<0?u=s.start:u=s.end;let d;l<0?d=r.start:d=r.end;const h=t,p=n;if(s.closestPointToPoint(d,!0,t),r.closestPointToPoint(u,!0,n),h.distanceToSquared(d)<=p.distanceToSquared(u)){o.copy(h),a.copy(d);return}else{o.copy(u),a.copy(p);return}}}}(),jo=function(){const e=new P,t=new P,n=new ki,i=new De;return function(r,o){const{radius:a,center:c}=r,{a:l,b:u,c:d}=o;if(i.start=l,i.end=u,i.closestPointToPoint(c,!0,e).distanceTo(c)<=a||(i.start=l,i.end=d,i.closestPointToPoint(c,!0,e).distanceTo(c)<=a)||(i.start=u,i.end=d,i.closestPointToPoint(c,!0,e).distanceTo(c)<=a))return!0;const y=o.getPlane(n);if(Math.abs(y.distanceToPoint(c))<=a){const _=y.projectPoint(c,t);if(o.containsPoint(_))return!0}return!1}}();class Ie extends kn{constructor(...t){super(...t);this.isSeparatingAxisTriangle=!0,this.satAxes=new Array(4).fill().map(()=>new P),this.satBounds=new Array(4).fill().map(()=>new ve),this.points=[this.a,this.b,this.c],this.sphere=new Ar,this.plane=new ki,this.needsUpdate=!1}intersectsSphere(t){return jo(t,this)}update(){const t=this.a,n=this.b,i=this.c,s=this.points,r=this.satAxes,o=this.satBounds,a=r[0],c=o[0];this.getNormal(a),c.setFromPoints(a,s);const l=r[1],u=o[1];l.subVectors(t,n),u.setFromPoints(l,s);const d=r[2],h=o[2];d.subVectors(n,i),h.setFromPoints(d,s);const p=r[3],m=o[3];p.subVectors(i,t),m.setFromPoints(p,s),this.sphere.setFromPoints(this.points),this.plane.setFromNormalAndCoplanarPoint(a,t),this.needsUpdate=!1}}Ie.prototype.closestPointToSegment=function(){const e=new P,t=new P,n=new De;return function(s,r=null,o=null){const{start:a,end:c}=s,l=this.points;let u,d=1/0;for(let h=0;h<3;h++){const p=(h+1)%3;n.start.copy(l[h]),n.end.copy(l[p]),Xn(n,s,e,t),u=e.distanceToSquared(t),u<d&&(d=u,r&&r.copy(e),o&&o.copy(t))}return this.closestPointToPoint(a,e),u=a.distanceToSquared(e),u<d&&(d=u,r&&r.copy(e),o&&o.copy(a)),this.closestPointToPoint(c,e),u=c.distanceToSquared(e),u<d&&(d=u,r&&r.copy(e),o&&o.copy(c)),Math.sqrt(d)}}();Ie.prototype.intersectsTriangle=function(){const e=new Ie,t=new Array(3),n=new Array(3),i=new ve,s=new ve,r=new P,o=new P,a=new P,c=new P,l=new De,u=new De,d=new De;return function(p,m=null){this.needsUpdate&&this.update(),p.isSeparatingAxisTriangle?p.needsUpdate&&p.update():(e.copy(p),e.update(),p=e);const y=this.satBounds,S=this.satAxes;n[0]=p.a,n[1]=p.b,n[2]=p.c;for(let g=0;g<4;g++){const w=y[g],T=S[g];if(i.setFromPoints(T,n),w.isSeparated(i))return!1}const _=p.satBounds,E=p.satAxes;t[0]=this.a,t[1]=this.b,t[2]=this.c;for(let g=0;g<4;g++){const w=_[g],T=E[g];if(i.setFromPoints(T,t),w.isSeparated(i))return!1}for(let g=0;g<4;g++){const w=S[g];for(let T=0;T<4;T++){const R=E[T];if(r.crossVectors(w,R),i.setFromPoints(r,t),s.setFromPoints(r,n),i.isSeparated(s))return!1}}if(m){const g=this.plane,w=p.plane;if(Math.abs(g.normal.dot(w.normal))>1-1e-10)console.warn("SeparatingAxisTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0."),m.start.set(0,0,0),m.end.set(0,0,0);else{const T=this.points;let R=!1;for(let A=0;A<3;A++){const M=T[A],B=T[(A+1)%3];if(l.start.copy(M),l.end.copy(B),w.intersectLine(l,R?u.start:u.end)){if(R)break;R=!0}}const x=p.points;let b=!1;for(let A=0;A<3;A++){const M=x[A],B=x[(A+1)%3];if(l.start.copy(M),l.end.copy(B),g.intersectLine(l,b?d.start:d.end)){if(b)break;b=!0}}if(u.delta(o),d.delta(a),o.dot(a)<0){let A=d.start;d.start=d.end,d.end=A}c.subVectors(u.start,d.start),c.dot(o)>0?m.start.copy(u.start):m.start.copy(d.start),c.subVectors(u.end,d.end),c.dot(o)<0?m.end.copy(u.end):m.end.copy(d.end)}}return!0}}();Ie.prototype.distanceToPoint=function(){const e=new P;return function(n){return this.closestPointToPoint(n,e),n.distanceTo(e)}}();Ie.prototype.distanceToTriangle=function(){const e=new P,t=new P,n=["a","b","c"],i=new De,s=new De;return function(o,a=null,c=null){const l=a||c?i:null;if(this.intersectsTriangle(o,l))return(a||c)&&(a&&l.getCenter(a),c&&l.getCenter(c)),0;let u=1/0;for(let d=0;d<3;d++){let h;const p=n[d],m=o[p];this.closestPointToPoint(m,e),h=m.distanceToSquared(e),h<u&&(u=h,a&&a.copy(e),c&&c.copy(m));const y=this[p];o.closestPointToPoint(y,e),h=y.distanceToSquared(e),h<u&&(u=h,a&&a.copy(y),c&&c.copy(e))}for(let d=0;d<3;d++){const h=n[d],p=n[(d+1)%3];i.set(this[h],this[p]);for(let m=0;m<3;m++){const y=n[m],S=n[(m+1)%3];s.set(o[y],o[S]),Xn(i,s,e,t);const _=e.distanceToSquared(t);_<u&&(u=_,a&&a.copy(e),c&&c.copy(t))}}return Math.sqrt(u)}}();class Te extends Ce{constructor(...t){super(...t);this.isOrientedBox=!0,this.matrix=new Me,this.invMatrix=new Me,this.points=new Array(8).fill().map(()=>new P),this.satAxes=new Array(3).fill().map(()=>new P),this.satBounds=new Array(3).fill().map(()=>new ve),this.alignedSatBounds=new Array(3).fill().map(()=>new ve),this.needsUpdate=!1}set(t,n,i){super.set(t,n),this.matrix=i,this.needsUpdate=!0}copy(t){super.copy(t),this.matrix.copy(t.matrix),this.needsUpdate=!0}}Te.prototype.update=function(){return function(){const t=this.matrix,n=this.min,i=this.max,s=this.points;for(let l=0;l<=1;l++)for(let u=0;u<=1;u++)for(let d=0;d<=1;d++){const h=(1<<0)*l|(1<<1)*u|(1<<2)*d,p=s[h];p.x=l?i.x:n.x,p.y=u?i.y:n.y,p.z=d?i.z:n.z,p.applyMatrix4(t)}const r=this.satBounds,o=this.satAxes,a=s[0];for(let l=0;l<3;l++){const u=o[l],d=r[l],h=1<<l,p=s[h];u.subVectors(a,p),d.setFromPoints(u,s)}const c=this.alignedSatBounds;c[0].setFromPointsField(s,"x"),c[1].setFromPointsField(s,"y"),c[2].setFromPointsField(s,"z"),this.invMatrix.copy(this.matrix).invert(),this.needsUpdate=!1}}();Te.prototype.intersectsBox=function(){const e=new ve;return function(n){this.needsUpdate&&this.update();const i=n.min,s=n.max,r=this.satBounds,o=this.satAxes,a=this.alignedSatBounds;if(e.min=i.x,e.max=s.x,a[0].isSeparated(e)||(e.min=i.y,e.max=s.y,a[1].isSeparated(e))||(e.min=i.z,e.max=s.z,a[2].isSeparated(e)))return!1;for(let c=0;c<3;c++){const l=o[c],u=r[c];if(e.setFromBox(l,n),u.isSeparated(e))return!1}return!0}}();Te.prototype.intersectsTriangle=function(){const e=new Ie,t=new Array(3),n=new ve,i=new ve,s=new P;return function(o){this.needsUpdate&&this.update(),o.isSeparatingAxisTriangle?o.needsUpdate&&o.update():(e.copy(o),e.update(),o=e);const a=this.satBounds,c=this.satAxes;t[0]=o.a,t[1]=o.b,t[2]=o.c;for(let h=0;h<3;h++){const p=a[h],m=c[h];if(n.setFromPoints(m,t),p.isSeparated(n))return!1}const l=o.satBounds,u=o.satAxes,d=this.points;for(let h=0;h<3;h++){const p=l[h],m=u[h];if(n.setFromPoints(m,d),p.isSeparated(n))return!1}for(let h=0;h<3;h++){const p=c[h];for(let m=0;m<4;m++){const y=u[m];if(s.crossVectors(p,y),n.setFromPoints(s,t),i.setFromPoints(s,d),n.isSeparated(i))return!1}}return!0}}();Te.prototype.closestPointToPoint=function(){return function(t,n){return this.needsUpdate&&this.update(),n.copy(t).applyMatrix4(this.invMatrix).clamp(this.min,this.max).applyMatrix4(this.matrix),n}}();Te.prototype.distanceToPoint=function(){const e=new P;return function(n){return this.closestPointToPoint(n,e),n.distanceTo(e)}}();Te.prototype.distanceToBox=function(){const e=["x","y","z"],t=new Array(12).fill().map(()=>new De),n=new Array(12).fill().map(()=>new De),i=new P,s=new P;return function(o,a=0,c=null,l=null){if(this.needsUpdate&&this.update(),this.intersectsBox(o))return(c||l)&&(o.getCenter(s),this.closestPointToPoint(s,i),o.closestPointToPoint(i,s),c&&c.copy(i),l&&l.copy(s)),0;const u=a*a,d=o.min,h=o.max,p=this.points;let m=1/0;for(let S=0;S<8;S++){const _=p[S];s.copy(_).clamp(d,h);const E=_.distanceToSquared(s);if(E<m&&(m=E,c&&c.copy(_),l&&l.copy(s),E<u))return Math.sqrt(E)}let y=0;for(let S=0;S<3;S++)for(let _=0;_<=1;_++)for(let E=0;E<=1;E++){const g=(S+1)%3,w=(S+2)%3,T=_<<g|E<<w,R=1<<S|_<<g|E<<w,x=p[T],b=p[R];t[y].set(x,b);const M=e[S],B=e[g],V=e[w],K=n[y],ie=K.start,te=K.end;ie[M]=d[M],ie[B]=_?d[B]:h[B],ie[V]=E?d[V]:h[B],te[M]=h[M],te[B]=_?d[B]:h[B],te[V]=E?d[V]:h[B],y++}for(let S=0;S<=1;S++)for(let _=0;_<=1;_++)for(let E=0;E<=1;E++){s.x=S?h.x:d.x,s.y=_?h.y:d.y,s.z=E?h.z:d.z,this.closestPointToPoint(s,i);const g=s.distanceToSquared(i);if(g<m&&(m=g,c&&c.copy(i),l&&l.copy(s),g<u))return Math.sqrt(g)}for(let S=0;S<12;S++){const _=t[S];for(let E=0;E<12;E++){const g=n[E];Xn(_,g,i,s);const w=i.distanceToSquared(s);if(w<m&&(m=w,c&&c.copy(i),l&&l.copy(s),w<u))return Math.sqrt(w)}}return Math.sqrt(m)}}();const rn=new P,on=new P,an=new P,ns=new _e,is=new _e,ss=new _e,rs=new P;function Vo(e,t,n,i,s,r){let o;return r===Or?o=e.intersectTriangle(i,n,t,!0,s):o=e.intersectTriangle(t,n,i,r!==Rr,s),o===null?null:{distance:e.origin.distanceTo(s),point:s.clone()}}function Xo(e,t,n,i,s,r,o){rn.fromBufferAttribute(t,i),on.fromBufferAttribute(t,s),an.fromBufferAttribute(t,r);const a=Vo(e,rn,on,an,rs,o);if(a){n&&(ns.fromBufferAttribute(n,i),is.fromBufferAttribute(n,s),ss.fromBufferAttribute(n,r),a.uv=kn.getUV(rs,rn,on,an,ns,is,ss,new _e));const c={a:i,b:s,c:r,normal:new P,materialIndex:0};kn.getNormal(rn,on,an,c.normal),a.face=c,a.faceIndex=i}return a}function os(e,t,n,i,s){const r=i*3,o=e.index.getX(r),a=e.index.getX(r+1),c=e.index.getX(r+2),l=Xo(n,e.attributes.position,e.attributes.uv,o,a,c,t);return l?(l.faceIndex=i,s&&s.push(l),l):null}function Go(e,t,n,i,s,r){for(let o=i,a=i+s;o<a;o++)os(e,t,n,o,r)}function zo(e,t,n,i,s){let r=1/0,o=null;for(let a=i,c=i+s;a<c;a++){const l=os(e,t,n,a);l&&l.distance<r&&(o=l,r=l.distance)}return o}function cn(e,t,n){return e===null||(e.point.applyMatrix4(t.matrixWorld),e.distance=e.point.distanceTo(n.ray.origin),e.object=t,e.distance<n.near||e.distance>n.far)?null:e}function Ae(e,t,n,i){const s=e.a,r=e.b,o=e.c;let a=t,c=t+1,l=t+2;n&&(a=n.getX(t),c=n.getX(t+1),l=n.getX(t+2)),s.x=i.getX(a),s.y=i.getY(a),s.z=i.getZ(a),r.x=i.getX(c),r.y=i.getY(c),r.z=i.getZ(c),o.x=i.getX(l),o.y=i.getY(l),o.z=i.getZ(l)}function as(e,t,n,i,s,r,o){const a=n.index,c=n.attributes.position;for(let l=e,u=t+e;l<u;l++)if(Ae(o,l*3,a,c),o.needsUpdate=!0,i(o,l,s,r))return!0;return!1}class cs{constructor(t){this._getNewPrimitive=t,this._primitives=[]}getPrimitive(){const t=this._primitives;return t.length===0?this._getNewPrimitive():t.pop()}releasePrimitive(t){this._primitives.push(t)}}function ke(e,t){return t[e+15]===65535}function lt(e,t){return t[e+6]}function vt(e,t){return t[e+14]}function Tt(e){return e+8}function At(e,t){return t[e+6]}function $o(e,t){return t[e+7]}function Ue(e){return e}const ut=new Ce,ln=new P,Ko=["x","y","z"];function Gn(e,t,n,i,s){let r=e*2,o=dt,a=We,c=Be;if(ke(r,a)){const u=lt(e,c),d=vt(r,a);Go(t,n,i,u,d,s)}else{const u=Tt(e);un(u,o,i,ln)&&Gn(u,t,n,i,s);const d=At(e,c);un(d,o,i,ln)&&Gn(d,t,n,i,s)}}function zn(e,t,n,i){let s=e*2,r=dt,o=We,a=Be;if(ke(s,o)){const l=lt(e,a),u=vt(s,o);return zo(t,n,i,l,u)}else{const l=$o(e,a),u=Ko[l],h=i.direction[u]>=0;let p,m;h?(p=Tt(e),m=At(e,a)):(p=At(e,a),m=Tt(e));const S=un(p,r,i,ln)?zn(p,t,n,i):null;if(S){const g=S.point[u];if(h?g<=r[m+l]:g>=r[m+l+3])return S}const E=un(m,r,i,ln)?zn(m,t,n,i):null;return S&&E?S.distance<=E.distance?S:E:S||E||null}}const Yo=function(){let e,t;const n=[],i=new cs(()=>new Ce);return function(...o){e=i.getPrimitive(),t=i.getPrimitive(),n.push(e,t);const a=s(...o);i.releasePrimitive(e),i.releasePrimitive(t),n.pop(),n.pop();const c=n.length;return c>0&&(t=n[c-1],e=n[c-2]),a};function s(r,o,a,c,l=null,u=0,d=0){function h(g){let w=g*2,T=We,R=Be;for(;!ke(w,T);)g=Tt(g),w=g*2;return lt(g,R)}function p(g){let w=g*2,T=We,R=Be;for(;!ke(w,T);)g=At(g,R),w=g*2;return lt(g,R)+vt(w,T)}let m=r*2,y=dt,S=We,_=Be;if(ke(m,S)){const g=lt(r,_),w=vt(m,S);return we(Ue(r),y,e),c(g,w,!1,d,u+r,e)}else{const g=Tt(r),w=At(r,_);let T=g,R=w,x,b,A,M;if(l&&(A=e,M=t,we(Ue(T),y,A),we(Ue(R),y,M),x=l(A),b=l(M),b<x)){T=w,R=g;const re=x;x=b,b=re,A=M}A||(A=e,we(Ue(T),y,A));const B=ke(T*2,S),V=a(A,B,x,d+1,u+T);let K;if(V===Qi){const re=h(T),ct=p(T)-re;K=c(re,ct,!0,d+1,u+T,A)}else K=V&&s(T,o,a,c,l,u,d+1);if(K)return!0;M=t,we(Ue(R),y,M);const ie=ke(R*2,S),te=a(M,ie,b,d+1,u+R);let se;if(te===Qi){const re=h(R),ct=p(R)-re;se=c(re,ct,!0,d+1,u+R,M)}else se=te&&s(R,o,a,c,l,u,d+1);return!!se}}}(),qo=function(){const e=new Ie,t=new Ie,n=new Me,i=new Te,s=new Te;return function r(o,a,c,l,u=null){let d=o*2,h=dt,p=We,m=Be;if(u===null&&(c.boundingBox||c.computeBoundingBox(),i.set(c.boundingBox.min,c.boundingBox.max,l),u=i),ke(d,p)){const S=a,_=S.index,E=S.attributes.position,g=c.index,w=c.attributes.position,T=lt(o,m),R=vt(d,p);if(n.copy(l).invert(),c.boundsTree)return we(Ue(o),h,s),s.matrix.copy(n),s.needsUpdate=!0,c.boundsTree.shapecast({intersectsBounds:b=>s.intersectsBox(b),intersectsTriangle:b=>{b.a.applyMatrix4(l),b.b.applyMatrix4(l),b.c.applyMatrix4(l),b.needsUpdate=!0;for(let A=T*3,M=(R+T)*3;A<M;A+=3)if(Ae(t,A,_,E),t.needsUpdate=!0,b.intersectsTriangle(t))return!0;return!1}});for(let x=T*3,b=R+T*3;x<b;x+=3){Ae(e,x,_,E),e.a.applyMatrix4(n),e.b.applyMatrix4(n),e.c.applyMatrix4(n),e.needsUpdate=!0;for(let A=0,M=g.count;A<M;A+=3)if(Ae(t,A,g,w),t.needsUpdate=!0,e.intersectsTriangle(t))return!0}}else{const S=o+8,_=m[o+6];return we(Ue(S),h,ut),!!(u.intersectsBox(ut)&&r(S,a,c,l,u)||(we(Ue(_),h,ut),u.intersectsBox(ut)&&r(_,a,c,l,u)))}}}();function un(e,t,n,i){return we(e,t,ut),n.intersectBox(ut,i)}const $n=[];let dn,dt,We,Be;function Ot(e){dn&&$n.push(dn),dn=e,dt=new Float32Array(e),We=new Uint16Array(e),Be=new Uint32Array(e)}function fn(){dn=null,dt=null,We=null,Be=null,$n.length&&Ot($n.pop())}const Kn=Symbol("skip tree generation"),Yn=new Ce,qn=new Ce,ft=new Me,Ze=new Te,Rt=new Te,bt=new P,hn=new P,Qo=new P,Jo=new P,Zo=new P,ls=new Ce,Oe=new cs(()=>new Ie);class Z{static serialize(t,n={}){if(n.isBufferGeometry)return console.warn("MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature."),Z.serialize(arguments[0],{cloneBuffers:arguments[2]===void 0?!0:arguments[2]});n={cloneBuffers:!0,...n};const i=t.geometry,s=t._roots,r=i.getIndex();let o;return n.cloneBuffers?o={roots:s.map(a=>a.slice()),index:r.array.slice()}:o={roots:s,index:r.array},o}static deserialize(t,n,i={}){if(typeof i=="boolean")return console.warn("MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature."),Z.deserialize(arguments[0],arguments[1],{setIndex:arguments[2]===void 0?!0:arguments[2]});i={setIndex:!0,...i};const{index:s,roots:r}=t,o=new Z(n,{...i,[Kn]:!0});if(o._roots=r,i.setIndex){const a=n.getIndex();if(a===null){const c=new Fn(t.index,1,!1);n.setIndex(c)}else a.array!==s&&(a.array.set(s),a.needsUpdate=!0)}return o}constructor(t,n={}){if(t.isBufferGeometry){if(t.index&&t.index.isInterleavedBufferAttribute)throw new Error("MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.")}else throw new Error("MeshBVH: Only BufferGeometries are supported.");if(n=Object.assign({strategy:qi,maxDepth:40,maxLeafTris:10,verbose:!0,useSharedArrayBuffer:!1,setBoundingBox:!0,[Kn]:!1},n),n.useSharedArrayBuffer&&typeof SharedArrayBuffer=="undefined")throw new Error("MeshBVH: SharedArrayBuffer is not available.");this._roots=null,n[Kn]||(this._roots=Bo(t,n),!t.boundingBox&&n.setBoundingBox&&(t.boundingBox=this.getBoundingBox(new Ce))),this.geometry=t}refit(t=null){t&&Array.isArray(t)&&(t=new Set(t));const n=this.geometry,i=n.index.array,s=n.attributes.position,r=s.array,o=s.offset||0;let a=3;s.isInterleavedBufferAttribute&&(a=s.data.stride);let c,l,u,d,h=0;const p=this._roots;for(let y=0,S=p.length;y<S;y++)c=p[y],l=new Uint32Array(c),u=new Uint16Array(c),d=new Float32Array(c),m(0,h),h+=c.byteLength;function m(y,S,_=!1){const E=y*2;if(u[E+15]===Vn){const w=l[y+6],T=u[E+14];let R=1/0,x=1/0,b=1/0,A=-1/0,M=-1/0,B=-1/0;for(let V=3*w,K=3*(w+T);V<K;V++){const ie=i[V]*a+o,te=r[ie+0],se=r[ie+1],re=r[ie+2];te<R&&(R=te),te>A&&(A=te),se<x&&(x=se),se>M&&(M=se),re<b&&(b=re),re>B&&(B=re)}return d[y+0]!==R||d[y+1]!==x||d[y+2]!==b||d[y+3]!==A||d[y+4]!==M||d[y+5]!==B?(d[y+0]=R,d[y+1]=x,d[y+2]=b,d[y+3]=A,d[y+4]=M,d[y+5]=B,!0):!1}else{const w=y+8,T=l[y+6],R=w+S,x=T+S;let b=_,A=!1,M=!1;t?b||(A=t.has(R),M=t.has(x),b=!A&&!M):(A=!0,M=!0);const B=b||A,V=b||M;let K=!1;B&&(K=m(w,S,b));let ie=!1;V&&(ie=m(T,S,b));const te=K||ie;if(te)for(let se=0;se<3;se++){const re=w+se,Qt=T+se,ct=d[re],Mi=d[re+3],Ni=d[Qt],xi=d[Qt+3];d[y+se]=ct<Ni?ct:Ni,d[y+se+3]=Mi>xi?Mi:xi}return te}}}traverse(t,n=0){const i=this._roots[n],s=new Uint32Array(i),r=new Uint16Array(i);o(0);function o(a,c=0){const l=a*2,u=r[l+15]===Vn;if(u){const d=s[a+6],h=r[l+14];t(c,u,new Float32Array(i,a*4,6),d,h)}else{const d=a+sn/4,h=s[a+6],p=s[a+7];t(c,u,new Float32Array(i,a*4,6),p)||(o(d,c+1),o(h,c+1))}}}raycast(t,n=Ui){const i=this._roots,s=this.geometry,r=[],o=n.isMaterial,a=Array.isArray(n),c=s.groups,l=o?n.side:n;for(let u=0,d=i.length;u<d;u++){const h=a?n[c[u].materialIndex].side:l,p=r.length;if(Ot(i[u]),Gn(0,s,h,t,r),fn(),a){const m=c[u].materialIndex;for(let y=p,S=r.length;y<S;y++)r[y].face.materialIndex=m}}return r}raycastFirst(t,n=Ui){const i=this._roots,s=this.geometry,r=n.isMaterial,o=Array.isArray(n);let a=null;const c=s.groups,l=r?n.side:n;for(let u=0,d=i.length;u<d;u++){const h=o?n[c[u].materialIndex].side:l;Ot(i[u]);const p=zn(0,s,h,t);fn(),p!=null&&(a==null||p.distance<a.distance)&&(a=p,o&&(p.face.materialIndex=c[u].materialIndex))}return a}intersectsGeometry(t,n){const i=this.geometry;let s=!1;for(const r of this._roots)if(Ot(r),s=qo(0,i,t,n),fn(),s)break;return s}shapecast(t,n,i){const s=this.geometry;if(t instanceof Function){if(n){const h=n;n=(p,m,y,S)=>{const _=m*3;return h(p,_,_+1,_+2,y,S)}}t={boundsTraverseOrder:i,intersectsBounds:t,intersectsTriangle:n,intersectsRange:null},console.warn("MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.")}const r=Oe.getPrimitive();let{boundsTraverseOrder:o,intersectsBounds:a,intersectsRange:c,intersectsTriangle:l}=t;if(c&&l){const h=c;c=(p,m,y,S,_)=>h(p,m,y,S,_)?!0:as(p,m,s,l,y,S,r)}else c||(l?c=(h,p,m,y)=>as(h,p,s,l,m,y,r):c=(h,p,m)=>m);let u=!1,d=0;for(const h of this._roots){if(Ot(h),u=Yo(0,s,a,c,o,d),fn(),u)break;d+=h.byteLength}return Oe.releasePrimitive(r),u}bvhcast(t,n,i){let{intersectsRanges:s,intersectsTriangles:r}=i;const o=t.geometry,a=o.index,c=o.attributes.position;ft.copy(n).invert();const l=Oe.getPrimitive(),u=Oe.getPrimitive();if(r){let h=function(p,m,y,S,_,E,g,w){for(let T=y,R=y+S;T<R;T++){Ae(u,T*3,a,c),u.a.applyMatrix4(n),u.b.applyMatrix4(n),u.c.applyMatrix4(n),u.needsUpdate=!0;for(let x=p,b=p+m;x<b;x++)if(Ae(l,x*3,a,c),l.needsUpdate=!0,r(l,u,x,T,_,E,g,w))return!0}return!1};if(s){const p=s;s=function(m,y,S,_,E,g,w,T){return p(m,y,S,_,E,g,w,T)?!0:h(m,y,S,_,E,g,w,T)}}else s=h}this.getBoundingBox(qn),qn.applyMatrix4(n);const d=this.shapecast({intersectsBounds:h=>qn.intersectsBox(h),intersectsRange:(h,p,m,y,S,_)=>(Yn.copy(_),Yn.applyMatrix4(ft),t.shapecast({intersectsBounds:E=>Yn.intersectsBox(E),intersectsRange:(E,g,w,T,R)=>s(h,p,E,g,y,S,T,R)}))});return Oe.releasePrimitive(l),Oe.releasePrimitive(u),d}intersectsBox(t,n){return Ze.set(t.min,t.max,n),Ze.needsUpdate=!0,this.shapecast({intersectsBounds:i=>Ze.intersectsBox(i),intersectsTriangle:i=>Ze.intersectsTriangle(i)})}intersectsSphere(t){return this.shapecast({intersectsBounds:n=>t.intersectsBox(n),intersectsTriangle:n=>n.intersectsSphere(t)})}closestPointToGeometry(t,n,i={},s={},r=0,o=1/0){t.boundingBox||t.computeBoundingBox(),Ze.set(t.boundingBox.min,t.boundingBox.max,n),Ze.needsUpdate=!0;const a=this.geometry,c=a.attributes.position,l=a.index,u=t.attributes.position,d=t.index,h=Oe.getPrimitive(),p=Oe.getPrimitive();let m=hn,y=Qo,S=null,_=null;s&&(S=Jo,_=Zo);let E=1/0,g=null,w=null;return ft.copy(n).invert(),Rt.matrix.copy(ft),this.shapecast({boundsTraverseOrder:T=>Ze.distanceToBox(T,Math.min(E,o)),intersectsBounds:(T,R,x)=>x<E&&x<o?(R&&(Rt.min.copy(T.min),Rt.max.copy(T.max),Rt.needsUpdate=!0),!0):!1,intersectsRange:(T,R)=>{if(t.boundsTree)return t.boundsTree.shapecast({boundsTraverseOrder:x=>Rt.distanceToBox(x,Math.min(E,o)),intersectsBounds:(x,b,A)=>A<E&&A<o,intersectsRange:(x,b)=>{for(let A=x*3,M=(x+b)*3;A<M;A+=3){Ae(p,A,d,u),p.a.applyMatrix4(n),p.b.applyMatrix4(n),p.c.applyMatrix4(n),p.needsUpdate=!0;for(let B=T*3,V=(T+R)*3;B<V;B+=3){Ae(h,B,l,c),h.needsUpdate=!0;const K=h.distanceToTriangle(p,m,S);if(K<E&&(y.copy(m),_&&_.copy(S),E=K,g=B/3,w=A/3),K<r)return!0}}}});{const x=d?d.count:u.count;for(let b=0,A=x;b<A;b+=3){Ae(p,b,d,u),p.a.applyMatrix4(n),p.b.applyMatrix4(n),p.c.applyMatrix4(n),p.needsUpdate=!0;for(let M=T*3,B=(T+R)*3;M<B;M+=3){Ae(h,M,l,c),h.needsUpdate=!0;const V=h.distanceToTriangle(p,m,S);if(V<E&&(y.copy(m),_&&_.copy(S),E=V,g=M/3,w=b/3),V<r)return!0}}}}}),Oe.releasePrimitive(h),Oe.releasePrimitive(p),E===1/0?null:(i.point?i.point.copy(y):i.point=y.clone(),i.distance=E,i.faceIndex=g,s&&(s.point?s.point.copy(_):s.point=_.clone(),s.point.applyMatrix4(ft),y.applyMatrix4(ft),s.distance=y.sub(s.point).length(),s.faceIndex=w),i)}closestPointToPoint(t,n={},i=0,s=1/0){const r=i*i,o=s*s;let a=1/0,c=null;if(this.shapecast({boundsTraverseOrder:u=>(bt.copy(t).clamp(u.min,u.max),bt.distanceToSquared(t)),intersectsBounds:(u,d,h)=>h<a&&h<o,intersectsTriangle:(u,d)=>{u.closestPointToPoint(t,bt);const h=t.distanceToSquared(bt);return h<a&&(hn.copy(bt),a=h,c=d),h<r}}),a===1/0)return null;const l=Math.sqrt(a);return n.point?n.point.copy(hn):n.point=hn.clone(),n.distance=l,n.faceIndex=c,n}getBoundingBox(t){return t.makeEmpty(),this._roots.forEach(i=>{we(0,new Float32Array(i),ls),t.union(ls)}),t}}const us=Z.prototype.raycast;Z.prototype.raycast=function(...e){if(e[0].isMesh){console.warn('MeshBVH: The function signature and results frame for "raycast" has changed. See docs for new signature.');const[t,n,i,s]=e;return us.call(this,i,t.material).forEach(o=>{o=cn(o,t,n),o&&s.push(o)}),s}else return us.apply(this,e)};const ds=Z.prototype.raycastFirst;Z.prototype.raycastFirst=function(...e){if(e[0].isMesh){console.warn('MeshBVH: The function signature and results frame for "raycastFirst" has changed. See docs for new signature.');const[t,n,i]=e;return cn(ds.call(this,i,t.material),t,n)}else return ds.apply(this,e)};const fs=Z.prototype.closestPointToPoint;Z.prototype.closestPointToPoint=function(...e){if(e[0].isMesh){console.warn('MeshBVH: The function signature and results frame for "closestPointToPoint" has changed. See docs for new signature.'),e.unshift();const t=e[1],n={};return e[1]=n,fs.apply(this,e),t&&t.copy(n.point),n.distance}else return fs.apply(this,e)};const hs=Z.prototype.closestPointToGeometry;Z.prototype.closestPointToGeometry=function(...e){const t=e[2],n=e[3];if(t&&t.isVector3||n&&n.isVector3){console.warn('MeshBVH: The function signature and results frame for "closestPointToGeometry" has changed. See docs for new signature.');const i={},s={},r=e[1];return e[2]=i,e[3]=s,hs.apply(this,e),t&&t.copy(i.point),n&&n.copy(s.point).applyMatrix4(r),i.distance}else return hs.apply(this,e)};const ps=Z.prototype.refit;Z.prototype.refit=function(...e){const t=e[0],n=e[1];if(n&&(n instanceof Set||Array.isArray(n))){console.warn('MeshBVH: The function signature for "refit" has changed. See docs for new signature.');const i=new Set;n.forEach(s=>i.add(s)),t&&t.forEach(s=>i.add(s)),ps.call(this,i)}else ps.apply(this,e)};["intersectsGeometry","shapecast","intersectsBox","intersectsSphere"].forEach(e=>{const t=Z.prototype[e];Z.prototype[e]=function(...n){return(n[0]===null||n[0].isMesh)&&(n.shift(),console.warn(`MeshBVH: The function signature for "${e}" has changed and no longer takes Mesh. See docs for new signature.`)),t.apply(this,n)}});const Qn=new br,ms=new Me,ea=Wi.prototype.raycast;function ta(e,t){if(this.geometry.boundsTree){if(this.material===void 0)return;ms.copy(this.matrixWorld).invert(),Qn.copy(e.ray).applyMatrix4(ms);const n=this.geometry.boundsTree;if(e.firstHitOnly===!0){const i=cn(n.raycastFirst(Qn,this.material),this,e);i&&t.push(i)}else{const i=n.raycast(Qn,this.material);for(let s=0,r=i.length;s<r;s++){const o=cn(i[s],this,e);o&&t.push(o)}}}else ea.call(this,e,t)}function na(e){return this.boundsTree=new Z(this,e),this.boundsTree}function ia(){this.boundsTree=null}const sa=H("SpawnPointComponent"),ra="Razer1",Jn=H("InputComponent");class oa{mass;damping;frameTime;offset;constructor(t,n,i){this.mass=n,this.damping=i,this.frameTime=1/t,this.offset=0}setFPS(t){this.frameTime=1/t}lastFrame(){return this.cache[this.cache.length-1]}generateFrames(t){const n=this.offset+t,i=Math.floor(n/this.frameTime);if(this.offset=n%this.frameTime,i>0){for(let s=0;s<i;s++)this.cache.push(this.getFrame(s+1===i));this.cache=this.cache.slice(-2)}}}class ys{position;velocity;constructor(t,n){this.position=t,this.velocity=n}}const aa=new P;class ca extends oa{position;velocity;target;cache;constructor(t,n,i){super(t,n,i);this.init()}init(){this.position=new P,this.velocity=new P,this.target=new P,this.cache=[];for(let t=0;t<2;t++)this.cache.push(new ys(new P,new P))}simulate(t){this.generateFrames(t),this.position.lerpVectors(this.cache[0].position,this.cache[1].position,this.offset/this.frameTime),this.velocity.lerpVectors(this.cache[0].velocity,this.cache[1].velocity,this.offset/this.frameTime)}getFrame(t){const n=new ys(this.lastFrame().position.clone(),this.lastFrame().velocity.clone()),i=aa.subVectors(this.target,n.position);return i.divideScalar(this.mass),n.velocity.add(i),n.velocity.multiplyScalar(this.damping),n.position.add(n.velocity),n}}const la={mode:ne.ThirdPerson,zoomLevel:3,zoomVelocity:{value:0},distance:3,minDistance:2,maxDistance:7,theta:Math.PI,phi:0,shoulderSide:!0,locked:!0,raycaster:new Lr},He=H("FollowCameraComponent"),pn=H("TargetCameraRotationComponent"),L={Started:"Started",Continued:"Continued",Ended:"Ended",Changed:"Changed",Unchanged:"Unchanged"};var Lt;(function(e){e[e.NONE=0]="NONE",e[e.LEFT=1]="LEFT",e[e.RIGHT=2]="RIGHT"})(Lt||(Lt={}));function ua(e,t,n){let i,s,r,o,a=0;n||(n={});const c=function(){a=n.leading===!1?0:Date.now(),i=null,o=e.apply(s,r),i||(s=r=null)},l=function(){const u=Date.now();!a&&n.leading===!1&&(a=u);const d=t-(u-a);return s=this,r=arguments,d<=0||d>t?(i&&(clearTimeout(i),i=null),a=u,o=e.apply(s,r),i||(s=r=null)):!i&&n.trailing!==!1&&(i=setTimeout(c,d)),o};return l.cancel=function(){clearTimeout(i),a=0,i=s=r=null},l}var v;(function(e){e[e.PRIMARY=0]="PRIMARY",e[e.SECONDARY=1]="SECONDARY",e[e.FORWARD=2]="FORWARD",e[e.BACKWARD=3]="BACKWARD",e[e.UP=4]="UP",e[e.DOWN=5]="DOWN",e[e.LEFT=6]="LEFT",e[e.RIGHT=7]="RIGHT",e[e.INTERACT=8]="INTERACT",e[e.GRAB_LEFT=9]="GRAB_LEFT",e[e.GRAB_RIGHT=10]="GRAB_RIGHT",e[e.CROUCH=11]="CROUCH",e[e.JUMP=12]="JUMP",e[e.WALK=13]="WALK",e[e.RUN=14]="RUN",e[e.SPRINT=15]="SPRINT",e[e.SNEAK=16]="SNEAK",e[e.SCREENXY=17]="SCREENXY",e[e.SCREENXY_START=18]="SCREENXY_START",e[e.ROTATION_START=19]="ROTATION_START",e[e.MOVEMENT_PLAYERONE=20]="MOVEMENT_PLAYERONE",e[e.LOOKTURN_PLAYERONE=21]="LOOKTURN_PLAYERONE",e[e.MOVEMENT_PLAYERTWO=22]="MOVEMENT_PLAYERTWO",e[e.LOOKTURN_PLAYERTWO=23]="LOOKTURN_PLAYERTWO",e[e.ALTERNATE=24]="ALTERNATE",e[e.MOUSE_MOVEMENT=25]="MOUSE_MOVEMENT",e[e.SWITCH_CAR=26]="SWITCH_CAR",e[e.POINTER_LOCK=27]="POINTER_LOCK",e[e.CAMERA_SCROLL=28]="CAMERA_SCROLL",e[e.CAMERA_ROTATE_RIGHT=29]="CAMERA_ROTATE_RIGHT",e[e.CAMERA_ROTATE_LEFT=30]="CAMERA_ROTATE_LEFT",e[e.SWITCH_CAMERA=31]="SWITCH_CAMERA",e[e.LOCKING_CAMERA=32]="LOCKING_CAMERA",e[e.POINTER1_POSITION=33]="POINTER1_POSITION",e[e.POINTER2_POSITION=34]="POINTER2_POSITION",e[e.GAMEPAD_STICK_LEFT=35]="GAMEPAD_STICK_LEFT",e[e.GAMEPAD_STICK_RIGHT=36]="GAMEPAD_STICK_RIGHT",e[e.XR_AXIS_MOVE=37]="XR_AXIS_MOVE",e[e.XR_AXIS_LOOK=38]="XR_AXIS_LOOK",e[e.XR_HEAD=39]="XR_HEAD",e[e.XR_CONTROLLER_LEFT_HAND=40]="XR_CONTROLLER_LEFT_HAND",e[e.XR_CONTROLLER_RIGHT_HAND=41]="XR_CONTROLLER_RIGHT_HAND",e[e.SWITCH_SHOULDER_SIDE=42]="SWITCH_SHOULDER_SIDE"})(v||(v={}));var U;(function(e){e[e.LeftButton=0]="LeftButton",e[e.MiddleButton=1]="MiddleButton",e[e.RightButton=2]="RightButton",e[e.MousePosition=3]="MousePosition",e[e.MouseClickDownPosition=4]="MouseClickDownPosition",e[e.MouseClickDownTransformRotation=5]="MouseClickDownTransformRotation",e[e.MouseMovement=6]="MouseMovement",e[e.MouseScroll=7]="MouseScroll",e[e.MouseClickDownMovement=8]="MouseClickDownMovement"})(U||(U={}));var G;(function(e){e[e.Touch=10]="Touch",e[e.DoubleTouch=11]="DoubleTouch",e[e.LongTouch=12]="LongTouch",e[e.Touch1Position=13]="Touch1Position",e[e.Touch2Position=14]="Touch2Position",e[e.Touch1Movement=15]="Touch1Movement",e[e.Touch2Movement=16]="Touch2Movement",e[e.SwipeLeft=17]="SwipeLeft",e[e.SwipeRight=18]="SwipeRight",e[e.SwipeUp=19]="SwipeUp",e[e.SwipeDown=20]="SwipeDown",e[e.Scale=21]="Scale"})(G||(G={}));var ht;(function(e){e[e.Left=22]="Left",e[e.Right=23]="Right"})(ht||(ht={}));var Dt;(function(e){e[e.HMD=24]="HMD",e[e.LeftHand=25]="LeftHand",e[e.RightHand=26]="RightHand"})(Dt||(Dt={}));var je;(function(e){e[e.Left=28]="Left",e[e.Right=29]="Right"})(je||(je={}));var W;(function(e){e[e.A=30]="A",e[e.B=31]="B",e[e.X=32]="X",e[e.Y=33]="Y",e[e.LBumper=34]="LBumper",e[e.RBumper=35]="RBumper",e[e.LTrigger=36]="LTrigger",e[e.RTrigger=37]="RTrigger",e[e.Back=38]="Back",e[e.Start=39]="Start",e[e.LPad=40]="LPad",e[e.RPad=41]="RPad",e[e.LStick=42]="LStick",e[e.RStick=43]="RStick",e[e.DPad1=44]="DPad1",e[e.DPad2=45]="DPad2",e[e.DPad3=46]="DPad3",e[e.DPad4=47]="DPad4"})(W||(W={}));var j;(function(e){e[e.Neutral=100]="Neutral",e[e.Angry=101]="Angry",e[e.Disgusted=102]="Disgusted",e[e.Fearful=103]="Fearful",e[e.Happy=104]="Happy",e[e.Surprised=105]="Surprised",e[e.Sad=106]="Sad",e[e.Pucker=107]="Pucker",e[e.Widen=108]="Widen",e[e.Open=109]="Open"})(j||(j={}));var N;(function(e){e[e.BUTTON=0]="BUTTON",e[e.ONEDIM=1]="ONEDIM",e[e.TWODIM=2]="TWODIM",e[e.THREEDIM=3]="THREEDIM",e[e.SIXDOF=4]="SIXDOF"})(N||(N={}));const da=H("InteractedComponent"),Ss=H("InteractorComponent"),ce=H("Object3DComponent");var gs;(function(e){e[e.HEAD=0]="HEAD",e[e.CONTROLLER=1]="CONTROLLER"})(gs||(gs={}));var mn;(function(e){e[e.ANGLED=0]="ANGLED",e[e.SMOOTH=1]="SMOOTH"})(mn||(mn={}));const Zn={invertRotationAndMoveSticks:!0,moving:1,rotation:0,rotationSmoothSpeed:.1,rotationAngle:30,rotationInvertAxes:!0},ye=H("AvatarControllerComponent"),Ct=(e,t)=>{D(e,ce).value.traverse(i=>{const s=i.material;s&&(t?(s.opacity=1,s.transparent=!1):(s.opacity=0,s.transparent=!0))})};let yn;const Sn=(e,t={pointerLock:!1,cameraMode:ne.ThirdPerson},n=!1)=>{if(!n){if(yn!==void 0)return;yn=setTimeout(()=>{clearTimeout(yn),yn=void 0},250)}const i=D(e,He);switch(i.mode=t.cameraMode,t.cameraMode){case ne.FirstPerson:i.phi=0,i.locked=!0,Ct(e,!1);break;case ne.ShoulderCam:Ct(e,!0);break;default:case ne.ThirdPerson:Ct(e,!0);break;case ne.TopDown:Ct(e,!0);break;case ne.Strategic:Ct(e,!0);break}},fa=e=>{switch(e){case v.GRAB_LEFT:return Lt.LEFT;case v.GRAB_RIGHT:return Lt.RIGHT;default:return Lt.NONE}},ei=(e,t,n,i)=>{if(n.lifecycleState!==L.Started)return;const s=fa(t),r=D(e,Ss);!r?.focusedInteractive||$(r.focusedInteractive,da,{interactor:e,parity:s})},ha=(e,t,n,i)=>{if(n.lifecycleState!==L.Started)return;const s=D(e,He);switch(s?.mode){case ne.FirstPerson:Sn(e,{cameraMode:ne.ShoulderCam});break;case ne.ShoulderCam:Sn(e,{cameraMode:ne.ThirdPerson}),s.distance=s.minDistance+1;break;case ne.ThirdPerson:Sn(e,{cameraMode:ne.TopDown});break;case ne.TopDown:Sn(e,{cameraMode:ne.FirstPerson});break}},pa=(e,t,n,i)=>{if(n.lifecycleState!==L.Started)return;const s=D(e,He);s&&s.mode!==ne.FirstPerson&&(s.locked=!s.locked)},ma=(e,t,n,i)=>{if(n.lifecycleState!==L.Started)return;const s=D(e,He);s&&(s.shoulderSide=!s.shoulderSide)},ti=(e,t,n)=>{const i=D(e,pn);i?(i.phi=t,i.theta=n):$(e,pn,{phi:t,phiVelocity:{value:0},theta:n,thetaVelocity:{value:0},time:.3})};let Es=0;const ya=(e,t,n,i)=>{const s=n.value[0],r=Math.sign(s-Es);if(Es=s,r===0)return;const o=D(e,He);if(!o)return;const a=.001,c=Qr(o.zoomLevel+r,a,o.maxDistance);if(o.zoomLevel<=a&&r>0){o.zoomLevel=o.minDistance;return}if(c<o.minDistance){o.zoomLevel=a,ti(e,0,o.theta);return}Math.abs(o.maxDistance-c)<=1&&r>0&&ti(e,85,o.theta),Math.abs(o.maxDistance-o.zoomLevel)<=1&&r<0&&o.phi>=80&&ti(e,45,o.theta),o.zoomLevel=c},_s=(e,t,n,i)=>{const s=D(e,He);switch(t){case v.CAMERA_ROTATE_LEFT:s.theta+=50*i;break;case v.CAMERA_ROTATE_RIGHT:s.theta-=50*i;break}},Sa={[j.Neutral]:"None",[j.Angry]:"Frown",[j.Disgusted]:"Frown",[j.Fearful]:"Frown",[j.Happy]:"Smile",[j.Surprised]:"Frown",[j.Sad]:"Frown",[j.Pucker]:"None",[j.Widen]:"Frown",[j.Open]:"Happy"},Ps=(e,t,n,i)=>{const s=D(e,ce);let r;if(s.value.traverse(l=>{!r&&l.morphTargetDictionary&&(r=l)}),!r?.isMesh||!r?.morphTargetDictionary){console.warn("[Avatar Emotions]: This avatar does not support expressive visemes.");return}const o=n.value,a=Sa[t],c=r.morphTargetDictionary[a];if(typeof c!="number"){console.warn("[Avatar Emotions]: This avatar does not support the",a," expression.");return}a&&o!==null&&typeof o=="number"&&(r.morphTargetInfluences[c]=o)},ga=(e,t,n,i)=>{const s=D(e,ye);n.type===N.TWODIM?(s.localMovementDirection.z=n.value[0],s.localMovementDirection.x=n.value[1]):n.type===N.THREEDIM&&(s.localMovementDirection.z=n.value[2],s.localMovementDirection.x=n.value[0])},Ea=(e,t,n,i)=>{const s=D(e,ye);s.isWalking=n.lifecycleState!==L.Ended},It=(e,t,n,i)=>{const s=D(e,ye),r=n.lifecycleState===L.Ended;switch(t){case v.JUMP:s.localMovementDirection.y=r?0:1;break;case v.FORWARD:s.localMovementDirection.z=r?0:1;break;case v.BACKWARD:s.localMovementDirection.z=r?0:-1;break;case v.LEFT:s.localMovementDirection.x=r?0:1;break;case v.RIGHT:s.localMovementDirection.x=r?0:-1;break}s.localMovementDirection.normalize()},_a=(e,t,n,i)=>{const s=D(e,ye),r=n.value;s.localMovementDirection.x=r[0]??s.localMovementDirection.x,s.localMovementDirection.z=r[1]??s.localMovementDirection.z,s.localMovementDirection.normalize()};let pt=!0;const Pa=Math.PI/180,ws=new Y,wa=new P(0,1,0),va=(e,t,n,i)=>{const s=n.value,r=Zn.rotationAngle;let o=0;switch(Zn.rotation){case mn.ANGLED:if(pt&&s[0]!=0){const c=-1,l=1;o=s[0]>0?r*c:r*l,pt=!1}else!pt&&s[0]==0?pt=!0:pt?pt&&s[0]==0&&(o=0):o=0;break;case mn.SMOOTH:o=s[0]*Zn.rotationSmoothSpeed*-1;break}const a=D(e,Pe);ws.setFromAxisAngle(wa,o*Pa),a.rotation.multiply(ws)},Ta=(e,t,n,i)=>{const s=D(e,He);Qe(e,pn)&&Gr(e,pn),s&&(s.theta-=n.value[0]*100,s.phi-=n.value[1]*100)},vs=e=>{const t=D(e,Jn),n=t.data.get(v.GAMEPAD_STICK_RIGHT);console.log("gamepadLook",n),n.type===N.TWODIM?t.data.set(v.LOOKTURN_PLAYERONE,{type:n.type,value:[n.value[0],n.value[1]],lifecycleState:L.Changed}):n.type===N.THREEDIM&&t.data.set(v.LOOKTURN_PLAYERONE,{type:n.type,value:[n.value[0],n.value[2]],lifecycleState:L.Changed})},Aa=(e,t,n)=>{if(n.lifecycleState!==L.Ended)return;D(e,Jn).data.get(v.SCREENXY)?.value},Oa=()=>{const e=new Map;return e.set(U.LeftButton,v.PRIMARY),e.set(U.RightButton,v.SECONDARY),e.set(U.MiddleButton,v.INTERACT),e.set(U.MouseMovement,v.MOUSE_MOVEMENT),e.set(U.MousePosition,v.SCREENXY),e.set(U.MouseClickDownPosition,v.SCREENXY_START),e.set(U.MouseClickDownTransformRotation,v.ROTATION_START),e.set(U.MouseClickDownMovement,v.LOOKTURN_PLAYERONE),e.set(U.MouseScroll,v.CAMERA_SCROLL),e.set(G.Touch,v.INTERACT),e.set(G.Touch1Position,v.SCREENXY),e.set(G.Touch1Movement,v.LOOKTURN_PLAYERONE),e.set(G.Scale,v.CAMERA_SCROLL),e.set(W.A,v.INTERACT),e.set(W.B,v.JUMP),e.set(W.LTrigger,v.GRAB_LEFT),e.set(W.RTrigger,v.GRAB_RIGHT),e.set(W.DPad1,v.FORWARD),e.set(W.DPad2,v.BACKWARD),e.set(W.DPad3,v.LEFT),e.set(W.DPad4,v.RIGHT),e.set(je.Left,v.MOVEMENT_PLAYERONE),e.set(je.Right,v.GAMEPAD_STICK_RIGHT),e.set(ht.Left,v.XR_AXIS_LOOK),e.set(ht.Right,v.XR_AXIS_MOVE),e.set(Dt.HMD,v.XR_HEAD),e.set(Dt.LeftHand,v.XR_CONTROLLER_LEFT_HAND),e.set(Dt.RightHand,v.XR_CONTROLLER_RIGHT_HAND),e.set("KeyW",v.FORWARD),e.set("ArrowUp",v.FORWARD),e.set("KeyA",v.LEFT),e.set("KeyS",v.BACKWARD),e.set("ArrowDown",v.BACKWARD),e.set("KeyD",v.RIGHT),e.set("KeyE",v.INTERACT),e.set("Space",v.JUMP),e.set("ShiftLeft",v.WALK),e.set("KeyP",v.POINTER_LOCK),e.set("KepV",v.SWITCH_CAMERA),e.set("KeyC",v.SWITCH_SHOULDER_SIDE),e.set("KeyF",v.LOCKING_CAMERA),e.set("ArrowLeft",v.CAMERA_ROTATE_LEFT),e.set("ArrowRight",v.CAMERA_ROTATE_RIGHT),e.set(j.Neutral,j.Neutral),e.set(j.Angry,j.Angry),e.set(j.Disgusted,j.Disgusted),e.set(j.Fearful,j.Fearful),e.set(j.Happy,j.Happy),e.set(j.Surprised,j.Surprised),e.set(j.Sad,j.Sad),e.set(j.Pucker,j.Pucker),e.set(j.Widen,j.Widen),e.set(j.Open,j.Open),e},Ra=()=>{const e=new Map;return e.set(v.INTERACT,ei),e.set(v.GRAB_LEFT,ei),e.set(v.GRAB_RIGHT,ei),e.set(v.JUMP,It),e.set(v.WALK,Ea),e.set(v.FORWARD,It),e.set(v.BACKWARD,It),e.set(v.LEFT,It),e.set(v.RIGHT,It),e.set(v.CAMERA_ROTATE_LEFT,_s),e.set(v.CAMERA_ROTATE_RIGHT,_s),e.set(j.Happy,Ps),e.set(j.Sad,Ps),e.set(v.LOOKTURN_PLAYERONE,Ta),e.set(v.MOVEMENT_PLAYERONE,ga),e.set(v.GAMEPAD_STICK_LEFT,vs),e.set(v.GAMEPAD_STICK_RIGHT,vs),e.set(v.XR_AXIS_LOOK,va),e.set(v.XR_AXIS_MOVE,_a),e.set(v.SWITCH_CAMERA,ha),e.set(v.LOCKING_CAMERA,pa),e.set(v.SWITCH_SHOULDER_SIDE,ma),e.set(v.CAMERA_SCROLL,ua(ya,30,{leading:!0,trailing:!1})),e.set(v.PRIMARY,Aa),e},Ts={inputMap:Oa(),behaviorMap:Ra()},ni=H("VelocityComponent");var de;(function(e){e[e.None=0]="None",e[e.Default=1]="Default",e[e.Avatars=2]="Avatars",e[e.Car=4]="Car",e[e.Trigger=8]="Trigger",e[e.Ground=16]="Ground"})(de||(de={}));const ba=H("ColliderComponent"),As=H("RaycastComponent");var Os={},Se={},ee={};Object.defineProperty(ee,"__esModule",{value:!0});ee.booleanOnParse=ee.empty=ee.isString=ee.isNumber=ee.isFunctionTest=ee.isObject=void 0;const La=e=>typeof e=="object"&&e!=null;ee.isObject=La;const Da=e=>typeof e=="function";ee.isFunctionTest=Da;const Ca=e=>typeof e=="number";ee.isNumber=Ca;const Ia=e=>typeof e=="string";ee.isString=Ia;ee.empty=[];ee.booleanOnParse={parsed(e){return!0},invalid(e){return!1}};var Mt={};Object.defineProperty(Mt,"__esModule",{value:!0});Mt.GuardParser=void 0;class Ma{constructor(t,n,i={name:"Guard",children:[],extras:[n]}){this.checkIsA=t,this.typeName=n,this.description=i}parse(t,n){return this.checkIsA(t)?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}Mt.GuardParser=Ma;var Nt={},mt={};Object.defineProperty(mt,"__esModule",{value:!0});mt.saferStringify=void 0;function Na(e){try{return JSON.stringify(e)}catch(t){return""+e}}mt.saferStringify=Na;var xt={};Object.defineProperty(xt,"__esModule",{value:!0});xt.AnyParser=void 0;class xa{constructor(t={name:"Any",children:[],extras:[]}){this.description=t}parse(t,n){return n.parsed(t)}}xt.AnyParser=xa;var Ft={};Object.defineProperty(Ft,"__esModule",{value:!0});Ft.ArrayParser=void 0;class Fa{constructor(t={name:"Array",children:[],extras:[]}){this.description=t}parse(t,n){return Array.isArray(t)?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}Ft.ArrayParser=Fa;var kt={};Object.defineProperty(kt,"__esModule",{value:!0});kt.BoolParser=void 0;class ka{constructor(t={name:"Boolean",children:[],extras:[]}){this.description=t}parse(t,n){return t===!0||t===!1?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}kt.BoolParser=ka;var gn={};Object.defineProperty(gn,"__esModule",{value:!0});gn.ConcatParsers=void 0;class ii{constructor(t,n,i={name:"Concat",children:[t,n],extras:[]}){this.parent=t,this.otherParser=n,this.description=i}static of(t,n){return t.unwrappedParser().description.name==="Any"?n:n.unwrappedParser().description.name==="Any"?t:new ii(t,n)}parse(t,n){const i=this.parent.enumParsed(t);if("error"in i)return n.invalid(i.error);const s=this.otherParser.enumParsed(i.value);return"error"in s?n.invalid(s.error):n.parsed(s.value)}}gn.ConcatParsers=ii;var En={};Object.defineProperty(En,"__esModule",{value:!0});En.DefaultParser=void 0;class Ua{constructor(t,n,i={name:"Default",children:[t],extras:[n]}){this.parent=t,this.defaultValue=n,this.description=i}parse(t,n){const i=this,s=this.defaultValue;if(t==null)return n.parsed(s);const r=this.parent.enumParsed(t);return"error"in r?(r.error.parser=i,n.invalid(r.error)):n.parsed(r.value)}}En.DefaultParser=Ua;var Ut={};Object.defineProperty(Ut,"__esModule",{value:!0});Ut.FunctionParser=void 0;const Wa=ee;class Ba{constructor(t={name:"Function",children:[],extras:[]}){this.description=t}parse(t,n){return(0,Wa.isFunctionTest)(t)?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}Ut.FunctionParser=Ba;var _n={};Object.defineProperty(_n,"__esModule",{value:!0});_n.MappedAParser=void 0;class Ha{constructor(t,n,i=n.name,s={name:"Mapped",children:[t],extras:[i]}){this.parent=t,this.map=n,this.mappingName=i,this.description=s}parse(t,n){const i=this.map,s=this.parent.enumParsed(t);return"error"in s?n.invalid(s.error):n.parsed(i(s.value))}}_n.MappedAParser=Ha;var Pn={};Object.defineProperty(Pn,"__esModule",{value:!0});Pn.MaybeParser=void 0;class ja{constructor(t,n={name:"Maybe",children:[t],extras:[]}){this.parent=t,this.description=n}parse(t,n){if(t==null)return n.parsed(null);const i=this,s=this.parent.enumParsed(t);if("error"in s){const{error:r}=s;return r.parser=i,n.invalid(r)}return n.parsed(s.value)}}Pn.MaybeParser=ja;var et={};Object.defineProperty(et,"__esModule",{value:!0});et.parserName=et.NamedParser=void 0;const Va=Se;class Rs{constructor(t,n,i={name:"Named",children:[t],extras:[n]}){this.parent=t,this.name=n,this.description=i}parse(t,n){const i=this,s=this.parent.enumParsed(t);if("error"in s){const{error:r}=s;return r.parser=i,n.invalid(r)}return n.parsed(s.value)}}et.NamedParser=Rs;function Xa(e,t){return new Va.Parser(new Rs(t,e))}et.parserName=Xa;var Wt={};Object.defineProperty(Wt,"__esModule",{value:!0});Wt.NilParser=void 0;class Ga{constructor(t={name:"Null",children:[],extras:[]}){this.description=t}parse(t,n){return t==null?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}Wt.NilParser=Ga;var Bt={};Object.defineProperty(Bt,"__esModule",{value:!0});Bt.NumberParser=void 0;const za=Se;class $a{constructor(t={name:"Number",children:[],extras:[]}){this.description=t}parse(t,n){return(0,za.isNumber)(t)?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}Bt.NumberParser=$a;var Ht={};Object.defineProperty(Ht,"__esModule",{value:!0});Ht.ObjectParser=void 0;const Ka=ee;class Ya{constructor(t={name:"Object",children:[],extras:[]}){this.description=t}parse(t,n){return(0,Ka.isObject)(t)?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}Ht.ObjectParser=Ya;var wn={};Object.defineProperty(wn,"__esModule",{value:!0});wn.OrParsers=void 0;class qa{constructor(t,n,i={name:"Or",children:[t,n],extras:[]}){this.parent=t,this.otherParser=n,this.description=i}parse(t,n){const i=this,s=this.parent.enumParsed(t);if("value"in s)return n.parsed(s.value);const r=this.otherParser.enumParsed(t);if("error"in r){const{error:o}=r;return o.parser=i,n.invalid(o)}return n.parsed(r.value)}}wn.OrParsers=qa;var si={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.shape=e.isShape=e.partial=e.isPartial=e.ShapeParser=void 0;const t=Se,n=mt;class i{constructor(c,l,u=Object.keys(c),d={name:l?"Partial":"Shape",children:u.map(h=>c[h]),extras:u}){this.parserMap=c,this.isPartial=l,this.parserKeys=u,this.description=d}parse(c,l){const u=this;if(!t.object.test(c))return l.invalid({value:c,keys:[],parser:u});const{parserMap:d,isPartial:h}=this,p=Object.assign({},c);Array.isArray(c)&&(p.length=c.length);for(const m in d)if(m in p){const S=d[m].enumParsed(c[m]);if("error"in S){const{error:E}=S;return E.keys.push((0,n.saferStringify)(m)),l.invalid(E)}const _=S.value;p[m]=_}else if(!h)return l.invalid({value:"missingProperty",parser:u,keys:[(0,n.saferStringify)(m)]});return l.parsed(p)}}e.ShapeParser=i;const s=a=>new t.Parser(new i(a,!0));e.isPartial=s,e.partial=e.isPartial;const r=a=>new t.Parser(new i(a,!1));e.isShape=r;const o=a=>(0,e.isShape)(a);e.shape=o})(si);var jt={};Object.defineProperty(jt,"__esModule",{value:!0});jt.StringParser=void 0;const Qa=ee;class Ja{constructor(t={name:"String",children:[],extras:[]}){this.description=t}parse(t,n){return(0,Qa.isString)(t)?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}jt.StringParser=Ja;Object.defineProperty(Nt,"__esModule",{value:!0});Nt.Parser=void 0;const ri=Se,vn=mt,Za=xt,ec=Ft,tc=kt,oi=gn,nc=En,ic=Ut,sc=Mt,rc=_n,bs=Pn,oc=et,ac=Wt,cc=Bt,lc=Ht,ai=wn,uc=si,dc=jt,fc=ee;function ci(e){return e instanceof z?ci(e.parser):e}const hc={parsed(e){return{value:e}},invalid(e){return{error:e}}};class z{constructor(t,n={name:"Wrapper",children:[t],extras:[]}){this.parser=t,this.description=n,this._TYPE=null,this.test=i=>this.parse(i,fc.booleanOnParse)}parse(t,n){return this.parser.parse(t,n)}static isA(t,n){return new z(new ri.IsAParser(t,n))}static parserAsString(t){const n=ci(t),{description:{name:i,extras:s,children:r}}=n;if(n instanceof uc.ShapeParser)return`${i}<{${n.description.children.map((c,l)=>`${String(n.description.extras[l])||"?"}:${z.parserAsString(c)}`).join(",")}}>`;if(n instanceof ai.OrParsers){const c=ci(n.parent),l=z.parserAsString(c);return c instanceof ai.OrParsers?l:`${i}<${l},...>`}if(n instanceof sc.GuardParser)return String(s[0]||i);if(n instanceof dc.StringParser||n instanceof lc.ObjectParser||n instanceof cc.NumberParser||n instanceof tc.BoolParser||n instanceof Za.AnyParser)return i.toLowerCase();if(n instanceof ic.FunctionParser)return i;if(n instanceof ac.NilParser)return"null";if(n instanceof ec.ArrayParser)return"Array<unknown>";const a=`<${[...s.map(vn.saferStringify),...r.map(z.parserAsString)].join(",")}>`;return r.length,`${i}${a}`}unsafeCast(t){const n=this.enumParsed(t);if("value"in n)return n.value;const{error:i}=n;throw new TypeError(`Failed type: ${z.validatorErrorAsString(i)} given input ${(0,vn.saferStringify)(t)}`)}castPromise(t){const n=this.enumParsed(t);if("value"in n)return Promise.resolve(n.value);const{error:i}=n;return Promise.reject(new TypeError(`Failed type: ${z.validatorErrorAsString(i)} given input ${(0,vn.saferStringify)(t)}`))}map(t,n){return new z(new rc.MappedAParser(this,t,n))}concat(t){return new z(oi.ConcatParsers.of(this,new z(t)))}orParser(t){return new z(new ai.OrParsers(this,new z(t)))}optional(t){return new z(new bs.MaybeParser(this))}defaultTo(t){return new z(new nc.DefaultParser(new z(new bs.MaybeParser(this)),t))}validate(t,n){return new z(oi.ConcatParsers.of(this,new z(new ri.IsAParser(t,n))))}refine(t,n=t.name){return new z(oi.ConcatParsers.of(this,new z(new ri.IsAParser(t,n))))}name(t){return(0,oc.parserName)(t,this)}enumParsed(t){return this.parse(t,hc)}unwrappedParser(){let t=this;for(;;){const n=t.parser;if(n instanceof z)t=n;else return n}}}Nt.Parser=z;z.validatorErrorAsString=e=>{const{parser:t,value:n,keys:i}=e;return`${i.length?i.map(r=>`[${r}]`).reverse().join(""):""}${z.parserAsString(t)}(${(0,vn.saferStringify)(n)})`};var Tn={},An={};Object.defineProperty(An,"__esModule",{value:!0});An.UnknownParser=void 0;class pc{constructor(t={name:"Unknown",children:[],extras:[]}){this.description=t}parse(t,n){return n.parsed(t)}}An.UnknownParser=pc;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.regex=e.instanceOf=e.string=e.isArray=e.object=e.boolean=e.isFunction=e.natural=e.isNill=e.number=e.unknown=e.any=e.guard=void 0;const t=Se,n=xt,i=Ft,s=kt,r=Ut,o=Wt,a=Bt,c=Ht,l=jt,u=An;function d(m,y){return t.Parser.isA(m,y||m.name)}e.guard=d,e.any=new t.Parser(new n.AnyParser),e.unknown=new t.Parser(new u.UnknownParser),e.number=new t.Parser(new a.NumberParser),e.isNill=new t.Parser(new o.NilParser),e.natural=e.number.refine(m=>m>=0&&m===Math.floor(m)),e.isFunction=new t.Parser(new r.FunctionParser),e.boolean=new t.Parser(new s.BoolParser),e.object=new t.Parser(new c.ObjectParser),e.isArray=new t.Parser(new i.ArrayParser),e.string=new t.Parser(new l.StringParser);const h=m=>d(y=>y instanceof m,`is${m.name}`);e.instanceOf=h;const p=m=>e.string.refine(function(y){return m.test(y)},m.toString());e.regex=p})(Tn);var On={};Object.defineProperty(On,"__esModule",{value:!0});On.some=void 0;const mc=Tn;function yc(...e){if(e.length<=0)return mc.any;const t=e.splice(0,1)[0];return e.reduce((n,i)=>n.orParser(i),t)}On.some=yc;var Rn={};Object.defineProperty(Rn,"__esModule",{value:!0});Rn.every=void 0;const Ls=Se;function Sc(...e){const t=e.filter(i=>i!==Ls.any);if(t.length<=0)return Ls.any;const n=t.splice(0,1)[0];return t.reduce((i,s)=>i.concat(s),n)}Rn.every=Sc;var yt={};Object.defineProperty(yt,"__esModule",{value:!0});yt.dictionary=yt.DictionaryParser=void 0;const gc=Se;class Ds{constructor(t,n={name:"Dictionary",children:t.reduce((i,[s,r])=>(i.push(s,r),i),[]),extras:[]}){this.parsers=t,this.description=n}parse(t,n){const{parsers:i}=this,s=this,r=Object.assign({},t);e:for(const o in t){let a=[];for(const[l,u]of i){const d=l.enumParsed(o);if("error"in d){const{error:m}=d;m.parser=s,m.keys.push(""+o),a.push(m);continue}const h=d.value,p=u.enumParsed(t[o]);if("error"in p){const{error:m}=p;m.keys.push(""+h),a.unshift(m);continue}delete r[o],r[h]=p.value;break e}const c=a[0];if(c)return n.invalid(c)}return n.parsed(r)}}yt.DictionaryParser=Ds;const Ec=(...e)=>gc.object.concat(new Ds([...e]));yt.dictionary=Ec;var St={};Object.defineProperty(St,"__esModule",{value:!0});St.tuple=St.TupleParser=void 0;const li=Se,Cs=mt;class Is{constructor(t,n=(0,li.literal)(t.length),i={name:"Tuple",children:t,extras:[]}){this.parsers=t,this.lengthMatcher=n,this.description=i}parse(t,n){const i=li.isArray.enumParsed(t);if("error"in i)return n.invalid(i.error);const s=t,r=this.lengthMatcher.enumParsed(s.length);if("error"in r)return r.error.keys.push((0,Cs.saferStringify)("length")),n.invalid(r.error);const o=new Array(this.parsers.length);for(const a in this.parsers){const c=this.parsers[a],l=s[a],u=c.enumParsed(l);if("error"in u){const{error:d}=u;return d.keys.push((0,Cs.saferStringify)(a)),n.invalid(d)}o[a]=u.value}return n.parsed(o)}}St.TupleParser=Is;function _c(...e){return new li.Parser(new Is(e))}St.tuple=_c;var gt={};Object.defineProperty(gt,"__esModule",{value:!0});gt.arrayOf=gt.ArrayOfParser=void 0;const Pc=Se;class Ms{constructor(t,n={name:"ArrayOf",children:[t],extras:[]}){this.parser=t,this.description=n}parse(t,n){const i=[...t];for(let s=0;s<i.length;s++){const r=this.parser.enumParsed(i[s]);if("error"in r)return r.error.keys.push(""+s),n.invalid(r.error);i[s]=r.value}return n.parsed(i)}}gt.ArrayOfParser=Ms;function wc(e){return Pc.isArray.concat(new Ms(e))}gt.arrayOf=wc;var Ve={};Object.defineProperty(Ve,"__esModule",{value:!0});Ve.literals=Ve.literal=Ve.LiteralsParser=void 0;const Ns=Nt;class ui{constructor(t,n={name:"Literal",children:[],extras:t}){this.values=t,this.description=n}parse(t,n){return this.values.indexOf(t)>=0?n.parsed(t):n.invalid({value:t,keys:[],parser:this})}}Ve.LiteralsParser=ui;function vc(e){return new Ns.Parser(new ui([e]))}Ve.literal=vc;function Tc(e,...t){return new Ns.Parser(new ui([e,...t]))}Ve.literals=Tc;(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.shape=e.tuple=e.partial=e.dictionary=e.some=e.every=e.isNill=e.natural=e.arrayOf=e.regex=e.object=e.number=e.boolean=e.isFunction=e.string=e.isNumber=e.isArray=e.instanceOf=e.literals=e.any=e.guard=e.literal=e.Parser=e.IsAParser=void 0;const t=ee;Object.defineProperty(e,"isNumber",{enumerable:!0,get:function(){return t.isNumber}});const n=Mt;Object.defineProperty(e,"IsAParser",{enumerable:!0,get:function(){return n.GuardParser}});const i=Nt;Object.defineProperty(e,"Parser",{enumerable:!0,get:function(){return i.Parser}});const s=Tn;Object.defineProperty(e,"guard",{enumerable:!0,get:function(){return s.guard}}),Object.defineProperty(e,"any",{enumerable:!0,get:function(){return s.any}}),Object.defineProperty(e,"string",{enumerable:!0,get:function(){return s.string}}),Object.defineProperty(e,"isFunction",{enumerable:!0,get:function(){return s.isFunction}}),Object.defineProperty(e,"boolean",{enumerable:!0,get:function(){return s.boolean}}),Object.defineProperty(e,"object",{enumerable:!0,get:function(){return s.object}}),Object.defineProperty(e,"isArray",{enumerable:!0,get:function(){return s.isArray}}),Object.defineProperty(e,"instanceOf",{enumerable:!0,get:function(){return s.instanceOf}}),Object.defineProperty(e,"number",{enumerable:!0,get:function(){return s.number}}),Object.defineProperty(e,"regex",{enumerable:!0,get:function(){return s.regex}}),Object.defineProperty(e,"isNill",{enumerable:!0,get:function(){return s.isNill}}),Object.defineProperty(e,"natural",{enumerable:!0,get:function(){return s.natural}});const r=On;Object.defineProperty(e,"some",{enumerable:!0,get:function(){return r.some}});const o=Rn;Object.defineProperty(e,"every",{enumerable:!0,get:function(){return o.every}});const a=yt;Object.defineProperty(e,"dictionary",{enumerable:!0,get:function(){return a.dictionary}});const c=si;Object.defineProperty(e,"partial",{enumerable:!0,get:function(){return c.partial}}),Object.defineProperty(e,"shape",{enumerable:!0,get:function(){return c.shape}});const l=St;Object.defineProperty(e,"tuple",{enumerable:!0,get:function(){return l.tuple}});const u=gt;Object.defineProperty(e,"arrayOf",{enumerable:!0,get:function(){return u.arrayOf}});const d=Ve;Object.defineProperty(e,"literal",{enumerable:!0,get:function(){return d.literal}}),Object.defineProperty(e,"literals",{enumerable:!0,get:function(){return d.literals}})})(Se);(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.matches=e.Validator=void 0;const t=Se;Object.defineProperty(e,"Validator",{enumerable:!0,get:function(){return t.Parser}});const n=et,i=Tn;class s{constructor(a){this.value=a}when(...a){return this}defaultTo(a){return this.value}defaultToLazy(a){return this.value}unwrap(){return this.value}}class r{constructor(a){this.a=a}when(...a){const[c,...l]=a.reverse(),u=this,h=e.matches.some(...l.map(m=>m instanceof t.Parser?m:(0,t.literal)(m))).enumParsed(this.a);if("error"in h)return u;const{value:p}=h;return c instanceof Function?new s(c(p)):new s(c)}defaultTo(a){return a}defaultToLazy(a){return a()}unwrap(){throw new Error("Expecting that value is matched")}}e.matches=Object.assign(function(a){return new r(a)},{array:t.isArray,arrayOf:t.arrayOf,some:t.some,tuple:t.tuple,regex:t.regex,number:t.number,natural:t.natural,isFunction:t.isFunction,object:t.object,string:t.string,shape:t.shape,partial:t.partial,literal:t.literal,every:t.every,guard:t.guard,unknown:i.unknown,any:t.any,boolean:t.boolean,dictionary:t.dictionary,literals:t.literals,nill:t.isNill,instanceOf:t.instanceOf,Parse:t.Parser,parserName:n.parserName}),e.default=e.matches})(Os);var F=yr(Os);function Re(e,t){const n=Object.entries(e),i=n.filter(([h,p])=>typeof p=="object"&&"callback"in p),s=Object.fromEntries(i.map(([h,p])=>[h,p.matches])),r=n.filter(([h,p])=>typeof p!="object"),o=Object.fromEntries(r.map(([h,p])=>[h,F.literal(p)])),a=Object.assign({},e,o,s),c=Object.fromEntries(Object.entries(a).map(([h])=>[h,null])),l=h=>{const p=Object.fromEntries(i.map(([m,y])=>[m,h[m]??y.callback()]));return{...c,...h,...Object.fromEntries(r),...p}},u=F.shape(a);l.actionShape=e,l.resolvedActionShape=a,l.type=e.type,l.matches=F.every(u,Lc),l.matchesFromAny=u,l.matchesFromUser=h=>F.every(u,bc(h));const d=t?.extensions?.(u);return Object.assign(l,d),l}const Ac=F.shape({x:F.number,y:F.number,z:F.number}),Oc=F.some(F.shape({_x:F.number,_y:F.number,_z:F.number,_w:F.number}),F.shape({x:F.number,y:F.number,z:F.number,w:F.number})),xs=F.guard(e=>Ac.test(e)),Rc=F.guard(e=>Oc.test(e)),Vt=F.string,bn=F.number,bc=e=>F.shape({$from:F.literal(e)}),Lc=F.guard(e=>typeof e!="object"?!1:e&&"$from"in e?e.$from===ae().hostId:!1),Dc=(e,t)=>({matches:e,callback:t}),q={DEFAULT:"DEFAULT",IDLE:"IDLE",WALK:"WALK",RUN:"RUN",JUMP:"JUMP",INTERACTING:"INTERACTING",EMOTE:"EMOTE",LOOPABLE_EMOTE:"LOOPABLE_EMOTE"};F.some(...Object.keys(q).map(e=>F.literal(e)));const Q={JUMP:"jump",FALLING:"falling",LANDING_AFTER_FALL:"falling_to_land",ROLLING_AFTER_FALL:"falling_to_roll",IDLE:"idle",FALLING_LONG:"abcd",WALK_FORWARD:"walk_forward",WALK_BACKWARD:"walk_backward",WALK_STRAFE_RIGHT:"walk_right",WALK_STRAFE_LEFT:"walk_left",RUN_FORWARD:"run_forward",RUN_BACKWARD:"run_backward",RUN_STRAFE_RIGHT:"run_right",RUN_STRAFE_LEFT:"run_left",CLAP:"clapping",DANCING_1:"dance1",DANCING_2:"dance2",DANCING_3:"dance3",DANCING_4:"dance4",LAUGH:"laugh",WAVE:"wave",KISS:"kiss",DEFEAT:"defeat",PAUSE:"pause",CRY:"cry"},Cc=F.shape({velocity:xs,distanceFromGround:F.number});var fe;(function(e){e[e.STATIC=0]="STATIC",e[e.VELOCITY_BASED=1]="VELOCITY_BASED"})(fe||(fe={}));const Ic=F.partial({movement:Cc,resetAnimation:F.boolean,forceTransition:F.boolean});class Xe{name;type=fe.STATIC;nextStates=[];animations=[];timeElapsedSinceUpdate=0;pauseTransitionDuration;transitionDuration=1;autoTransitionTo;weightParams;syncActions;updateWeights;getTotalWeightsOfAnimations=()=>{let t=0;return this.animations.forEach(n=>t+=Number.isNaN(n.weight)?0:n.weight),t}}class Mc extends Xe{name=q.LOOPABLE_EMOTE;type=fe.STATIC;animations=[{name:Q.DANCING_1,weight:0,timeScale:1,loopType:oe},{name:Q.DANCING_2,weight:0,timeScale:1,loopType:oe},{name:Q.DANCING_3,weight:0,timeScale:1,loopType:oe},{name:Q.DANCING_4,weight:0,timeScale:1,loopType:oe}];updateWeights=()=>{!this.weightParams.animationName||(this.weightParams.interpolate=!0,this.timeElapsedSinceUpdate=0,this.animations.forEach(t=>{this.weightParams.animationName===t.name?(t.transitionStartWeight=t.weight,t.transitionEndWeight=1):(t.transitionStartWeight=t.weight,t.transitionEndWeight=0)}))}}class Fs extends Xe{name=q.EMOTE;type=fe.STATIC;pauseTransitionDuration=1e4;animations=[{name:Q.CLAP,weight:0,timeScale:1,loopType:qe,decorateAction:function(t){t.reset(),t.setLoop(this.loopType,this.loopCount),t.clampWhenFinished=!0}},{name:Q.CRY,weight:0,timeScale:1,loopType:qe,decorateAction:function(t){t.reset(),t.setLoop(this.loopType,this.loopCount),t.clampWhenFinished=!0}},{name:Q.KISS,weight:0,timeScale:1,loopType:qe,decorateAction:function(t){t.reset(),t.setLoop(this.loopType,this.loopCount),t.clampWhenFinished=!0}},{name:Q.WAVE,weight:0,timeScale:1,loopType:qe,decorateAction:function(t){t.reset(),t.setLoop(this.loopType,this.loopCount),t.clampWhenFinished=!0}},{name:Q.DEFEAT,weight:0,timeScale:1,loopType:qe,decorateAction:function(t){t.reset(),t.setLoop(this.loopType,this.loopCount),t.clampWhenFinished=!0}},{name:Q.LAUGH,weight:0,timeScale:1,loopType:qe,decorateAction:function(t){t.reset(),t.setLoop(this.loopType,this.loopCount),t.clampWhenFinished=!0}}];updateWeights=()=>{!this.weightParams.animationName||(this.weightParams.interpolate=!0,this.timeElapsedSinceUpdate=0,this.animations.forEach(t=>{this.weightParams.animationName===t.name?(t.transitionStartWeight=t.weight,t.transitionEndWeight=1):(t.transitionStartWeight=t.weight,t.transitionEndWeight=0)}))}}class Xt extends Xe{name=q.IDLE;type=fe.VELOCITY_BASED;transitionDuration=.5;animations=[{name:Q.IDLE,weight:1,timeScale:1,loopType:oe,loopCount:1/0}];updateWeights=()=>{this.weightParams.interpolate=!0,this.animations[0].transitionStartWeight=this.animations[0].weight,this.animations[0].transitionEndWeight=1}}class Gt extends Xe{name=q.JUMP;type=fe.VELOCITY_BASED;transitionDuration=.2;animations=[{name:Q.JUMP,weight:1,timeScale:1,loopType:qe,decorateAction:function(t){t.reset(),t.setLoop(this.loopType,this.loopCount),t.clampWhenFinished=!0}}];updateWeights=()=>{this.animations.forEach(t=>t.weight=1)}}class zt extends Xe{name=q.WALK;type=fe.VELOCITY_BASED;syncActions=!0;animations=[{name:Q.WALK_FORWARD,weight:0,timeScale:1,loopType:oe,loopCount:1/0},{name:Q.WALK_BACKWARD,weight:0,timeScale:1,loopType:oe,loopCount:1/0},{name:Q.WALK_STRAFE_LEFT,weight:0,timeScale:1,loopType:oe,loopCount:1/0},{name:Q.WALK_STRAFE_RIGHT,weight:0,timeScale:1,loopType:oe,loopCount:1/0}];updateWeights=()=>{const{velocity:t,distanceFromGround:n}=this.weightParams.movement,i=n?.5:1;t.x>0?(this.animations[2].weight=J.clamp(J.mapLinear(t.x,0,.02,0,i),0,1),this.animations[3].weight=0):(this.animations[3].weight=J.clamp(J.mapLinear(t.x,0,-.02,0,i),0,1),this.animations[2].weight=0),t.z>0?(this.animations[0].weight=J.clamp(J.mapLinear(t.z,0,.02,0,i),0,1),this.animations[1].weight=0):(this.animations[1].weight=J.clamp(J.mapLinear(t.z,0,-.02,0,i),0,1),this.animations[0].weight=0)}}class $t extends Xe{name=q.RUN;type=fe.VELOCITY_BASED;syncActions=!0;animations=[{name:Q.RUN_FORWARD,weight:0,timeScale:1,loopType:oe,loopCount:1/0},{name:Q.RUN_BACKWARD,weight:0,timeScale:1,loopType:oe,loopCount:1/0},{name:Q.RUN_STRAFE_LEFT,weight:0,timeScale:1,loopType:oe,loopCount:1/0},{name:Q.RUN_STRAFE_RIGHT,weight:0,timeScale:1,loopType:oe,loopCount:1/0}];updateWeights=()=>{const{velocity:t,distanceFromGround:n}=this.weightParams.movement,i=n?.5:1;t.x>0?(this.animations[2].weight=J.clamp(J.mapLinear(t.x,0,.04,0,i),0,1),this.animations[3].weight=0):(this.animations[3].weight=J.clamp(J.mapLinear(t.x,0,-.04,0,i),0,1),this.animations[2].weight=0),t.z>0?(this.animations[0].weight=J.clamp(J.mapLinear(t.z,0,.08,0,i),0,1),this.animations[1].weight=0):(this.animations[1].weight=J.clamp(J.mapLinear(t.z,0,-.08,0,i),0,1),this.animations[0].weight=0)}}const di=H("NameComponent");var he;(function(e){e[e.STATIC=0]="STATIC",e[e.DYNAMIC=1]="DYNAMIC",e[e.KINEMATIC=2]="KINEMATIC",e[e.CONTROLLER=3]="CONTROLLER"})(he||(he={}));var Ln;(function(e){e[e.Closest=0]="Closest"})(Ln||(Ln={}));var Kt;(function(e){e.CONTROLLER_SHAPE_HIT="CONTROLLER_SHAPE_HIT",e.CONTROLLER_CONTROLLER_HIT="CONTROLLER_CONTROLLER_HIT",e.CONTROLLER_OBSTACLE_HIT="CONTROLLER_OBSTACLE_HIT"})(Kt||(Kt={}));var tt;(function(e){e.COLLISION_START="COLLISION_START",e.COLLISION_PERSIST="COLLISION_PERSIST",e.COLLISION_END="COLLISION_END",e.TRIGGER_START="TRIGGER_START",e.TRIGGER_PERSIST="TRIGGER_PERSIST",e.TRIGGER_END="TRIGGER_END"})(tt||(tt={}));const fi=H("CollisionComponent"),ks=H("SpawnPoseComponent"),Us=(e,t)=>{let n;const i=f.defaultWorld,s={to(r){if(!!n)return n.$to=r,s},delay(r){if(!!n)return n.$tick=i.fixedTick+r,s}};return f.userId!==e||(n=t(),n.$to=n.$to??"all",n.$tick=n.$tick??i.fixedTick+2,i.outgoingActions.add(n)),s},Nc=e=>{const t=ae();return typeof t.localClientEntity!="undefined"&&t.localClientEntity===e},xc=F.arrayOf(F.number),Fc=F.guard(e=>!Array.isArray(e)||!xc.test(e)?!1:e.length===7),kc=F.shape({avatarURL:F.string,thumbnailURL:F.string,avatarId:F.string});class Yt{static createClient=Re({type:"network.CREATE_CLIENT",userId:Vt,name:F.string,avatarDetail:kc});static destroyClient=Re({type:"network.DESTROY_CLIENT",userId:Vt});static setXRMode=Re({type:"network.SET_XR_MODE",userId:Vt,enabled:F.boolean},{allowDispatchFromAny:!0});static xrHandsConnected=Re({type:"network.XR_HANDS_CONNECTED",userId:Vt},{allowDispatchFromAny:!0});static spawnObject=Re({type:"network.SPAWN_OBJECT",userId:Vt,prefab:F.string,networkId:Dc(bn,()=>Jt.getNetworkId()),parameters:F.any.optional()});static spawnAvatar=Re({...Yt.spawnObject.actionShape,prefab:"avatar",parameters:F.shape({position:xs,rotation:Rc})});static destroyObject=Re({type:"network.DESTROY_OBJECT",networkId:bn});static setEquippedObject=Re({type:"network.SET_EQUIPPED_OBJECT",networkId:bn,equip:F.boolean});static avatarAnimation=Re({type:"network.AVATAR_ANIMATION",newStateName:F.string,params:Ic},{allowDispatchFromAny:!0});static teleportObject=Re({type:"network.TELEPORT_OBJECT",networkId:bn,pose:Fc})}const Ws=H("LocalInputTagComponent"),qt=H("XRInputSourceComponent"),Uc=new P(0,1,0),Dn=new Y,Bs=new Me,nt=new P,hi=new P,Ge=new P,Wc=new P(0,0,1),Hs=1/60,Bc=(e,t)=>{const n=D(e,Ne),i=D(e,ni),s=D(e,ye);if(!s.movementEnabled)return;const r=s.collisions[0]||n.isGrounded;Ge.copy(s.localMovementDirection).multiplyScalar(Hs),s.velocitySimulator.target.copy(Ge),s.velocitySimulator.simulate(t*(r?1:.2));const o=s.isWalking?ze.instance.walkSpeed:ze.instance.runSpeed;if(nt.copy(s.velocitySimulator.position).multiplyScalar(o),i.velocity.setX(nt.x),i.velocity.setZ(nt.z),i.velocity.y-=.15*t,Qe(e,qt)?D(e,qt).head.getWorldDirection(Ge):f.camera.getWorldDirection(Ge),Ge.setY(0).normalize(),Dn.setFromUnitVectors(Wc,Ge),nt.applyQuaternion(Dn),r){const d=D(e,As).hits[0];d&&(hi.copy(nt).setY(0),Ge.set(d.normal.x,d.normal.y,d.normal.z),Dn.setFromUnitVectors(Uc,Ge),Bs.makeRotationFromQuaternion(Dn),hi.applyMatrix4(Bs)),i.velocity.y=hi.y,s.isJumping&&(s.isJumping=!1),s.localMovementDirection.y>0&&!s.isJumping&&(i.velocity.y=ze.instance.jumpHeight*Hs,s.isJumping=!0)}const a=ae(),c=new PhysX.PxControllerFilters(s.filterData,a.physics.defaultCCTQueryCallback,null),l=s.controller.move({x:nt.x,y:i.velocity.y,z:nt.z},.001,a.fixedDelta,c,a.physics.obstacleContext);s.collisions=[l.isSet(PhysX.PxControllerCollisionFlag.eCOLLISION_DOWN),l.isSet(PhysX.PxControllerCollisionFlag.eCOLLISION_SIDES),l.isSet(PhysX.PxControllerCollisionFlag.eCOLLISION_UP)]},js=H("PortalComponent"),Hc=(e,t)=>{const n=D(e,ye),i=D(e,fi);if(n&&i){for(const s of i.collisions)if(typeof s.body!="undefined"){const r=s.body.userData.entity;if(Qe(r,t))return{controllerCollisionEvent:s,controllerCollisionEntity:r}}}return{controllerCollisionEvent:void 0,controllerCollisionEntity:void 0}},jc=e=>{D(e,fi).collisions;const t=Hc(e,js).controllerCollisionEntity;if(typeof t=="undefined")return;const n=D(t,js);if(ue){if(f.defaultWorld.isInPortal)return;I.instance.dispatchEvent({type:I.EVENTS.PORTAL_REDIRECT_EVENT,portalComponent:n})}},Vc=e=>{const{position:t,rotation:n}=D(e,ks),i=D(e,Zt);Us(ae().hostId,()=>Yt.teleportObject({networkId:i.networkId,pose:[t.x,t.y,t.z,n.x,n.y,n.z,n.w]}))};class ze{static instance=new ze;walkSpeed=1.5;runSpeed=5;jumpHeight=4}async function Xc(e){const t=new P,n=new Y,i=new Y,s=xe([ye]),r=xe([Ws,qt,ye]);return()=>{const{delta:o}=e;for(const a of s.exit(e)){const c=D(a,ye);c?.controller&&e.physics.removeController(c.controller);const l=D(a,Ne);l&&(l.isGrounded=!1)}for(const a of r.enter(e))D(a,Ne).modelContainer?.traverse(l=>{l.visible&&(l.visible=!1)});for(const a of r.exit(e))D(a,Ne)?.modelContainer?.traverse(l=>{l.visible&&(l.visible=!0)});for(const a of r(e)){const c=D(a,qt),l=D(a,Pe);c.container.updateWorldMatrix(!0,!0),c.container.updateMatrixWorld(!0),n.copy(l.rotation).invert(),i.copy(f.camera.quaternion).premultiply(n),c.head.quaternion.copy(i),t.subVectors(f.camera.position,l.position),t.applyQuaternion(n),c.head.position.copy(t)}for(const a of s(e)){const c=D(a,ye),l=D(a,Ne),u=D(a,Pe),d=c.controller.getPosition();if(u.position.set(d.x,d.y-l.avatarHalfHeight,d.z),jc(a),Bc(a,o),u.position.y<-10){Vc(a);continue}}return e}}var Gc=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",AvatarSettings:ze,default:Xc});const Vs=new _e;class zc{states={};defaultState;EPSILON=.005;isTransitionPaused;pauseTransitionFor=t=>{this.isTransitionPaused=!0,setTimeout(()=>{this.isTransitionPaused=!1},t)};validateTransition=(t,n)=>{if(!n)return!1;if(t.nextStates.length===0)return!0;for(let i=0;i<t.nextStates.length;i++)if(n.constructor.name===t.nextStates[i].name)return!0;return!1};transitionState=(t,n,i)=>{const s=D(t,Vi),r=D(t,wt);if(this.isTransitionPaused||!i.forceTransition&&n===r.currentState.name)return;const o=this.states[n];if(!!this.validateTransition(r.currentState,o)){if(r.prevState&&(r.prevState.name===n?en.resetPreviousState(t,!0):en.unmountPreviousState(t,0,!0)),r.currentState.name!==this.defaultState.name&&(r.prevState=r.currentState,en.resetPreviousState(t)),r.currentState=this.states[n],r.currentState.weightParams=i,en.mountCurrentState(t),r.currentState.autoTransitionTo){const a=()=>{this.isTransitionPaused=!1,r.currentState&&this.transitionState(t,r.currentState.autoTransitionTo,i),s.mixer.removeEventListener("finished",a)};s.mixer.addEventListener("finished",a)}r.currentState.pauseTransitionDuration&&this.pauseTransitionFor(r.currentState.pauseTransitionDuration),this.updateNetwork(t,n,i)}};render=(t,n)=>{const i=D(t,wt),s=D(t,Ne);let r={};const o=D(t,ni),a={velocity:o.velocity,distanceFromGround:s.isGrounded?0:o.velocity.y};if(r.movement=a,i.currentState.type===fe.VELOCITY_BASED&&(i.currentState.weightParams=r),!s.isGrounded)i.currentState.name!==q.JUMP&&i.animationGraph.transitionState(t,q.JUMP,{...r,forceTransition:!0});else{let c="";Vs.set(a.velocity.x,a.velocity.z).multiplyScalar(1/n);const l=Vs.lengthSq();l>this.EPSILON?c=l<ze.instance.walkSpeed*ze.instance.walkSpeed?q.WALK:q.RUN:c=q.IDLE,i.currentState.name!==c&&i.animationGraph.transitionState(t,c,r)}i.currentState.type===fe.VELOCITY_BASED&&i.currentState.updateWeights?.(),i.prevVelocity.copy(a.velocity)};updateNetwork=(t,n,i)=>{const s=D(t,wt);Nc(t)&&s.currentState.type===fe.STATIC&&Us(f.userId,()=>Yt.avatarAnimation({newStateName:n,params:i}))};static forceUpdateAnimationState=(t,n,i)=>{const s=D(t,wt),r=s.animationGraph.states[n];s.currentState.name===r.name?(i.resetAnimation=!0,s.currentState.weightParams=i,s.animationGraph.updateNetwork(t,r.name,i)):s.animationGraph.transitionState(t,r.name,i),s.currentState.updateWeights?.()}}class $c extends zc{constructor(){super();const t=new Xt,n=new zt,i=new $t,s=new Mc,r=new Fs,o=new Gt;n.nextStates.push(Xt,$t,Gt),i.nextStates.push(Xt,zt,Gt),s.nextStates.push(zt,$t,Gt,Fs),o.nextStates.push(Xt,zt,$t),r.nextStates.push(Xt,zt,$t,Gt),r.autoTransitionTo=q.IDLE,this.states[q.IDLE]=t,this.states[q.WALK]=n,this.states[q.RUN]=i,this.states[q.JUMP]=o,this.states[q.LOOPABLE_EMOTE]=s,this.states[q.EMOTE]=r,this.defaultState=this.states[q.IDLE]}}const Kc=H("AudioTagComponent"),Xs=H("ShadowComponent"),Gs=H("PersistTagComponent"),pi=.25,mi=1.8,zs=mi-pi*2,it=mi/2,Yc=e=>{const t=ae(),n=e.userId,i=t.getNetworkObject(e.networkId);ue&&(Qe(i,Fi)||$(i,Fi,{isAfk:!1,prevPosition:new P(0,0,0),cStep:0,cStep2:0,timer:0}));const s=$(i,Pe,{position:new P().copy(e.parameters.position),rotation:new Y().copy(e.parameters.rotation),scale:new P(1,1,1)});$(i,ni,{velocity:new P});const r=new Bi;r.name="Actor (tiltContainer)"+i,r.position.setY(it);const o=new Bi;o.name="Actor (modelContainer)"+i,r.add(o),$(i,Ne,{...t.clients.get(n)?.avatarDetail||{avatarId:ra},avatarHalfHeight:it,avatarHeight:mi,modelContainer:o,isGrounded:!1}),$(i,di,{name:n}),console.log("userID: "+n),$(i,Vi,{mixer:new Dr(o),animations:[],animationSpeed:1}),$(i,wt,{animationGraph:new $c,currentState:new Xe,prevState:new Xe,prevVelocity:new P}),$(i,ce,{value:r});const a=new PhysX.PxQueryFilterData;a.setWords(de.Default|de.Ground|de.Trigger,0);const c=PhysX.PxQueryFlag.eSTATIC.value|PhysX.PxQueryFlag.eDYNAMIC.value|PhysX.PxQueryFlag.eANY_HIT.value;if(a.setFlags(c),$(i,As,{filterData:a,type:Ln.Closest,hits:[],origin:new P(0,it,0),direction:new P(0,-1,0),maxDistance:it+.05,flags:c}),$(i,fi,{collisions:[]}),n===f.userId)$(i,ks,{position:new P().copy(e.parameters.position),rotation:new Y().copy(e.parameters.rotation)}),qc(i),$(i,Kc,{}),$(i,Xs,{receiveShadow:!0,castShadow:!0}),$(t.localClientEntity,Ws,{}),$(t.localClientEntity,He,la),$(t.localClientEntity,Gs,{});else{const l=t.physics.createShape(new PhysX.PxCapsuleGeometry(pi,zs/2),t.physics.physics.createMaterial(0,0,0),{collisionLayer:de.Avatars,collisionMask:de.Default|de.Ground}),u=t.physics.addBody({shapes:[l],type:he.STATIC,transform:{translation:{x:s.position.x,y:s.position.y+it,z:s.position.z},rotation:new Y},userData:{entity:i}});$(i,ba,{body:u})}return i},qc=e=>{const{position:t}=D(e,Pe),{value:n}=D(e,ce);$(e,Jn,{schema:Ts,data:new Map});const i=ae(),s=i.physics.createController({isCapsule:!0,material:i.physics.createMaterial(),position:{x:t.x,y:t.y+it,z:t.z},contactOffset:.01,stepOffset:.25,slopeLimit:0,height:zs,radius:pi,userData:{entity:e}}),r=new Un(60,2,.1,3);r.position.setY(it),r.rotateY(Math.PI),n.add(r),$(e,Ss,{focusedInteractive:null,frustumCamera:r,subFocusedArray:[]});const o=new ca(60,50,.8);$(e,ye,{controller:s,filterData:new PhysX.PxFilterData(de.Avatars,de.Default|de.Ground|de.Trigger,0,0),collisions:[!1,!1,!1],movementEnabled:!0,isJumping:!1,isWalking:!1,localMovementDirection:new P,velocitySimulator:o})},$s=e=>new P((Math.random()-.5)*e.x,(Math.random()-.5)*e.y,(Math.random()-.5)*e.z);class st{static instance;spawnPoints=[];lastSpawnIndex=0;constructor(){st.instance=this}getRandomSpawnPoint(){if(typeof this.spawnPoints[this.lastSpawnIndex]!="undefined"){const t=D(this.spawnPoints[this.lastSpawnIndex],Pe);if(t&&this.spawnPoints.length>0)return this.lastSpawnIndex=(this.lastSpawnIndex+1)%this.spawnPoints.length,{position:t.position.clone().add($s(new P(t.scale.x,0,t.scale.z))),rotation:new Y}}return console.warn("Couldn't spawn entity at spawn point, no spawn points available"),{position:$s(new P(2,0,2)),rotation:new Y}}}async function Qc(e){if(e.receptors.add(t=>{F(t).when(Yt.spawnAvatar.matches,Yc)}),ue)return()=>{};{const t=xe([sa,Pe]);return()=>{for(const n of t.enter(e)){if(!Qe(n,Pe)){console.warn("Can't add spawn point, no transform component on entity");continue}st.instance.spawnPoints.push(n)}for(const n of t.exit(e)){const i=st.instance.spawnPoints.indexOf(n);i>-1&&st.instance.spawnPoints.splice(i)}}}}var Ks=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",SpawnPoints:st,default:Qc}),rt;(function(e){e.InitializeBot="BotHooks_InitializeBot",e.LocationLoaded="BotHooks_LocationLoaded",e.GetPlayerPosition="BotHooks_GetPlayerPosition",e.RotatePlayer="BotHooks_RotatePlayer",e.GetClients="BotHooks_GetClients"})(rt||(rt={}));var pe;(function(e){e.OverrideXR="XRBotHooks_OverrideXR",e.XRSupported="XRBotHooks_XRSupported",e.XRInitialized="XRBotHooks_XRInitialized",e.StartXR="XRBotHooks_StartXR",e.UpdateHead="XRBotHooks_UpdateHead",e.UpdateController="XRBotHooks_UpdateController",e.PressControllerButton="XRBotHooks_PressControllerButton",e.MoveControllerStick="XRBotHooks_MoveControllerStick",e.GetXRInputPosition="XRBotHooks_GetXRInputPosition",e.TweenXRInputSource="XRBotHooks_TweenXRInputSource"})(pe||(pe={}));async function Jc(){const{XREngineWebXRPolyfill:e}=await C(()=>import("./CustomWebXRPolyfill.c1087ad9.js"),["assets/CustomWebXRPolyfill.c1087ad9.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js"]);new e,navigator.xr.isSessionSupported=()=>!0;const t={id:"Oculus Quest",name:"Oculus Quest",modes:["inline","immersive-vr"],headset:{hasPosition:!0,hasRotation:!0},controllers:[{id:"Oculus Touch (Right)",buttonNum:7,primaryButtonIndex:0,primarySqueezeButtonIndex:1,hasPosition:!0,hasRotation:!0,hasSqueezeButton:!0,isComplex:!0},{id:"Oculus Touch (Left)",buttonNum:7,primaryButtonIndex:0,primarySqueezeButtonIndex:1,hasPosition:!0,hasRotation:!0,hasSqueezeButton:!0,isComplex:!0}]};I.instance.dispatchEvent({type:"webxr-device-init",detail:{stereoEffect:!1,deviceDefinition:t}})}async function Zc(){const e=await navigator.xr.isSessionSupported("immersive-vr");return f.xrSupported=e,e}function el(){return Boolean(f.xrSession)}function tl(){I.instance.dispatchEvent({type:I.EVENTS.XR_START}),I.instance.dispatchEvent({type:"webxr-pose",detail:{position:[0,1.6,0],quaternion:[0,0,0,1]}}),I.instance.dispatchEvent({type:"webxr-input-pose",detail:{objectName:"rightController",position:[.5,1.5,-1],quaternion:[0,0,0,1]}}),I.instance.dispatchEvent({type:"webxr-input-pose",detail:{objectName:"leftController",position:[-.5,1.5,-1],quaternion:[0,0,0,1]}})}function nl(e){I.instance.dispatchEvent({type:"webxr-input-button",detail:e})}function il(e){I.instance.dispatchEvent({type:"webxr-input-axes",detail:e})}function sl(){const e=D(ae().localClientEntity,qt),t=e.head.position.toArray().concat(e.head.quaternion.toArray()),n=e.controllerLeft.position.toArray().concat(e.controllerLeft.quaternion.toArray()),i=e.controllerRight.position.toArray().concat(e.controllerRight.quaternion.toArray());return{headInputValue:t,leftControllerInputValue:n,rightControllerInputValue:i}}const yi=new P(0,1.6,0),Si=new Y,gi=new P(-.5,1.5,-1),Ei=new Y,_i=new P(.5,1.5,-1),Pi=new Y,rl=e=>{switch(e){case"head":return yi;case"leftController":return gi;case"rightController":return _i}},ol=e=>{switch(e){case"head":return Si;case"leftController":return Ei;case"rightController":return Pi}},Cn=[],ku=()=>{Cn.forEach(e=>e()),I.instance.dispatchEvent({type:"webxr-pose",detail:{position:yi.toArray(),quaternion:Si.toArray()}}),I.instance.dispatchEvent({type:"webxr-input-pose",detail:{objectName:"leftController",position:gi.toArray(),quaternion:Ei.toArray()}}),I.instance.dispatchEvent({type:"webxr-input-pose",detail:{objectName:"rightController",position:_i.toArray(),quaternion:Pi.toArray()}})};function al(e){let t=0;const n=rl(e.objectName),i=ol(e.objectName),s=()=>{n.lerpVectors(e.positionFrom,e.positionTo,t/e.time),i.slerpQuaternions(e.quaternionFrom,e.quaternionTo,t/e.time),t>=e.time&&(Cn.splice(Cn.indexOf(s)),e.callback()),t++};Cn.push(s)}function cl(e){e.position&&yi.fromArray(e.position),e.rotation&&Si.fromArray(e.rotation)}function ll(e){e.objectName==="leftController"?(gi.fromArray(e.position),Ei.fromArray(e.rotation)):(_i.fromArray(e.position),Pi.fromArray(e.rotation))}const ul={[rt.InitializeBot]:dl,[rt.LocationLoaded]:fl,[rt.GetPlayerPosition]:hl,[rt.RotatePlayer]:pl,[rt.GetClients]:ml,[pe.OverrideXR]:Jc,[pe.XRSupported]:Zc,[pe.XRInitialized]:el,[pe.StartXR]:tl,[pe.UpdateHead]:cl,[pe.UpdateController]:ll,[pe.PressControllerButton]:nl,[pe.MoveControllerStick]:il,[pe.GetXRInputPosition]:sl,[pe.TweenXRInputSource]:al};function dl(){f.isBot=!0}function fl(){return f.hasJoinedWorld}function hl(){return D(ae().localClientEntity,Pe)?.position}function pl({angle:e}){D(ae().localClientEntity,Pe).rotation.multiply(new Y().setFromAxisAngle(new P(0,1,0),J.degToRad(e)))}function ml(){return ae().clients}const ot=typeof window!="undefined"&&typeof window.performance!="undefined"?performance.now.bind(performance):Date.now.bind(Date),yl=1e4;function Sl(e){let t=null,n=0,i=0,s;const r={fixed:0,net:0,update:0,render:0},o={fixed:0,net:0,update:0,render:0};let a;function c(E,g){f.xrFrame=g,t!==null&&(i=(E-t)/1e3,n+=i,e(i,n)),t=E}I.instance.addEventListener(I.EVENTS.XR_START,async E=>{S()}),I.instance.addEventListener(I.EVENTS.XR_SESSION,async E=>{f.xrRenderer.setAnimationLoop(c)}),I.instance.addEventListener(I.EVENTS.XR_END,async E=>{y()});function l(E){t!==null&&(i=(E-t)/1e3,n+=i,d("update"),e(i,n),h("update")),t=E}const u=new Map;function d(E){let g;u.has(E)?g=u.get(E):(g={time:0,ticks:0},u.set(E,g)),g.ticks=f.tick,g.time=ot()}function h(E){const g=u.get(E);r[E]+=f.tick-g.ticks,o[E]+=ot()-g.time}function p(){ot(),ot(),ot()+yl}const m=1e3/60;function y(){if(n=0,t=null,ue){const E=g=>{s=window.requestAnimationFrame(E),l(g)};s=window.requestAnimationFrame(E)}else a=()=>{const E=ot();E-t>=m&&(l(E),t=E),setImmediate(a)},a();p()}function S(){ue?cancelAnimationFrame(s):clearImmediate(a)}function _(){S(),I.instance.removeAllListenersForEvent(I.EVENTS.XR_START),I.instance.removeAllListenersForEvent(I.EVENTS.XR_SESSION),I.instance.removeAllListenersForEvent(I.EVENTS.XR_END)}return{start:y,stop:S,clear:_}}const gl=typeof window!="undefined"&&typeof window.document!="undefined",El=typeof process!="undefined"&&process.versions!=null&&process.versions.node!=null,_l=()=>typeof window!="undefined"&&window.name==="nodejs"||navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom");function Pl(){if(!(!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent))||!indexedDB.databases)return Promise.resolve();let t;return new Promise(n=>{const i=()=>indexedDB.databases().finally(n);t=setInterval(i,100),i()}).finally(()=>clearInterval(t))}function be(e){return new Promise((t,n)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>n(e.error)})}function Ys(e,t){const n=Pl().then(()=>{const i=indexedDB.open(e);return i.onupgradeneeded=()=>i.result.createObjectStore(t),be(i)});return(i,s)=>n.then(r=>s(r.transaction(t,i).objectStore(t)))}let wi;function Le(){return wi||(wi=Ys("keyval-store","keyval")),wi}function wl(e,t=Le()){return t("readonly",n=>be(n.get(e)))}function vl(e,t,n=Le()){return n("readwrite",i=>(i.put(t,e),be(i.transaction)))}function Tl(e,t=Le()){return t("readwrite",n=>(e.forEach(i=>n.put(i[1],i[0])),be(n.transaction)))}function Al(e,t=Le()){return t("readonly",n=>Promise.all(e.map(i=>be(n.get(i)))))}function Ol(e,t,n=Le()){return n("readwrite",i=>new Promise((s,r)=>{i.get(e).onsuccess=function(){try{i.put(t(this.result),e),s(be(i.transaction))}catch(o){r(o)}}}))}function Rl(e,t=Le()){return t("readwrite",n=>(n.delete(e),be(n.transaction)))}function bl(e=Le()){return e("readwrite",t=>(t.clear(),be(t.transaction)))}function vi(e,t){return e("readonly",n=>(n.openCursor().onsuccess=function(){!this.result||(t(this.result),this.result.continue())},be(n.transaction)))}function Ll(e=Le()){const t=[];return vi(e,n=>t.push(n.key)).then(()=>t)}function Dl(e=Le()){const t=[];return vi(e,n=>t.push(n.value)).then(()=>t)}function Cl(e=Le()){const t=[];return vi(e,n=>t.push([n.key,n.value])).then(()=>t)}var Il=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",clear:bl,createStore:Ys,del:Rl,entries:Cl,get:wl,getMany:Al,keys:Ll,promisifyRequest:be,set:vl,setMany:Tl,update:Ol,values:Dl});const Ti={};let In={get:e=>Ti[e],set:(e,t)=>{Ti[e]=t},del:e=>{delete Ti[e]}};gl&&!_l()&&!El&&(In=Il);class $e{static async get(t){const n=await In.get(String(t));try{return JSON.parse(n)}catch(i){return n}}static async set(t,n){return typeof n!="string"&&(n=JSON.stringify(n)),await In.set(String(t),n)}static async del(t){return await In.del(String(t))}}var ge;(function(e){e.AUTOMATIC="automatic",e.PBR="usePBR",e.POST_PROCESSING="usePostProcessing",e.SHADOW_QUALITY="shadowQuality",e.SCALE_FACTOR="scaleFactor"})(ge||(ge={}));const Ke="graphics-settings-";let qs=0;class le{static EVENTS={QUALITY_CHANGED:"WEBGL_RENDERER_SYSTEM_EVENT_QUALITY_CHANGE",SET_RESOLUTION:"WEBGL_RENDERER_SYSTEM_EVENT_SET_RESOLUTION",USE_SHADOWS:"WEBGL_RENDERER_SYSTEM_EVENT_SET_SHADOW_QUALITY",SET_POST_PROCESSING:"WEBGL_RENDERER_SYSTEM_EVENT_SET_POST_PROCESSING",SET_USE_AUTOMATIC:"WEBGL_RENDERER_SYSTEM_EVENT_SET_USE_AUTOMATIC"};static instance;needsResize;postProcessingSchema;maxQualityLevel=5;qualityLevel=this.maxQualityLevel;prevQualityLevel=this.qualityLevel;maxRenderDelta=1e3/40;minRenderDelta=1e3/60;automatic=!0;usePBR=!0;usePostProcessing=!0;useShadows=!0;scaleFactor=1;renderPass;normalPass;renderContext;supportWebGL2;rendereringEnabled=!0;canvas;averageFrameTime=1e3/60;timeSamples=new Array(60*1).fill(1e3/60);index=0;constructor(t){le.instance=this,this.onResize=this.onResize.bind(this),this.supportWebGL2=Bn.isWebGL2Available(),!this.supportWebGL2&&!Bn.isWebGLAvailable()&&Bn.dispatchWebGLDisconnectedEvent();const n=t.canvas??document.querySelector("canvas"),i=this.supportWebGL2?n.getContext("webgl2"):n.getContext("webgl");i||I.instance.dispatchEvent({type:I.EVENTS.BROWSER_NOT_SUPPORTED,message:"Your brower does not support webgl,or it disable webgl,Please enable webgl"}),this.renderContext=i;const s={canvas:n,context:i,antialias:!f.isHMD,preserveDrawingBuffer:!f.isHMD};this.canvas=n;const r=this.supportWebGL2?new Cr(s):new Ir(s);f.renderer=r,f.renderer.physicallyCorrectLights=!0,f.renderer.outputEncoding=Mr,f.xrRenderer=r.xr,r.xr.cameraAutoUpdate=!1,f.xrRenderer.enabled=!0,window.addEventListener("resize",this.onResize,!1),this.onResize(),this.needsResize=!0,f.renderer.autoClear=!0,f.effectComposer=new Gi(f.renderer),I.instance.addEventListener(le.EVENTS.SET_POST_PROCESSING,o=>{this.setUsePostProcessing(this.supportWebGL2&&o.payload)}),I.instance.addEventListener(le.EVENTS.SET_RESOLUTION,o=>{this.setResolution(o.payload)}),I.instance.addEventListener(le.EVENTS.USE_SHADOWS,o=>{this.setShadowQuality(o.payload)}),I.instance.addEventListener(le.EVENTS.SET_USE_AUTOMATIC,o=>{this.setUseAutomatic(o.payload)}),I.instance.addEventListener(I.EVENTS.ENABLE_SCENE,o=>{typeof o.renderer!="undefined"&&(this.rendereringEnabled=o.renderer)})}onResize(){this.needsResize=!0}resetPostProcessing(){console.log("resetPostProcessing"),f.effectComposer.dispose(),f.effectComposer=new Gi(f.renderer),this.postProcessingSchema=void 0,console.log("resetPostProcessing done")}configurePostProcessing(t=Jr){this.postProcessingSchema=t;const n=new Zr(f.scene,f.camera);n.scene=f.scene,n.camera=f.camera,f.effectComposer.addPass(n);const i=[],s=new eo(n.scene,n.camera,{renderTarget:new Nr(1,1,{minFilter:Hi,magFilter:Hi,format:xr,stencilBuffer:!1})}),r=new to({normalBuffer:s.texture,resolutionScale:.5}),o=r.texture;let a;Object.keys(this.postProcessingSchema).forEach(l=>{a=this.postProcessingSchema[l];const u=no[l].effect;if(a.isActive)if(u===io){const d=new u(f.camera,s.texture,{...a,normalDepthBuffer:o});f.effectComposer[l]=d,i.push(d)}else if(u===so){const d=new u(f.camera,a);f.effectComposer[l]=d,i.push(d)}else if(u===ro){const d=new u(f.scene,f.camera,a);f.effectComposer[l]=d,i.push(d)}else{const d=new u(a);f.effectComposer[l]=d,i.push(d)}});const c=new oo({blendFunction:ao.SKIP,texture:r.texture});i.length&&(f.effectComposer.addPass(r),f.effectComposer.addPass(new co(f.camera,...i,c)))}execute(t){if(f.xrRenderer.isPresenting)f.csm?.update(),f.renderer.render(f.scene,f.camera);else if(this.changeQualityLevel(),this.rendereringEnabled){if(this.needsResize){const n=f.renderer.getPixelRatio(),i=window.devicePixelRatio*this.scaleFactor;n!==i&&f.renderer.setPixelRatio(i);const s=window.innerWidth,r=window.innerHeight;if(f.camera.isPerspectiveCamera){const o=f.camera;o.aspect=s/r,o.updateProjectionMatrix()}this.qualityLevel>0&&f.csm?.updateFrustums(),f.renderer.setSize(s,r,!1),f.effectComposer.setSize(s,r,!1),this.needsResize=!1}this.qualityLevel>0&&f.csm?.update(),this.usePostProcessing&&this.postProcessingSchema?f.effectComposer.render(t):(f.renderer.autoClear=!0,f.renderer.render(f.scene,f.camera)),f.isHMD&&(this.rendereringEnabled=!1)}}calculateMovingAverage=t=>(this.averageFrameTime=(this.averageFrameTime*this.timeSamples.length+t-this.timeSamples[this.index])/this.timeSamples.length,this.timeSamples[this.index]=t,this.index=(this.index+1)%this.timeSamples.length,this.averageFrameTime);changeQualityLevel(){const t=ot(),n=t-qs;if(qs=t,!this.automatic)return;const i=this.calculateMovingAverage(n);ae().elapsedTime>5&&(i>this.minRenderDelta&&this.qualityLevel--,i<this.maxRenderDelta&&this.qualityLevel++),this.qualityLevel=Math.round(J.clamp(this.qualityLevel,1,this.maxQualityLevel)),this.prevQualityLevel!==this.qualityLevel&&(this.prevQualityLevel=this.qualityLevel,this.doAutomaticRenderQuality(),this.dispatchSettingsChangeEvent())}doAutomaticRenderQuality(){this.setShadowQuality(this.qualityLevel>1),this.setResolution(this.qualityLevel/this.maxQualityLevel),this.setUsePostProcessing(this.qualityLevel>2)}dispatchSettingsChangeEvent(){I.instance.dispatchEvent({type:le.EVENTS.QUALITY_CHANGED,shadows:this.useShadows,resolution:this.scaleFactor,postProcessing:this.usePostProcessing,pbr:this.usePBR,automatic:this.automatic})}setUseAutomatic(t){this.automatic=t,this.automatic&&this.doAutomaticRenderQuality(),$e.set(Ke+ge.AUTOMATIC,this.automatic)}setResolution(t){this.scaleFactor=t,f.renderer.setPixelRatio(window.devicePixelRatio*this.scaleFactor),this.needsResize=!0,$e.set(Ke+ge.SCALE_FACTOR,this.scaleFactor)}setShadowQuality(t){this.useShadows!==t&&(this.useShadows=t,f.renderer.shadowMap.enabled=t,$e.set(Ke+ge.SHADOW_QUALITY,this.useShadows))}setUsePostProcessing(t){this.usePostProcessing!==t&&(this.usePostProcessing=this.supportWebGL2&&t,$e.set(Ke+ge.POST_PROCESSING,this.usePostProcessing))}async loadGraphicsSettingsFromStorage(){this.automatic=await $e.get(Ke+ge.AUTOMATIC)??!0,this.scaleFactor=await $e.get(Ke+ge.SCALE_FACTOR)??1,this.useShadows=await $e.get(Ke+ge.SHADOW_QUALITY)??!0,this.usePostProcessing=await $e.get(Ke+ge.POST_PROCESSING)??!0}}async function Ml(e,t){return new le(t),await le.instance.loadGraphicsSettingsFromStorage(),le.instance.dispatchSettingsChangeEvent(),()=>{t.enabled&&le.instance.execute(e.delta)}}var Nl=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",get RENDERER_SETTINGS(){return ge},EngineRenderer:le,default:Ml});const Qs=(e=ae())=>{const t=zr(e);return e.entities.push(t),t},Uu=(e,t=ae())=>{if(Qe(e,di)){const{name:n}=D(e,di);e===t.namedEntities.get(n)&&t.namedEntities.delete(n)}$r(e,t),t.entities.splice(t.entities.indexOf(e),1),Kr(t,e)},Wu=H("InteractableComponent"),xl=async()=>{const{default:e}=await(ue?C(()=>import("./physx.release.esm.aff4c40b.js"),[]):C(()=>import("./physx.release.cjs.e1214094.js"),[]));let t=ue?void 0:await C(()=>import("./__vite-browser-external.b6126e45.js").then(function(n){return n._}),[]);globalThis.PhysX=await e({locateFile(n){return n.endsWith(".wasm")?ue?"/workers/physx.release.wasm":t.resolve(__dirname,"./physx.release.wasm"):n}})},Mn=(e,t)=>{const n=PhysX._malloc(4*t.length);let i=0;for(let s=0;s<t.length;s++)e[n+i>>2]=t[s],i+=4;return n},Js=0;let Fl=0,kl=0,Ul=0;class Wl{physxVersion;defaultErrorCallback;allocator;foundation;cookingParamas;cooking;physics;sceneDesc;scene;controllerManager;obstacleContext;defaultCCTQueryCallback;stepTime=1e3/60;substeps=1;collisionEventQueue=[];bodies=new Map;shapes=new Map;shapeIDByPointer=new Map;controllerIDByPointer=new Map;bodyIDByShapeID=new Map;controllers=new Map;obstacles=new Map;dispose(){}onEvent(t){this.collisionEventQueue.push(t)}getOriginalShapeObject(t){const n=t.length?t[0]:t;return this.shapes.get(this.shapeIDByPointer.get(n.$$.ptr))}async createScene(t={}){await xl(),this.physxVersion=PhysX.PX_PHYSICS_VERSION,this.defaultErrorCallback=new PhysX.PxDefaultErrorCallback,this.allocator=new PhysX.PxDefaultAllocator;const n=new PhysX.PxTolerancesScale;n.length=t.lengthScale??1,this.foundation=PhysX.PxCreateFoundation(this.physxVersion,this.allocator,this.defaultErrorCallback),this.cookingParamas=new PhysX.PxCookingParams(n),this.cooking=PhysX.PxCreateCooking(this.physxVersion,this.foundation,this.cookingParamas),this.physics=PhysX.PxCreatePhysics(this.physxVersion,this.foundation,n,!1,null);const i={onContactBegin:(s,r,o,a,c)=>{const l=[];for(let u=0;u<o.size();u++)c.get(u)>0&&l.push({point:o.get(u),normal:a.get(u),impulse:c.get(u)});this.collisionEventQueue.push({type:tt.COLLISION_START,shapeA:this.getOriginalShapeObject(s),shapeB:this.getOriginalShapeObject(r),contacts:l})},onContactEnd:(s,r)=>{this.collisionEventQueue.push({type:tt.COLLISION_END,shapeA:this.getOriginalShapeObject(s),shapeB:this.getOriginalShapeObject(r)})},onContactPersist:(s,r)=>{this.collisionEventQueue.push({type:tt.COLLISION_PERSIST,shapeA:this.getOriginalShapeObject(s),shapeB:this.getOriginalShapeObject(r)})},onTriggerBegin:(s,r)=>{this.collisionEventQueue.push({type:tt.TRIGGER_START,shapeA:this.getOriginalShapeObject(s),shapeB:this.getOriginalShapeObject(r)})},onTriggerEnd:(s,r)=>{this.collisionEventQueue.push({event:tt.TRIGGER_END,shapeA:this.getOriginalShapeObject(s),shapeB:this.getOriginalShapeObject(r)})}};this.sceneDesc=PhysX.getDefaultSceneDesc(n,0,PhysX.PxSimulationEventCallback.implement(i)),this.scene=this.physics.createScene(this.sceneDesc),this.scene.setBounceThresholdVelocity(t.bounceThresholdVelocity??.001),this.controllerManager=PhysX.PxCreateControllerManager(this.scene,!1),this.obstacleContext=this.controllerManager.createObstacleContext(),this.defaultCCTQueryCallback=PhysX.getDefaultCCTQueryFilter(),t.gravity&&this.scene.setGravity(t.gravity)}addBody(t){const{transform:n,shapes:i,type:s}=t,r=this._getNextAvailableBodyID(),o=s===he.STATIC?this.physics.createRigidStatic(n):this.physics.createRigidDynamic(n);o._type=s,o._id=r,o._shapes=i;for(const a of i)o.attachShape(a),this.bodyIDByShapeID.set(a._id,r);if(this.bodies.set(r,o),this.scene.addActor(o,null),!Bl(o)){if(typeof t.useCCD!="undefined"&&o.setRigidBodyFlag(PhysX.PxRigidBodyFlag.eENABLE_CCD,t.useCCD),typeof t.type!="undefined"){const a=o.getGlobalPose();t.type===he.KINEMATIC?(o.setRigidBodyFlag(PhysX.PxRigidBodyFlag.eKINEMATIC,!0),o._type=he.KINEMATIC):(o.setRigidBodyFlag(PhysX.PxRigidBodyFlag.eKINEMATIC,!1),o._type=he.DYNAMIC),o.setGlobalPose(a,!0)}t.mass&&o.setMass(t.mass),t.linearDamping&&o.setLinearDamping(t.linearDamping),t.angularDamping&&o.setAngularDamping(t.angularDamping)}return o.userData=t.userData,o}createMaterial(t=0,n=0,i=0){return this.physics.createMaterial(t,n,i)}createShape(t,n=this.createMaterial(),i={}){if(!t)throw new Error("Expcted geometry");const s=this._getNextAvailableShapeID(),r=new PhysX.PxShapeFlags(PhysX.PxShapeFlag.eSCENE_QUERY_SHAPE.value|(i?.isTrigger?PhysX.PxShapeFlag.eTRIGGER_SHAPE.value:PhysX.PxShapeFlag.eSIMULATION_SHAPE.value)),o=this.physics.createShape(t,n,!1,r);let a=i.collisionLayer??Js,c=i.collisionMask??Js;return o._collisionLayer=a,o._collisionMask=c,o.setSimulationFilterData(new PhysX.PxFilterData(a,c,0,0)),o.setQueryFilterData(new PhysX.PxFilterData(a,c,0,0)),o._id=s,this.shapeIDByPointer.set(o.$$.ptr,s),this.shapes.set(s,o),typeof i.contactOffset!="undefined"&&o.setContactOffset(i.contactOffset),typeof i.restOffset!="undefined"&&o.setRestOffset(i.restOffset),o._debugNeedsUpdate=!0,o}createTrimesh(t,n,i){const s=Mn(PhysX.HEAPF32,n),r=Mn(PhysX.HEAPF32,i),o=this.cooking.createTriMesh(s,n.length,r,i.length/3,!1,this.physics);if(o===null)throw new Error("Unable to create trimesh");const a=new PhysX.PxMeshScale(t,new Y),c=new PhysX.PxTriangleMeshGeometry(o,a,new PhysX.PxMeshGeometryFlags(PhysX.PxMeshGeometryFlag.eDOUBLE_SIDED.value));return PhysX._free(s),PhysX._free(r),c}createConvexMesh(t,n){const i=Mn(PhysX.HEAPF32,n),s=this.cooking.createConvexMesh(i,n.length,this.physics),r=new PhysX.PxMeshScale(t,new Y),o=new PhysX.PxConvexMeshGeometry(s,r,new PhysX.PxConvexMeshGeometryFlags(0));return PhysX._free(i),o}removeBody(t){const n=t._id,i=t.getShapes();if((i.length?i:[i]).forEach(r=>{const o=this.shapeIDByPointer.get(r.$$.ptr);this.shapes.delete(o),this.shapeIDByPointer.delete(r.$$.ptr)}),!!t)try{return this.scene.removeActor(t,!1),this.bodies.delete(n),!0}catch(r){console.log(r,n,t)}}createController(t){const n=this._getNextAvailableBodyID(),i=t.isCapsule?new PhysX.PxCapsuleControllerDesc:new PhysX.PxBoxControllerDesc;i.setMaterial(t.material),i.position={x:t.position?.x??0,y:t.position?.y??0,z:t.position?.z??0},t.isCapsule?(i.height=t.height,i.radius=t.radius,i.climbingMode=t.climbingMode??PhysX.PxCapsuleClimbingMode.eEASY):(i.halfForwardExtent=t.halfForwardExtent,i.halfHeight=t.halfHeight,i.halfSideExtent=t.halfSideExtent),i.stepOffset=t.stepOffset??.1,i.maxJumpHeight=t.maxJumpHeight??.1,i.contactOffset=t.contactOffset??.01,i.invisibleWallHeight=t.invisibleWallHeight??.25,i.slopeLimit=t.slopeLimit??Math.cos(45*Math.PI/180),i.setReportCallback(PhysX.PxUserControllerHitReport.implement({onShapeHit:c=>{const l=c.getShape(),u=this.shapeIDByPointer.get(l.$$.ptr),d=this.bodyIDByShapeID.get(u),h=c.getWorldPos(),p=c.getWorldNormal(),m=c.getLength();this.collisionEventQueue.push({type:Kt.CONTROLLER_SHAPE_HIT,controller:s,bodyID:d,shapeID:u,position:h,normal:p,length:m})},onControllerHit:c=>{const l=c.getOther(),u=this.controllerIDByPointer.get(l.$$.ptr),d=this.shapeIDByPointer.get(l.getActor().getShapes().$$.ptr),h=c.getWorldPos(),p=c.getWorldNormal(),m=c.getLength();this.collisionEventQueue.push({type:Kt.CONTROLLER_CONTROLLER_HIT,controller:s,bodyID:u,shapeID:d,position:h,normal:p,length:m})},onObstacleHit:c=>{const l=c.getUserData(),u=c.getWorldPos(),d=c.getWorldNormal(),h=c.getLength();this.collisionEventQueue.push({type:Kt.CONTROLLER_OBSTACLE_HIT,controller:s,obstacleID:l,position:u,normal:d,length:h})}})),i.isValid()||console.warn("[WARN] Controller Description invalid!");const s=t.isCapsule?this.controllerManager.createCapsuleController(i):this.controllerManager.createBoxController(i);this.controllers.set(n,s),this.controllerIDByPointer.set(s.$$.ptr,n);const r=s.getActor();this.bodies.set(n,r);const o=r.getShapes(),a=this._getNextAvailableShapeID();return r._shapes=[o],this.shapeIDByPointer.set(o.$$.ptr,n),this.shapes.set(a,o),o._id=a,r._type=he.CONTROLLER,r._debugNeedsUpdate=!0,s._id=n,s}removeController(t){const n=t._id,s=t.getActor().getShapes();this.controllerIDByPointer.delete(t.$$.ptr),this.shapeIDByPointer.delete(s.$$.ptr),this.controllers.delete(n),this.bodies.delete(n),t.release()}createObstacle(t,n,i){const{isCapsule:s,halfExtents:r,halfHeight:o,radius:a}=i,c=this._getNextAvailableObstacleID(),l=new(s?PhysX.PxCapsuleObstacle:PhysX.PxBoxObstacle);l._id=c,l._isCapsule=s,l.setUserData(Mn(PhysX.HEAPU32,[c])),l.setPosition(t),l.setRotation(n),s?(l.setHalfHeight(o),l.setRadius(a)):l.setHalfExtents(r);const u=this.obstacleContext.addObstacle(l);l._handle=u,this.obstacles.set(c,l)}removeObstacle(t){const n=t._handle,i=t._id;this.obstacleContext.removeObstacle(n),this.obstacles.delete(i)}getRigidbodyShapes(t){const n=t.getShapes();return n.length?n:[n]}doRaycast(t){if(t.hits=[],t.type===Ln.Closest){const n=new PhysX.PxRaycastHit;if(this.scene.raycastSingle(t.origin,t.direction,t.maxDistance,t.flags,n,t.filterData)){const s=n.getShape();s&&t.hits.push({distance:n.distance,normal:n.normal,position:n.position,_bodyID:this.bodyIDByShapeID.get(this.shapeIDByPointer.get(s.$$.ptr))})}}}_getNextAvailableBodyID(){return Fl++}_getNextAvailableShapeID(){return kl++}_getNextAvailableObstacleID(){return Ul++}}const Bu=e=>e.getFlags().isSet(PhysX.PxShapeFlag.eTRIGGER_SHAPE),Hu=e=>e.getGeometry().getType().value,ju=e=>e._type===he.KINEMATIC,Vu=e=>e._type===he.CONTROLLER,Xu=e=>e._type===he.DYNAMIC,Bl=e=>e._type===he.STATIC;new Y;new Y;new P(1,0,0);new P(0,1,0);new P(0,0,1);const Gu=H("CopyTransformComponent"),zu=H("PositionalAudioSettingsComponent");H("ScenePreviewCameraTagComponent");const Hl=H("UpdatableComponent");H("UserdataComponent");const Zs=H("VisibleComponent"),$u=H("NavMeshComponent");new Y().setFromAxisAngle(new P(1,0,0),-Math.PI/2);const Ku=H("DebugNavMeshComponent"),Yu=H("GeoLabelSetComponent");H("VolumetricComponent");const qu=H("RenderedComponent");const Qu=H("PositionalAudioComponent");ue&&Promise.all([C(()=>import("./Player.1091a6aa.js"),["assets/Player.1091a6aa.js","assets/three.module.493739a3.js"]),C(()=>import("./workerFunction.efd6a346.js"),[])]).then(([e,t])=>{});class jl extends Fr{constructor(t){super(t)}load(t,n,i,s){const r=this,o=new kr(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(r.withCredentials),o.load(t,function(a){let c;try{c=JSON.parse(a)}catch(u){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),c=JSON.parse(a.substring(65,a.length-2))}const l=r.parse(c);n&&n(l)},i,s)}parse(t){return new Vl(t)}}class Vl{data;type="Font";isFont=!0;constructor(t){this.data=t}generateShapes(t,n=100){const i=[],s=Xl(t,n,this.data);for(let r=0,o=s.length;r<o;r++)Array.prototype.push.apply(i,s[r].toShapes());return i}}function Xl(e,t,n){const i=Array.from(e),s=t/n.resolution,r=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*s,o=[];let a=0,c=0;for(let l=0;l<i.length;l++){const u=i[l];if(u===`
`)a=0,c-=r;else{const d=Gl(u,s,a,c,n);a+=d.offsetX,o.push(d.path)}}return o}function Gl(e,t,n,i,s){const r=s.glyphs[e]||s.glyphs["?"];if(!r){console.error('THREE.Font: character "'+e+'" does not exists in font family '+s.familyName+".");return}const o=new Ur;let a,c,l,u,d,h,p,m;if(r.o){const y=r._cachedOutline||(r._cachedOutline=r.o.split(" "));for(let S=0,_=y.length;S<_;)switch(y[S++]){case"m":a=y[S++]*t+n,c=y[S++]*t+i,o.moveTo(a,c);break;case"l":a=y[S++]*t+n,c=y[S++]*t+i,o.lineTo(a,c);break;case"q":l=y[S++]*t+n,u=y[S++]*t+i,d=y[S++]*t+n,h=y[S++]*t+i,o.quadraticCurveTo(d,h,l,u);break;case"b":l=y[S++]*t+n,u=y[S++]*t+i,d=y[S++]*t+n,h=y[S++]*t+i,p=y[S++]*t+n,m=y[S++]*t+i,o.bezierCurveTo(d,h,p,m,l,u);break}}return{offsetX:r.ha*t,path:o}}class Ai{static instance=new Ai;_loader=new jl;_defaultFont;create3dText(t,n=new P(1,1,1),i=120){const s=this._defaultFont.generateShapes(t,i),r=new Wr(s,{bevelEnabled:!1}),o=1/i;r.scale(n.x*o,n.y*o,n.z*o),r.computeBoundingBox();const a=-.5*(r.boundingBox?.max.x-r.boundingBox?.min.x);return r.translate(a,0,1),r}getDefaultFont(){return new Promise(t=>{this._defaultFont&&t(this._defaultFont),this._loader.load(f.publicPath+"/fonts/IBMPlexSans-Regular.json",n=>{this._defaultFont=n,t(this._defaultFont)})})}}new P;const Ju=H("TriggerVolumeComponent"),Oi=new Me;class Ri{vertices;constructor(t={}){this.vertices={near:[new P,new P,new P,new P],far:[new P,new P,new P,new P]},t.projectionMatrix!==void 0&&this.setFromProjectionMatrix(t.projectionMatrix,t.maxFar||1e4)}setFromProjectionMatrix(t,n){const i=t.elements[2*4+3]===0;return Oi.copy(t).invert(),this.vertices.near[0].set(1,1,-1),this.vertices.near[1].set(1,-1,-1),this.vertices.near[2].set(-1,-1,-1),this.vertices.near[3].set(-1,1,-1),this.vertices.near.forEach(s=>{s.applyMatrix4(Oi)}),this.vertices.far[0].set(1,1,1),this.vertices.far[1].set(1,-1,1),this.vertices.far[2].set(-1,-1,1),this.vertices.far[3].set(-1,1,1),this.vertices.far.forEach(s=>{s.applyMatrix4(Oi);const r=Math.abs(s.z);i?s.z*=Math.min(n/r,1):s.multiplyScalar(Math.min(n/r,1))}),this.vertices}split(t,n){for(;t.length>n.length;)n.push(new Ri);n.length=t.length;for(let i=0;i<t.length;i++){const s=n[i];if(i===0)for(let r=0;r<4;r++)s.vertices.near[r].copy(this.vertices.near[r]);else for(let r=0;r<4;r++)s.vertices.near[r].lerpVectors(this.vertices.near[r],this.vertices.far[r],t[i-1]);if(i===t.length-1)for(let r=0;r<4;r++)s.vertices.far[r].copy(this.vertices.far[r]);else for(let r=0;r<4;r++)s.vertices.far[r].lerpVectors(this.vertices.near[r],this.vertices.far[r],t[i])}}toSpace(t,n){for(var i=0;i<4;i++)n.vertices.near[i].copy(this.vertices.near[i]).applyMatrix4(t),n.vertices.far[i].copy(this.vertices.far[i]).applyMatrix4(t)}}""+Br.lights_pars_begin;new Me;new Ri;new P;new Ce;var er;(function(e){e[e.UNIFORM=0]="UNIFORM",e[e.LOGARITHMIC=1]="LOGARITHMIC",e[e.PRACTICAL=2]="PRACTICAL",e[e.CUSTOM=3]="CUSTOM"})(er||(er={}));var tr=Worker;class zl{running;worker;constructor(){this.running=!1,ue?this.worker=new tr("/workers/generateBVHAsync.worker.js"):this._serverWorker()}async _serverWorker(){const n=(await require("path")).resolve(__dirname,"./generateBVHAsync.worker.js");this.worker=new tr(n,{type:"module"})}generate(t,n={}){if(this.running)throw new Error("GenerateMeshBVHWorker: Already running job.");const{worker:i}=this;return this.running=!0,new Promise((s,r)=>{if(i.onmessage=l=>{this.running=!1,i.onmessage=null;const{serialized:u,position:d,error:h}=l.data;if(h)r(new Error(h));else{t.setIndex(new Fn(u.index,1));const p=Z.deserialize(u,t,!1);Object.assign({setBoundingBox:!0},n).setBoundingBox&&(t.boundingBox=p.getBoundingBox(new Ce)),s(p)}},t.attributes.position.isInterleavedBufferAttribute||t.index&&t.index.isInterleavedBufferAttribute)throw new Error("GenerateMeshBVHWorker: InterleavedBufferAttribute are not supported for the geometry attributes.");const o=t.index?Uint32Array.from(t.index.array):null,a=Float32Array.from(t.attributes.position.array),c=[a];o&&c.push(o),i.postMessage({index:o,position:a,options:n},c.map(l=>l.buffer))})}terminate(){this.worker.terminate()}}let nr=2;ue&&(nr=window.navigator?.hardwareConcurrency||2);let bi=[],Li=[];function $l(e){if(!!e.isMesh){if(!bi.length)for(let t=0;t<nr;t++)bi.push(new zl);Li.push(e),ir()}}function ir(){for(let e of bi){if(Li.length<1)break;if(e.running)continue;const t=Li.shift();e.generate(t.geometry).then(n=>{t.geometry.boundsTree=n,ir()})}}class at{static instance;bpcemOptions={bakeScale:new P(1,1,1),bakePositionOffset:new P};envMapIntensity=1;boxProjection=!1}const sr=xe([ce]),Kl=xe([ce,Gs]),Yl=xe([ce,Zs]),ql=xe([ce,Hl]);async function Ql(e){return at.instance=new at,()=>{for(const t of sr.enter()){const n=D(t,ce),i=D(t,Xs);n.value.entity=t,f.scene.children.includes(n.value)?console.warn("[Object3DComponent]: Scene object has been added manually.",n.value):f.scene.add(n.value),n.value.layers.set(Xi.Scene),n.value.traverse(s=>{const r=s.material;if(typeof r!="undefined"&&(r.dithering=!0),i&&(s.receiveShadow=i.receiveShadow,s.castShadow=i.castShadow),f.simpleMaterials){if(s.material instanceof Hr){const o=s.material;s.material=new jr,Vr.prototype.copy.call(s.material,o)}}else{const o=s.material;typeof o!="undefined"&&(at.instance.boxProjection&&(o.onBeforeCompile=lo(at.instance.bpcemOptions.bakeScale,at.instance.bpcemOptions.bakePositionOffset)),o.envMapIntensity=at.instance.envMapIntensity,s.receiveShadow&&f.csm?.setupMaterial(s))}}),n.value.traverse($l)}for(const t of sr.exit()){const n=D(t,ce);n&&f.scene.children.includes(n.value)?f.scene.remove(n.value):console.warn("[Object3DComponent]: Scene object has been removed manually.")}for(const t of Kl.enter())D(t,ce)?.value?.traverse(i=>{i.layers.enable(Xi.Portal)});for(const t of Yl.enter()){const n=D(t,ce),i=D(t,Zs);n.value.visible=i.value}for(const t of ql())D(t,ce).value.update(e.fixedDelta)}}var Jl=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",SceneOptions:at,default:Ql});H("FogComponent");var rr;(function(e){e[e.ENVMAP=0]="ENVMAP"})(rr||(rr={}));const k=(e,t)=>{f.defaultWorld._pipeline.push({type:e,systemModulePromise:t,args:void 0})},Et=(e,t,n)=>{f.defaultWorld._pipeline.push({type:e,systemModulePromise:t,args:n})},me=(e,t)=>{f.defaultWorld._pipeline.push(...t.filter(n=>n.type===e))},Zl={transport:null,messageTypes:{..._r}};var Ee;(function(e){e[e.CLIENT=0]="CLIENT",e[e.EDITOR=1]="EDITOR",e[e.SERVER=2]="SERVER",e[e.MEDIA=3]="MEDIA"})(Ee||(Ee={}));const eu={type:0,publicPath:"",input:{schemas:[Ts]},networking:{schema:Zl},scene:{disabled:!1},renderer:{disabled:!1,postProcessing:!0},physics:{settings:{bounceThresholdVelocity:.5,start:!1,lengthScale:1,verbose:!1,substeps:1,gravity:{x:0,y:-9.81,z:0}},simulationEnabled:!0},systems:[]};var X;(function(e){e[e.OFF=0]="OFF",e[e.ON=1]="ON",e[e.FALSE=0]="FALSE",e[e.TRUE=1]="TRUE"})(X||(X={}));const _t=[];let or;const tu=e=>{console.log("A gamepad connected:",e.gamepad,e.gamepad.mapping),e.gamepad.mapping!=="standard"&&console.error("Non-standard gamepad mapping detected, it could be handled not properly."),or=e.gamepad;for(let t=0;t<or.buttons.length;t++)typeof _t[t]=="undefined"&&(_t[t]=0)},nu=e=>{if(console.log("A gamepad disconnected:",e.gamepad),!!_t)for(let t=0;t<_t.length;t++)_t[t]===X.ON&&f.inputState.set(iu[e.gamepad.mapping||"standard"][t],{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Changed}),_t[t]=0},iu={standard:{0:W.A,1:W.B,2:W.X,3:W.Y,4:W.LBumper,5:W.RBumper,6:W.LTrigger,7:W.RTrigger,8:W.Back,9:W.Start,10:W.LStick,11:W.RStick,12:W.DPad1,13:W.DPad2,14:W.DPad3,15:W.DPad4},"xr-standard":{left:{buttons:{0:W.LTrigger,1:W.LBumper,2:W.LPad,3:W.LStick,4:W.X,5:W.Y},axes:ht.Left},right:{buttons:{0:W.RTrigger,1:W.RBumper,2:W.RPad,3:W.RStick,4:W.A,5:W.B},axes:ht.Right}}};let Nn=[0,0],ar=Date.now();const su=200,ru=()=>Boolean(f.inputState.get(je.Left)?.value[0]||f.inputState.get(je.Left)?.value[1]||f.inputState.get(je.Right)?.value[0]||f.inputState.get(je.Right)?.value[1]),cr=e=>{if(!f.mouseInputEnabled)return;const t=Ci(e.touches[0].clientX,e.touches[0].clientY,window.innerWidth,window.innerHeight),n=[t.x,t.y];if(e.touches.length>=1){const i=G.Touch1Position,s=f.inputState.has(i);f.inputState.set(i,{type:N.TWODIM,value:n,lifecycleState:s?L.Changed:L.Started});const r=e.type==="touchstart",o=G.Touch1Movement,a=[0,0];!r&&Nn&&(a[0]=n[0]-Nn[0],a[1]=n[1]-Nn[1]),Nn=n,f.inputState.set(o,{type:N.TWODIM,value:a,lifecycleState:f.inputState.has(o)?L.Changed:L.Started})}else if(e.touches.length>=2){const i=Ci(e.touches[1].clientX,e.touches[1].clientY,window.innerWidth,window.innerHeight),s=[i.x,i.y];f.inputState.set(G.Touch1Position,{type:N.TWODIM,value:n,lifecycleState:L.Changed}),f.inputState.set(G.Touch2Position,{type:N.TWODIM,value:s,lifecycleState:L.Changed});const r=G.Scale;if(ru()){if(f.inputState.has(r)){const[_]=f.inputState.get(r)?.value;f.inputState.set(r,{type:N.ONEDIM,value:[_],lifecycleState:L.Ended})}return}const a=f.prevInputState.get(G.Touch1Position)?.value,c=f.prevInputState.get(G.Touch2Position)?.value;if(e.type==="touchstart"||!a||!c)return;if(!f.inputState.has(G.Touch1Position)||!f.inputState.has(G.Touch2Position)){console.warn("handleTouchScale requires POINTER1_POSITION and POINTER2_POSITION to be set and updated.");return}const l=new _e().fromArray(f.inputState.get(G.Touch1Position)?.value),u=new _e().fromArray(f.inputState.get(G.Touch2Position)?.value),d=new _e().fromArray(a),h=new _e().fromArray(c),p=l.distanceTo(u),y=(d.distanceTo(h)-p)*.01,S=Math.sign(y);if(!f.inputState.has(r))f.inputState.set(r,{type:N.ONEDIM,value:[S],lifecycleState:L.Started});else{const[_]=f.inputState.get(r)?.value;f.inputState.set(r,{type:N.ONEDIM,value:[_+S],lifecycleState:L.Changed})}}},Di=e=>{if(!!f.mouseInputEnabled){if(e.targetTouches.length){const t=G.Touch;if(e.type==="touchstart"){if(e.targetTouches.length==1){const n=Date.now(),i=G.DoubleTouch;n-ar<su?f.inputState.set(i,{type:N.BUTTON,value:[X.ON],lifecycleState:f.inputState.has(i)?L.Continued:L.Started}):f.inputState.has(i)&&f.inputState.set(i,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended}),ar=n}if(f.inputState.has(t)&&f.inputState.get(t)?.value[0]===X.ON){f.inputState.get(t)?.lifecycleState!==L.Continued&&f.inputState.set(t,{type:N.BUTTON,value:[X.ON],lifecycleState:L.Continued});return}f.inputState.set(t,{type:N.BUTTON,value:[X.ON],lifecycleState:L.Started})}else f.inputState.set(t,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended});return}f.inputState.has(G.Touch)&&f.inputState.set(G.Touch,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended}),f.inputState.has(G.DoubleTouch)&&f.inputState.set(G.DoubleTouch,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended}),f.inputState.has(G.Touch1Movement)&&f.inputState.set(G.Touch1Movement,{type:N.TWODIM,value:[0,0],lifecycleState:L.Ended})}},ou=e=>{const{stick:t,value:n}=e.detail;if(!t)return;const i=[n.x,n.y,n.angleRad];if(!f.inputState.has(t))f.inputState.set(t,{type:N.TWODIM,value:i,lifecycleState:L.Started});else{const s=f.inputState.get(t);JSON.stringify(s)!==JSON.stringify(i)&&f.inputState.set(t,{type:N.TWODIM,value:i,lifecycleState:L.Changed})}};function lr(e){const t=e.type==="touchgamepadbuttondown",n=e.detail.button;if(t){if(f.inputState.has(n)&&f.inputState.get(n)?.value[0]===X.ON){f.inputState.get(n)?.lifecycleState!==L.Continued&&f.inputState.set(n,{type:N.BUTTON,value:[X.ON],lifecycleState:L.Continued});return}f.inputState.set(n,{type:N.BUTTON,value:[X.ON],lifecycleState:L.Started})}else f.inputState.set(n,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended})}const au=e=>{if(!f.mouseInputEnabled||e?.target!==le.instance.canvas)return;const t=e?.deltaY;if(!f.inputState.has(U.MouseScroll))f.inputState.set(U.MouseScroll,{type:N.ONEDIM,value:[Math.sign(t)],lifecycleState:L.Started});else{const n=f.inputState.get(U.MouseScroll)?.value[0];if(n===t){f.inputState.set(U.MouseScroll,{type:N.ONEDIM,value:[t],lifecycleState:L.Unchanged});return}f.inputState.set(U.MouseScroll,{type:N.ONEDIM,value:[n+Math.sign(t)],lifecycleState:L.Changed})}};function cu(e,t,n,i){return{x:e/(n/2),y:-t/(i/2)}}let xn;const lu=e=>{if(!f.mouseInputEnabled)return;xn&&(clearTimeout(xn),xn=null);const t=Ci(e.clientX,e.clientY,window.innerWidth,window.innerHeight),n=[t.x,t.y];f.inputState.set(U.MousePosition,{type:N.TWODIM,value:n,lifecycleState:f.inputState.has(U.MousePosition)?L.Changed:L.Started});const i=cu(e.movementX,e.movementY,window.outerWidth,window.outerHeight),s=[i.x,i.y];f.inputState.set(U.MouseMovement,{type:N.TWODIM,value:s,lifecycleState:f.inputState.has(U.MouseMovement)?L.Changed:L.Started});const r=f.inputState.get(U.MouseClickDownPosition);let o=[0,0];r&&r?.lifecycleState!==L.Ended&&(o=s,xn=setTimeout(()=>{f.inputState.set(U.MouseClickDownMovement,{type:N.TWODIM,value:[0,0],lifecycleState:f.inputState.has(U.MouseClickDownMovement)?L.Changed:L.Started})},50),f.inputState.set(U.MouseClickDownMovement,{type:N.TWODIM,value:o,lifecycleState:f.inputState.has(U.MouseClickDownMovement)?L.Changed:L.Started}))},ur=e=>{const t=e.type==="mousedown";if(t&&!f.mouseInputEnabled)return;const n=[0,0];n[0]=e.clientX/window.innerWidth*2-1,n[1]=e.clientY/window.innerHeight*-2+1,t?(f.inputState.set(e.button,{type:N.BUTTON,value:[X.ON],lifecycleState:L.Started}),f.inputState.set(U.MouseClickDownPosition,{type:N.TWODIM,value:n,lifecycleState:L.Started})):(f.inputState.set(e.button,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended}),f.inputState.set(U.MouseClickDownPosition,{type:N.TWODIM,value:n,lifecycleState:L.Ended}),f.inputState.set(U.MouseClickDownTransformRotation,{type:N.TWODIM,value:n,lifecycleState:L.Ended}),f.inputState.set(U.MouseClickDownMovement,{type:N.TWODIM,value:[0,0],lifecycleState:L.Ended}))},dr=e=>{const t=e.type==="keydown";if(t&&!f.keyboardInputEnabled)return;const n=e.target;if(n?.tagName==="INPUT"||n?.tagName==="SELECT"||n?.tagName==="TEXTAREA")return;const i=e.code;if(t){if(f.inputState.has(i)&&f.inputState.get(i)?.value[0]===X.ON){f.inputState.get(i)?.lifecycleState!==L.Continued&&f.inputState.set(i,{type:N.BUTTON,value:[X.ON],lifecycleState:L.Continued});return}f.inputState.set(i,{type:N.BUTTON,value:[X.ON],lifecycleState:L.Started})}else f.inputState.set(i,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended})},fr=e=>{e.type==="focus"&&f.inputState.forEach((t,n)=>{t.type===N.BUTTON&&t.value[0]===X.ON&&f.inputState.set(n,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended})})},uu=e=>{document.visibilityState==="hidden"&&f.inputState.forEach((t,n)=>{t.type===N.BUTTON&&t.value[0]===X.ON&&f.inputState.set(n,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended})}),I.instance.dispatchEvent({type:I.EVENTS.WINDOW_FOCUS,focused:document.visibilityState==="visible"})},du=e=>{e.preventDefault()},fu=e=>{if([U.LeftButton,U.MiddleButton,U.RightButton].forEach(t=>{!f.inputState.has(t)||f.inputState.set(t,{type:N.BUTTON,value:[X.OFF],lifecycleState:L.Ended})}),f.inputState.has(U.MouseClickDownPosition)){const t=f.inputState.get(U.MouseClickDownPosition)?.value;(t[0]!==0||t[1]!==0)&&f.inputState.set(U.MouseClickDownPosition,{type:N.TWODIM,value:[0,0],lifecycleState:L.Ended})}if(f.inputState.has(U.MouseClickDownTransformRotation)){const t=f.inputState.get(U.MouseClickDownTransformRotation)?.value;(t[0]!==0||t[1]!==0)&&f.inputState.set(U.MouseClickDownTransformRotation,{type:N.TWODIM,value:[0,0],lifecycleState:L.Ended})}};function Ci(e,t,n,i){return{x:e/n*2-1,y:t/i*-2+1}}const hu=function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassive",null,t),window.removeEventListener("testPassive",null,t)}catch(t){}return e}(),pu={37:1,38:1,39:1,40:1};function hr(e){e.preventDefault()}function mu(e){if(pu[e.keyCode])return hr(e),!1}const yu=e=>{window.addEventListener("DOMMouseScroll",hr,!1),window.addEventListener("keydown",mu,!1);const t=(n,i,s,r=!1)=>{r&&hu?n.addEventListener(i,s,{passive:r}):n.addEventListener(i,s)};t(e,"contextmenu",du),t(e,"mousemove",lu),t(e,"mouseup",ur),t(e,"mousedown",ur),t(e,"mouseleave",fu),t(e,"wheel",au,!0),t(e,"touchstart",n=>{Di(n),cr(n)},!0),t(e,"touchend",Di,!0),t(e,"touchcancel",Di,!0),t(e,"touchmove",cr,!0),t(document,"keyup",dr),t(document,"keydown",dr),t(window,"focus",fr),t(window,"blur",fr),t(document,"visibilitychange",uu),t(document,"touchstickmove",ou),t(document,"touchgamepadbuttondown",lr),t(document,"touchgamepadbuttonup",lr),t(window,"gamepadconnected",tu),t(window,"gamepaddisconnected",nu)},Su=e=>{const t=document.getElementById(e);return t.ondragstart=n=>(n.preventDefault(),!1),t},pr=Symbol("CreateWorld");class Ii{constructor(){Yr(this),f.worlds.push(this),this.worldEntity=Qs(this),this.localClientEntity=ue?Qs(this):NaN,f.defaultWorld||(f.defaultWorld=this)}static[pr]=()=>new Ii;sceneMetadata=void 0;worldMetadata={};delta=NaN;elapsedTime=NaN;fixedDelta=NaN;fixedElapsedTime=NaN;fixedTick=-1;_removedComponents=new Map;_pipeline=[];physics=new Wl;entities=[];portalEntities=[];isInPortal=!1;clients=new Map;incomingActions=new Set;delayedActions=new Set;outgoingActions=new Set;outgoingNetworkState;previousNetworkState;get isHosting(){return f.userId===this.hostId}hostId="server";worldEntity;localClientEntity;freeSystems=[];fixedSystems=[];injectedSystems={[O.UPDATE]:[],[O.FIXED_EARLY]:[],[O.FIXED]:[],[O.FIXED_LATE]:[],[O.PRE_RENDER]:[],[O.POST_RENDER]:[]};namedEntities=new Map;networkObjectQuery=xe([Zt]);getOwnedNetworkObjects(t){return this.networkObjectQuery(this).filter(n=>D(n,Zt).userId===t)}getNetworkObject(t){return this.networkObjectQuery(this).find(n=>D(n,Zt).networkId===t)}getUserAvatarEntity(t){return this.getOwnedNetworkObjects(t).find(n=>Qe(n,Ne,this))}receptors=new Set;execute(t,n){this.delta=t,this.elapsedTime=n;for(const i of this.freeSystems)i.execute();for(const[i,s]of this._removedComponents)for(const r of s)r.delete(i);this._removedComponents.clear()}async initSystems(){const t=async s=>{const r=await s.systemModule.default(this,s.args);return{name:s.systemModule.default.name,type:s.type,execute:()=>{try{r()}catch(o){console.error(o)}}}},n=await Promise.all(this._pipeline.map(async s=>({args:s.args,type:s.type,systemModule:await s.systemModulePromise}))),i=await Promise.all(n.map(t));i.forEach(s=>console.log(`${s.type} ${s.name}`)),this.freeSystems=i.filter(s=>!s.type.includes("FIXED")),this.fixedSystems=i.filter(s=>s.type.includes("FIXED")),console.log("[World]: All systems initialized!")}}function gu(){return console.log("Creating world"),Ii[pr]()}Y.prototype.toJSON=function(){return{x:this._x,y:this._y,z:this._z,w:this._w}};Xr.prototype.toJSON=function(){return{x:this._x,y:this._y,z:this._z,order:this._order}};Wi.prototype.raycast=ta;ji.prototype.disposeBoundsTree=ia;ji.prototype.computeBoundsTree=na;const Eu=async e=>{const t=Su(e.renderer.canvasId);f.audioListener=new Ro,f.scene=new Wn,I.instance.once(I.EVENTS.JOINED_WORLD,()=>{const n=document.createElement("canvas"),i=n.getContext("webgl"),s=i.getExtension("WEBGL_debug_renderer_info"),r=i.getParameter(s.UNMASKED_RENDERER_WEBGL),o=!/SwiftShader/.test(r);n.remove(),I.instance.dispatchEvent({type:I.EVENTS.ENABLE_SCENE,renderer:o,physics:!0}),f.hasJoinedWorld=!0}),e.scene.disabled!==!0&&(f.camera=new Un(60,window.innerWidth/window.innerHeight,.1,1e4),f.camera.layers.enableAll(),f.scene.add(f.camera),f.camera.add(f.audioListener),yu(t)),await Ai.instance.getDefaultFont(),globalThis.botHooks=ul,globalThis.Engine=f,globalThis.EngineEvents=I,globalThis.Network=Jt,await Pu(e,t)},_u=async e=>{f.scene=new Wn,f.camera=new Un(60,window.innerWidth/window.innerHeight,.1,1e4),f.camera.layers.enableAll(),f.scene.add(f.camera),await wu(e)},mr=async(e,t=!1)=>{f.scene=new Wn,Jt.instance.isInitialized=!0,I.instance.once(I.EVENTS.JOINED_WORLD,()=>{console.log("joined world"),I.instance.dispatchEvent({type:I.EVENTS.ENABLE_SCENE,renderer:!0,physics:!0}),f.hasJoinedWorld=!0}),t?await Tu():(await qr(),new st,await vu(e))},Pu=async(e,t)=>{if(e.scene.disabled){k(O.UPDATE,C(()=>import("./IncomingNetworkSystem.9c7fdda8.js"),["assets/IncomingNetworkSystem.9c7fdda8.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/networkSchema.bc1be026.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js","assets/XRHandsInputComponent.3d76e9a2.js"])),k(O.UPDATE,C(()=>import("./OutgoingNetworkSystem.b6954122.js"),["assets/OutgoingNetworkSystem.b6954122.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js","assets/networkSchema.bc1be026.js","assets/mathUtils.a0a00446.js","assets/XRHandsInputComponent.3d76e9a2.js"]));return}k(O.UPDATE,C(()=>import("./XRSystem.da086cc4.js"),["assets/XRSystem.da086cc4.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/addControllerModels.14512c2e.js","assets/WebXRFunctions.87bd8924.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/XRHandsInputComponent.3d76e9a2.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.UPDATE,C(()=>import("./ClientInputSystem.9e5cacb8.js"),["assets/ClientInputSystem.9e5cacb8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.UPDATE,C(()=>import("./CameraSystem.0bbf45bb.js"),["assets/CameraSystem.0bbf45bb.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.UPDATE,C(()=>import("./AutopilotSystem.3139825a.js"),["assets/AutopilotSystem.3139825a.js","assets/three.module.493739a3.js","assets/SystemUpdateType.772fc25d.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AutoPilotOverrideComponent.fbc59de7.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),me(O.UPDATE,e.systems),Et(O.UPDATE,C(()=>import("./FixedPipelineSystem.55f09bdd.js"),["assets/FixedPipelineSystem.55f09bdd.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"]),{updatesPerSecond:60}),k(O.FIXED_EARLY,C(()=>import("./IncomingNetworkSystem.9c7fdda8.js"),["assets/IncomingNetworkSystem.9c7fdda8.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/networkSchema.bc1be026.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js","assets/XRHandsInputComponent.3d76e9a2.js"])),me(O.FIXED_EARLY,e.systems),k(O.FIXED,C(()=>import("./BotHookSystem.6c2e2f2d.js"),["assets/BotHookSystem.6c2e2f2d.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.FIXED,C(()=>import("./MapUpdateSystem.f8d6b407.js"),["assets/MapUpdateSystem.f8d6b407.js","assets/index.2272cc2f.js","assets/SystemUpdateType.772fc25d.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.FIXED,C(()=>import("./FollowSystem.7c118a1d.js"),["assets/FollowSystem.7c118a1d.js","assets/mathUtils.a0a00446.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AutoPilotOverrideComponent.fbc59de7.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.FIXED,C(()=>import("./AfkCheckSystem.23d641ed.js"),["assets/AfkCheckSystem.23d641ed.js","assets/SystemUpdateType.772fc25d.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.FIXED,C(()=>Promise.resolve().then(function(){return Ks}),void 0)),k(O.FIXED,C(()=>import("./AvatarSystem.44f2ec8f.js"),["assets/AvatarSystem.44f2ec8f.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/teleportRigidbody.0bf2d2c0.js","assets/XRHandsInputComponent.3d76e9a2.js","assets/addControllerModels.14512c2e.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.FIXED,C(()=>Promise.resolve().then(function(){return Gc}),void 0)),k(O.FIXED,C(()=>import("./SkeletonRigSystem.e2e57ecb.js"),["assets/SkeletonRigSystem.e2e57ecb.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js"])),me(O.FIXED,e.systems),k(O.FIXED_LATE,C(()=>import("./EquippableSystem.5bfb227b.js"),["assets/EquippableSystem.5bfb227b.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js","assets/WebXRFunctions.87bd8924.js","assets/XRHandsInputComponent.3d76e9a2.js","assets/addControllerModels.14512c2e.js","assets/teleportRigidbody.0bf2d2c0.js"])),k(O.FIXED_LATE,C(()=>Promise.resolve().then(function(){return Jl}),void 0)),k(O.FIXED_LATE,C(()=>import("./NamedEntitiesSystem.458dccc9.js"),["assets/NamedEntitiesSystem.458dccc9.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.FIXED_LATE,C(()=>import("./TransformSystem.0f2998f4.js"),["assets/TransformSystem.0f2998f4.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/TweenComponent.b7ca1b88.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),Et(O.FIXED_LATE,C(()=>import("./PhysicsSystem.a06518b8.js"),["assets/PhysicsSystem.a06518b8.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/teleportRigidbody.0bf2d2c0.js"]),{simulationEnabled:e.physics.simulationEnabled}),me(O.FIXED_LATE,e.systems),k(O.FIXED_LATE,C(()=>import("./OutgoingNetworkSystem.b6954122.js"),["assets/OutgoingNetworkSystem.b6954122.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js","assets/networkSchema.bc1be026.js","assets/mathUtils.a0a00446.js","assets/XRHandsInputComponent.3d76e9a2.js"])),k(O.PRE_RENDER,C(()=>import("./MediaStreamSystem.471731b8.js"),["assets/MediaStreamSystem.471731b8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.PRE_RENDER,C(()=>import("./XRUISystem.9de7442d.js"),["assets/XRUISystem.9de7442d.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js"])),k(O.PRE_RENDER,C(()=>import("./InteractiveSystem.5ceb18f3.js"),["assets/InteractiveSystem.5ceb18f3.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/HighlightComponent.9014c62c.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/BoundingBoxComponent.a58053fa.js","assets/tween.esm.78508545.js","assets/TweenComponent.b7ca1b88.js","assets/WebXRFunctions.87bd8924.js","assets/XRHandsInputComponent.3d76e9a2.js","assets/addControllerModels.14512c2e.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.PRE_RENDER,C(()=>import("./AudioSystem.544d3f74.js"),["assets/AudioSystem.544d3f74.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js"])),k(O.PRE_RENDER,C(()=>import("./PositionalAudioSystem.551dca8b.js"),["assets/PositionalAudioSystem.551dca8b.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/MediaStreamSystem.471731b8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.PRE_RENDER,C(()=>import("./AvatarLoadingSystem.64df30f5.js"),["assets/AvatarLoadingSystem.64df30f5.js","assets/three.module.493739a3.js","assets/tween.esm.78508545.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/TweenComponent.b7ca1b88.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.PRE_RENDER,C(()=>import("./AnimationSystem.b7e062f4.js"),["assets/AnimationSystem.b7e062f4.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.PRE_RENDER,C(()=>import("./RendererUpdateSystem.961b58ba.js"),["assets/RendererUpdateSystem.961b58ba.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.PRE_RENDER,C(()=>import("./ParticleSystem.5dde7232.js"),["assets/ParticleSystem.5dde7232.js","assets/SystemUpdateType.772fc25d.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js"])),k(O.PRE_RENDER,C(()=>import("./DebugHelpersSystem.9d006edc.js"),["assets/DebugHelpersSystem.9d006edc.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/BoundingBoxComponent.a58053fa.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.PRE_RENDER,C(()=>import("./HighlightSystem.870742b0.js"),["assets/HighlightSystem.870742b0.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/HighlightComponent.9014c62c.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),me(O.PRE_RENDER,e.systems),Et(O.PRE_RENDER,C(()=>Promise.resolve().then(function(){return Nl}),void 0),{canvas:t,enabled:!e.renderer.disabled}),me(O.POST_RENDER,e.systems)},wu=async e=>{k(O.FIXED,C(()=>import("./NamedEntitiesSystem.458dccc9.js"),["assets/NamedEntitiesSystem.458dccc9.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.FIXED,C(()=>import("./TransformSystem.0f2998f4.js"),["assets/TransformSystem.0f2998f4.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/TweenComponent.b7ca1b88.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),Et(O.FIXED,C(()=>import("./PhysicsSystem.a06518b8.js"),["assets/PhysicsSystem.a06518b8.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/teleportRigidbody.0bf2d2c0.js"]),{simulationEnabled:e.physics.simulationEnabled}),k(O.FIXED,C(()=>import("./ParticleSystem.5dde7232.js"),["assets/ParticleSystem.5dde7232.js","assets/SystemUpdateType.772fc25d.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js"])),k(O.FIXED,C(()=>import("./DebugHelpersSystem.9d006edc.js"),["assets/DebugHelpersSystem.9d006edc.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/BoundingBoxComponent.a58053fa.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"]))},vu=async e=>{me(O.UPDATE,e.systems),Et(O.UPDATE,C(()=>import("./FixedPipelineSystem.55f09bdd.js"),["assets/FixedPipelineSystem.55f09bdd.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"]),{updatesPerSecond:60}),k(O.FIXED_EARLY,C(()=>import("./IncomingNetworkSystem.9c7fdda8.js"),["assets/IncomingNetworkSystem.9c7fdda8.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/networkSchema.bc1be026.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js","assets/XRHandsInputComponent.3d76e9a2.js"])),me(O.FIXED_EARLY,e.systems),k(O.FIXED,C(()=>import("./AvatarSystem.44f2ec8f.js"),["assets/AvatarSystem.44f2ec8f.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/teleportRigidbody.0bf2d2c0.js","assets/XRHandsInputComponent.3d76e9a2.js","assets/addControllerModels.14512c2e.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),k(O.FIXED,C(()=>Promise.resolve().then(function(){return Ks}),void 0)),me(O.FIXED,e.systems),k(O.FIXED_LATE,C(()=>import("./NamedEntitiesSystem.458dccc9.js"),["assets/NamedEntitiesSystem.458dccc9.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"])),k(O.FIXED_LATE,C(()=>import("./TransformSystem.0f2998f4.js"),["assets/TransformSystem.0f2998f4.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/TweenComponent.b7ca1b88.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),Et(O.FIXED_LATE,C(()=>import("./PhysicsSystem.a06518b8.js"),["assets/PhysicsSystem.a06518b8.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/index.81138b53.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js","assets/teleportRigidbody.0bf2d2c0.js"]),{simulationEnabled:e.physics.simulationEnabled}),me(O.FIXED_LATE,e.systems),k(O.FIXED_LATE,C(()=>import("./OutgoingNetworkSystem.b6954122.js"),["assets/OutgoingNetworkSystem.b6954122.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js","assets/networkSchema.bc1be026.js","assets/mathUtils.a0a00446.js","assets/XRHandsInputComponent.3d76e9a2.js"])),me(O.PRE_RENDER,e.systems),me(O.POST_RENDER,e.systems)},Tu=async e=>{k(O.UPDATE,C(()=>import("./MediaStreamSystem.471731b8.js"),["assets/MediaStreamSystem.471731b8.js","assets/avatarFunctions.6d66cf01.js","assets/three.module.493739a3.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/vendor.475cb2ff.js","assets/AuthService.e8999ddc.js","assets/AlertService.5d8abaff.js","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/feathers.32f4d4e8.js","assets/SystemUpdateType.772fc25d.js","assets/upload.bd537b46.js","assets/index.81138b53.js"]))},Au=async(e={})=>{const t=Sr.defaultsDeep({},e,eu),n=gu();if(f.currentWorld=n,f.initOptions=t,f.offlineMode=!1,f.publicPath=t.publicPath,t.type!==Ee.SERVER&&globalThis.navigator&&globalThis.window){const s=_o(),r=Yi(navigator.userAgent);window.iOS=r==="iOS"||/iPad|iPhone|iPod/.test(navigator.platform)||navigator.platform==="MacIntel"&&navigator.maxTouchPoints>1,window.safariWebBrowser=s?.name==="safari",f.isHMD=/Oculus/i.test(navigator.userAgent),f.xrSupported=await navigator.xr?.isSessionSupported("immersive-vr")}t.type===Ee.CLIENT?await Eu(t):t.type===Ee.EDITOR?await _u(t):t.type===Ee.SERVER?await mr(t):t.type===Ee.MEDIA&&await mr(t,!0),await n.physics.createScene(),await n.initSystems();const i=(s,r)=>{for(const o of f.worlds)f.currentWorld=o,o.execute(s,r);f.currentWorld=null};if(f.engineTimer=Sl(i),t.type===Ee.CLIENT){I.instance.once(I.EVENTS.SCENE_LOADED,()=>{f.engineTimer.start()});const s=()=>{f.hasEngaged=!0,I.instance.dispatchEvent({type:I.EVENTS.USER_ENGAGE}),["click","touchstart","touchend","pointerdown"].forEach(r=>{window.addEventListener(r,s)})};["click","touchstart","touchend","pointerdown"].forEach(r=>{window.addEventListener(r,s)}),I.instance.once(I.EVENTS.CONNECT,({id:r})=>{Jt.instance.isInitialized=!0,f.userId=r})}else t.type===Ee.SERVER?(f.userId="server",f.engineTimer.start()):t.type===Ee.MEDIA&&(f.userId="mediaserver",f.engineTimer.start());f.isInitialized=!0,I.instance.dispatchEvent({type:I.EVENTS.INITIALIZED_ENGINE})},Ou=Ye.exports.lazy(()=>C(()=>import("./EditorContainer.56baebbd.js"),["assets/EditorContainer.56baebbd.js","assets/EditorContainer.e42b09cb.css","assets/_app.f0a72417.js","assets/_app.414351c7.css","assets/vendor.475cb2ff.js","assets/index.7b02be28.js","assets/index.85ecc35e.css","assets/projectFunctions.0b423c97.js","assets/projectFunctions.9c5356f8.css","assets/upload.bd537b46.js","assets/___vite-browser-external_commonjs-proxy.0e203c6e.js","assets/__vite-browser-external.b6126e45.js","assets/three.module.493739a3.js","assets/avatarFunctions.6d66cf01.js","assets/SystemUpdateType.772fc25d.js","assets/index.81138b53.js","assets/_baseIteratee.d1a5d142.js","assets/index.ebe70c7a.js","assets/createSvgIcon.896642b4.js","assets/capitalize.fc001633.js","assets/useControlled.8dca0ac1.js","assets/useFormControl.a2039fae.js","assets/IconButton.ce216bbb.js","assets/ButtonBase.fb193a96.js","assets/createSvgIcon.57924123.js","assets/ownerWindow.3d7152ce.js","assets/index.2272cc2f.js","assets/SceneService.306da1a6.js","assets/AlertService.5d8abaff.js","assets/feathers.32f4d4e8.js"])),Ru=e=>{const t=gr(),n=Er(),i=n.authUser,s=n.user,[r,o]=Ye.exports.useState(!1),[a,c]=Ye.exports.useState(!1),l={type:Ee.EDITOR,publicPath:location.origin};return Ye.exports.useEffect(()=>{Au(l).then(()=>{console.log("Setting engine inited"),c(!0)})},[]),Ye.exports.useEffect(()=>o(!0),[]),Ye.exports.useEffect(()=>{t(Pr.doLoginAuto(!0))},[]),r&&Pt.createElement(Ye.exports.Suspense,{fallback:Pt.Fragment},i?.accessToken.value!=null&&i.accessToken.value.length>0&&s?.id.value!=null&&a?Pt.createElement(Pt.Fragment,null,Pt.createElement(Ou,{Engine:f,...e})):null)};var Zu=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:Ru});export{ye as A,X as B,ba as C,Qu as D,zu as E,la as F,je as G,Os as H,Jn as I,zc as J,$c as K,Ws as L,q as M,Yt as N,ce as O,Lt as P,qu as Q,As as R,Vu as S,pn as T,Hu as U,ni as V,he as W,qt as X,Bu as Y,Ku as Z,Zu as _,N as a,L as b,Qs as c,Us as d,He as e,Gs as f,iu as g,$u as h,Nc as i,Yu as j,Ju as k,di as l,F as m,ot as n,Gu as o,fi as p,Bl as q,Uu as r,ku as s,ju as t,Xu as u,Ss as v,Wu as w,da as x,Ai as y,Kc as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
