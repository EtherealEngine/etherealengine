import{R as e,r as a,u as ne}from"./vendor.475cb2ff.js";import{s as ie,d as le,a as ce,i as de,c as ue,P as pe}from"./_app.f0a72417.js";import{V as me}from"./index.d8244ba1.js";import{S as ve}from"./index.4ce46cdd.js";import{F as W}from"./FeedService.76ef4a42.js";import{P as j}from"./PopupsStateService.a3af5f05.js";import{W as k}from"./WebxrNativeService.bf3f0be0.js";import{T as fe}from"./Typography.19cbe78d.js";import{B as l}from"./Button.a7dce846.js";const _e="_ldsRing_1vveq_1",Se="_ldsring_1vveq_1";var ge={ldsRing:_e,ldsring:Se};const B=({text:t})=>e.createElement("div",{className:ge.ldsRing},e.createElement("div",null),e.createElement("div",null),e.createElement("div",null),e.createElement("div",null),e.createElement("span",null,t));var U;(function(t){t.Documents="DOCUMENTS",t.Data="DATA",t.Cache="CACHE",t.External="EXTERNAL",t.ExternalStorage="EXTERNAL_STORAGE"})(U||(U={}));var I;(function(t){t.UTF8="utf8",t.ASCII="ascii",t.UTF16="utf16"})(I||(I={}));const ye=ie("Filesystem",{web:()=>import("./web.adc9439e.js").then(t=>new t.FilesystemWeb)}),Fe="_feedFormContainer_ysq8i_1",be="_alignSection_ysq8i_14",he="_feedVideoPreview_ysq8i_19",xe="_flexContainer_ysq8i_27",Ee="_preCard_ysq8i_31",we="_displayNone_ysq8i_44",Pe="_previewImage_ysq8i_47",Ce="_textArea_ysq8i_50",Ne="_buttonWraper_ysq8i_59",Re="_submit_ysq8i_67",Te="_videoWrapper_ysq8i_91",Ae="_backButton_ysq8i_110",Ve="_ldsRing_ysq8i_152",qe="_ldsring_ysq8i_1";var o={feedFormContainer:Fe,alignSection:be,feedVideoPreview:he,flexContainer:xe,preCard:Ee,displayNone:we,previewImage:Pe,textArea:Ce,buttonWraper:Ne,submit:Re,videoWrapper:Te,backButton:Ae,ldsRing:Ve,ldsring:qe};const We=({feed:t})=>{const[M,F]=a.exports.useState(!1),[X,L]=a.exports.useState(!1),[$,b]=a.exports.useState(!1),[D,O]=a.exports.useState(t?t.title:""),[z,G]=a.exports.useState(t?t.description:""),[h,u]=a.exports.useState(null);a.exports.useState(null),a.exports.useState(null);const[H,x]=a.exports.useState(null);a.exports.useState(!1);const[J,K]=a.exports.useState(!1),[Q,Y]=a.exports.useState(!1);e.useRef(),e.useRef(),e.useRef();const{t:r}=ne(),p=le(),m=p?.popups?.videoPath?.value,i=p?.popups?.fPath?.value,Z=p?.popups?.nameId?.value,{XRPlugin:v}=pe,n=ce(),E=de().webxrnative.value,w=ue(),c=w.feeds.lastFeedVideoUrl?.value;a.exports.useEffect(()=>{console.log("videoUrl",c),console.log(c)},[c]);const ee=async()=>{const s={title:D.trim(),description:z.trim(),video:h,preview:H};if(console.log(s),!s.video&&!s.preview){alert("Error! Please try again."),P();return}t?n(W.updateFeedAsAdmin(t.id,s)):await n(W.createFeed(s)),O(""),G(""),u(null),x(null),F(!0),E&&n(k.changeWebXrNative()),v.deleteVideo({videoDir:i}),n(j.updateNewFeedPageState(!1,null,null,null))},te=(s,f)=>{ve.share({title:r("social:shareForm.arcMedia"),text:r("social:shareForm.videoCreated"),url:i,dialogTitle:r("social:shareForm.shareWithBuddies")})},ae=async()=>{const s=await ye.readFile({path:i});var f=f||"",_=1024;try{var C=atob(s.data)}catch(re){alert(JSON.stringify(re))}for(var N=C.length,R=Math.ceil(N/_),T=new Array(R),d=0;d<R;++d){for(var S=d*_,A=Math.min(S+_,N),V=new Array(A-S),g=S,q=0;g<A;++q,++g)V[q]=C[g].charCodeAt(0);T[d]=new Uint8Array(V)}const oe=new Blob(T,{type:f}),y=new File([oe],"test.mp4");console.log(y.size),u(y),new FileReader,x(y),K(!0)};a.exports.useEffect(()=>{ae()},[]);const P=()=>{n(j.updateNewFeedPageState(!1,null,null,null)),E&&n(k.changeWebXrNative()),v.deleteVideo({videoDir:i})};a.exports.useEffect(()=>()=>{F(null)});const se=w.feeds.feedsFetching.value;return e.createElement("section",{className:o.feedFormContainer},se&&e.createElement(B,{text:"Publishing..."}),!J&&e.createElement(B,{text:"Loading..."}),M?e.createElement(fe,null,r("social:feedForm.thanks")):e.createElement("section",{className:o.alignSection},m&&e.createElement("video",{className:o.feedVideoPreview,id:h,autoPlay:!1,loop:!0,muted:!1,playsInline:!0,controls:!0},e.createElement("source",{src:m,type:"video/mp4"})),e.createElement("div",{className:o.buttonWraper},m&&e.createElement("div",null,e.createElement(l,{variant:"contained",className:o.submit,onClick:()=>ee()},r("social:shareForm.addFeed"))),!!c&&e.createElement(l,{variant:"contained",className:o.submit,onClick:()=>te()},r("social:shareForm.arcMedia")),Q?"":e.createElement(l,{variant:"contained",className:o.submit,onClick:()=>{v.saveVideoTo({videoDir:i,nameId:Z}),Y(!0)}},r("social:save")),e.createElement(l,{variant:"contained",className:o.submit,onClick:()=>P()},r("social:cancel"))),X===!0&&e.createElement("section",{className:o.videoWrapper},e.createElement(me,{onRecordingComplete:s=>{u(s),b(!0)}}),$&&e.createElement(l,{variant:"contained",color:"secondary",className:o.submit,onClick:()=>{L(!1),b(!1)}},r("social:feedForm.save")))))};var Oe=We;export{Oe as F,B as P};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
