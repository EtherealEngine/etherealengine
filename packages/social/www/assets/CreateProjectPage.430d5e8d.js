import{R as v,w as jr,r as h,n as Ge,f as xr,u as Er}from"./vendor.c8b8cc93.js";import{t as Ve,P as Qe,b as Xe,c as ke,a as Ze,E as er,d as rr,S as Sr}from"./templates.cfdd031e.js";import{a9 as re,an as _r,f as Cr,ao as Rr}from"./_app.009e96ac.js";import{g as Tr,d as Ar,a as Nr,b as Pr,c as kr,M as Lr,B as tr,aw as Dr}from"./projectFunctions.0f4266a2.js";import{C as Or}from"./index.0040ebb6.js";import"./upload.38e3baaf.js";import"./___vite-browser-external_commonjs-proxy.5bbecace.js";import"./__vite-browser-external.b6126e45.js";import"./three.module.0404e109.js";import"./avatarFunctions.c7a0e273.js";import"./SystemUpdateType.4e88f289.js";import"./index.9af95596.js";import"./_baseIteratee.1eb87af4.js";import"./index.472b90b5.js";import"./createSvgIcon.f69c4b03.js";import"./capitalize.afc8605e.js";import"./useControlled.815a4900.js";import"./useFormControl.7fcaf9d0.js";import"./IconButton.6d410d2a.js";import"./ButtonBase.4949ff38.js";import"./createSvgIcon.43fd6609.js";import"./ownerWindow.3d7152ce.js";import"./index.1a856ebd.js";function Ir(){return v.createElement(v.Fragment,null)}const Mr=re.a`
  font-size: 1.2em;
  color: ${n=>n.theme.blue};
  line-height: 3em;
  vertical-align: middle;
`,Le=re.section`
  padding-bottom: 100px;
  display: flex;
  flex: ${n=>n.flex===void 0?1:n.flex};

  &:first-child {
    padding-top: 100px;
  }

  h1 {
    font-size: 36px;
  }

  h2 {
    font-size: 16px;
  }
`,De=re.div`
  display: flex;
  flex: 1;
  flex-direction: column;
  margin: 0 auto;
  max-width: 1200px;
  padding: 0 20px;
`,Fr=re(De)`
  align-items: center;

  & > * {
    text-align: center;
  }

  & > *:not(:first-child) {
    margin-top: 20px;
  }

  h2 {
    max-width: 480px;
  }
`,nr=re.div`
  margin-bottom: 36px;
  display: flex;
  justify-content: space-between;
  align-items: center;
`,Oe="project-menu";class Ur extends h.exports.Component{constructor(a){super(a);this.state={projects:[],loading:!0,error:null}}componentDidMount(){Tr().then(a=>{this.setState({projects:a.map(t=>({...t,url:`/editor/projects/${t.project_id}`})),loading:!1})}).catch(a=>{if(console.error(a),a.response&&a.response.status===401)return this.props.history.push("/",{from:"/editor/projects"});this.setState({error:a,loading:!1})})}onDeleteProject=a=>{Ar(a.project_id).then(()=>this.setState({projects:this.state.projects.filter(t=>t.project_id!==a.project_id)})).catch(t=>this.setState({error:t}))};renderContextMenu=a=>v.createElement(Nr,{id:Oe},v.createElement(Pr,{onClick:()=>this.onDeleteProject(a.trigger.project)},"Delete Project"));ProjectContextMenu=kr(Oe)(this.renderContextMenu);render(){const{error:a,loading:t,projects:i,isAuthenticated:u}=this.state,e=this.ProjectContextMenu,s=[];for(let f=0;f<Ve.length&&f<4;f++)s.push(Ve[f]);return v.createElement(v.Fragment,null,v.createElement("main",null,!u||i.length===0&&!t?v.createElement(Le,{flex:0},v.createElement(Fr,null,v.createElement("h1",null,this.props.t("editor:projects.page.header")),v.createElement("h2",null,this.props.t("editor:projects.page.headerMsg")),v.createElement(Lr,{as:"a",href:"/projects/tutorial"},this.props.t("editor:projects.page.lbl-startTutorial")))):null,v.createElement(Le,null,v.createElement(De,null,v.createElement(nr,null,v.createElement("h1",null,this.props.t("editor:projects.page.projects"))),v.createElement(Qe,null,v.createElement(Xe,null,v.createElement(ke,null),v.createElement(ke,null,v.createElement(tr,{as:"a",href:"/editor/create"},this.props.t("editor:projects.page.lbl-newProject")))),v.createElement(Ze,null,a&&v.createElement(er,null,a.message),!a&&v.createElement(rr,{loading:t,projects:i,newProjectPath:"/editor/projects/templates",contextMenuId:Oe}))))),v.createElement(e,null)))}}jr()(Ur);var ar={};(function(n){var a=Ge&&Ge.__assign||function(){return a=Object.assign||function(d){for(var y,j=1,_=arguments.length;j<_;j++){y=arguments[j];for(var b in y)Object.prototype.hasOwnProperty.call(y,b)&&(d[b]=y[b])}return d},a.apply(this,arguments)};Object.defineProperty(n,"__esModule",{value:!0});var t;(function(d){d.Browser="browser",d.Server="server",d.Native="native"})(t=n.Device||(n.Device={}));var i=t.Browser,u=t.Server,e=t.Native,s=!!(typeof window!="undefined"&&window.document&&window.document.createElement),f=typeof navigator!="undefined"&&navigator.product=="ReactNative",c=f?e:s?i:u,r={isBrowser:c===i,isServer:c===u,isNative:c===e,device:c,canUseWorkers:typeof Worker!="undefined",canUseEventListeners:c===i&&!!window.addEventListener,canUseViewport:c===i&&!!window.screen},o=function(){for(var d=[],y=0;y<arguments.length;y++)d[y]=arguments[y];return d.reduce(function(j,_){return a(a({},j),_)},{})},l=function(d){return Object.keys(d).map(function(y){return d[y]})},m=function(){return o((l(r),r))},p=m();n.weAreServer=function(){r.isServer=!0,p=m()},n.useSSR=function(){return p},n.default=n.useSSR})(ar);var ir=xr(ar),je={};Object.defineProperty(je,"__esModule",{value:!0});var te=h.exports;je.isObject=function(n){return Object.prototype.toString.call(n)==="[object Object]"};var $r=function(){var n=te.useRef(!1);return te.useEffect(function(){return n.current=!0,function(){n.current=!1}},[]),n};function ur(n,a){a===void 0&&(a=!0);var t=$r(),i=te.useState(n),u=i[0],e=i[1],s=te.useRef(u),f=te.useCallback(function(c){!t.current&&a||(s.current=typeof c=="function"?c(s.current):c,e(s.current))},[]);return[s,f]}je.useRefState=ur;var qr=je.default=ur,S;(function(n){n.DELETE="DELETE",n.GET="GET",n.HEAD="HEAD",n.OPTIONS="OPTIONS",n.PATCH="PATCH",n.POST="POST",n.PUT="PUT",n.CONNECT="CONNECT",n.TRACE="TRACE"})(S||(S={}));var z;(function(n){n.CACHE_FIRST="cache-first",n.CACHE_AND_NETWORK="cache-and-network",n.NETWORK_ONLY="network-only",n.CACHE_ONLY="cache-only",n.NO_CACHE="no-cache",n.EXACT_CACHE_AND_NETWORK="exact-cache-and-network"})(z||(z={}));var Ie=function(n,a,t,i){function u(e){return e instanceof t?e:new t(function(s){s(e)})}return new(t||(t=Promise))(function(e,s){function f(o){try{r(i.next(o))}catch(l){s(l)}}function c(o){try{r(i.throw(o))}catch(l){s(l)}}function r(o){o.done?e(o.value):u(o.value).then(f,c)}r((i=i.apply(n,a||[])).next())})},Me=function(n,a){var t={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},i,u,e,s;return s={next:f(0),throw:f(1),return:f(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function f(r){return function(o){return c([r,o])}}function c(r){if(i)throw new TypeError("Generator is already executing.");for(;t;)try{if(i=1,u&&(e=r[0]&2?u.return:r[0]?u.throw||((e=u.return)&&e.call(u),0):u.next)&&!(e=e.call(u,r[1])).done)return e;switch(u=0,e&&(r=[r[0]&2,e.value]),r[0]){case 0:case 1:e=r;break;case 4:return t.label++,{value:r[1],done:!1};case 5:t.label++,u=r[1],r=[0];continue;case 7:r=t.ops.pop(),t.trys.pop();continue;default:if(e=t.trys,!(e=e.length>0&&e[e.length-1])&&(r[0]===6||r[0]===2)){t=0;continue}if(r[0]===3&&(!e||r[1]>e[0]&&r[1]<e[3])){t.label=r[1];break}if(r[0]===6&&t.label<e[1]){t.label=e[1],e=r;break}if(e&&t.label<e[2]){t.label=e[2],t.ops.push(r);break}e[2]&&t.ops.pop(),t.trys.pop();continue}r=a.call(n,t)}catch(o){r=[6,o],u=0}finally{i=e=0}if(r[0]&5)throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}},Wr=function(){for(var n=0,a=0,t=arguments.length;a<t;a++)n+=arguments[a].length;for(var i=Array(n),u=0,a=0;a<t;a++)for(var e=arguments[a],s=0,f=e.length;s<f;s++,u++)i[u]=e[s];return i};function k(n,a,t,i,u,e,s,f){if(t===void 0&&(t=""),i===void 0&&(i=""),u===void 0&&(u=""),e===void 0&&(e=""),s===void 0&&(s=""),f===void 0&&(f=""),!n){var c=void 0;if(a===void 0)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var r=[t,i,u,e,s,f],o=0;c=new Error(a.replace(/%s/g,function(){return r[o++]})),c.name="Invariant Violation"}throw c}}var ne=function(n){return typeof n=="string"},B=function(n){return Object.prototype.toString.call(n)==="[object Object]"},G=function(n){return B(n)||Array.isArray(n)},I=function(n){return typeof n=="function"},Hr=function(n){if(!n)return{};var a=["body","cache","credentials","headers","integrity","keepalive","method","mode","redirect","referrer","referrerPolicy","signal","window"];return a.reduce(function(t,i){return i in n&&(t[i]=n[i]),t},{})},or=function(n){return n==null},ae;(function(n){n.Browser="browser",n.Server="server",n.Native="native"})(ae||(ae={}));var Jr=ae.Browser,sr=ae.Server,Yr=ae.Native,Kr=!!(typeof window!="undefined"&&window.document&&window.document.createElement),zr=typeof navigator!="undefined"&&navigator.product==="ReactNative",Br=zr?Yr:Kr?Jr:sr,cr=Br===sr,Gr=function(n,a,t){return Ie(void 0,void 0,void 0,function(){var i,u;return Me(this,function(e){switch(e.label){case 0:if(typeof n=="undefined")throw Error("Response cannot be undefined... \u{1F635}");if(typeof t=="undefined")throw Error("responseType cannot be undefined... \u{1F635}");if(i=Array.isArray(t)?t:[t],i[0]==null)throw Error("could not parse data from response \u{1F635}");return[4,fr(n,i)];case 1:return u=e.sent(),[2,!or(a)&&or(u)?a:u]}})})},fr=function(n,a,t){return t===void 0&&(t=0),Ie(void 0,void 0,void 0,function(){var i;return Me(this,function(u){switch(u.label){case 0:return u.trys.push([0,2,,3]),[4,n.clone()[a[t]]()];case 1:return[2,u.sent()];case 2:if(i=u.sent(),a.length-1===t)throw i;return[2,fr(n.clone(),a,++t)];case 3:return[2]}})})},lr=["headers","ok","redirected","trailer","status","statusText","type","url","body","bodyUsed","data"],dr=["clone","arrayBuffer","blob","formData","json","text"],Vr=Wr(lr,dr),vr=function(n,a){return Object.defineProperties({},Vr.reduce(function(t,i){return lr.includes(i)?t[i]={get:function(){var u=n instanceof Response?n:n&&n.current;if(!!u){if(i==="data")return a.current;var e="clone"in u?u.clone():{};return e[i]}},enumerable:!0}:dr.includes(i)&&(t[i]={value:function(){var u=n instanceof Response?n:n&&n.current;if(!!u){var e="clone"in u?u.clone():{};return e[i]()}},enumerable:!0}),t},{}))};vr();var Qr=function(n){var a={};return n.forEach(function(t,i){a[i]=t}),a},Xr=function(n){return Ie(void 0,void 0,void 0,function(){var a,t,i,u;return Me(this,function(e){switch(e.label){case 0:return[4,n.text()];case 1:return a=e.sent(),t=n.status,i=n.statusText,u=Qr(n.headers),[2,{body:a,status:t,statusText:i,headers:u}]}})})};function Zr(n){var a=h.exports.useRef();return JSON.stringify(n)!==JSON.stringify(a.current)&&(a.current=n),a.current}var et=function(n,a){return h.exports.useCallback(n,Zr(a))},rt=function(n){return new Promise(function(a){return setTimeout(a,n)})},tt=function(n){return Number.isInteger(n)&&n>0},hr=function(n,a){var t=new Error(a);return t.name=n+"",t},pr=function(n,a){return n?a?a.endsWith("/")&&n.startsWith("/")?n.substr(1):!a.endsWith("/")&&!n.startsWith("/")&&!n.startsWith("?")&&!n.startsWith("&")&&!a.includes("?")?"/"+n:n:n.startsWith("?")||n.startsWith("&")||n.startsWith("/")?n:"/"+n:""},nt=h.exports.createContext({url:"",options:{},graphql:!1}),V=function(){return V=Object.assign||function(n){for(var a,t=1,i=arguments.length;t<i;t++){a=arguments[t];for(var u in a)Object.prototype.hasOwnProperty.call(a,u)&&(n[u]=a[u])}return n},V.apply(this,arguments)},mr={host:"",path:void 0,customOptions:{cacheLife:0,cachePolicy:z.CACHE_FIRST,interceptors:{},onAbort:function(){},onError:function(){},onNewData:function(n,a){return a},onTimeout:function(){},perPage:0,persist:!1,responseType:["json","text","blob","arrayBuffer"],retries:0,retryDelay:1e3,retryOn:[],suspense:!1,timeout:0,data:void 0,loading:!1},requestInit:{headers:{Accept:"application/json, text/plain, */*"}},dependencies:void 0},ie=Object.entries(mr).reduce(function(n,a){var t,i=a[0],u=a[1];return B(u)?V(V({},n),u):V(V({},n),(t={},t[i]=u,t))},{}),T=function(){return T=Object.assign||function(n){for(var a,t=1,i=arguments.length;t<i;t++){a=arguments[t];for(var u in a)Object.prototype.hasOwnProperty.call(a,u)&&(n[u]=a[u])}return n},T.apply(this,arguments)};function at(n,a,t){k(!(B(n)&&B(a)),"You cannot have a 2nd parameter of useFetch as object when your first argument is an object.");var i=h.exports.useContext(nt),u=h.exports.useMemo(function(){var b=n;return ne(b)&&b.includes("://")?b:i.url?i.url:ie.host},[i.url,n]),e=h.exports.useMemo(function(){var b=n;if(ne(b)&&!b.includes("://"))return b},[n]),s=h.exports.useMemo(function(){if(I(n))return n;if(I(a))return a},[]),f=h.exports.useMemo(function(){var b={headers:{}};B(n)?b=n:B(a)&&(b=a);var E=i.options,g=T(T(T(T({},ie),E),b),{headers:T(T(T({},ie.headers),E.headers),b.headers),interceptors:T(T(T({},ie.interceptors),E.interceptors),b.interceptors)});return s?s(g):g},[n,s,i.options]),c=h.exports.useMemo(function(){return Hr(f)},[f]),r=h.exports.useMemo(function(){return Array.isArray(a)?a:Array.isArray(t)?t:ie.dependencies},[a,t]),o=f.cacheLife,l=f.retries,m=f.retryDelay,p=f.retryOn;k(Number.isInteger(o)&&o>=0,"`cacheLife` must be a number >= 0"),k(Number.isInteger(l)&&l>=0,"`retries` must be a number >= 0"),k(I(m)||Number.isInteger(m)&&m>=0,"`retryDelay` must be a positive number or a function returning a positive number.");var d=I(p)||Array.isArray(p)&&p.every(tt);k(d,"`retryOn` must be an array of positive numbers or a function returning a boolean.");var y=f.loading||Array.isArray(r),j=h.exports.useMemo(function(){var b={};return"request"in f.interceptors&&(b.request=f.interceptors.request),"response"in f.interceptors&&(b.response=f.interceptors.response),b},[f]),_=h.exports.useMemo(function(){var b=Object.keys(mr.customOptions),E=b.reduce(function(g,w){return g[w]=f[w],g},{});return T(T({},E),{interceptors:j,loading:y})},[j,y]);return{host:u,path:e,customOptions:_,requestInit:c,dependencies:r}}var ue=function(){return ue=Object.assign||function(n){for(var a,t=1,i=arguments.length;t<i;t++){a=arguments[t];for(var u in a)Object.prototype.hasOwnProperty.call(a,u)&&(n[u]=a[u])}return n},ue.apply(this,arguments)},yr=function(n,a,t,i){function u(e){return e instanceof t?e:new t(function(s){s(e)})}return new(t||(t=Promise))(function(e,s){function f(o){try{r(i.next(o))}catch(l){s(l)}}function c(o){try{r(i.throw(o))}catch(l){s(l)}}function r(o){o.done?e(o.value):u(o.value).then(f,c)}r((i=i.apply(n,a||[])).next())})},br=function(n,a){var t={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},i,u,e,s;return s={next:f(0),throw:f(1),return:f(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function f(r){return function(o){return c([r,o])}}function c(r){if(i)throw new TypeError("Generator is already executing.");for(;t;)try{if(i=1,u&&(e=r[0]&2?u.return:r[0]?u.throw||((e=u.return)&&e.call(u),0):u.next)&&!(e=e.call(u,r[1])).done)return e;switch(u=0,e&&(r=[r[0]&2,e.value]),r[0]){case 0:case 1:e=r;break;case 4:return t.label++,{value:r[1],done:!1};case 5:t.label++,u=r[1],r=[0];continue;case 7:r=t.ops.pop(),t.trys.pop();continue;default:if(e=t.trys,!(e=e.length>0&&e[e.length-1])&&(r[0]===6||r[0]===2)){t=0;continue}if(r[0]===3&&(!e||r[1]>e[0]&&r[1]<e[3])){t.label=r[1];break}if(r[0]===6&&t.label<e[1]){t.label=e[1],e=r;break}if(e&&t.label<e[2]){t.label=e[2],t.ops.push(r);break}e[2]&&t.ops.pop(),t.trys.pop();continue}r=a.call(n,t)}catch(o){r=[6,o],u=0}finally{i=e=0}if(r[0]&5)throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}},gr=S.GET;function it(n,a,t,i,u,e,s,f,c,r){return yr(this,void 0,void 0,function(){var o,l,m,p,d,y,j,_,b=this;return br(this,function(E){switch(E.label){case 0:return k(!(G(f)&&G(c)),"If first argument of "+a.toLowerCase()+"() is an object, you cannot have a 2nd argument. \u{1F61C}"),k(!(a===gr&&G(f)),"You can only have query params as 1st argument of request.get()"),k(!(a===gr&&c!==void 0),"You can only have query params as 1st argument of request.get()"),o=function(){return!cr&&f instanceof URLSearchParams?"?"+f:ne(f)?f:""}(),l=""+e+pr(s,e)+pr(o),m=function(){return f instanceof FormData?f:G(f)?JSON.stringify(f):!cr&&(c instanceof FormData||c instanceof URLSearchParams)?c:G(c)||ne(c)?JSON.stringify(c):G(n.body)||ne(c)?JSON.stringify(n.body):null}(),p=function(){var g=(n.headers||{})["Content-Type"],w=!!g||[S.POST,S.PUT,S.PATCH].includes(a)&&!(m instanceof FormData),C=ue({},n.headers);if(w)C["Content-Type"]=g||"application/json";else if(Object.keys(C).length===0)return null;return C}(),[4,function(){return yr(b,void 0,void 0,function(){var g,w;return br(this,function(C){switch(C.label){case 0:return g=ue(ue({},n),{method:a,signal:t.signal}),p!==null?g.headers=p:delete g.headers,m!==null&&(g.body=m),r?[4,r({options:g,url:e,path:s,route:o})]:[3,2];case 1:return w=C.sent(),[2,w];case 2:return[2,g]}})})}()];case 1:return d=E.sent(),y=Object.entries({url:l,method:a,body:d.body||""}).map(function(g){var w=g[0],C=g[1];return w+":"+C}).join("||"),j={url:l,options:d},_={},[4,u.has(y)];case 2:return _.isCached=E.sent(),_.id=y,[4,u.get(y)];case 3:return[2,(j.response=(_.cached=E.sent(),_),j)]}})})}var oe=function(n,a,t,i){function u(e){return e instanceof t?e:new t(function(s){s(e)})}return new(t||(t=Promise))(function(e,s){function f(o){try{r(i.next(o))}catch(l){s(l)}}function c(o){try{r(i.throw(o))}catch(l){s(l)}}function r(o){o.done?e(o.value):u(o.value).then(f,c)}r((i=i.apply(n,a||[])).next())})},se=function(n,a){var t={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},i,u,e,s;return s={next:f(0),throw:f(1),return:f(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function f(r){return function(o){return c([r,o])}}function c(r){if(i)throw new TypeError("Generator is already executing.");for(;t;)try{if(i=1,u&&(e=r[0]&2?u.return:r[0]?u.throw||((e=u.return)&&e.call(u),0):u.next)&&!(e=e.call(u,r[1])).done)return e;switch(u=0,e&&(r=[r[0]&2,e.value]),r[0]){case 0:case 1:e=r;break;case 4:return t.label++,{value:r[1],done:!1};case 5:t.label++,u=r[1],r=[0];continue;case 7:r=t.ops.pop(),t.trys.pop();continue;default:if(e=t.trys,!(e=e.length>0&&e[e.length-1])&&(r[0]===6||r[0]===2)){t=0;continue}if(r[0]===3&&(!e||r[1]>e[0]&&r[1]<e[3])){t.label=r[1];break}if(r[0]===6&&t.label<e[1]){t.label=e[1],e=r;break}if(e&&t.label<e[2]){t.label=e[2],t.ops.push(r);break}e[2]&&t.ops.pop(),t.trys.pop();continue}r=a.call(n,t)}catch(o){r=[6,o],u=0}finally{i=e=0}if(r[0]&5)throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}},ce="useHTTPcache",fe=function(){try{return JSON.parse(localStorage.getItem(ce)||"{}")}catch(n){return localStorage.removeItem(ce),{}}},ut=function(n){var a=n.cacheLife,t=function(){for(var c=[],r=0;r<arguments.length;r++)c[r]=arguments[r];return oe(void 0,void 0,void 0,function(){var o;return se(this,function(l){return o=fe(),c.forEach(function(m){return delete o[m]}),localStorage.setItem(ce,JSON.stringify(o)),[2]})})},i=function(c){var r=fe(),o=r[c]||{},l=o.expiration,m=o.response,p=l>0&&l<Date.now();return p&&t(c),p||!m},u=function(c){return oe(void 0,void 0,void 0,function(){return se(this,function(r){return[2,!i(c)]})})},e=function(c){return oe(void 0,void 0,void 0,function(){var r,o,l,m,p,d;return se(this,function(y){return i(c)?[2]:(r=fe(),o=r[c].response,l=o.body,m=o.headers,p=o.status,d=o.statusText,[2,new Response(l,{status:p,statusText:d,headers:new Headers(m||{})})])})})},s=function(c,r){return oe(void 0,void 0,void 0,function(){var o,l,m,p;return se(this,function(d){switch(d.label){case 0:return o=fe(),l=o,m=c,p={},[4,Xr(r)];case 1:return l[m]=(p.response=d.sent(),p.expiration=Date.now()+a,p),localStorage.setItem(ce,JSON.stringify(o)),[2]}})})},f=function(){return oe(void 0,void 0,void 0,function(){return se(this,function(c){return localStorage.setItem(ce,JSON.stringify({})),[2]})})};return Object.defineProperties(fe(),{get:{value:e,writable:!1},set:{value:s,writable:!1},has:{value:u,writable:!1},delete:{value:t,writable:!1},clear:{value:f,writable:!1}})},le=function(n,a,t,i){function u(e){return e instanceof t?e:new t(function(s){s(e)})}return new(t||(t=Promise))(function(e,s){function f(o){try{r(i.next(o))}catch(l){s(l)}}function c(o){try{r(i.throw(o))}catch(l){s(l)}}function r(o){o.done?e(o.value):u(o.value).then(f,c)}r((i=i.apply(n,a||[])).next())})},de=function(n,a){var t={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},i,u,e,s;return s={next:f(0),throw:f(1),return:f(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function f(r){return function(o){return c([r,o])}}function c(r){if(i)throw new TypeError("Generator is already executing.");for(;t;)try{if(i=1,u&&(e=r[0]&2?u.return:r[0]?u.throw||((e=u.return)&&e.call(u),0):u.next)&&!(e=e.call(u,r[1])).done)return e;switch(u=0,e&&(r=[r[0]&2,e.value]),r[0]){case 0:case 1:e=r;break;case 4:return t.label++,{value:r[1],done:!1};case 5:t.label++,u=r[1],r=[0];continue;case 7:r=t.ops.pop(),t.trys.pop();continue;default:if(e=t.trys,!(e=e.length>0&&e[e.length-1])&&(r[0]===6||r[0]===2)){t=0;continue}if(r[0]===3&&(!e||r[1]>e[0]&&r[1]<e[3])){t.label=r[1];break}if(r[0]===6&&t.label<e[1]){t.label=e[1],e=r;break}if(e&&t.label<e[2]){t.label=e[2],t.ops.push(r);break}e[2]&&t.ops.pop(),t.trys.pop();continue}r=a.call(n,t)}catch(o){r=[6,o],u=0}finally{i=e=0}if(r[0]&5)throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}},M={},ot=function(n){var a=n.cacheLife,t=function(){for(var c=[],r=0;r<arguments.length;r++)c[r]=arguments[r];return le(void 0,void 0,void 0,function(){var o,l,m;return de(this,function(p){for(o=0,l=c;o<l.length;o++)m=l[o],delete M[m],delete M[m+":ts"];return[2]})})},i=function(c){var r=M[c+":ts"],o=r>0&&r<Date.now();return o&&t(c),o||!M[c]},u=function(c){return le(void 0,void 0,void 0,function(){return de(this,function(r){return i(c)?[2]:[2,M[c]]})})},e=function(c,r){return le(void 0,void 0,void 0,function(){return de(this,function(o){return M[c]=r,M[c+":ts"]=a>0?Date.now()+a:0,[2]})})},s=function(c){return le(void 0,void 0,void 0,function(){return de(this,function(r){return[2,!i(c)]})})},f=function(){return le(void 0,void 0,void 0,function(){return de(this,function(c){return M={},[2]})})};return Object.defineProperties(M,{get:{value:u,writable:!1,configurable:!0},set:{value:e,writable:!1,configurable:!0},has:{value:s,writable:!1,configurable:!0},delete:{value:t,writable:!1,configurable:!0},clear:{value:f,writable:!1,configurable:!0}})},st=z.NETWORK_ONLY,ct=z.NO_CACHE,ft=function(n){var a=n.persist,t=n.cacheLife,i=n.cachePolicy,u=ir(),e=u.isNative,s=u.isServer;return k(!(s&&a),"There is no persistent storage on the Server currently! \u{1F645}\u200D\u2642\uFE0F"),k(!(e&&a),"React Native support for persistent cache is not yet implemented. \u{1F645}\u200D\u2642\uFE0F"),k(!(a&&[ct,st].includes(i)),"You cannot use option 'persist' with cachePolicy: "+i+" \u{1F645}\u200D\u2642\uFE0F"),a?ut({cacheLife:t||24*36e5}):ot({cacheLife:t})},xe=function(){return xe=Object.assign||function(n){for(var a,t=1,i=arguments.length;t<i;t++){a=arguments[t];for(var u in a)Object.prototype.hasOwnProperty.call(a,u)&&(n[u]=a[u])}return n},xe.apply(this,arguments)},Fe=function(n,a,t,i){function u(e){return e instanceof t?e:new t(function(s){s(e)})}return new(t||(t=Promise))(function(e,s){function f(o){try{r(i.next(o))}catch(l){s(l)}}function c(o){try{r(i.throw(o))}catch(l){s(l)}}function r(o){o.done?e(o.value):u(o.value).then(f,c)}r((i=i.apply(n,a||[])).next())})},Ue=function(n,a){var t={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},i,u,e,s;return s={next:f(0),throw:f(1),return:f(2)},typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function f(r){return function(o){return c([r,o])}}function c(r){if(i)throw new TypeError("Generator is already executing.");for(;t;)try{if(i=1,u&&(e=r[0]&2?u.return:r[0]?u.throw||((e=u.return)&&e.call(u),0):u.next)&&!(e=e.call(u,r[1])).done)return e;switch(u=0,e&&(r=[r[0]&2,e.value]),r[0]){case 0:case 1:e=r;break;case 4:return t.label++,{value:r[1],done:!1};case 5:t.label++,u=r[1],r=[0];continue;case 7:r=t.ops.pop(),t.trys.pop();continue;default:if(e=t.trys,!(e=e.length>0&&e[e.length-1])&&(r[0]===6||r[0]===2)){t=0;continue}if(r[0]===3&&(!e||r[1]>e[0]&&r[1]<e[3])){t.label=r[1];break}if(r[0]===6&&t.label<e[1]){t.label=e[1],e=r;break}if(e&&t.label<e[2]){t.label=e[2],t.ops.push(r);break}e[2]&&t.ops.pop(),t.trys.pop();continue}r=a.call(n,t)}catch(o){r=[6,o],u=0}finally{i=e=0}if(r[0]&5)throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}},lt=function(n,a){var t={};for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&a.indexOf(i)<0&&(t[i]=n[i]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var u=0,i=Object.getOwnPropertySymbols(n);u<i.length;u++)a.indexOf(i[u])<0&&Object.prototype.propertyIsEnumerable.call(n,i[u])&&(t[i[u]]=n[i[u]]);return t},wr=z.CACHE_FIRST;function dt(){for(var n=this,a=[],t=0;t<arguments.length;t++)a[t]=arguments[t];var i=at.apply(void 0,a),u=i.host,e=i.path,s=i.customOptions,f=i.requestInit,c=i.dependencies,r=s.cacheLife,o=s.cachePolicy,l=s.interceptors,m=s.onAbort,p=s.onError,d=s.onNewData,y=s.onTimeout,j=s.perPage,_=s.persist,b=s.responseType,E=s.retries,g=s.retryDelay,w=s.retryOn,C=s.suspense,Ee=s.timeout,ve=lt(s,["cacheLife","cachePolicy","interceptors","onAbort","onError","onNewData","onTimeout","perPage","persist","responseType","retries","retryDelay","retryOn","suspense","timeout"]),Se=ft({persist:_,cacheLife:r,cachePolicy:o}),_e=ir().isServer,K=h.exports.useRef(),F=h.exports.useRef({}),D=h.exports.useRef(ve.data),Ce=h.exports.useRef(!1),U=h.exports.useRef(0),N=h.exports.useRef(),$e=h.exports.useRef(!0),Re=h.exports.useRef("pending"),he=h.exports.useRef(),qe=h.exports.useRef(!1),We=qr(ve.loading),Te=We[0],He=We[1],Je=h.exports.useReducer(function(){return{}},[])[1],P=et(function(W){var O=function($,L){return Fe(n,void 0,void 0,function(){var q,A,H,J,X,Ne,ze,R,Be,Pe,Y,Z,me,ye,ee,be,Y,Z,ge,we,ee;return Ue(this,function(x){switch(x.label){case 0:return _e?[2]:(K.current=new AbortController,K.current.signal.onabort=m,q=K.current,[4,it(f,W,q,r,Se,u,e,$,L,l.request)]);case 1:if(A=x.sent(),H=A.url,J=A.options,X=A.response,N.current=void 0,j>0&&!$e.current&&!N.current)return[2,D.current];C||He(!0),Ne=Ee&&setTimeout(function(){Ce.current=!0,q.abort(),y&&y()},Ee),x.label=2;case 2:return x.trys.push([2,17,23,24]),X.isCached&&o===wr?(R=X.cached,[3,5]):[3,3];case 3:return[4,fetch(H,J)];case 4:R=x.sent().clone(),x.label=5;case 5:return F.current=R.clone(),[4,Gr(R,ve.data,b)];case 6:return ze=x.sent(),F.current.data=d(D.current,ze),Be=F,l.response?[4,l.response({response:F.current,request:f})]:[3,8];case 7:return Pe=x.sent(),[3,9];case 8:Pe=F.current,x.label=9;case 9:return Be.current=Pe,k("data"in F.current,"You must have `data` field on the Response returned from your `interceptors.response`"),D.current=F.current.data,Y={attempt:U.current,response:R},me=!I(w)&&Array.isArray(w)&&w.length<1&&(R==null?void 0:R.ok)===!1||Array.isArray(w)&&w.includes(R.status),me?[3,12]:(ye=I(w),ye?[4,w(Y)]:[3,11]);case 10:ye=x.sent(),x.label=11;case 11:me=ye,x.label=12;case 12:return Z=me&&E>0&&E>U.current,Z?[4,pe(Y,$,L)]:[3,14];case 13:return ee=x.sent(),[2,ee];case 14:return o===wr&&!X.isCached?[4,Se.set(X.id,R.clone())]:[3,16];case 15:x.sent(),x.label=16;case 16:return Array.isArray(D.current)&&!!(D.current.length%j)&&($e.current=!1),[3,24];case 17:return be=x.sent(),U.current>=E&&Ce.current&&(N.current=hr("AbortError","Timeout Error")),Y={attempt:U.current,error:be},ge=!I(w)&&Array.isArray(w)&&w.length<1,ge?[3,20]:(we=I(w),we?[4,w(Y)]:[3,19]);case 18:we=x.sent(),x.label=19;case 19:ge=we,x.label=20;case 20:return Z=ge&&E>0&&E>U.current,Z?[4,pe(Y,$,L)]:[3,22];case 21:return ee=x.sent(),[2,ee];case 22:return be.name!=="AbortError"&&(N.current=be),[3,24];case 23:return Ce.current=!1,Ne&&clearTimeout(Ne),K.current=void 0,[7];case 24:return R&&!R.ok&&!N.current&&(N.current=hr(R.status,R.statusText)),C||He(!1),U.current===E&&(U.current=0),N.current&&p({error:N.current}),[2,D.current]}})})},pe=function($,L,q){return Fe(n,void 0,void 0,function(){var A,H;return Ue(this,function(J){switch(J.label){case 0:return A=I(g)?g($):g,Number.isInteger(A)&&A>=0||console.error("retryDelay must be a number >= 0! If you're using it as a function, it must also return a number >= 0."),U.current++,A?[4,rt(A)]:[3,2];case 1:J.sent(),J.label=2;case 2:return[4,O(L,q)];case 3:return H=J.sent(),[2,H]}})})};return C?function(){for(var $=[],L=0;L<arguments.length;L++)$[L]=arguments[L];return Fe(n,void 0,void 0,function(){var q;return Ue(this,function(A){switch(A.label){case 0:return he.current=O.apply(void 0,$).then(function(H){return Re.current="success",H},function(){Re.current="error"}),Je(),[4,he.current];case 1:return q=A.sent(),[2,q]}})})}:O},[_e,m,f,u,e,l,o,j,Ee,_,r,y,ve.data,d,Je,C]),Ae=h.exports.useCallback(P(S.POST),[P]),Ye=h.exports.useCallback(P(S.DELETE),[P]),Q=h.exports.useMemo(function(){return Object.defineProperties({get:P(S.GET),post:Ae,patch:P(S.PATCH),put:P(S.PUT),options:P(S.OPTIONS),head:P(S.HEAD),connect:P(S.CONNECT),trace:P(S.TRACE),del:Ye,delete:Ye,abort:function(){return K.current&&K.current.abort()},query:function(W,O){return Ae({query:W,variables:O})},mutate:function(W,O){return Ae({mutation:W,variables:O})},cache:Se},{loading:{get:function(){return Te.current}},error:{get:function(){return N.current}},data:{get:function(){return D.current}}})},[P]),Ke=h.exports.useMemo(function(){return vr(F,D)},[]);if(h.exports.useEffect(function(){if(qe.current=!0,Array.isArray(c)){var W=f.method||S.GET,O=W.toLowerCase(),pe=Q[O];pe()}return function(){return qe.current=!1}},c),h.exports.useEffect(function(){return Q.abort},[]),C&&he.current){if(_e)throw new Error("Suspense on server side is not yet supported! \u{1F645}\u200D\u2642\uFE0F");switch(Re.current){case"pending":throw he.current;case"error":throw N.current}}return Object.assign([Q,Ke,Te.current,N.current],xe(xe({request:Q,response:Ke},Q),{loading:Te.current,data:D.current,error:N.current}))}function vt(n,a,t={}){const i=h.exports.useRef();if(!i.current){i.current=new URL(n,window.location);for(const p in a)Object.prototype.hasOwnProperty.call(a,p)&&i.current.searchParams.set(p,a[p])}const[u,e]=h.exports.useState(i.current.href);h.exports.useEffect(()=>{i.current=new URL(n,window.location);for(const p in a)Object.prototype.hasOwnProperty.call(a,p)&&i.current.searchParams.set(p,a[p]);e(i.current.href)},[n,i,a]);const s=i.current.searchParams.get("cursor"),{loading:f,error:c,data:{entries:r,meta:{next_cursor:o}}}=dt(u,{headers:{"content-type":"application/json",...t.headers},onNewData:(p,d)=>s?{entries:[...p.entries,...d.entries],meta:d.meta}:{entries:d,meta:{next_cursor:null}},data:{entries:[],meta:{next_cursor:null}}},[u]),l=h.exports.useCallback(()=>{o&&(i.current.searchParams.set("cursor",o),e(i.current.href))},[i,o]);return{loading:f,error:c,entries:!s&&f?[]:r,loadMore:l,hasMore:o&&s!==o}}const ht=Or.publicRuntimeConfig.apiServer;function pt(){const n=Cr(),{t:a}=Er(),t=new Map(new URLSearchParams(Rr().search).entries()),[i,u]=h.exports.useState({source:"scene_listings",filter:t.get("filter"),q:t.get("q")||""}),e=h.exports.useCallback(d=>{const y=new URLSearchParams;for(const j in d)j==="source"||!d[j]||y.set(j,d[j]);n.push(`/editor/create?${y}`),u(d)},[n]),s=d=>()=>{n.push(d)},f=h.exports.useCallback(d=>{e({source:"scene_listings",q:d})},[e]);h.exports.useCallback(()=>{e({...i,q:""})},[e,i]);const c=h.exports.useCallback(d=>{const y=new URLSearchParams;y.set("sceneId",d.id),n.push(`/editor/projects/new?${y}`)},[n]),{loading:r,error:o,entries:l}=vt(`${ht}/media-search`,i),m=!1,p=Array.isArray(l)?l.map(d=>({...d,url:`/editor/projects/new?sceneId=${d.id}`,thumbnailUrl:d&&d.images&&d.images.preview&&d.images.preview.url})):[];return Sr,a("editor:projects.createProject.ph-search"),i.q,v.createElement(v.Fragment,null,v.createElement("main",null,v.createElement(Le,null,v.createElement(De,null,v.createElement(nr,null,v.createElement("h1",null,a("editor:projects.createProject.header")),v.createElement(Mr,{href:"/editor/projects"},a("editor:projects.createProject.backLink"))),v.createElement(Qe,null,v.createElement(Xe,null,v.createElement(ke,null,v.createElement(tr,{onClick:s("/editor/projects/new")},a("editor:projects.createProject.newProject")))),v.createElement(Ze,null,v.createElement(Ir,null),o&&v.createElement(er,null,o.message),!o&&v.createElement(Dr,{initialLoad:!1,pageStart:0,loadMore:()=>{},hasMore:m,threshold:100,useWindow:!0},v.createElement(rr,{projects:p,newProjectPath:"/editor/projects/new",newProjectLabel:a("editor:projects.createProject.newProject"),onSelectProject:c,loading:r}))))))))}var Ut=_r(pt);export{Ut as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
