import{r as s,u as N,R as e}from"./vendor.475cb2ff.js";import{a as I,w as Q,h as ue,d as pe,c as ve}from"./_app.f0a72417.js";import{d as fe}from"./ArrowBackIos.d81b172a.js";import{a as j,F as w}from"./FeedService.76ef4a42.js";import{P}from"./PopupsStateService.a3af5f05.js";import{a as O,d as Ce,b as _e,F as Ee}from"./index.3f644741.js";import{c as R,i as T,a as D}from"./createSvgIcon.57924123.js";import{d as X,S as Fe,a as ge,b as he}from"./index.301f4863.js";import{A as u}from"./AlertService.5d8abaff.js";import{c as p}from"./feathers.32f4d4e8.js";import{S as Se}from"./index.4ce46cdd.js";import{C as Y,a as Z}from"./CardContent.1f497982.js";import{A as ee}from"./Avatar.7391d47d.js";import{T as y}from"./Typography.19cbe78d.js";import{G as k}from"./Grid.07f86457.js";import{T as ye}from"./TextField.6a51581a.js";import{C as ke}from"./CardMedia.b80c1774.js";import{S as xe}from"./Snackbar.6d62c301.js";import{M as be}from"./Alert.94d06d4f.js";import{B as z}from"./Button.a7dce846.js";import{P as Re}from"./Select.d94966eb.js";var V={},Te=T.exports,De=D.exports;Object.defineProperty(V,"__esModule",{value:!0});var te=V.default=void 0,Ae=De(s.exports),Le=Te(R),$e=(0,Le.default)(Ae.createElement("path",{d:"M9.78 18.65l.28-4.23 7.68-6.92c.34-.31-.07-.46-.52-.19L7.74 13.3 3.64 12c-.88-.25-.89-.86.2-1.3l15.97-6.16c.73-.33 1.43.18 1.15 1.3l-2.72 12.81c-.19.91-.74 1.13-1.5.71L12.6 16.3l-1.99 1.93c-.23.23-.42.42-.83.42z"}),"Telegram");te=V.default=$e;var B={},Me=T.exports,Ne=D.exports;Object.defineProperty(B,"__esModule",{value:!0});var re=B.default=void 0,Ie=Ne(s.exports),je=Me(R),we=(0,je.default)(Ie.createElement("path",{d:"M22 4c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4zm-2 13.17L18.83 16H4V4h16v13.17zM13 5h-2v4H7v2h4v4h2v-4h4V9h-4z"}),"AddCommentOutlined");re=B.default=we;var H={},Oe=T.exports,qe=D.exports;Object.defineProperty(H,"__esModule",{value:!0});var ae=H.default=void 0,Pe=qe(s.exports),ze=Oe(R),Ve=(0,ze.default)(Pe.createElement("path",{d:"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"}),"FavoriteBorderOutlined");ae=H.default=Ve;var U={},Be=T.exports,He=D.exports;Object.defineProperty(U,"__esModule",{value:!0});var oe=U.default=void 0,A=He(s.exports),Ue=Be(R),We=(0,Ue.default)(A.createElement(A.Fragment,null,A.createElement("path",{d:"M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM19 14.9L14.9 19H9.1L5 14.9V9.1L9.1 5h5.8L19 9.1v5.8z"}),A.createElement("circle",{cx:"12",cy:"16",r:"1"}),A.createElement("path",{d:"M11 7h2v7h-2z"})),"ReportOutlined");oe=U.default=We;const Ge="_tipItem_tb2iv_1",Ke="_previewImage_tb2iv_6",Je="_eyeLine_tb2iv_15",Qe="_popover_tb2iv_30",Xe="_iconSubContainer_tb2iv_38",Ye="_iconSubContainerVertical_tb2iv_38",Ze="_counter_tb2iv_47",et="_cardContent_tb2iv_51",tt="_iconsContainer_tb2iv_57",rt="_titleContainer_tb2iv_62",at="_flamesCount_tb2iv_66",ot="_cartText_tb2iv_70",nt="_avatar_tb2iv_73";var m={tipItem:Ge,previewImage:Ke,eyeLine:Je,popover:Qe,iconSubContainer:Xe,iconSubContainerVertical:Ye,counter:Ze,cardContent:et,iconsContainer:tt,titleContainer:rt,flamesCount:at,cartText:ot,avatar:nt};const ne={feedFiresRetrieved:t=>({type:"FEED_FIRES_RETRIEVED",feedFires:t}),fetchingFeedFires:()=>({type:"FEED_FIRES_FETCH"})},W={getFeedFires:t=>async(r,a)=>{try{r(ne.fetchingFeedFires());const n=await p.service("feed-fires").find({query:{feedId:t}});r(ne.feedFiresRetrieved(n.data))}catch(n){console.log(n),u.dispatchAlertError(r,n.message)}},addFireToFeed:t=>async r=>{try{await p.service("feed-fires").create({feedId:t}),r(j.addFeedFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}},removeFireToFeed:t=>async r=>{try{await p.service("feed-fires").remove(t),r(j.removeFeedFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}}},se={feedLikesRetrieved:t=>({type:"FEED_LIKES_RETRIEVED",feedLikes:t}),fetchingFeedLikes:()=>({type:"FEED_LIKES_FETCH"})},ce={getFeedLikes:t=>async(r,a)=>{try{r(se.fetchingFeedLikes());const n=await p.service("feed-likes").find({query:{feedId:t}});r(se.feedLikesRetrieved(n.data))}catch(n){u.dispatchAlertError(r,n.message)}},addLikeToFeed:t=>async r=>{try{await p.service("feed-likes").create({feedId:t}),r(j.addFeedLike(t))}catch(a){u.dispatchAlertError(r,a.message)}},removeLikeToFeed:t=>async r=>{try{await p.service("feed-likes").remove(t),r(j.removeFeedLike(t))}catch(a){u.dispatchAlertError(r,a.message)}}},st={addReportToFeed:t=>async r=>{try{await p.service("feed-report").create({feedId:t})}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}}},x={fetchingFeedComments:()=>({type:"FEED_COMMENTS_FETCH"}),feedsCommentsRetrieved:t=>({type:"FEED_COMMENTS_RETRIEVED",comments:t}),addFeedCommentFire:t=>({type:"ADD_FEED_COMMENT_FIRES",commentId:t}),removeFeedCommentFire:t=>({type:"REMOVE_FEED_COMMENT_FIRES",commentId:t}),addFeedComment:t=>({type:"ADD_FEED_COMMENT",comment:t}),commentFires:t=>({type:"COMMENT_FIRES",creators:t})},L={getFeedComments:(t,r)=>async(a,n)=>{try{a(x.fetchingFeedComments());const c=await p.service("comments").find({query:{feedId:t}});a(x.feedsCommentsRetrieved(c.data))}catch(c){console.log(c),u.dispatchAlertError(a,c.message)}},addCommentToFeed:(t,r)=>async a=>{try{const n=await p.service("comments").create({feedId:t,text:r});a(x.addFeedComment(n))}catch(n){console.log(n),u.dispatchAlertError(a,n.message)}},addFireToFeedComment:t=>async r=>{try{await p.service("comments-fires").create({commentId:t}),r(x.addFeedCommentFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}},removeFireToFeedComment:t=>async r=>{try{await p.service("comments-fires").remove(t),r(x.removeFeedCommentFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}},getCommentFires:(t,r)=>async(a,n)=>{try{const c=await p.service("comments-fires").find({query:{action:"comment-fires",commentId:t}});a(x.commentFires(c.data))}catch(c){console.log(c),u.dispatchAlertError(a,c.message)}}};var G={},ct=T.exports,it=D.exports;Object.defineProperty(G,"__esModule",{value:!0});var ie=G.default=void 0,lt=it(s.exports),mt=ct(R),dt=(0,mt.default)(lt.createElement("path",{d:"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"}),"Send");ie=G.default=dt;const ut="_commentItem_1757p_1",pt="_commentCard_1757p_10",vt="_flamesCount_1757p_13",ft="_authorAvatar_1757p_17",Ct="_fire_1757p_20";var $={commentItem:ut,commentCard:pt,flamesCount:vt,authorAvatar:ft,fire:Ct};const _t="_popup_umgpk_1",Et="_popup_inner_umgpk_13",Ft="_close_btn_umgpk_21";var K={popup:_t,popup_inner:Et,close_btn:Ft};const gt=t=>{const{t:r}=N();return t.trigger?e.createElement("div",{className:K.popup},t.children,e.createElement("div",{className:K.popup_inner},e.createElement("button",{type:"button",className:K.close_btn,onClick:()=>t.setTrigger(!1)},r("social:cancel")))):""},ht=({comment:t})=>{const{id:r,creator:a,fires:n,text:c,isFired:f}=t,[l,i]=s.exports.useState(!1),o=I(),E=g=>{o(L.addFireToFeedComment(g))},h=g=>{o(L.removeFireToFeedComment(g))},C=Q(),F=g=>{o(L.getCommentFires(g)),i(!0)},[b,d]=s.exports.useState(!1),_=ue().authUser?.identityProvider?.type?.value==="guest",{t:S}=N();return e.createElement(e.Fragment,null,e.createElement(Y,{className:$.commentItem,square:!1,elevation:0,key:r},e.createElement(ee,{className:$.authorAvatar,src:a.avatar}),e.createElement(Z,{className:$.commentCard},e.createElement(y,{variant:"h6"},a.username,a.verified&&e.createElement(X,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}})),e.createElement(y,{variant:"body1",paragraph:!0},c),n&&n>0?e.createElement(y,{variant:"subtitle1",onClick:()=>_?d(!0):F(r)},e.createElement("span",{className:$.flamesCount},n),S("social:flames")):null),e.createElement("section",{className:$.fire},f?e.createElement(O,{htmlColor:"#FF6201",onClick:()=>_?d(!0):h(r)}):e.createElement(O,{htmlColor:"#DDDDDD",onClick:()=>_?d(!0):E(r)}))),e.createElement(Fe,{type:"comment-fires",list:C.feeds.commentFires.value,open:l,onClose:()=>_?d(!0):i(!1)}),e.createElement(gt,{trigger:b,setTrigger:d}))},St="_commentsContainer_29854_1";var yt={commentsContainer:St};const kt=({feedId:t})=>{const r=I();s.exports.useEffect(()=>{r(L.getFeedComments(t))},[]);const[a,n]=s.exports.useState(""),c=Q(),f=(l,i)=>{r(L.addCommentToFeed(l,i)),n("")};return e.createElement("section",{className:yt.commentsContainer},e.createElement(k,{container:!0,spacing:1,alignItems:"flex-end",style:{margin:"20px 0px"}},e.createElement(k,{item:!0,xs:10,sm:10,md:4,lg:3},e.createElement(ye,{value:a,multiline:!0,placeholder:"Add comment",style:{width:"100%"},onChange:l=>n(l.target.value)})),e.createElement(k,{item:!0,xs:2},e.createElement(ie,{style:{fontSize:28},onClick:()=>f(t,a)}))),e.createElement(e.Fragment,null,c.feeds.feedComments.value&&c.feeds.fetching.value===!1&&c.feeds.feedComments.value.map((l,i)=>e.createElement(ht,{key:i,comment:l}))))},xt=t=>{const[r,a]=s.exports.useState(!1);s.exports.useState(!1);const[n,c]=s.exports.useState(!1),[f,l]=s.exports.useState(!1),i=I(),{feed:o}=t,[E,h]=s.exports.useState(o.fires),[C,F]=s.exports.useState(o.likes),[b,d]=s.exports.useState(!1);s.exports.useState(null),s.exports.useState(null);const _=v=>{i(W.addFireToFeed(v)),h(E+1),c(!0),r&&J(v)},S=v=>{i(W.removeFireToFeed(v)),h(E-1),c(!1)},g=v=>{i(ce.addLikeToFeed(v)),F(C+1),a(!0),n&&S(v)},J=v=>{i(ce.removeLikeToFeed(v)),F(C-1),a(!1)},le=v=>{i(st.addReportToFeed(v)),l(!0)};s.exports.useEffect(()=>{i(W.getFeedFires(o.id))},[]);const{t:M}=N(),me=()=>{Se.share({title:M("social:shareForm.arcMedia"),text:M("social:shareForm.videoCreated"),url:encodeURI(o.videoUrl),dialogTitle:M("social:shareForm.shareWithBuddies")})};s.exports.useEffect(()=>{d(!0),c(o.isFired),a(o.isLiked)},[o.id]);const de=()=>{d(!0),i(w.addViewToFeed(o.id))};return s.exports.useEffect(()=>{console.log("Feed Card Feed:",o)}),o?e.createElement(e.Fragment,null,e.createElement(Y,{className:m.tipItem,square:!1,elevation:0,key:o.id},e.createElement(k,{container:!0,alignItems:"flex-end"},e.createElement(k,{xs:!0,item:!0},b?e.createElement(ke,{className:m.previewImage,component:"video",src:o.videoUrl,title:o.title,controls:!0}):e.createElement("img",{src:o.previewUrl,className:m.previewImage,alt:o.title,onClick:de}),e.createElement("span",{className:m.eyeLine},o.viewsCount,e.createElement(Ce,{style:{fontSize:"16px"}}))),e.createElement(k,{item:!0},e.createElement("div",{className:m.iconSubContainerVertical},e.createElement("div",null,r?e.createElement(_e,{htmlColor:"red",onClick:()=>J(o.id)}):e.createElement(ae,{htmlColor:"#DDDDDD",onClick:()=>g(o.id)}),e.createElement("span",{className:m.counter},C)),e.createElement("div",null,n?e.createElement(O,{className:m.fireIcon,htmlColor:"#FF6201",onClick:()=>S(o.id)}):e.createElement(O,{className:m.fireIcon,htmlColor:"#DDDDDD",onClick:()=>_(o.id)}),e.createElement("span",{className:m.counter},E))))),e.createElement(Z,{className:m.cardContent},e.createElement("section",{className:m.iconsContainer},e.createElement(ge,{avatar:e.createElement(ee,{src:o.creator.avatar?o.creator.avatar:"/assets/userpic.png",alt:o.creator.username,onClick:()=>i(P.updateCreatorPageState(!0,o.creator.id)),className:m.avatar}),title:e.createElement(y,{variant:"h6"},o.creator.name,e.createElement("p",null,"@",o.creator.username," \xB7 ",o.fires," flames"),o.creator.verified===!0&&e.createElement(X,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}}))}),e.createElement("section",{className:m.iconSubContainer},e.createElement(te,{onClick:me}),e.createElement(re,{onClick:null}),e.createElement(oe,{htmlColor:"#FF0000",onClick:()=>le(o.id)}))),e.createElement(y,{className:m.cartText,variant:"h6"},o.description),e.createElement(kt,{feedId:o.id}))),e.createElement(xe,{open:f,autoHideDuration:2e3,anchorOrigin:{vertical:"top",horizontal:"center"},onClose:()=>l(!1)},e.createElement(be,{severity:"error"},M("social:feed.is-repoted-message")))):e.createElement(e.Fragment,null)},bt="_feedContainer_72oy1_1",Rt="_backButton_72oy1_9",Tt="_popover_72oy1_22";var q={feedContainer:bt,backButton:Rt,popover:Tt};const Dt=t=>{let r=null;const{t:a}=N(),n=I(),c=pe(),f=ve(),l=f.feeds.feed.creator.value;s.exports.useEffect(()=>{n(w.getFeed(c.popups.feedId?.value))},[c.popups.feedId?.value]),r=f.feeds.fetching.value===!1&&f.feeds.feed,s.exports.useEffect(()=>{l&&n(w.getFeeds("creator",l.id))},[JSON.stringify(l)]);const[i,o]=e.useState(null),E=d=>{o(d.currentTarget)},h=()=>{o(null)},C=Boolean(i),F=C?"simple-popover":void 0,b=(d,_,S)=>{n(w.removeFeed(d,_,S)),n(P.updateFeedPageState(!1))};return e.createElement("section",{className:q.feedContainer},e.createElement("section",{className:q.controls},e.createElement(z,{variant:"text",className:q.backButton,onClick:()=>{n(P.updateFeedPageState(!1))}},e.createElement(fe,null),a("social:feed.back")),e.createElement("div",{className:q.popover},e.createElement(z,{"aria-describedby":F,variant:"contained",onClick:E,tabIndex:0},e.createElement(he,null)),e.createElement(Re,{id:F,open:C,anchorEl:i,onClose:h,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},e.createElement(z,{variant:"outlined",onClick:()=>b(r.id,r.previewUrl,r.videoUrl)},"Delete")))),r.id.value&&e.createElement(xt,{feed:r.value}),r.id.value&&e.createElement(e.Fragment,null,e.createElement(y,{variant:"h5"},a("social:feed.related")),e.createElement(Ee,{thisData:f.feeds.feedsCreator.value})))};var Xt=Dt;export{Xt as F,te as d};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOGIxY2I5MWEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvVGVsZWdyYW0uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0FkZENvbW1lbnRPdXRsaW5lZC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvRmF2b3JpdGVCb3JkZXJPdXRsaW5lZC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvUmVwb3J0T3V0bGluZWQuanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9zcmMvc29jaWFsL3JlZHVjZXJzL2ZlZWRGaXJlcy9GZWVkRmlyZXNBY3Rpb25zLnRzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkRmlyZXMvRmVlZEZpcmVzU2VydmljZS50cyIsIi4uLy4uL3NyYy9yZWR1Y2Vycy9mZWVkTGlrZXMvRmVlZExpa2VzQWN0aW9ucy50cyIsIi4uLy4uL3NyYy9yZWR1Y2Vycy9mZWVkTGlrZXMvRmVlZExpa2VzU2VydmljZS50cyIsIi4uLy4uL3NyYy9yZWR1Y2Vycy9mZWVkUmVwb3J0L0ZlZWRSZXBvcnRzU2VydmljZS50cyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL3NyYy9zb2NpYWwvcmVkdWNlcnMvZmVlZENvbW1lbnQvRmVlZENvbW1lbnRBY3Rpb25zLnRzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkQ29tbWVudC9GZWVkQ29tbWVudFNlcnZpY2UudHMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1NlbmQuanMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Qb3B1cExvZ2luL1BvcHVwTG9naW4udHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29tbWVudENhcmQvaW5kZXgudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29tbWVudExpc3QvaW5kZXgudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvRmVlZENhcmQvaW5kZXgudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvRmVlZC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTkuNzggMTguNjVsLjI4LTQuMjMgNy42OC02LjkyYy4zNC0uMzEtLjA3LS40Ni0uNTItLjE5TDcuNzQgMTMuMyAzLjY0IDEyYy0uODgtLjI1LS44OS0uODYuMi0xLjNsMTUuOTctNi4xNmMuNzMtLjMzIDEuNDMuMTggMS4xNSAxLjNsLTIuNzIgMTIuODFjLS4xOS45MS0uNzQgMS4xMy0xLjUuNzFMMTIuNiAxNi4zbC0xLjk5IDEuOTNjLS4yMy4yMy0uNDIuNDItLjgzLjQyelwiXG59KSwgJ1RlbGVncmFtJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMiA0YzAtMS4xLS45LTItMi0ySDRjLTEuMSAwLTIgLjktMiAydjEyYzAgMS4xLjkgMiAyIDJoMTRsNCA0VjR6bS0yIDEzLjE3TDE4LjgzIDE2SDRWNGgxNnYxMy4xN3pNMTMgNWgtMnY0SDd2Mmg0djRoMnYtNGg0VjloLTR6XCJcbn0pLCAnQWRkQ29tbWVudE91dGxpbmVkJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNi41IDNjLTEuNzQgMC0zLjQxLjgxLTQuNSAyLjA5QzEwLjkxIDMuODEgOS4yNCAzIDcuNSAzIDQuNDIgMyAyIDUuNDIgMiA4LjVjMCAzLjc4IDMuNCA2Ljg2IDguNTUgMTEuNTRMMTIgMjEuMzVsMS40NS0xLjMyQzE4LjYgMTUuMzYgMjIgMTIuMjggMjIgOC41IDIyIDUuNDIgMTkuNTggMyAxNi41IDN6bS00LjQgMTUuNTVsLS4xLjEtLjEtLjFDNy4xNCAxNC4yNCA0IDExLjM5IDQgOC41IDQgNi41IDUuNSA1IDcuNSA1YzEuNTQgMCAzLjA0Ljk5IDMuNTcgMi4zNmgxLjg3QzEzLjQ2IDUuOTkgMTQuOTYgNSAxNi41IDVjMiAwIDMuNSAxLjUgMy41IDMuNSAwIDIuODktMy4xNCA1Ljc0LTcuOSAxMC4wNXpcIlxufSksICdGYXZvcml0ZUJvcmRlck91dGxpbmVkJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNzMgM0g4LjI3TDMgOC4yN3Y3LjQ2TDguMjcgMjFoNy40NkwyMSAxNS43M1Y4LjI3TDE1LjczIDN6TTE5IDE0LjlMMTQuOSAxOUg5LjFMNSAxNC45VjkuMUw5LjEgNWg1LjhMMTkgOS4xdjUuOHpcIlxufSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgY3g6IFwiMTJcIixcbiAgY3k6IFwiMTZcIixcbiAgcjogXCIxXCJcbn0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMSA3aDJ2N2gtMnpcIlxufSkpLCAnUmVwb3J0T3V0bGluZWQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5cbmltcG9ydCB7IENyZWF0b3JTaG9ydCB9IGZyb20gJ0B4cmVuZ2luZS9jb21tb24vc3JjL2ludGVyZmFjZXMvQ3JlYXRvcidcblxuZXhwb3J0IGNvbnN0IEZlZWRGaXJlc0FjdGlvbiA9IHtcbiAgZmVlZEZpcmVzUmV0cmlldmVkOiAoZmVlZEZpcmVzOiBDcmVhdG9yU2hvcnRbXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnRkVFRF9GSVJFU19SRVRSSUVWRUQnIGFzIGNvbnN0LFxuICAgICAgZmVlZEZpcmVzOiBmZWVkRmlyZXNcbiAgICB9XG4gIH0sXG4gIGZldGNoaW5nRmVlZEZpcmVzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdGRUVEX0ZJUkVTX0ZFVENIJyBhcyBjb25zdFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBGZWVkRmlyZXNBY3Rpb25UeXBlID0gUmV0dXJuVHlwZTx0eXBlb2YgRmVlZEZpcmVzQWN0aW9uW2tleW9mIHR5cGVvZiBGZWVkRmlyZXNBY3Rpb25dPlxuIiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3JlZHVjZXJzL2FsZXJ0L0FsZXJ0U2VydmljZSdcbmltcG9ydCB7IGNsaWVudCB9IGZyb20gJy4uLy4uLy4uL2ZlYXRoZXJzJ1xuaW1wb3J0IHsgRmVlZEZpcmVzQWN0aW9uIH0gZnJvbSAnLi9GZWVkRmlyZXNBY3Rpb25zJ1xuaW1wb3J0IHsgRmVlZEFjdGlvbiB9IGZyb20gJy4uL2ZlZWQvRmVlZEFjdGlvbnMnXG5cbmV4cG9ydCBjb25zdCBGZWVkRmlyZXNTZXJ2aWNlID0ge1xuICBnZXRGZWVkRmlyZXM6IChmZWVkSWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoLCBnZXRTdGF0ZTogYW55KTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpc3BhdGNoKEZlZWRGaXJlc0FjdGlvbi5mZXRjaGluZ0ZlZWRGaXJlcygpKVxuICAgICAgICBjb25zdCBmZWVkc1Jlc3VsdHMgPSBhd2FpdCBjbGllbnQuc2VydmljZSgnZmVlZC1maXJlcycpLmZpbmQoeyBxdWVyeTogeyBmZWVkSWQ6IGZlZWRJZCB9IH0pXG4gICAgICAgIGRpc3BhdGNoKEZlZWRGaXJlc0FjdGlvbi5mZWVkRmlyZXNSZXRyaWV2ZWQoZmVlZHNSZXN1bHRzLmRhdGEpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBhZGRGaXJlVG9GZWVkOiAoZmVlZElkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjbGllbnQuc2VydmljZSgnZmVlZC1maXJlcycpLmNyZWF0ZSh7IGZlZWRJZCB9KVxuICAgICAgICBkaXNwYXRjaChGZWVkQWN0aW9uLmFkZEZlZWRGaXJlKGZlZWRJZCkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlbW92ZUZpcmVUb0ZlZWQ6IChmZWVkSWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5zZXJ2aWNlKCdmZWVkLWZpcmVzJykucmVtb3ZlKGZlZWRJZClcbiAgICAgICAgZGlzcGF0Y2goRmVlZEFjdGlvbi5yZW1vdmVGZWVkRmlyZShmZWVkSWQpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEBhdXRob3IgVGFueWEgVnlrbGl1ayA8dGFueWEudnlrbGl1a0BnbWFpbC5jb20+XG4gKi9cblxuaW1wb3J0IHsgQ3JlYXRvclNob3J0IH0gZnJvbSAnQHhyZW5naW5lL2NvbW1vbi9zcmMvaW50ZXJmYWNlcy9DcmVhdG9yJ1xuXG5leHBvcnQgY29uc3QgRmVlZExpa2VzQWN0aW9uID0ge1xuICBmZWVkTGlrZXNSZXRyaWV2ZWQ6IChmZWVkTGlrZXM6IENyZWF0b3JTaG9ydFtdKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdGRUVEX0xJS0VTX1JFVFJJRVZFRCcgYXMgY29uc3QsXG4gICAgICBmZWVkTGlrZXM6IGZlZWRMaWtlc1xuICAgIH1cbiAgfSxcbiAgZmV0Y2hpbmdGZWVkTGlrZXM6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0ZFRURfTElLRVNfRkVUQ0gnIGFzIGNvbnN0XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIEZlZWRMaWtlc0FjdGlvblR5cGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBGZWVkTGlrZXNBY3Rpb25ba2V5b2YgdHlwZW9mIEZlZWRMaWtlc0FjdGlvbl0+XG4iLCJpbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9mZWF0aGVycydcbmltcG9ydCB7IEZlZWRMaWtlc0FjdGlvbiB9IGZyb20gJy4vRmVlZExpa2VzQWN0aW9ucydcbmltcG9ydCB7IEZlZWRBY3Rpb24gfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkL0ZlZWRBY3Rpb25zJ1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9jb21tb24vcmVkdWNlcnMvYWxlcnQvQWxlcnRTZXJ2aWNlJ1xuXG5leHBvcnQgY29uc3QgRmVlZExpa2VzU2VydmljZSA9IHtcbiAgZ2V0RmVlZExpa2VzOiAoZmVlZElkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCwgZ2V0U3RhdGU6IGFueSk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBkaXNwYXRjaChGZWVkTGlrZXNBY3Rpb24uZmV0Y2hpbmdGZWVkTGlrZXMoKSlcbiAgICAgICAgY29uc3QgZmVlZHNSZXN1bHRzID0gYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2ZlZWQtbGlrZXMnKS5maW5kKHsgcXVlcnk6IHsgZmVlZElkOiBmZWVkSWQgfSB9KVxuICAgICAgICBkaXNwYXRjaChGZWVkTGlrZXNBY3Rpb24uZmVlZExpa2VzUmV0cmlldmVkKGZlZWRzUmVzdWx0cy5kYXRhKSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGFkZExpa2VUb0ZlZWQ6IChmZWVkSWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5zZXJ2aWNlKCdmZWVkLWxpa2VzJykuY3JlYXRlKHsgZmVlZElkIH0pXG4gICAgICAgIGRpc3BhdGNoKEZlZWRBY3Rpb24uYWRkRmVlZExpa2UoZmVlZElkKSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlbW92ZUxpa2VUb0ZlZWQ6IChmZWVkSWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5zZXJ2aWNlKCdmZWVkLWxpa2VzJykucmVtb3ZlKGZlZWRJZClcbiAgICAgICAgZGlzcGF0Y2goRmVlZEFjdGlvbi5yZW1vdmVGZWVkTGlrZShmZWVkSWQpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL2NvbW1vbi9yZWR1Y2Vycy9hbGVydC9BbGVydFNlcnZpY2UnXG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL2ZlYXRoZXJzJ1xuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcblxuLy8gaW1wb3J0IHsgZmV0Y2hpbmdGZWVkRmlyZXMsIGZlZWRGaXJlc1JldHJpZXZlZCB9IGZyb20gJy4vYWN0aW9ucydcbi8vIGltcG9ydCB7IGFkZEZlZWRSZXBvcnQgfSBmcm9tICcuLi9mZWVkL2FjdGlvbnMnXG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBnZXRGZWVkUmVwb3J0cyhmZWVkSWQ6IHN0cmluZykge1xuLy8gICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCwgZ2V0U3RhdGU6IGFueSk6IFByb21pc2U8YW55PiA9PiB7XG4vLyAgICAgdHJ5IHtcbi8vICAgICAgIGRpc3BhdGNoKGZldGNoaW5nRmVlZEZpcmVzKCkpXG4vLyAgICAgICBjb25zdCBmZWVkc1Jlc3VsdHMgPSBhd2FpdCBjbGllbnQuc2VydmljZSgnZmVlZC1yZXBvcnQnKS5maW5kKHsgcXVlcnk6IHsgZmVlZElkOiBmZWVkSWQgfSB9KVxuLy8gICAgICAgZGlzcGF0Y2goZmVlZEZpcmVzUmV0cmlldmVkKGZlZWRzUmVzdWx0cy5kYXRhKSlcbi8vICAgICB9IGNhdGNoIChlcnIpIHtcbi8vICAgICAgIGNvbnNvbGUubG9nKGVycilcbi8vICAgICAgIGRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4vLyAgICAgfVxuLy8gICB9XG4vLyB9XG5cbmV4cG9ydCBjb25zdCBGZWVkUmVwb3J0c1NlcnZpY2UgPSB7XG4gIGFkZFJlcG9ydFRvRmVlZDogKGZlZWRJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2ZlZWQtcmVwb3J0JykuY3JlYXRlKHsgZmVlZElkIH0pXG4gICAgICAgIC8vIGRpc3BhdGNoKGFkZEZlZWRSZXBvcnQoZmVlZElkKSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gcmVtb3ZlUmVwb3J0VG9GZWVkKGZlZWRJZDogc3RyaW5nKSB7XG4vLyAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbi8vICAgICB0cnkge1xuLy8gICAgICAgYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2ZlZWQtcmVwb3J0JykucmVtb3ZlKGZlZWRJZClcbi8vICAgICAgIGRpc3BhdGNoKHJlbW92ZUZlZWRSZXBvcnQoZmVlZElkKSlcbi8vICAgICB9IGNhdGNoIChlcnIpIHtcbi8vICAgICAgIGNvbnNvbGUubG9nKGVycilcbi8vICAgICAgIGRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4vLyAgICAgfVxuLy8gICB9XG4vLyB9XG4iLCIvKipcbiAqIEBhdXRob3IgVGFueWEgVnlrbGl1ayA8dGFueWEudnlrbGl1a0BnbWFpbC5jb20+XG4gKi9cbmltcG9ydCB7IENvbW1lbnRJbnRlcmZhY2UgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL0NvbW1lbnQnXG5pbXBvcnQgeyBDcmVhdG9yU2hvcnQgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL0NyZWF0b3InXG5cbmV4cG9ydCBjb25zdCBGZWVkQ29tbWVudEFjdGlvbiA9IHtcbiAgZmV0Y2hpbmdGZWVkQ29tbWVudHM6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0ZFRURfQ09NTUVOVFNfRkVUQ0gnIGFzIGNvbnN0XG4gICAgfVxuICB9LFxuICBmZWVkc0NvbW1lbnRzUmV0cmlldmVkOiAoY29tbWVudHM6IENvbW1lbnRJbnRlcmZhY2VbXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnRkVFRF9DT01NRU5UU19SRVRSSUVWRUQnIGFzIGNvbnN0LFxuICAgICAgY29tbWVudHNcbiAgICB9XG4gIH0sXG4gIGFkZEZlZWRDb21tZW50RmlyZTogKGNvbW1lbnRJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdBRERfRkVFRF9DT01NRU5UX0ZJUkVTJyBhcyBjb25zdCxcbiAgICAgIGNvbW1lbnRJZDogY29tbWVudElkXG4gICAgfVxuICB9LFxuICByZW1vdmVGZWVkQ29tbWVudEZpcmU6IChjb21tZW50SWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnUkVNT1ZFX0ZFRURfQ09NTUVOVF9GSVJFUycgYXMgY29uc3QsXG4gICAgICBjb21tZW50SWQ6IGNvbW1lbnRJZFxuICAgIH1cbiAgfSxcbiAgYWRkRmVlZENvbW1lbnQ6IChjb21tZW50OiBDb21tZW50SW50ZXJmYWNlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdBRERfRkVFRF9DT01NRU5UJyBhcyBjb25zdCxcbiAgICAgIGNvbW1lbnRcbiAgICB9XG4gIH0sXG4gIGNvbW1lbnRGaXJlczogKGNyZWF0b3JzOiBDcmVhdG9yU2hvcnRbXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQ09NTUVOVF9GSVJFUycgYXMgY29uc3QsXG4gICAgICBjcmVhdG9yc1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBGZWVkQ29tbWVudEFjdGlvblR5cGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBGZWVkQ29tbWVudEFjdGlvbltrZXlvZiB0eXBlb2YgRmVlZENvbW1lbnRBY3Rpb25dPlxuIiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3JlZHVjZXJzL2FsZXJ0L0FsZXJ0U2VydmljZSdcbmltcG9ydCB7IGNsaWVudCB9IGZyb20gJy4uLy4uLy4uL2ZlYXRoZXJzJ1xuaW1wb3J0IHsgRmVlZENvbW1lbnRBY3Rpb24gfSBmcm9tICcuL0ZlZWRDb21tZW50QWN0aW9ucydcblxuZXhwb3J0IGNvbnN0IEZlZWRDb21tZW50U2VydmljZSA9IHtcbiAgZ2V0RmVlZENvbW1lbnRzOiAoZmVlZElkOiBzdHJpbmcsIGxpbWl0PzogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaDogRGlzcGF0Y2gsIGdldFN0YXRlOiBhbnkpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGlzcGF0Y2goRmVlZENvbW1lbnRBY3Rpb24uZmV0Y2hpbmdGZWVkQ29tbWVudHMoKSlcbiAgICAgICAgY29uc3QgY29tbWVudHMgPSBhd2FpdCBjbGllbnQuc2VydmljZSgnY29tbWVudHMnKS5maW5kKHsgcXVlcnk6IHsgZmVlZElkIH0gfSlcbiAgICAgICAgZGlzcGF0Y2goRmVlZENvbW1lbnRBY3Rpb24uZmVlZHNDb21tZW50c1JldHJpZXZlZChjb21tZW50cy5kYXRhKSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYWRkQ29tbWVudFRvRmVlZDogKGZlZWRJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBuZXdDb21tZW50ID0gYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2NvbW1lbnRzJykuY3JlYXRlKHsgZmVlZElkLCB0ZXh0IH0pXG4gICAgICAgIGRpc3BhdGNoKEZlZWRDb21tZW50QWN0aW9uLmFkZEZlZWRDb21tZW50KG5ld0NvbW1lbnQpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBhZGRGaXJlVG9GZWVkQ29tbWVudDogKGNvbW1lbnRJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2NvbW1lbnRzLWZpcmVzJykuY3JlYXRlKHsgY29tbWVudElkIH0pXG4gICAgICAgIGRpc3BhdGNoKEZlZWRDb21tZW50QWN0aW9uLmFkZEZlZWRDb21tZW50RmlyZShjb21tZW50SWQpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZW1vdmVGaXJlVG9GZWVkQ29tbWVudDogKGNvbW1lbnRJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2NvbW1lbnRzLWZpcmVzJykucmVtb3ZlKGNvbW1lbnRJZClcbiAgICAgICAgZGlzcGF0Y2goRmVlZENvbW1lbnRBY3Rpb24ucmVtb3ZlRmVlZENvbW1lbnRGaXJlKGNvbW1lbnRJZCkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGdldENvbW1lbnRGaXJlczogKGNvbW1lbnRJZDogc3RyaW5nLCBsaW1pdD86IG51bWJlcikgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoLCBnZXRTdGF0ZTogYW55KTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbW1lbnRzID0gYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2NvbW1lbnRzLWZpcmVzJykuZmluZCh7IHF1ZXJ5OiB7IGFjdGlvbjogJ2NvbW1lbnQtZmlyZXMnLCBjb21tZW50SWQgfSB9KVxuICAgICAgICBkaXNwYXRjaChGZWVkQ29tbWVudEFjdGlvbi5jb21tZW50RmlyZXMoY29tbWVudHMuZGF0YSkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yLjAxIDIxTDIzIDEyIDIuMDEgMyAyIDEwbDE1IDItMTUgMnpcIlxufSksICdTZW5kJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Qb3B1cExvZ2luLm1vZHVsZS5zY3NzJ1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5leHBvcnQgY29uc3QgUG9wdXBMb2dpbiA9IChwcm9wcyk6IGFueSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKVxuICByZXR1cm4gcHJvcHMudHJpZ2dlciA/IChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnBvcHVwfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucG9wdXBfaW5uZXJ9PlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9e3N0eWxlcy5jbG9zZV9idG59IG9uQ2xpY2s9eygpID0+IHByb3BzLnNldFRyaWdnZXIoZmFsc2UpfT5cbiAgICAgICAgICB7dCgnc29jaWFsOmNhbmNlbCcpfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApIDogKFxuICAgICcnXG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wdXBMb2dpblxuIiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSdcbmltcG9ydCBBdmF0YXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXZhdGFyJ1xuaW1wb3J0IENhcmQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZCdcbmltcG9ydCBDYXJkQ29udGVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DYXJkQ29udGVudCdcbmltcG9ydCBXaGF0c2hvdEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1doYXRzaG90J1xuaW1wb3J0IFZlcmlmaWVkVXNlckljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1ZlcmlmaWVkVXNlcidcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NvbW1lbnRDYXJkLm1vZHVsZS5zY3NzJ1xuaW1wb3J0IHsgQ29tbWVudEludGVyZmFjZSB9IGZyb20gJ0B4cmVuZ2luZS9jb21tb24vc3JjL2ludGVyZmFjZXMvQ29tbWVudCdcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IGNvbm5lY3QsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgU2ltcGxlTW9kYWwgZnJvbSAnLi4vU2ltcGxlTW9kYWwnXG5pbXBvcnQgeyBGZWVkQ29tbWVudFNlcnZpY2UgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkQ29tbWVudC9GZWVkQ29tbWVudFNlcnZpY2UnXG5pbXBvcnQgeyB1c2VGZWVkQ29tbWVudHNTdGF0ZSB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvc29jaWFsL3JlZHVjZXJzL2ZlZWRDb21tZW50L0ZlZWRDb21tZW50U3RhdGUnXG5pbXBvcnQgUG9wdXBMb2dpbiBmcm9tICcuLi9Qb3B1cExvZ2luL1BvcHVwTG9naW4nXG5pbXBvcnQgeyB1c2VBdXRoU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3VzZXIvcmVkdWNlcnMvYXV0aC9BdXRoU3RhdGUnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNvbW1lbnQ6IENvbW1lbnRJbnRlcmZhY2Vcbn1cblxuY29uc3QgQ29tbWVudENhcmQgPSAoeyBjb21tZW50IH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgaWQsIGNyZWF0b3IsIGZpcmVzLCB0ZXh0LCBpc0ZpcmVkIH0gPSBjb21tZW50XG4gIGNvbnN0IFtvcGVuRmlyZWRNb2RhbCwgc2V0T3BlbkZpcmVkTW9kYWxdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBoYW5kbGVBZGRGaXJlQ2xpY2sgPSAoZmVlZElkKSA9PiB7XG4gICAgZGlzcGF0Y2goRmVlZENvbW1lbnRTZXJ2aWNlLmFkZEZpcmVUb0ZlZWRDb21tZW50KGZlZWRJZCkpXG4gIH1cbiAgY29uc3QgaGFuZGxlUmVtb3ZlRmlyZUNsaWNrID0gKGZlZWRJZCkgPT4ge1xuICAgIGRpc3BhdGNoKEZlZWRDb21tZW50U2VydmljZS5yZW1vdmVGaXJlVG9GZWVkQ29tbWVudChmZWVkSWQpKVxuICB9XG4gIGNvbnN0IGZlZWRDb21tZW50c1N0YXRlID0gdXNlRmVlZENvbW1lbnRzU3RhdGUoKVxuICBjb25zdCBoYW5kbGVHZXRDb21tZW50RmlyZWRVc2VycyA9IChpZCkgPT4ge1xuICAgIGRpc3BhdGNoKEZlZWRDb21tZW50U2VydmljZS5nZXRDb21tZW50RmlyZXMoaWQpKVxuICAgIHNldE9wZW5GaXJlZE1vZGFsKHRydWUpXG4gIH1cbiAgY29uc3QgW2J1dHRvblBvcHVwLCBzZXRCdXR0b25Qb3B1cF0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgY2hlY2tHdWVzdCA9IHVzZUF1dGhTdGF0ZSgpLmF1dGhVc2VyPy5pZGVudGl0eVByb3ZpZGVyPy50eXBlPy52YWx1ZSA9PT0gJ2d1ZXN0JyA/IHRydWUgOiBmYWxzZVxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKClcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Q2FyZCBjbGFzc05hbWU9e3N0eWxlcy5jb21tZW50SXRlbX0gc3F1YXJlPXtmYWxzZX0gZWxldmF0aW9uPXswfSBrZXk9e2lkfT5cbiAgICAgICAgPEF2YXRhciBjbGFzc05hbWU9e3N0eWxlcy5hdXRob3JBdmF0YXJ9IHNyYz17Y3JlYXRvci5hdmF0YXJ9IC8+XG4gICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9e3N0eWxlcy5jb21tZW50Q2FyZH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg2XCI+XG4gICAgICAgICAgICB7Y3JlYXRvci51c2VybmFtZX1cbiAgICAgICAgICAgIHtjcmVhdG9yLnZlcmlmaWVkICYmIChcbiAgICAgICAgICAgICAgPFZlcmlmaWVkVXNlckljb24gaHRtbENvbG9yPVwiIzAwN0FGRlwiIHN0eWxlPXt7IGZvbnRTaXplOiAnMTNweCcsIG1hcmdpbjogJzAgMCAwIDVweCcgfX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MVwiIHBhcmFncmFwaD17dHJ1ZX0+XG4gICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAge2ZpcmVzICYmIGZpcmVzID4gMCA/IChcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiAoY2hlY2tHdWVzdCA/IHNldEJ1dHRvblBvcHVwKHRydWUpIDogaGFuZGxlR2V0Q29tbWVudEZpcmVkVXNlcnMoaWQpKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuZmxhbWVzQ291bnR9PntmaXJlc308L3NwYW4+XG4gICAgICAgICAgICAgIHt0KCdzb2NpYWw6ZmxhbWVzJyl9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLmZpcmV9PlxuICAgICAgICAgIHtpc0ZpcmVkID8gKFxuICAgICAgICAgICAgPFdoYXRzaG90SWNvblxuICAgICAgICAgICAgICBodG1sQ29sb3I9XCIjRkY2MjAxXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gKGNoZWNrR3Vlc3QgPyBzZXRCdXR0b25Qb3B1cCh0cnVlKSA6IGhhbmRsZVJlbW92ZUZpcmVDbGljayhpZCkpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFdoYXRzaG90SWNvblxuICAgICAgICAgICAgICBodG1sQ29sb3I9XCIjREREREREXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gKGNoZWNrR3Vlc3QgPyBzZXRCdXR0b25Qb3B1cCh0cnVlKSA6IGhhbmRsZUFkZEZpcmVDbGljayhpZCkpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L0NhcmQ+XG4gICAgICA8U2ltcGxlTW9kYWxcbiAgICAgICAgdHlwZT17J2NvbW1lbnQtZmlyZXMnfVxuICAgICAgICBsaXN0PXtmZWVkQ29tbWVudHNTdGF0ZS5mZWVkcy5jb21tZW50RmlyZXMudmFsdWV9XG4gICAgICAgIG9wZW49e29wZW5GaXJlZE1vZGFsfVxuICAgICAgICBvbkNsb3NlPXsoKSA9PiAoY2hlY2tHdWVzdCA/IHNldEJ1dHRvblBvcHVwKHRydWUpIDogc2V0T3BlbkZpcmVkTW9kYWwoZmFsc2UpKX1cbiAgICAgIC8+XG4gICAgICA8UG9wdXBMb2dpbiB0cmlnZ2VyPXtidXR0b25Qb3B1cH0gc2V0VHJpZ2dlcj17c2V0QnV0dG9uUG9wdXB9PlxuICAgICAgICB7LyogPEluZGV4UGFnZSAvPiAqL31cbiAgICAgIDwvUG9wdXBMb2dpbj5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21tZW50Q2FyZFxuIiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgdXNlRmVlZENvbW1lbnRzU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkQ29tbWVudC9GZWVkQ29tbWVudFN0YXRlJ1xuaW1wb3J0IHsgRmVlZENvbW1lbnRTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9zb2NpYWwvcmVkdWNlcnMvZmVlZENvbW1lbnQvRmVlZENvbW1lbnRTZXJ2aWNlJ1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQnXG5pbXBvcnQgU2VuZEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1NlbmQnXG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJ1xuXG5pbXBvcnQgQ29tbWVudENhcmQgZnJvbSAnLi4vQ29tbWVudENhcmQnXG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9Db21tZW50TGlzdC5tb2R1bGUuc2NzcydcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZmVlZElkOiBzdHJpbmdcbn1cbmNvbnN0IENvbW1lbnRMaXN0ID0gKHsgZmVlZElkIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKEZlZWRDb21tZW50U2VydmljZS5nZXRGZWVkQ29tbWVudHMoZmVlZElkKSlcbiAgfSwgW10pXG4gIGNvbnN0IFtjb21tZW50VGV4dCwgc2V0Q29tbWVudFRleHRdID0gdXNlU3RhdGUoJycpXG4gIGNvbnN0IGZlZWRDb21tZW50c1N0YXRlID0gdXNlRmVlZENvbW1lbnRzU3RhdGUoKVxuICBjb25zdCBhZGRDb21tZW50ID0gKGZlZWRJZCwgdGV4dCkgPT4ge1xuICAgIGRpc3BhdGNoKEZlZWRDb21tZW50U2VydmljZS5hZGRDb21tZW50VG9GZWVkKGZlZWRJZCwgdGV4dCkpXG4gICAgc2V0Q29tbWVudFRleHQoJycpXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5jb21tZW50c0NvbnRhaW5lcn0+XG4gICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17MX0gYWxpZ25JdGVtcz1cImZsZXgtZW5kXCIgc3R5bGU9e3sgbWFyZ2luOiAnMjBweCAwcHgnIH19PlxuICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMH0gc209ezEwfSBtZD17NH0gbGc9ezN9PlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHZhbHVlPXtjb21tZW50VGV4dH1cbiAgICAgICAgICAgIG11bHRpbGluZT17dHJ1ZX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQWRkIGNvbW1lbnRcIlxuICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRDb21tZW50VGV4dChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9HcmlkPlxuICAgICAgICA8R3JpZCBpdGVtIHhzPXsyfT5cbiAgICAgICAgICA8U2VuZEljb24gc3R5bGU9e3sgZm9udFNpemU6IDI4IH19IG9uQ2xpY2s9eygpID0+IGFkZENvbW1lbnQoZmVlZElkLCBjb21tZW50VGV4dCl9IC8+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgIDwvR3JpZD5cbiAgICAgIDw+XG4gICAgICAgIHtmZWVkQ29tbWVudHNTdGF0ZS5mZWVkcy5mZWVkQ29tbWVudHMudmFsdWUgJiZcbiAgICAgICAgICBmZWVkQ29tbWVudHNTdGF0ZS5mZWVkcy5mZXRjaGluZy52YWx1ZSA9PT0gZmFsc2UgJiZcbiAgICAgICAgICBmZWVkQ29tbWVudHNTdGF0ZS5mZWVkcy5mZWVkQ29tbWVudHMudmFsdWUubWFwKChpdGVtLCBrZXkpID0+IDxDb21tZW50Q2FyZCBrZXk9e2tleX0gY29tbWVudD17aXRlbX0gLz4pfVxuICAgICAgPC8+XG4gICAgPC9zZWN0aW9uPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbW1lbnRMaXN0XG4iLCIvKipcbiAqIEBhdXRob3IgVGFueWEgVnlrbGl1ayA8dGFueWEudnlrbGl1a0BnbWFpbC5jb20+LCBHbGViIE9yZGluc2t5XG4gKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMsIERpc3BhdGNoIH0gZnJvbSAncmVkdXgnXG5cbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHsgY29ubmVjdCwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0IENhcmRNZWRpYSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DYXJkTWVkaWEnXG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5J1xuaW1wb3J0IENhcmQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZCdcbmltcG9ydCBDYXJkQ29udGVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DYXJkQ29udGVudCdcbmltcG9ydCBXaGF0c2hvdEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1doYXRzaG90J1xuaW1wb3J0IFRlbGVncmFtSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvVGVsZWdyYW0nXG5pbXBvcnQgQWRkQ29tbWVudEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0FkZENvbW1lbnRPdXRsaW5lZCdcbmltcG9ydCBGYXZvcml0ZUJvcmRlck91dGxpbmVkSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRmF2b3JpdGVCb3JkZXJPdXRsaW5lZCdcbmltcG9ydCBGYXZvcml0ZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Zhdm9yaXRlJ1xuaW1wb3J0IFZpc2liaWxpdHlJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9WaXNpYmlsaXR5J1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvUG9wb3ZlcidcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJ1xuaW1wb3J0IENhcmRIZWFkZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZEhlYWRlcidcbmltcG9ydCBWZXJpZmllZFVzZXJJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9WZXJpZmllZFVzZXInXG5pbXBvcnQgQXZhdGFyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0F2YXRhcidcbmltcG9ydCBSZXBvcnRPdXRsaW5lZEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1JlcG9ydE91dGxpbmVkJ1xuaW1wb3J0IE1vcmVIb3Jpekljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL01vcmVIb3JpeidcbmltcG9ydCB7IEZlZWQgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL0ZlZWQnXG5pbXBvcnQgQ3JlYXRvckFzVGl0bGUgZnJvbSAnLi4vQ3JlYXRvckFzVGl0bGUnXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRmVlZENhcmQubW9kdWxlLnNjc3MnXG5pbXBvcnQgU2ltcGxlTW9kYWwgZnJvbSAnLi4vU2ltcGxlTW9kYWwnXG5pbXBvcnQgeyBGZWVkU2VydmljZSB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvc29jaWFsL3JlZHVjZXJzL2ZlZWQvRmVlZFNlcnZpY2UnXG5cbmltcG9ydCB7IEZlZWRGaXJlc1NlcnZpY2UgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkRmlyZXMvRmVlZEZpcmVzU2VydmljZSdcbmltcG9ydCB7IEZlZWRMaWtlc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9mZWVkTGlrZXMvRmVlZExpa2VzU2VydmljZSdcblxuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5pbXBvcnQgeyBQb3B1cHNTdGF0ZVNlcnZpY2UgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVNlcnZpY2UnXG5pbXBvcnQgeyBGZWVkUmVwb3J0c1NlcnZpY2UgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9mZWVkUmVwb3J0L0ZlZWRSZXBvcnRzU2VydmljZSdcbmltcG9ydCB7IFNoYXJlIH0gZnJvbSAnQGNhcGFjaXRvci9zaGFyZSdcbmltcG9ydCBTbmFja2JhciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9TbmFja2JhcidcbmltcG9ydCBBbGVydCBmcm9tICdAbWF0ZXJpYWwtdWkvbGFiL0FsZXJ0J1xuaW1wb3J0IENvbW1lbnRMaXN0IGZyb20gJy4uL0NvbW1lbnRMaXN0J1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCdcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZmVlZDogRmVlZFxufVxuXG5jb25zdCBGZWVkQ2FyZCA9IChwcm9wczogUHJvcHMpOiBhbnkgPT4ge1xuICBjb25zdCBbbGlrZWQsIHNldExpa2VkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbYnV0dG9uUG9wdXAsIHNldEJ1dHRvblBvcHVwXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbZmlyZWQsIHNldEZpcmVkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbcmVwb3J0ZWQsIHNldFJlcG9ydGVkXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgLy8gICAgIGNvbnN0IFtpc1ZpZGVvLCBzZXRJc1ZpZGVvXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgLy8gICAgIGNvbnN0IFtvcGVuRmlyZWRNb2RhbCwgc2V0T3BlbkZpcmVkTW9kYWxdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAvLyAgICAgY29uc3Qge2ZlZWQsIGdldEZlZWRGaXJlcywgZmVlZEZpcmVzU3RhdGUsIGFkZEZpcmVUb0ZlZWQsIHJlbW92ZUZpcmVUb0ZlZWQsIGFkZFZpZXdUb0ZlZWR9ID0gcHJvcHM7XG4gIGNvbnN0IHsgZmVlZCB9ID0gcHJvcHNcbiAgY29uc3QgW2ZpcmVkQ291bnQsIHNldEZpcmVkQ291bnRdID0gdXNlU3RhdGUoZmVlZC5maXJlcylcbiAgY29uc3QgW2xpa2VkQ291bnQsIHNldExpa2VkQ291bnRdID0gdXNlU3RhdGUoZmVlZC5saWtlcylcbiAgY29uc3QgW3ZpZGVvRGlzcGxheSwgc2V0VmlkZW9EaXNwbGF5XSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbZmVlZEZpcmVzQ3JlYXRvcnMsIHNldEZlZWRGaXJlc0NyZWF0b3JzXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFtmZWVkTGlrZXNDcmVhdG9ycywgc2V0RmVlZExpa2VzQ3JlYXRvcnNdID0gdXNlU3RhdGUobnVsbClcblxuICBjb25zdCBoYW5kbGVBZGRGaXJlQ2xpY2sgPSAoZmVlZElkKSA9PiB7XG4gICAgZGlzcGF0Y2goRmVlZEZpcmVzU2VydmljZS5hZGRGaXJlVG9GZWVkKGZlZWRJZCkpXG4gICAgc2V0RmlyZWRDb3VudChmaXJlZENvdW50ICsgMSlcbiAgICBzZXRGaXJlZCh0cnVlKVxuICAgIGlmIChsaWtlZCkge1xuICAgICAgaGFuZGxlUmVtb3ZlTGlrZUNsaWNrKGZlZWRJZClcbiAgICB9XG4gIH1cblxuICBjb25zdCBoYW5kbGVSZW1vdmVGaXJlQ2xpY2sgPSAoZmVlZElkKSA9PiB7XG4gICAgZGlzcGF0Y2goRmVlZEZpcmVzU2VydmljZS5yZW1vdmVGaXJlVG9GZWVkKGZlZWRJZCkpXG4gICAgc2V0RmlyZWRDb3VudChmaXJlZENvdW50IC0gMSlcbiAgICBzZXRGaXJlZChmYWxzZSlcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUFkZExpa2VDbGljayA9IChmZWVkSWQpID0+IHtcbiAgICBkaXNwYXRjaChGZWVkTGlrZXNTZXJ2aWNlLmFkZExpa2VUb0ZlZWQoZmVlZElkKSlcbiAgICBzZXRMaWtlZENvdW50KGxpa2VkQ291bnQgKyAxKVxuICAgIHNldExpa2VkKHRydWUpXG4gICAgaWYgKGZpcmVkKSB7XG4gICAgICBoYW5kbGVSZW1vdmVGaXJlQ2xpY2soZmVlZElkKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZVJlbW92ZUxpa2VDbGljayA9IChmZWVkSWQpID0+IHtcbiAgICBkaXNwYXRjaChGZWVkTGlrZXNTZXJ2aWNlLnJlbW92ZUxpa2VUb0ZlZWQoZmVlZElkKSlcbiAgICBzZXRMaWtlZENvdW50KGxpa2VkQ291bnQgLSAxKVxuICAgIHNldExpa2VkKGZhbHNlKVxuICB9XG5cbiAgY29uc3QgaGFuZGxlUmVwb3J0RmVlZCA9IChmZWVkSWQpID0+IHtcbiAgICBkaXNwYXRjaChGZWVkUmVwb3J0c1NlcnZpY2UuYWRkUmVwb3J0VG9GZWVkKGZlZWRJZCkpXG4gICAgc2V0UmVwb3J0ZWQodHJ1ZSlcbiAgfVxuXG4gIC8vaGlkZWQgZm9yIG5vd1xuICAvLyBjb25zdCBoYW5kbGVBZGRCb29rbWFya0NsaWNrID0gKGZlZWRJZCkgPT5hZGRCb29rbWFya1RvRmVlZChmZWVkSWQpO1xuICAvLyBjb25zdCBoYW5kbGVSZW1vdmVCb29rbWFya0NsaWNrID0gKGZlZWRJZCkgPT5yZW1vdmVCb29rbWFya1RvRmVlZChmZWVkSWQpO1xuXG4gIC8vICAgICBjb25zdCBoYW5kbGVQbGF5VmlkZW8gPSAoZmVlZElkKSA9PiB7XG4gIC8vICAgICAgICAgIWNoZWNrR3Vlc3QgJiYgYWRkVmlld1RvRmVlZChmZWVkSWQpO1xuICAvLyAgICAgfTtcblxuICAvLyAgICAgY29uc3QgaGFuZGxlR2V0RmVlZEZpcmVkVXNlcnMgPSAoZmVlZElkKSA9PiB7XG4gIC8vICAgICAgICAgaWYoZmVlZElkKXtcbiAgLy8gICAgICAgICAgICAgc2V0T3BlbkZpcmVkTW9kYWwodHJ1ZSk7XG4gIC8vICAgICAgICAgfVxuICAvLyAgICAgfTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkaXNwYXRjaChGZWVkRmlyZXNTZXJ2aWNlLmdldEZlZWRGaXJlcyhmZWVkLmlkKSlcbiAgfSwgW10pXG5cbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IHNoYXJlVmlhID0gKCkgPT4ge1xuICAgIFNoYXJlLnNoYXJlKHtcbiAgICAgIHRpdGxlOiB0KCdzb2NpYWw6c2hhcmVGb3JtLmFyY01lZGlhJyksXG4gICAgICB0ZXh0OiB0KCdzb2NpYWw6c2hhcmVGb3JtLnZpZGVvQ3JlYXRlZCcpLFxuICAgICAgdXJsOiBlbmNvZGVVUkkoZmVlZC52aWRlb1VybCksXG4gICAgICBkaWFsb2dUaXRsZTogdCgnc29jaWFsOnNoYXJlRm9ybS5zaGFyZVdpdGhCdWRkaWVzJylcbiAgICB9KVxuICB9XG5cbiAgLy8gY29uc3QgaGFuZGxlR2V0RmVlZEZpcmVkVXNlcnMgPSAoZmVlZElkKSA9PiB7XG4gIC8vICAgICBpZihmZWVkSWQpe1xuICAvLyAgICAgICAgIGdldEZlZWRGaXJlcyhmZWVkSWQpO1xuICAvLyAgICAgICAgIHNldE9wZW5GaXJlZE1vZGFsKHRydWUpO1xuICAvLyAgICAgfVxuICAvLyB9O1xuXG4gIC8vICAgICBjb25zdCBjaGVja0d1ZXN0ID0gcHJvcHMuYXV0aFN0YXRlLmdldCgnYXV0aFVzZXInKT8uaWRlbnRpdHlQcm92aWRlcj8udHlwZSA9PT0gJ2d1ZXN0JyA/IHRydWUgOiBmYWxzZTtcblxuICAvL2NvbnN0IGNyZWF0b3JJZCA9IGF1dGhTdGF0ZS5nZXQoJ2N1cnJlbnRDcmVhdG9yJykuaWRcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFZpZGVvRGlzcGxheSh0cnVlKVxuICAgIHNldEZpcmVkKGZlZWQuaXNGaXJlZClcbiAgICBzZXRMaWtlZChmZWVkLmlzTGlrZWQpXG4gIH0sIFtmZWVkLmlkXSlcblxuICBjb25zdCBwcmV2aWV3SW1hZ2VDbGljayA9ICgpID0+IHtcbiAgICBzZXRWaWRlb0Rpc3BsYXkodHJ1ZSlcbiAgICBkaXNwYXRjaChGZWVkU2VydmljZS5hZGRWaWV3VG9GZWVkKGZlZWQuaWQpKVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnRmVlZCBDYXJkIEZlZWQ6JywgZmVlZClcbiAgfSlcblxuICByZXR1cm4gZmVlZCA/IChcbiAgICA8PlxuICAgICAgPENhcmQgY2xhc3NOYW1lPXtzdHlsZXMudGlwSXRlbX0gc3F1YXJlPXtmYWxzZX0gZWxldmF0aW9uPXswfSBrZXk9e2ZlZWQuaWR9PlxuICAgICAgICB7LyogICAgICAgICAgICAgICAgIHtpc1ZpZGVvID8gPENhcmRNZWRpYSAgICAqL31cbiAgICAgICAgey8qICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJldmlld0ltYWdlfSAgICAgICAgICAgICAgICAgICAqL31cbiAgICAgICAgey8qICAgICAgICAgICAgICAgICAgICAgc3JjPXtmZWVkLnZpZGVvVXJsfSAqL31cbiAgICAgICAgey8qICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2ZlZWQudGl0bGV9ICAgKi99XG4gICAgICAgIHsvKiAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD0ndmlkZW8nICAgICAgICovfVxuICAgICAgICB7LyogICAgICAgICAgICAgICAgICAgICBjb250cm9scyAgICovfVxuICAgICAgICB7LyogICAgICAgICAgICAgICAgICAgICBhdXRvUGxheT17dHJ1ZX0gICovfVxuICAgICAgICB7LyogICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+aGFuZGxlUGxheVZpZGVvKGZlZWQuaWQpfSAgICAgICAgICAgICAgICAqL31cbiAgICAgICAgey8qICAgICAgICAgICAgICAgICAvPiA6ICovfVxuICAgICAgICB7LyogICAgICAgICAgICAgICAgIDxDYXJkTWVkaWEgICAgKi99XG4gICAgICAgIHsvKiAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnByZXZpZXdJbWFnZX0gICAgICAgICAgICAgICAgICAgKi99XG4gICAgICAgIHsvKiAgICAgICAgICAgICAgICAgICAgIGltYWdlPXtmZWVkLnByZXZpZXdVcmx9ICovfVxuICAgICAgICB7LyogICAgICAgICAgICAgICAgICAgICB0aXRsZT17ZmVlZC50aXRsZX0gICAgICAgICAgICAgICAgICAgICAgICovfVxuICAgICAgICB7LyogICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+c2V0SXNWaWRlbyh0cnVlKX0gICAgICAgICAgICAgICAgKi99XG4gICAgICAgIHsvKiAgICAgICAgICAgICAgICAgLz59ICovfVxuICAgICAgICA8R3JpZCBjb250YWluZXIgYWxpZ25JdGVtcz1cImZsZXgtZW5kXCI+XG4gICAgICAgICAgPEdyaWQgeHMgaXRlbT5cbiAgICAgICAgICAgIHshdmlkZW9EaXNwbGF5ID8gKFxuICAgICAgICAgICAgICA8aW1nIHNyYz17ZmVlZC5wcmV2aWV3VXJsfSBjbGFzc05hbWU9e3N0eWxlcy5wcmV2aWV3SW1hZ2V9IGFsdD17ZmVlZC50aXRsZX0gb25DbGljaz17cHJldmlld0ltYWdlQ2xpY2t9IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8Q2FyZE1lZGlhXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJldmlld0ltYWdlfVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cInZpZGVvXCJcbiAgICAgICAgICAgICAgICBzcmM9e2ZlZWQudmlkZW9Vcmx9XG4gICAgICAgICAgICAgICAgdGl0bGU9e2ZlZWQudGl0bGV9XG4gICAgICAgICAgICAgICAgY29udHJvbHNcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5leWVMaW5lfT5cbiAgICAgICAgICAgICAge2ZlZWQudmlld3NDb3VudH1cbiAgICAgICAgICAgICAgPFZpc2liaWxpdHlJY29uIHN0eWxlPXt7IGZvbnRTaXplOiAnMTZweCcgfX0gLz5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuaWNvblN1YkNvbnRhaW5lclZlcnRpY2FsfT5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICB7bGlrZWQgPyAoXG4gICAgICAgICAgICAgICAgICA8RmF2b3JpdGVJY29uIGh0bWxDb2xvcj1cInJlZFwiIG9uQ2xpY2s9eygpID0+IGhhbmRsZVJlbW92ZUxpa2VDbGljayhmZWVkLmlkKX0gLz5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgPEZhdm9yaXRlQm9yZGVyT3V0bGluZWRJY29uIGh0bWxDb2xvcj1cIiNERERERERcIiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVBZGRMaWtlQ2xpY2soZmVlZC5pZCl9IC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy5jb3VudGVyfT57bGlrZWRDb3VudH08L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIHtmaXJlZCA/IChcbiAgICAgICAgICAgICAgICAgIDxXaGF0c2hvdEljb25cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZmlyZUljb259XG4gICAgICAgICAgICAgICAgICAgIGh0bWxDb2xvcj1cIiNGRjYyMDFcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVSZW1vdmVGaXJlQ2xpY2soZmVlZC5pZCl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICA8V2hhdHNob3RJY29uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmZpcmVJY29ufVxuICAgICAgICAgICAgICAgICAgICBodG1sQ29sb3I9XCIjREREREREXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQWRkRmlyZUNsaWNrKGZlZWQuaWQpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmNvdW50ZXJ9PntmaXJlZENvdW50fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgIDwvR3JpZD5cblxuICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPXtzdHlsZXMuY2FyZENvbnRlbnR9PlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLmljb25zQ29udGFpbmVyfT5cbiAgICAgICAgICAgIHsvKiAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e3N0eWxlcy50aXRsZUNvbnRhaW5lcn0gZ3V0dGVyQm90dG9tIHZhcmlhbnQ9XCJoNFwiICovfVxuICAgICAgICAgICAgey8qIC8vICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT5oaXN0b3J5LnB1c2goJy9mZWVkP2ZlZWRJZD0nICsgZmVlZC5pZCl9ICovfVxuICAgICAgICAgICAgey8qICAgICAgICAgICAgICAgICAgICAgICAgID4gKi99XG4gICAgICAgICAgICB7LyogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmZWVkLnRpdGxlfSAqL31cbiAgICAgICAgICAgIHsvKiAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+ICovfVxuXG4gICAgICAgICAgICA8Q2FyZEhlYWRlclxuICAgICAgICAgICAgICBhdmF0YXI9e1xuICAgICAgICAgICAgICAgIDxBdmF0YXJcbiAgICAgICAgICAgICAgICAgIHNyYz17ZmVlZC5jcmVhdG9yLmF2YXRhciA/IGZlZWQuY3JlYXRvci5hdmF0YXIgOiAnL2Fzc2V0cy91c2VycGljLnBuZyd9XG4gICAgICAgICAgICAgICAgICBhbHQ9e2ZlZWQuY3JlYXRvci51c2VybmFtZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKFBvcHVwc1N0YXRlU2VydmljZS51cGRhdGVDcmVhdG9yUGFnZVN0YXRlKHRydWUsIGZlZWQuY3JlYXRvci5pZCkpfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuYXZhdGFyfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNlwiPlxuICAgICAgICAgICAgICAgICAge2ZlZWQuY3JlYXRvci5uYW1lfVxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIEB7ZmVlZC5jcmVhdG9yLnVzZXJuYW1lfSDCtyB7ZmVlZC5maXJlc30gZmxhbWVzXG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICB7ZmVlZC5jcmVhdG9yLnZlcmlmaWVkID09PSB0cnVlICYmIChcbiAgICAgICAgICAgICAgICAgICAgPFZlcmlmaWVkVXNlckljb24gaHRtbENvbG9yPVwiIzAwN0FGRlwiIHN0eWxlPXt7IGZvbnRTaXplOiAnMTNweCcsIG1hcmdpbjogJzAgMCAwIDVweCcgfX0gLz5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuaWNvblN1YkNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgIDxUZWxlZ3JhbUljb24gb25DbGljaz17c2hhcmVWaWF9IC8+XG4gICAgICAgICAgICAgIDxBZGRDb21tZW50SWNvbiBvbkNsaWNrPXtudWxsfSAvPlxuICAgICAgICAgICAgICA8UmVwb3J0T3V0bGluZWRJY29uIGh0bWxDb2xvcj1cIiNGRjAwMDBcIiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVSZXBvcnRGZWVkKGZlZWQuaWQpfSAvPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgey8qaGlkZWQgZm9yIG5vdyovfVxuICAgICAgICAgICAgey8qIHtmZWVkLmlzQm9va21hcmtlZCA/IDxCb29rbWFya0ljb24gb25DbGljaz17KCk9PmNoZWNrR3Vlc3QgPyBzZXRCdXR0b25Qb3B1cCh0cnVlKSA6IGhhbmRsZVJlbW92ZUJvb2ttYXJrQ2xpY2soZmVlZC5pZCl9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgIDxCb29rbWFya0JvcmRlckljb24gb25DbGljaz17KCk9PmNoZWNrR3Vlc3QgPyBzZXRCdXR0b25Qb3B1cCh0cnVlKSA6IGhhbmRsZUFkZEJvb2ttYXJrQ2xpY2soZmVlZC5pZCl9IC8+fSAqL31cbiAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICB7LyogICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDJcIiBvbkNsaWNrPXsoKT0+Y2hlY2tHdWVzdCA/IHNldEJ1dHRvblBvcHVwKHRydWUpIDogaGFuZGxlR2V0RmVlZEZpcmVkVXNlcnMoZmVlZC5pZCl9PjxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLmZsYW1lc0NvdW50fT57ZmVlZC5maXJlc308L3NwYW4+RmxhbWVzPC9UeXBvZ3JhcGh5PiAqL31cblxuICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17c3R5bGVzLmNhcnRUZXh0fSB2YXJpYW50PVwiaDZcIj5cbiAgICAgICAgICAgIHtmZWVkLmRlc2NyaXB0aW9ufVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8Q29tbWVudExpc3QgZmVlZElkPXtmZWVkLmlkfSAvPlxuICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgPC9DYXJkPlxuICAgICAgey8qIDxTaW1wbGVNb2RhbCB0eXBlPXsnZmVlZC1maXJlcyd9IGxpc3Q9e2ZlZWRGaXJlc1N0YXRlLmdldCgnZmVlZEZpcmVzJyl9IG9wZW49e29wZW5GaXJlZE1vZGFsfSBvbkNsb3NlPXsoKT0+c2V0T3BlbkZpcmVkTW9kYWwoZmFsc2UpfSAvPiAqL31cbiAgICAgIHsvKiA8UG9wdXBMb2dpbiB0cmlnZ2VyPXtidXR0b25Qb3B1cH0gc2V0VHJpZ2dlcj17c2V0QnV0dG9uUG9wdXB9PiAqL31cbiAgICAgIHsvKiA8SW5kZXhQYWdlIC8+ICovfVxuICAgICAgey8qIDwvUG9wdXBMb2dpbj4gKi99XG4gICAgICA8U25hY2tiYXJcbiAgICAgICAgb3Blbj17cmVwb3J0ZWR9XG4gICAgICAgIGF1dG9IaWRlRHVyYXRpb249ezIwMDB9XG4gICAgICAgIGFuY2hvck9yaWdpbj17e1xuICAgICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgICBob3Jpem9udGFsOiAnY2VudGVyJ1xuICAgICAgICB9fVxuICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRSZXBvcnRlZChmYWxzZSl9XG4gICAgICA+XG4gICAgICAgIDxBbGVydCBzZXZlcml0eT1cImVycm9yXCI+e3QoJ3NvY2lhbDpmZWVkLmlzLXJlcG90ZWQtbWVzc2FnZScpfTwvQWxlcnQ+XG4gICAgICA8L1NuYWNrYmFyPlxuICAgIDwvPlxuICApIDogKFxuICAgIDw+PC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVlZENhcmRcbiIsIi8qKlxuICogQGF1dGhvciBUYW55YSBWeWtsaXVrIDx0YW55YS52eWtsaXVrQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHsgQnV0dG9uLCBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXG5pbXBvcnQgQXJyb3dCYWNrSW9zSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQXJyb3dCYWNrSW9zJ1xuXG5pbXBvcnQgeyB1c2VGZWVkU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9mZWVkL0ZlZWRTdGF0ZSdcbmltcG9ydCB7IEZlZWRTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9zb2NpYWwvcmVkdWNlcnMvZmVlZC9GZWVkU2VydmljZSdcbmltcG9ydCB7IHVzZVBvcHVwc1N0YXRlU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbC9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVN0YXRlJ1xuaW1wb3J0IHsgUG9wdXBzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9zb2NpYWwvcmVkdWNlcnMvcG9wdXBzU3RhdGUvUG9wdXBzU3RhdGVTZXJ2aWNlJ1xuXG5pbXBvcnQgRmVlZENhcmQgZnJvbSAnLi4vRmVlZENhcmQnXG5pbXBvcnQgRmVhdHVyZWQgZnJvbSAnLi4vRmVhdHVyZWQnXG5pbXBvcnQgTW9yZUhvcml6SWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTW9yZUhvcml6J1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvUG9wb3ZlcidcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0ZlZWQubW9kdWxlLnNjc3MnXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGZlZWRJZD86IHN0cmluZ1xufVxuY29uc3QgRmVlZCA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgbGV0IGZlZWQgPSBudWxsIGFzIGFueVxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IHBvcHVwc1N0YXRlID0gdXNlUG9wdXBzU3RhdGVTdGF0ZSgpXG4gIGNvbnN0IGZlZWRzU3RhdGUgPSB1c2VGZWVkU3RhdGUoKVxuXG4gIGNvbnN0IGNyZWF0b3IgPSBmZWVkc1N0YXRlLmZlZWRzLmZlZWQuY3JlYXRvci52YWx1ZVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2goRmVlZFNlcnZpY2UuZ2V0RmVlZChwb3B1cHNTdGF0ZS5wb3B1cHMuZmVlZElkPy52YWx1ZSkpXG4gIH0sIFtwb3B1cHNTdGF0ZS5wb3B1cHMuZmVlZElkPy52YWx1ZV0pXG4gIGZlZWQgPSBmZWVkc1N0YXRlLmZlZWRzLmZldGNoaW5nLnZhbHVlID09PSBmYWxzZSAmJiBmZWVkc1N0YXRlLmZlZWRzLmZlZWRcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjcmVhdG9yKSB7XG4gICAgICBkaXNwYXRjaChGZWVkU2VydmljZS5nZXRGZWVkcygnY3JlYXRvcicsIGNyZWF0b3IuaWQpKVxuICAgIH1cbiAgfSwgW0pTT04uc3RyaW5naWZ5KGNyZWF0b3IpXSlcblxuICBjb25zdCBbYW5jaG9yRWwsIHNldEFuY2hvckVsXSA9IFJlYWN0LnVzZVN0YXRlPEhUTUxCdXR0b25FbGVtZW50IHwgbnVsbD4obnVsbClcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiB7XG4gICAgc2V0QW5jaG9yRWwoZXZlbnQuY3VycmVudFRhcmdldClcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gKCkgPT4ge1xuICAgIHNldEFuY2hvckVsKG51bGwpXG4gIH1cbiAgY29uc3Qgb3BlbiA9IEJvb2xlYW4oYW5jaG9yRWwpXG4gIGNvbnN0IGlkID0gb3BlbiA/ICdzaW1wbGUtcG9wb3ZlcicgOiB1bmRlZmluZWRcblxuICBjb25zdCBkZWxldGVBY3Rpb24gPSAoZmVlZElkLCBwcmV2aWV3VXJsLCB2aWRlb1VybCkgPT4ge1xuICAgIGRpc3BhdGNoKEZlZWRTZXJ2aWNlLnJlbW92ZUZlZWQoZmVlZElkLCBwcmV2aWV3VXJsLCB2aWRlb1VybCkpXG4gICAgZGlzcGF0Y2goUG9wdXBzU3RhdGVTZXJ2aWNlLnVwZGF0ZUZlZWRQYWdlU3RhdGUoZmFsc2UpKVxuICB9XG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuZmVlZENvbnRhaW5lcn0+XG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5jb250cm9sc30+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuYmFja0J1dHRvbn1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlRmVlZFBhZ2VTdGF0ZShmYWxzZSkpXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxBcnJvd0JhY2tJb3NJY29uIC8+XG4gICAgICAgICAge3QoJ3NvY2lhbDpmZWVkLmJhY2snKX1cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5wb3BvdmVyfT5cbiAgICAgICAgICA8QnV0dG9uIGFyaWEtZGVzY3JpYmVkYnk9e2lkfSB2YXJpYW50PVwiY29udGFpbmVkXCIgb25DbGljaz17aGFuZGxlQ2xpY2t9IHRhYkluZGV4PXswfT5cbiAgICAgICAgICAgIDxNb3JlSG9yaXpJY29uIC8+XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPFBvcG92ZXJcbiAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgIG9wZW49e29wZW59XG4gICAgICAgICAgICBhbmNob3JFbD17YW5jaG9yRWx9XG4gICAgICAgICAgICBvbkNsb3NlPXtoYW5kbGVDbG9zZX1cbiAgICAgICAgICAgIGFuY2hvck9yaWdpbj17e1xuICAgICAgICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luPXt7XG4gICAgICAgICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcidcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwib3V0bGluZWRcIiBvbkNsaWNrPXsoKSA9PiBkZWxldGVBY3Rpb24oZmVlZC5pZCwgZmVlZC5wcmV2aWV3VXJsLCBmZWVkLnZpZGVvVXJsKX0+XG4gICAgICAgICAgICAgIERlbGV0ZVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgIHtmZWVkLmlkLnZhbHVlICYmIDxGZWVkQ2FyZCBmZWVkPXtmZWVkLnZhbHVlfSAvPn1cbiAgICAgIHtmZWVkLmlkLnZhbHVlICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDVcIj57dCgnc29jaWFsOmZlZWQucmVsYXRlZCcpfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8RmVhdHVyZWQgdGhpc0RhdGE9e2ZlZWRzU3RhdGUuZmVlZHMuZmVlZHNDcmVhdG9yLnZhbHVlfSAvPlxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgICB7LypoaWRlZCBmb3Igbm93Ki99XG4gICAgICB7Lyoge2ZlZWQgJiYgPENvbW1lbnRMaXN0IGZlZWRJZD17ZmVlZC5pZH0gLz59ICAgKi99XG4gICAgICB7Lyoge2ZlZWQgJiYgPE5ld0NvbW1lbnQgZmVlZElkPXtmZWVkLmlkfSAvPn0gICAqL31cbiAgICA8L3NlY3Rpb24+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVlZFxuIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlJCQwIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlJCQxIiwiUmVhY3QiLCJyZXF1aXJlJCQyIiwiX2NyZWF0ZVN2Z0ljb24iLCJyZXF1aXJlJCQzIiwiX2RlZmF1bHQiLCJkZWZhdWx0XzEiLCJzdHlsZXMiLCJ1c2VTdGF0ZSIsIlZlcmlmaWVkVXNlckljb24iLCJXaGF0c2hvdEljb24iLCJTZW5kSWNvbiIsIlZpc2liaWxpdHlJY29uIiwiRmF2b3JpdGVJY29uIiwiRmF2b3JpdGVCb3JkZXJPdXRsaW5lZEljb24iLCJUZWxlZ3JhbUljb24iLCJBZGRDb21tZW50SWNvbiIsIlJlcG9ydE91dGxpbmVkSWNvbiIsIkFsZXJ0IiwiQXJyb3dCYWNrSW9zSWNvbiIsIk1vcmVIb3Jpekljb24iXSwibWFwcGluZ3MiOiJpaENBRUlBLEdBQXlCQyxVQUV6QkMsR0FBMEJDLFVBRTlCLE9BQU8sZUFBZSxFQUFTLGFBQWMsQ0FDM0MsTUFBTyxzQkFFUyxPQUVkQyxHQUFRRixHQUF3QkcsV0FFaENDLEdBQWlCTixHQUF1Qk8sR0FFeENDLE1BQWVGLEdBQWUsU0FBdUJGLEdBQU0sY0FBYyxPQUFRLENBQ25GLEVBQUcsd05BQ0Qs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
