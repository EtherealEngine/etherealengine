import{r as i,j as oe,e as ge,R as e,u as ue}from"./vendor.475cb2ff.js";import{M as pe,d as wa,c as Na,a as rt,S as Pa}from"./object.3b92d5fa.js";import{m as De}from"./Slide.a5edb72c.js";import{T as Ia,c as lt,D as jt}from"./Toolbar.2b358f1a.js";import{u as Ft,P as ce}from"./Modal.58912532.js";import{I as $e,F as Y}from"./Input.1feafe2f.js";import{I as ot}from"./IconButton.ce216bbb.js";import{L as Te,S as Ra}from"./SceneService.306da1a6.js";import{v as ie,O as Le,t as U,_ as z,a1 as Wt,S as $a,a2 as Ut,k as Ta,a as he,a3 as ct,a4 as it,h as je,a5 as La,a6 as Ma,a7 as _a,a8 as Ba,W as Aa,Y as Da,a9 as Fe,f as ja}from"./_app.f0a72417.js";import{c as ae}from"./feathers.32f4d4e8.js";import{A as ve}from"./AlertService.5d8abaff.js";import{C as Z}from"./index.7b02be28.js";import{C as Ce}from"./Container.6d032d94.js";import{T as M}from"./Typography.19cbe78d.js";import{c as He}from"./createSvgIcon.896642b4.js";import{w as fe,c as ne}from"./capitalize.fc001633.js";import{u as Fa,B as Ve,a as st}from"./ButtonBase.fb193a96.js";import{A as Me}from"./Avatar.7391d47d.js";import{S as We}from"./Select.d94966eb.js";import{G as N}from"./Grid.07f86457.js";import{u as Wa}from"./useFormControl.a2039fae.js";import{S as Ua,C as zt,g as za,c as Oa,M as qa,B as Ha,a as Va,b as Ga,d as Ka}from"./projectFunctions.0b423c97.js";import{a as Ge,D as Ya}from"./DialogContentText.58aee466.js";import{B as G}from"./Button.a7dce846.js";import{S as Ot,C as Xa}from"./Snackbar.6d62c301.js";import{M as qt}from"./Alert.94d06d4f.js";import{d as Ke,T as Ja,a as Qa,b as Za,c as Ht,e as en}from"./TableRow.2819d16f.js";import{u as Vt,c as Ee,i as ye,a as xe}from"./createSvgIcon.57924123.js";import{D as Gt}from"./Dialog.016d78d4.js";import{D as dt,a as tn}from"./DialogTitle.30786a4b.js";import{s as X}from"./Auth.module.3666b23e.js";import{A as re}from"./AuthService.e8999ddc.js";import{T as _e}from"./TextField.6a51581a.js";import{D as mt}from"./DialogActions.4fd50af4.js";import{F as an}from"./ForgotPassword.0b8e21c7.js";import{d as ut,a as nn}from"./ownerWindow.3d7152ce.js";import{P as rn}from"./ProfileMenu.c40c3395.js";import{t as Kt,P as Yt,a as Xt,b as Jt,c as Ye,E as ln,d as on}from"./templates.ea26c9db.js";import"./_baseIteratee.d1a5d142.js";import"./createStyles.1d8ebf67.js";import"./Backdrop.724616ec.js";import"./useControlled.8dca0ac1.js";import"./List.bc139f02.js";import"./upload.bd537b46.js";import"./___vite-browser-external_commonjs-proxy.0e203c6e.js";import"./__vite-browser-external.b6126e45.js";import"./three.module.493739a3.js";import"./avatarFunctions.6d66cf01.js";import"./SystemUpdateType.772fc25d.js";import"./index.81138b53.js";import"./index.ebe70c7a.js";import"./index.2272cc2f.js";import"./InputLabel.f59c7db7.js";import"./index.ad01b8cb.js";var cn=He(i.exports.createElement("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"})),sn=function(t){var l=t.palette.type==="light"?t.palette.grey[300]:t.palette.grey[700],n=ie(t.palette.text.primary,.26);return{root:{fontFamily:t.typography.fontFamily,fontSize:t.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:t.palette.getContrastText(l),backgroundColor:l,borderRadius:32/2,whiteSpace:"nowrap",transition:t.transitions.create(["background-color","box-shadow"]),cursor:"default",outline:0,textDecoration:"none",border:"none",padding:0,verticalAlign:"middle",boxSizing:"border-box","&$disabled":{opacity:.5,pointerEvents:"none"},"& $avatar":{marginLeft:5,marginRight:-6,width:24,height:24,color:t.palette.type==="light"?t.palette.grey[700]:t.palette.grey[300],fontSize:t.typography.pxToRem(12)},"& $avatarColorPrimary":{color:t.palette.primary.contrastText,backgroundColor:t.palette.primary.dark},"& $avatarColorSecondary":{color:t.palette.secondary.contrastText,backgroundColor:t.palette.secondary.dark},"& $avatarSmall":{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:t.typography.pxToRem(10)}},sizeSmall:{height:24},colorPrimary:{backgroundColor:t.palette.primary.main,color:t.palette.primary.contrastText},colorSecondary:{backgroundColor:t.palette.secondary.main,color:t.palette.secondary.contrastText},disabled:{},clickable:{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover, &:focus":{backgroundColor:Le(l,.08)},"&:active":{boxShadow:t.shadows[1]}},clickableColorPrimary:{"&:hover, &:focus":{backgroundColor:Le(t.palette.primary.main,.08)}},clickableColorSecondary:{"&:hover, &:focus":{backgroundColor:Le(t.palette.secondary.main,.08)}},deletable:{"&:focus":{backgroundColor:Le(l,.08)}},deletableColorPrimary:{"&:focus":{backgroundColor:Le(t.palette.primary.main,.2)}},deletableColorSecondary:{"&:focus":{backgroundColor:Le(t.palette.secondary.main,.2)}},outlined:{backgroundColor:"transparent",border:"1px solid ".concat(t.palette.type==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:ie(t.palette.text.primary,t.palette.action.hoverOpacity)},"& $avatar":{marginLeft:4},"& $avatarSmall":{marginLeft:2},"& $icon":{marginLeft:4},"& $iconSmall":{marginLeft:2},"& $deleteIcon":{marginRight:5},"& $deleteIconSmall":{marginRight:3}},outlinedPrimary:{color:t.palette.primary.main,border:"1px solid ".concat(t.palette.primary.main),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:ie(t.palette.primary.main,t.palette.action.hoverOpacity)}},outlinedSecondary:{color:t.palette.secondary.main,border:"1px solid ".concat(t.palette.secondary.main),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:ie(t.palette.secondary.main,t.palette.action.hoverOpacity)}},avatar:{},avatarSmall:{},avatarColorPrimary:{},avatarColorSecondary:{},icon:{color:t.palette.type==="light"?t.palette.grey[700]:t.palette.grey[300],marginLeft:5,marginRight:-6},iconSmall:{width:18,height:18,marginLeft:4,marginRight:-4},iconColorPrimary:{color:"inherit"},iconColorSecondary:{color:"inherit"},label:{overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap"},labelSmall:{paddingLeft:8,paddingRight:8},deleteIcon:{WebkitTapHighlightColor:"transparent",color:n,height:22,width:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:ie(n,.4)}},deleteIconSmall:{height:16,width:16,marginRight:4,marginLeft:-4},deleteIconColorPrimary:{color:ie(t.palette.primary.contrastText,.7),"&:hover, &:active":{color:t.palette.primary.contrastText}},deleteIconColorSecondary:{color:ie(t.palette.secondary.contrastText,.7),"&:hover, &:active":{color:t.palette.secondary.contrastText}},deleteIconOutlinedColorPrimary:{color:ie(t.palette.primary.main,.7),"&:hover, &:active":{color:t.palette.primary.main}},deleteIconOutlinedColorSecondary:{color:ie(t.palette.secondary.main,.7),"&:hover, &:active":{color:t.palette.secondary.main}}}};function Qt(a){return a.key==="Backspace"||a.key==="Delete"}var dn=i.exports.forwardRef(function(t,l){var n=t.avatar,d=t.classes,c=t.className,r=t.clickable,m=t.color,u=m===void 0?"default":m,o=t.component,s=t.deleteIcon,p=t.disabled,y=p===void 0?!1:p,f=t.icon,w=t.label,C=t.onClick,b=t.onDelete,h=t.onKeyDown,v=t.onKeyUp,B=t.size,T=B===void 0?"medium":B,R=t.variant,j=R===void 0?"default":R,F=oe(t,["avatar","classes","className","clickable","color","component","deleteIcon","disabled","icon","label","onClick","onDelete","onKeyDown","onKeyUp","size","variant"]),x=i.exports.useRef(null),$=Fa(x,l),_=function(W){W.stopPropagation(),b&&b(W)},g=function(W){W.currentTarget===W.target&&Qt(W)&&W.preventDefault(),h&&h(W)},E=function(W){W.currentTarget===W.target&&(b&&Qt(W)?b(W):W.key==="Escape"&&x.current&&x.current.blur()),v&&v(W)},L=r!==!1&&C?!0:r,H=T==="small",be=o||(L?Ve:"div"),k=be===Ve?{component:"div"}:{},O=null;if(b){var A=U(u!=="default"&&(j==="default"?d["deleteIconColor".concat(ne(u))]:d["deleteIconOutlinedColor".concat(ne(u))]),H&&d.deleteIconSmall);O=s&&i.exports.isValidElement(s)?i.exports.cloneElement(s,{className:U(s.props.className,d.deleteIcon,A),onClick:_}):i.exports.createElement(cn,{className:U(d.deleteIcon,A),onClick:_})}var q=null;n&&i.exports.isValidElement(n)&&(q=i.exports.cloneElement(n,{className:U(d.avatar,n.props.className,H&&d.avatarSmall,u!=="default"&&d["avatarColor".concat(ne(u))])}));var le=null;return f&&i.exports.isValidElement(f)&&(le=i.exports.cloneElement(f,{className:U(d.icon,f.props.className,H&&d.iconSmall,u!=="default"&&d["iconColor".concat(ne(u))])})),i.exports.createElement(be,z({role:L||b?"button":void 0,className:U(d.root,c,u!=="default"&&[d["color".concat(ne(u))],L&&d["clickableColor".concat(ne(u))],b&&d["deletableColor".concat(ne(u))]],j!=="default"&&[d.outlined,{primary:d.outlinedPrimary,secondary:d.outlinedSecondary}[u]],y&&d.disabled,H&&d.sizeSmall,L&&d.clickable,b&&d.deletable),"aria-disabled":y?!0:void 0,tabIndex:L||b?0:void 0,onClick:C,onKeyDown:g,onKeyUp:E,ref:$},k,F),q||le,i.exports.createElement("span",{className:U(d.label,H&&d.labelSmall)},w),O)}),Xe=fe(sn,{name:"MuiChip"})(dn),mn=function(t){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:t.palette.text.disabled}}}},un=i.exports.forwardRef(function(t,l){t.checked;var n=t.classes,d=t.className,c=t.control,r=t.disabled;t.inputRef;var m=t.label,u=t.labelPlacement,o=u===void 0?"end":u;t.name,t.onChange,t.value;var s=oe(t,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"]),p=Wa(),y=r;typeof y=="undefined"&&typeof c.props.disabled!="undefined"&&(y=c.props.disabled),typeof y=="undefined"&&p&&(y=p.disabled);var f={disabled:y};return["checked","name","onChange","value","inputRef"].forEach(function(w){typeof c.props[w]=="undefined"&&typeof t[w]!="undefined"&&(f[w]=t[w])}),i.exports.createElement("label",z({className:U(n.root,d,o!=="end"&&n["labelPlacement".concat(ne(o))],y&&n.disabled),ref:l},s),i.exports.cloneElement(c,f),i.exports.createElement(M,{component:"span",className:U(n.label,y&&n.disabled)},m))}),J=fe(mn,{name:"MuiFormControlLabel"})(un),pn={root:{display:"flex",flexDirection:"column",flexWrap:"wrap"},row:{flexDirection:"row"}},fn=i.exports.forwardRef(function(t,l){var n=t.classes,d=t.className,c=t.row,r=c===void 0?!1:c,m=oe(t,["classes","className","row"]);return i.exports.createElement("div",z({className:U(n.root,d,r&&n.row),ref:l},m))}),ee=fe(pn,{name:"MuiFormGroup"})(fn),bn=function(t){return{root:{display:"inline-flex",width:34+12*2,height:14+12*2,overflow:"hidden",padding:12,boxSizing:"border-box",position:"relative",flexShrink:0,zIndex:0,verticalAlign:"middle","@media print":{colorAdjust:"exact"}},edgeStart:{marginLeft:-8},edgeEnd:{marginRight:-8},switchBase:{position:"absolute",top:0,left:0,zIndex:1,color:t.palette.type==="light"?t.palette.grey[50]:t.palette.grey[400],transition:t.transitions.create(["left","transform"],{duration:t.transitions.duration.shortest}),"&$checked":{transform:"translateX(20px)"},"&$disabled":{color:t.palette.type==="light"?t.palette.grey[400]:t.palette.grey[800]},"&$checked + $track":{opacity:.5},"&$disabled + $track":{opacity:t.palette.type==="light"?.12:.1}},colorPrimary:{"&$checked":{color:t.palette.primary.main,"&:hover":{backgroundColor:ie(t.palette.primary.main,t.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:t.palette.type==="light"?t.palette.grey[400]:t.palette.grey[800]},"&$checked + $track":{backgroundColor:t.palette.primary.main},"&$disabled + $track":{backgroundColor:t.palette.type==="light"?t.palette.common.black:t.palette.common.white}},colorSecondary:{"&$checked":{color:t.palette.secondary.main,"&:hover":{backgroundColor:ie(t.palette.secondary.main,t.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:t.palette.type==="light"?t.palette.grey[400]:t.palette.grey[800]},"&$checked + $track":{backgroundColor:t.palette.secondary.main},"&$disabled + $track":{backgroundColor:t.palette.type==="light"?t.palette.common.black:t.palette.common.white}},sizeSmall:{width:40,height:24,padding:7,"& $thumb":{width:16,height:16},"& $switchBase":{padding:4,"&$checked":{transform:"translateX(16px)"}}},checked:{},disabled:{},input:{left:"-100%",width:"300%"},thumb:{boxShadow:t.shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"},track:{height:"100%",width:"100%",borderRadius:14/2,zIndex:-1,transition:t.transitions.create(["opacity","background-color"],{duration:t.transitions.duration.shortest}),backgroundColor:t.palette.type==="light"?t.palette.common.black:t.palette.common.white,opacity:t.palette.type==="light"?.38:.3}}},gn=i.exports.forwardRef(function(t,l){var n=t.classes,d=t.className,c=t.color,r=c===void 0?"secondary":c,m=t.edge,u=m===void 0?!1:m,o=t.size,s=o===void 0?"medium":o,p=oe(t,["classes","className","color","edge","size"]),y=i.exports.createElement("span",{className:n.thumb});return i.exports.createElement("span",{className:U(n.root,d,{start:n.edgeStart,end:n.edgeEnd}[u],s==="small"&&n["size".concat(ne(s))])},i.exports.createElement(Ua,z({type:"checkbox",icon:y,checkedIcon:y,classes:{root:U(n.switchBase,n["color".concat(ne(r))]),input:n.input,checked:n.checked,disabled:n.disabled},ref:l},p)),i.exports.createElement("span",{className:n.track}))}),te=fe(bn,{name:"MuiSwitch"})(gn),hn=function(t){var l;return{root:z({},t.typography.button,(l={maxWidth:264,minWidth:72,position:"relative",boxSizing:"border-box",minHeight:48,flexShrink:0,padding:"6px 12px"},ge(l,t.breakpoints.up("sm"),{padding:"6px 24px"}),ge(l,"overflow","hidden"),ge(l,"whiteSpace","normal"),ge(l,"textAlign","center"),ge(l,t.breakpoints.up("sm"),{minWidth:160}),l)),labelIcon:{minHeight:72,paddingTop:9,"& $wrapper > *:first-child":{marginBottom:6}},textColorInherit:{color:"inherit",opacity:.7,"&$selected":{opacity:1},"&$disabled":{opacity:.5}},textColorPrimary:{color:t.palette.text.secondary,"&$selected":{color:t.palette.primary.main},"&$disabled":{color:t.palette.text.disabled}},textColorSecondary:{color:t.palette.text.secondary,"&$selected":{color:t.palette.secondary.main},"&$disabled":{color:t.palette.text.disabled}},selected:{},disabled:{},fullWidth:{flexShrink:1,flexGrow:1,flexBasis:0,maxWidth:"none"},wrapped:{fontSize:t.typography.pxToRem(12),lineHeight:1.5},wrapper:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"100%",flexDirection:"column"}}},vn=i.exports.forwardRef(function(t,l){var n=t.classes,d=t.className,c=t.disabled,r=c===void 0?!1:c,m=t.disableFocusRipple,u=m===void 0?!1:m,o=t.fullWidth,s=t.icon,p=t.indicator,y=t.label,f=t.onChange,w=t.onClick,C=t.onFocus,b=t.selected,h=t.selectionFollowsFocus,v=t.textColor,B=v===void 0?"inherit":v,T=t.value,R=t.wrapped,j=R===void 0?!1:R,F=oe(t,["classes","className","disabled","disableFocusRipple","fullWidth","icon","indicator","label","onChange","onClick","onFocus","selected","selectionFollowsFocus","textColor","value","wrapped"]),x=function(g){f&&f(g,T),w&&w(g)},$=function(g){h&&!b&&f&&f(g,T),C&&C(g)};return i.exports.createElement(Ve,z({focusRipple:!u,className:U(n.root,n["textColor".concat(ne(B))],d,r&&n.disabled,b&&n.selected,y&&s&&n.labelIcon,o&&n.fullWidth,j&&n.wrapped),ref:l,role:"tab","aria-selected":b,disabled:r,onClick:x,onFocus:$,tabIndex:b?0:-1},F),i.exports.createElement("span",{className:n.wrapper},s,y),p)}),Ue=fe(hn,{name:"MuiTab"})(vn),pt=He(i.exports.createElement("path",{d:"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"})),ft=He(i.exports.createElement("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"})),En=i.exports.createElement(ft,null),yn=i.exports.createElement(pt,null),xn=i.exports.createElement(pt,null),Sn=i.exports.createElement(ft,null),Cn=i.exports.forwardRef(function(t,l){var n=t.backIconButtonProps,d=t.count,c=t.nextIconButtonProps,r=t.onChangePage,m=r===void 0?function(){}:r,u=t.onPageChange,o=u===void 0?function(){}:u,s=t.page,p=t.rowsPerPage,y=oe(t,["backIconButtonProps","count","nextIconButtonProps","onChangePage","onPageChange","page","rowsPerPage"]),f=Ft(),w=function(h){m(h,s-1),o(h,s-1)},C=function(h){m(h,s+1),o(h,s+1)};return i.exports.createElement("div",z({ref:l},y),i.exports.createElement(ot,z({onClick:w,disabled:s===0,color:"inherit"},n),f.direction==="rtl"?En:yn),i.exports.createElement(ot,z({onClick:C,disabled:d!==-1?s>=Math.ceil(d/p)-1:!1,color:"inherit"},c),f.direction==="rtl"?xn:Sn))}),kn=Cn,wn=function(t){return{root:{color:t.palette.text.primary,fontSize:t.typography.pxToRem(14),overflow:"auto","&:last-child":{padding:0}},toolbar:{minHeight:52,paddingRight:2},spacer:{flex:"1 1 100%"},caption:{flexShrink:0},selectRoot:{marginRight:32,marginLeft:8},select:{paddingLeft:8,paddingRight:24,textAlign:"right",textAlignLast:"right"},selectIcon:{},input:{color:"inherit",fontSize:"inherit",flexShrink:0},menuItem:{},actions:{flexShrink:0,marginLeft:20}}},Nn=function(t){var l=t.from,n=t.to,d=t.count;return"".concat(l,"-").concat(n," of ").concat(d!==-1?d:"more than ".concat(n))},Pn=[10,25,50,100],In=i.exports.forwardRef(function(t,l){var n=t.ActionsComponent,d=n===void 0?kn:n,c=t.backIconButtonProps,r=t.backIconButtonText,m=r===void 0?"Previous page":r,u=t.classes,o=t.className,s=t.colSpan,p=t.component,y=p===void 0?Ke:p,f=t.count,w=t.labelDisplayedRows,C=w===void 0?Nn:w,b=t.labelRowsPerPage,h=b===void 0?"Rows per page:":b,v=t.nextIconButtonProps,B=t.nextIconButtonText,T=B===void 0?"Next page":B,R=t.onChangePage,j=t.onPageChange,F=t.onChangeRowsPerPage,x=t.onRowsPerPageChange,$=t.page,_=t.rowsPerPage,g=t.rowsPerPageOptions,E=g===void 0?Pn:g,L=t.SelectProps,H=L===void 0?{}:L,be=oe(t,["ActionsComponent","backIconButtonProps","backIconButtonText","classes","className","colSpan","component","count","labelDisplayedRows","labelRowsPerPage","nextIconButtonProps","nextIconButtonText","onChangePage","onPageChange","onChangeRowsPerPage","onRowsPerPageChange","page","rowsPerPage","rowsPerPageOptions","SelectProps"]),k=F||x,O;(y===Ke||y==="td")&&(O=s||1e3);var A=Vt(),q=Vt(),le=H.native?"option":pe;return i.exports.createElement(y,z({className:U(u.root,o),colSpan:O,ref:l},be),i.exports.createElement(Ia,{className:u.toolbar},i.exports.createElement("div",{className:u.spacer}),E.length>1&&i.exports.createElement(M,{color:"inherit",variant:"body2",className:u.caption,id:q},h),E.length>1&&i.exports.createElement(We,z({classes:{select:u.select,icon:u.selectIcon},input:i.exports.createElement($e,{className:U(u.input,u.selectRoot)}),value:_,onChange:k,id:A,labelId:q},H),E.map(function(D){return i.exports.createElement(le,{className:u.menuItem,key:D.value?D.value:D,value:D.value?D.value:D},D.label?D.label:D)})),i.exports.createElement(M,{color:"inherit",variant:"body2",className:u.caption},C({from:f===0?0:$*_+1,to:f!==-1?Math.min(f,($+1)*_):($+1)*_,count:f===-1?-1:f,page:$})),i.exports.createElement(d,{className:u.actions,backIconButtonProps:z({title:m,"aria-label":m},c),count:f,nextIconButtonProps:z({title:T,"aria-label":T},v),onChangePage:R,onPageChange:j,page:$,rowsPerPage:_})))}),Rn=fe(wn,{name:"MuiTablePagination"})(In),Be;function Zt(){if(Be)return Be;var a=document.createElement("div"),t=document.createElement("div");return t.style.width="10px",t.style.height="1px",a.appendChild(t),a.dir="rtl",a.style.fontSize="14px",a.style.width="4px",a.style.height="1px",a.style.position="absolute",a.style.top="-1000px",a.style.overflow="scroll",document.body.appendChild(a),Be="reverse",a.scrollLeft>0?Be="default":(a.scrollLeft=1,a.scrollLeft===0&&(Be="negative")),document.body.removeChild(a),Be}function ea(a,t){var l=a.scrollLeft;if(t!=="rtl")return l;var n=Zt();switch(n){case"negative":return a.scrollWidth-a.clientWidth+l;case"reverse":return a.scrollWidth-a.clientWidth-l;default:return l}}function $n(a){return(1+Math.sin(Math.PI*a-Math.PI/2))/2}function Tn(a,t,l){var n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},d=arguments.length>4&&arguments[4]!==void 0?arguments[4]:function(){},c=n.ease,r=c===void 0?$n:c,m=n.duration,u=m===void 0?300:m,o=null,s=t[a],p=!1,y=function(){p=!0},f=function w(C){if(p){d(new Error("Animation cancelled"));return}o===null&&(o=C);var b=Math.min(1,(C-o)/u);if(t[a]=r(b)*(l-s)+s,b>=1){requestAnimationFrame(function(){d(null)});return}requestAnimationFrame(w)};return s===l?(d(new Error("Element already at target position")),y):(requestAnimationFrame(f),y)}var Ln={width:99,height:99,position:"absolute",top:-9999,overflow:"scroll"};function Mn(a){var t=a.onChange,l=oe(a,["onChange"]),n=i.exports.useRef(),d=i.exports.useRef(null),c=function(){n.current=d.current.offsetHeight-d.current.clientHeight};return i.exports.useEffect(function(){var r=ut(function(){var m=n.current;c(),m!==n.current&&t(n.current)});return window.addEventListener("resize",r),function(){r.clear(),window.removeEventListener("resize",r)}},[t]),i.exports.useEffect(function(){c(),t(n.current)},[t]),i.exports.createElement("div",z({style:Ln,ref:d},l))}var _n=function(t){return{root:{position:"absolute",height:2,bottom:0,width:"100%",transition:t.transitions.create()},colorPrimary:{backgroundColor:t.palette.primary.main},colorSecondary:{backgroundColor:t.palette.secondary.main},vertical:{height:"100%",width:2,right:0}}},Bn=i.exports.forwardRef(function(t,l){var n=t.classes,d=t.className,c=t.color,r=t.orientation,m=oe(t,["classes","className","color","orientation"]);return i.exports.createElement("span",z({className:U(n.root,n["color".concat(ne(c))],d,r==="vertical"&&n.vertical),ref:l},m))}),An=fe(_n,{name:"PrivateTabIndicator"})(Bn),Dn={root:{width:40,flexShrink:0,opacity:.8,"&$disabled":{opacity:0}},vertical:{width:"100%",height:40,"& svg":{transform:"rotate(90deg)"}},disabled:{}},jn=i.exports.createElement(pt,{fontSize:"small"}),Fn=i.exports.createElement(ft,{fontSize:"small"}),Wn=i.exports.forwardRef(function(t,l){var n=t.classes,d=t.className,c=t.direction,r=t.orientation,m=t.disabled,u=oe(t,["classes","className","direction","orientation","disabled"]);return i.exports.createElement(Ve,z({component:"div",className:U(n.root,d,m&&n.disabled,r==="vertical"&&n.vertical),ref:l,role:null,tabIndex:null},u),c==="left"?jn:Fn)}),Un=fe(Dn,{name:"MuiTabScrollButton"})(Wn),zn=function(t){return{root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch",display:"flex"},vertical:{flexDirection:"column"},flexContainer:{display:"flex"},flexContainerVertical:{flexDirection:"column"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollable:{overflowX:"scroll",scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsDesktop:ge({},t.breakpoints.down("xs"),{display:"none"}),indicator:{}}},On=i.exports.forwardRef(function(t,l){var n=t["aria-label"],d=t["aria-labelledby"],c=t.action,r=t.centered,m=r===void 0?!1:r,u=t.children,o=t.classes,s=t.className,p=t.component,y=p===void 0?"div":p,f=t.indicatorColor,w=f===void 0?"secondary":f,C=t.onChange,b=t.orientation,h=b===void 0?"horizontal":b,v=t.ScrollButtonComponent,B=v===void 0?Un:v,T=t.scrollButtons,R=T===void 0?"auto":T,j=t.selectionFollowsFocus,F=t.TabIndicatorProps,x=F===void 0?{}:F,$=t.TabScrollButtonProps,_=t.textColor,g=_===void 0?"inherit":_,E=t.value,L=t.variant,H=L===void 0?"standard":L,be=oe(t,["aria-label","aria-labelledby","action","centered","children","classes","className","component","indicatorColor","onChange","orientation","ScrollButtonComponent","scrollButtons","selectionFollowsFocus","TabIndicatorProps","TabScrollButtonProps","textColor","value","variant"]),k=Ft(),O=H==="scrollable",A=k.direction==="rtl",q=h==="vertical",le=q?"scrollTop":"scrollLeft",D=q?"top":"left",W=q?"bottom":"right",Oe=q?"clientHeight":"clientWidth",Se=q?"height":"width",qe=i.exports.useState(!1),It=qe[0],ba=qe[1],Rt=i.exports.useState({}),ke=Rt[0],$t=Rt[1],Tt=i.exports.useState({start:!1,end:!1}),we=Tt[0],ga=Tt[1],Lt=i.exports.useState({overflow:"hidden",marginBottom:null}),ha=Lt[0],va=Lt[1],Mt=new Map,me=i.exports.useRef(null),Ne=i.exports.useRef(null),_t=function(){var S=me.current,P;if(S){var V=S.getBoundingClientRect();P={clientWidth:S.clientWidth,scrollLeft:S.scrollLeft,scrollTop:S.scrollTop,scrollLeftNormalized:ea(S,k.direction),scrollWidth:S.scrollWidth,top:V.top,bottom:V.bottom,left:V.left,right:V.right}}var K;if(S&&E!==!1){var de=Ne.current.children;if(de.length>0){var Q=de[Mt.get(E)];K=Q?Q.getBoundingClientRect():null}}return{tabsMeta:P,tabMeta:K}},Ae=st(function(){var I,S=_t(),P=S.tabsMeta,V=S.tabMeta,K=0;if(V&&P)if(q)K=V.top-P.top+P.scrollTop;else{var de=A?P.scrollLeftNormalized+P.clientWidth-P.scrollWidth:P.scrollLeft;K=V.left-P.left+de}var Q=(I={},ge(I,D,K),ge(I,Se,V?V[Se]:0),I);if(isNaN(ke[D])||isNaN(ke[Se]))$t(Q);else{var Ie=Math.abs(ke[D]-Q[D]),Re=Math.abs(ke[Se]-Q[Se]);(Ie>=1||Re>=1)&&$t(Q)}}),et=function(S){Tn(le,me.current,S)},Bt=function(S){var P=me.current[le];q?P+=S:(P+=S*(A?-1:1),P*=A&&Zt()==="reverse"?-1:1),et(P)},Ea=function(){Bt(-me.current[Oe])},ya=function(){Bt(me.current[Oe])},xa=i.exports.useCallback(function(I){va({overflow:null,marginBottom:-I})},[]),Sa=function(){var S={};S.scrollbarSizeListener=O?i.exports.createElement(Mn,{className:o.scrollable,onChange:xa}):null;var P=we.start||we.end,V=O&&(R==="auto"&&P||R==="desktop"||R==="on");return S.scrollButtonStart=V?i.exports.createElement(B,z({orientation:h,direction:A?"right":"left",onClick:Ea,disabled:!we.start,className:U(o.scrollButtons,R!=="on"&&o.scrollButtonsDesktop)},$)):null,S.scrollButtonEnd=V?i.exports.createElement(B,z({orientation:h,direction:A?"left":"right",onClick:ya,disabled:!we.end,className:U(o.scrollButtons,R!=="on"&&o.scrollButtonsDesktop)},$)):null,S},At=st(function(){var I=_t(),S=I.tabsMeta,P=I.tabMeta;if(!(!P||!S)){if(P[D]<S[D]){var V=S[le]+(P[D]-S[D]);et(V)}else if(P[W]>S[W]){var K=S[le]+(P[W]-S[W]);et(K)}}}),Pe=st(function(){if(O&&R!=="off"){var I=me.current,S=I.scrollTop,P=I.scrollHeight,V=I.clientHeight,K=I.scrollWidth,de=I.clientWidth,Q,Ie;if(q)Q=S>1,Ie=S<P-V-1;else{var Re=ea(me.current,k.direction);Q=A?Re<K-de-1:Re>1,Ie=A?Re>1:Re<K-de-1}(Q!==we.start||Ie!==we.end)&&ga({start:Q,end:Ie})}});i.exports.useEffect(function(){var I=ut(function(){Ae(),Pe()}),S=nn(me.current);return S.addEventListener("resize",I),function(){I.clear(),S.removeEventListener("resize",I)}},[Ae,Pe]);var tt=i.exports.useCallback(ut(function(){Pe()}));i.exports.useEffect(function(){return function(){tt.clear()}},[tt]),i.exports.useEffect(function(){ba(!0)},[]),i.exports.useEffect(function(){Ae(),Pe()}),i.exports.useEffect(function(){At()},[At,ke]),i.exports.useImperativeHandle(c,function(){return{updateIndicator:Ae,updateScrollButtons:Pe}},[Ae,Pe]);var Dt=i.exports.createElement(An,z({className:o.indicator,orientation:h,color:w},x,{style:z({},ke,x.style)})),at=0,Ca=i.exports.Children.map(u,function(I){if(!i.exports.isValidElement(I))return null;var S=I.props.value===void 0?at:I.props.value;Mt.set(S,at);var P=S===E;return at+=1,i.exports.cloneElement(I,{fullWidth:H==="fullWidth",indicator:P&&!It&&Dt,selected:P,selectionFollowsFocus:j,onChange:C,textColor:g,value:S})}),ka=function(S){var P=S.target,V=P.getAttribute("role");if(V==="tab"){var K=null,de=h!=="vertical"?"ArrowLeft":"ArrowUp",Q=h!=="vertical"?"ArrowRight":"ArrowDown";switch(h!=="vertical"&&k.direction==="rtl"&&(de="ArrowRight",Q="ArrowLeft"),S.key){case de:K=P.previousElementSibling||Ne.current.lastChild;break;case Q:K=P.nextElementSibling||Ne.current.firstChild;break;case"Home":K=Ne.current.firstChild;break;case"End":K=Ne.current.lastChild;break}K!==null&&(K.focus(),S.preventDefault())}},nt=Sa();return i.exports.createElement(y,z({className:U(o.root,s,q&&o.vertical),ref:l},be),nt.scrollButtonStart,nt.scrollbarSizeListener,i.exports.createElement("div",{className:U(o.scroller,O?o.scrollable:o.fixed),style:ha,ref:me,onScroll:tt},i.exports.createElement("div",{"aria-label":n,"aria-labelledby":d,className:U(o.flexContainer,q&&o.flexContainerVertical,m&&!O&&o.centered),onKeyDown:ka,ref:Ne,role:"tablist"},Ca),It&&Dt),nt.scrollButtonEnd)}),ta=fe(zn,{name:"MuiTabs"})(On),qn=He(i.exports.createElement("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}));const ze=De(a=>lt({createBtn:{height:"50px",margin:"auto 5px",width:"100%",background:"rgb(58, 65, 73)",color:"#f1f1f1 !important",[a.breakpoints.down("sm")]:{fontSize:"0.7rem"}},rootTable:{flexGrow:1,width:"100%",backgroundColor:"#43484F",color:"#f1f1f1"},marginBottom:{marginBottom:"10px"},marginBottm:{marginBottom:"15px",[a.breakpoints.down("sm")]:{marginBottom:"0"}},marginTp:{marginTop:"20%"},marginTpM:{marginTop:"10%",[a.breakpoints.down("sm")]:{marginTop:"2.5rem"}},createInput:{padding:"2px 4px",display:"flex",alignItems:"center",marginTop:"10px",marginBottom:"15px",background:"#343b41",border:"1px solid #23282c",color:"#f1f1f1 !important"},searchRoot:{padding:"2px 20px",display:"flex",alignItems:"center",width:"100%",background:"#343b41"},iconButton:{padding:10,color:"#f1f1f1"},texAlign:{textAlign:"center"},input:{marginLeft:a.spacing(1),flex:1,color:"#f1f1f1"},select:{color:"#f1f1f1 !important"},textLink:{marginLeft:"5px",textDecoration:"none",color:"#ff9966"},container:{maxHeight:"80vh"},redBorder:{border:"1px solid red",padding:"2px 4px",display:"flex",alignItems:"center",marginTop:"10px",marginBottom:"15px",background:"#343b41",color:"#f1f1f1 !important"},paperDialog:{background:"rgb(58, 65, 73) !important",color:"#f1f1f1"},spanDange:{color:"#FF8C00"},spanNone:{color:"#808080"},rootPaper:{height:"21vh",background:"#111",color:"#f1f1f1",backgroundColor:"#343b41",[a.breakpoints.down("sm")]:{height:"10vh"}},locationTitle:{margin:"50px auto",width:"300px",textAlign:"center",[a.breakpoints.down("sm")]:{margin:"10px auto"}},locationSubTitle:{display:"flex",justifyContent:"space-between",alignItems:"center"},mb:{marginBottom:"10px"},locationOtherInfo:{fontSize:"1.2rem"},typo:{lineHeight:"1rem"},mb10:{marginBottom:"5%"},mb20px:{marginBottom:"20px"},pdl:{paddingLeft:"1rem",[a.breakpoints.down("sm")]:{paddingLeft:"0"}},smpd:{padding:"2px"},typoFont:{[a.breakpoints.down("sm")]:{fontSize:"1.5rem",paddingLeft:"1rem"}},headingFont:{[a.breakpoints.down("sm")]:{fontSize:"1.6rem"},[a.breakpoints.between(100,395)]:{fontSize:"1.4rem"}},spacing:{paddingLeft:"2.5rem",marginTop:"5%",[a.breakpoints.down("sm")]:{paddingLeft:"1rem"}},middlePaper:{color:"#f1f1f1",padding:"20px 0 8px 20px",background:"#15171B",height:"10rem"},saveBtn:{marginLeft:"auto",background:"#43484F !important",color:"#fff !important",width:"150px",marginRight:"25px",boxShadow:"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%) !important",[a.breakpoints.down("sm")]:{width:"120px"},[a.breakpoints.between(100,335)]:{width:"100px"}},btnContainer:{padding:"2rem"},pdlarge:{paddingLeft:"3rem",[a.breakpoints.down("sm")]:{paddingLeft:"2rem"}},mt10:{marginTop:"10%"}})),bt=De(a=>lt({paper:{width:"40%",backgroundColor:"#43484F",color:"#f1f1f1",overflow:"hidden",[a.breakpoints.down("sm")]:{overflowY:"scroll"}},actionStyle:{textDecoration:"none",color:"#000",marginRight:"10px"},spanDange:{color:"#FF8C00"},spanNone:{color:"#808080"},spanWhite:{color:"#f1f1f1"},selectPaper:{background:"#343b41",color:"#f1f1f1"},tableCellHeader:{background:"#343b41 !important",color:"#f1f1f1 !important",borderBottom:"2px solid #23282c !important"},tableCellBody:{borderBottom:"1px solid #23282c !important",color:"#f1f1f1 !important"},tableFooter:{background:"#343b41 !important",color:"#f1f1f1 !important"}})),Hn=a=>{const t=ze();return e.useState(""),e.createElement(ce,{component:"form",className:t.searchRoot},e.createElement($e,{className:t.input,placeholder:"Search for location",inputProps:{"aria-label":"search for location "}}),e.createElement(ot,{type:"submit",className:t.iconButton,"aria-label":"search"},e.createElement(wa,null)))},se={loadedUsers:a=>({type:"ADMIN_LOADED_USERS",userResult:a}),userCreated:a=>({type:"USER_ADMIN_CREATED",user:a}),userPatched:a=>({type:"USER_ADMIN_PATCHED",user:a}),userRoleRetrieved:a=>({type:"USER_ROLE_RETRIEVED",types:a}),userRoleCreated:a=>({type:"USER_ROLE_CREATED",types:a}),userAdminRemoved:a=>({type:"USER_ADMIN_REMOVED",data:a}),userRoleUpdated:a=>({type:"USER_ROLE_UPDATED",data:a}),searchedUser:a=>({type:"USER_SEARCH_ADMIN",userResult:a}),fetchedSingleUser:a=>({type:"SINGLE_USER_ADMIN_LOADED",data:a}),fetchedStaticResource:a=>({type:"STATIC_RESOURCE_RETRIEVED",staticResource:a}),refetchSingleUser:()=>({type:"SINGLE_USER_ADMIN_REFETCH"})},Vn={fetchUsersAsAdmin:a=>async t=>{const l=Wt(),n=l.users.skip.value,d=l.users.limit.value;try{if(l.userRole.userRole.findIndex(c=>c.role.value==="admin")!==-1){const c=await ae.service("user").find({query:{$sort:{name:1},$skip:a==="increment"?n+d:a==="decrement"?n-d:n,$limit:d,action:"admin"}});t(se.loadedUsers(c))}}catch(c){console.error(c),ve.dispatchAlertError(t,c.message)}},createUser:a=>async t=>{try{const l=await ae.service("user").create(a);t(se.userCreated(l))}catch(l){console.error(l),ve.dispatchAlertError(t,l.message)}},patchUser:(a,t)=>async l=>{try{const n=await ae.service("user").patch(a,t);l(se.userPatched(n))}catch(n){ve.dispatchAlertError(l,n.message)}},removeUserAdmin:a=>async t=>{const l=await ae.service("user").remove(a);t(se.userAdminRemoved(l))},fetchUserRole:()=>async a=>{try{const t=await ae.service("user-role").find();a(se.userRoleRetrieved(t))}catch(t){console.error(t),ve.dispatchAlertError(a,t.message)}},createUserRoleAction:a=>async t=>{const l=await ae.service("user-role").create(a);t(se.userRoleCreated(l))},updateUserRole:(a,t)=>async l=>{try{const n=await ae.service("user").patch(a,{userRole:t});l(se.userRoleUpdated(n))}catch(n){console.error(n),ve.dispatchAlertError(l,n.message)}},searchUserAction:a=>async t=>{try{const l=Wt(),n=l.users.skip.value,d=l.users.limit.value,c=await ae.service("user").find({query:{$sort:{name:1},$skip:n||0,$limit:d,action:"search",data:a}});t(se.searchedUser(c))}catch(l){console.error(l),ve.dispatchAlertError(t,l.message)}},fetchSingleUserAdmin:a=>async t=>{try{const l=await ae.service("user").get(a);t(se.fetchedSingleUser(l))}catch(l){console.error(l),ve.dispatchAlertError(t,l.message)}},fetchStaticResource:()=>async a=>{try{const t=await ae.service("static-resource").find({query:{staticResourceType:"avatar"}});a(se.fetchedStaticResource(t))}catch(t){console.error(t)}},refetchSingleUserAdmin:()=>async a=>a(se.refetchSingleUser())},gt={instancesRetrievedAction:a=>({type:"INSTANCES_RETRIEVED",instanceResult:a}),instanceRemovedAction:a=>({type:"INSTANCE_REMOVED_ROW",instance:a})},Gn={fetchAdminInstances:a=>async t=>{const l=Ut().instances.skip.value,n=Ut().instances.limit.value,d=Ta().user;try{if(d.userRole.value==="admin"){const c=await ae.service("instance").find({query:{$sort:{createdAt:-1},$skip:a==="increment"?l+n:a==="decrement"?l-n:l,$limit:n,action:"admin"}});t(gt.instancesRetrievedAction(c))}}catch(c){console.error(c),ve.dispatchAlertError(t,c.message)}},removeInstance:a=>async t=>{const l=await ae.service("instance").patch(a,{ended:!0});t(gt.instanceRemovedAction(l))}};Z.publicRuntimeConfig.offlineMode||ae.service("instance").on("removed",a=>{$a.store.dispatch(gt.instanceRemovedAction(a.instance))});const aa=[{id:"name",label:"Name",minWidth:65},{id:"sceneId",label:"SceneId",minWidth:65},{id:"maxUsersPerInstance",label:"Max Users Per Instance",minWidth:80,align:"center"},{id:"scene",label:"Scene",minWidth:65,align:"center"},{id:"type",label:"Type",minWidth:65,align:"right"},{id:"tags",label:"Tags",minWidth:65,align:"center"},{id:"instanceMediaChatEnabled",label:"Instance Media Chat Enabled",minWidth:80,align:"center"},{id:"videoEnabled",label:"Video Enabled",minWidth:65,align:"center"},{id:"action",label:"Action",minWidth:65,align:"right"}];Na({name:rt().required("Name is required"),avatar:rt().required("Avatar is required!"),inviteCode:rt().required("Invite code is required!")});const na=(a,t)=>{let l=!0;return Object.values(t).forEach(n=>{n.length>0&&(l=!1)}),Object.values(a).forEach(n=>{n===null&&(l=!1)}),l},Kn=a=>e.createElement(qt,{elevation:6,variant:"filled",...a}),Yn=a=>{const{openView:t,closeViewModel:l,locationAdmin:n}=a,d=he(),c=bt(),r=ze(),[m,u]=e.useState(!1),[o,s]=e.useState({name:"",maxUsers:10,scene:"",type:"private",videoEnabled:!1,audioEnabled:!1,screenSharingEnabled:!1,faceStreamingEnabled:!1,globalMediaEnabled:!1,isLobby:!1,isFeatured:!1,formErrors:{name:"",maxUsers:"",scene:"",type:""}}),[p,y]=e.useState(""),[f,w]=e.useState(""),[C,b]=e.useState(!1),{t:h}=ue(),v=ct().scenes.scenes,B=it().locationTypes.locationTypes,R=je().user?.scopes?.value||[];let j=!1;for(const g of R)if(g.type.split(":")[0]==="location"&&g.type.split(":")[1]==="write"){j=!0;break}e.useEffect(()=>{n&&(y(n),s({...o,name:n.name,maxUsers:n.maxUsersPerInstance,scene:n.sceneId,type:n.location_setting.locationType,videoEnabled:n.location_setting.videoEnabled,audioEnabled:n.location_setting.audioEnabled,screenSharingEnabled:n.location_setting.screenSharingEnabled,faceStreamingEnabled:n.location_setting.faceStreamingEnabled,globalMediaEnabled:n.location_setting.instanceMediaChatEnabled,isLobby:n.isLobby,isFeatured:n.isFeatured}))},[n]);const F=g=>{const{name:E,value:L}=g.target;let H=o.formErrors;switch(E){case"name":H.name=L.length<2?"Name is required!":"";break;case"maxUsers":H.maxUsers=L.length<2?"Max users is required!":"";break;case"scene":H.scene=L.length<2?"Scene is required!":"";break;case"private":H.type=L.length<2?"Private role is required!":"";break}s({...o,[E]:L,formErrors:H})},x=()=>{const g={name:o.name,maxUsersPerInstance:o.maxUsers,sceneId:o.scene,location_setting:{locationType:o.type,instanceMediaChatEnabled:o.globalMediaEnabled,audioEnabled:o.audioEnabled,screenSharingEnabled:o.screenSharingEnabled,faceStreamingEnabled:o.faceStreamingEnabled,videoEnabled:o.videoEnabled},isLobby:o.isLobby,isFeatured:o.isFeatured};let E=o.formErrors;o.name||(E.name="Name can't be empty"),o.maxUsers||(E.maxUsers="Maximum users can't be empty"),o.scene||(E.scene="Scene can't be empty"),o.type||(E.scene="Type can't be empty"),s({...o,formErrors:E}),na(o,o.formErrors)?(d(Te.patchLocation(p.id,g)),s({...o,name:"",maxUsers:10,type:"",scene:""}),u(!1),l(!1)):(w("Please fill all required field"),b(!0))},$=(g,E)=>{E!=="clickaway"&&b(!1)},_=()=>{w(""),b(!1),l(!1),s({...o,formErrors:{...o.formErrors,name:"",maxUsers:"",scene:"",type:""}})};return e.createElement(e.Fragment,null,e.createElement(jt,{anchor:"right",open:t,onClose:()=>_(),classes:{paper:c.paper}},e.createElement(ce,{elevation:0,className:r.rootPaper},e.createElement(Ce,{maxWidth:"sm"},e.createElement("div",{className:r.locationTitle},e.createElement(M,{variant:"h4",component:"span"},p?.name)),e.createElement("div",{className:r.locationSubTitle},p.isFeatured&&e.createElement(Xe,{style:{marginLeft:"5px"},avatar:e.createElement(Me,null,"F"),label:h("admin:components.index.featured")}),p.isLobby&&e.createElement(Xe,{avatar:e.createElement(Me,null,"L"),label:h("admin:components.index.lobby")})))),m?e.createElement(Ce,{maxWidth:"sm"},e.createElement("div",{className:r.mt10},e.createElement(M,{variant:"h4",component:"h4",className:`${r.mb10} ${r.headingFont}`}," ","Update location Information"," "),e.createElement("label",null,"Name"),e.createElement(ce,{component:"div",className:o.formErrors.name.length>0?r.redBorder:r.createInput},e.createElement($e,{className:r.input,name:"name",placeholder:"Enter name",style:{color:"#fff"},autoComplete:"off",value:o.name,onChange:F})),e.createElement("label",null,"Max Users"),e.createElement(ce,{component:"div",className:o.formErrors.maxUsers.length>0?r.redBorder:r.createInput},e.createElement($e,{className:r.input,name:"maxUsers",placeholder:"Enter max users",style:{color:"#fff"},autoComplete:"off",type:"number",value:o.maxUsers,onChange:F})),e.createElement("label",null,"Scene"),e.createElement(ce,{component:"div",className:o.formErrors.scene.length>0?r.redBorder:r.createInput},e.createElement(Y,{fullWidth:!0},e.createElement(We,{labelId:"demo-controlled-open-select-label",id:"demo-controlled-open-select",value:o.scene,fullWidth:!0,displayEmpty:!0,onChange:F,className:r.select,name:"scene",MenuProps:{classes:{paper:c.selectPaper}}},e.createElement(pe,{value:"",disabled:!0},e.createElement("em",null,"Select scene")),v.value.map(g=>e.createElement(pe,{value:g.sid,key:g.sid},`${g.name} (${g.sid})`))))),e.createElement("label",null,"Private"),e.createElement(ce,{component:"div",className:r.createInput},e.createElement(Y,{fullWidth:!0},e.createElement(We,{labelId:"demo-controlled-open-select-label",id:"demo-controlled-open-select",value:o.type,fullWidth:!0,displayEmpty:!0,onChange:F,className:r.select,name:"type",MenuProps:{classes:{paper:c.selectPaper}}},e.createElement(pe,{value:"",disabled:!0},e.createElement("em",null,"Select type")),B.value.map(g=>e.createElement(pe,{value:g.type,key:g.type},g.type))))),e.createElement(N,{container:!0,spacing:5,className:r.marginBottm},e.createElement(N,{item:!0,xs:6},e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:o.videoEnabled,onChange:g=>s({...o,videoEnabled:g.target.checked}),name:"videoEnabled"}),label:h("admin:components.locationModel.lbl-ve")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:o.audioEnabled,onChange:g=>s({...o,audioEnabled:g.target.checked}),name:"audioEnabled"}),label:h("admin:components.locationModel.lbl-ae")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:o.globalMediaEnabled,onChange:g=>s({...o,globalMediaEnabled:g.target.checked}),name:"globalMediaEnabled"}),label:h("admin:components.locationModel.lbl-gme")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:o.screenSharingEnabled,onChange:g=>s({...o,screenSharingEnabled:g.target.checked}),name:"screenSharingEnabled"}),label:h("admin:components.locationModel.lbl-se")})))),e.createElement(N,{item:!0,xs:6},e.createElement("div",{style:{marginLeft:"auto"}},e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:o.faceStreamingEnabled,onChange:g=>s({...o,faceStreamingEnabled:g.target.checked}),name:"faceStreamingEnabled"}),label:h("admin:components.locationModel.lbl-fe")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:o.isLobby,onChange:g=>s({...o,isLobby:g.target.checked}),name:"isLobby"}),label:h("admin:components.locationModel.lbl-lobby")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:o.isFeatured,onChange:g=>s({...o,isFeatured:g.target.checked}),name:"isFeatured"}),label:h("admin:components.locationModel.lbl-featured")})))))))):e.createElement(e.Fragment,null," ",e.createElement(ce,{elevation:3,className:r.middlePaper},e.createElement(N,{container:!0,spacing:2,className:r.pdl},e.createElement(N,{item:!0,xs:6,className:r.typo},e.createElement(M,{variant:"h5",component:"h5",className:`${r.locationOtherInfo} ${r.mb}`},"Max Users"),e.createElement(M,{variant:"h5",component:"h5",className:`${r.locationOtherInfo} ${r.mb}`},"Scene ID"),e.createElement(M,{variant:"h5",component:"h5",className:r.locationOtherInfo},"Slugy Name")),e.createElement(N,{item:!0,xs:6,className:r.typo},e.createElement(M,{variant:"h6",component:"h5",className:`${r.locationOtherInfo} ${r.mb}`},p?.maxUsersPerInstance||e.createElement("span",{className:r.spanNone},"None")),e.createElement(M,{variant:"h5",component:"h5",className:`${r.locationOtherInfo} ${r.mb}`},p?.sceneId||e.createElement("span",{className:r.spanNone},"None")),e.createElement(M,{variant:"h5",component:"h5",className:`${r.locationOtherInfo}`},p?.slugifiedName||e.createElement("span",{className:r.spanNone},"None"))))),e.createElement(M,{variant:"h4",component:"h4",className:`${r.mb20px} ${r.spacing} ${r.typoFont}`},"Location Settings"," "),e.createElement(N,{container:!0,spacing:2,className:r.pdlarge},e.createElement(N,{item:!0,xs:6},e.createElement(M,{variant:"h6",component:"h6",className:r.mb10},"Location Type:"),e.createElement(M,{variant:"h6",component:"h6",className:r.mb10},"Video Enabled:"),e.createElement(M,{variant:"h6",component:"h6",className:r.mb10},"Audio Enabled:"),e.createElement(M,{variant:"h6",component:"h6",className:r.mb10},"Face Streaming Enabled:"),e.createElement(M,{variant:"h6",component:"h6",className:r.mb10},"Screen Sharing Enabled:"),e.createElement(M,{variant:"h6",component:"h6",className:r.mb10},"Media Chat Enabled:")),e.createElement(N,{item:!0,xs:6},e.createElement(M,{variant:"h6",component:"h6",className:r.mb10},p?.location_setting?.locationType||e.createElement("span",{className:r.spanNone},"None")),e.createElement(M,{variant:"h5",component:"h5",className:r.mb10},e.createElement("span",{className:r.spanNone},p?.location_setting?.videoEnabled?"Yes":"No")),e.createElement(M,{variant:"h5",component:"h5",className:r.mb10},e.createElement("span",{className:r.spanNone},p?.location_setting?.audioEnabled?"Yes":"No")),e.createElement(M,{variant:"h5",component:"h5",className:r.mb10},e.createElement("span",{className:r.spanNone},p?.location_setting?.faceStreamingEnabled?"Yes":"No")),e.createElement(M,{variant:"h5",component:"h5",className:r.mb10},e.createElement("span",{className:r.spanNone},p?.location_setting?.screenSharingEnabled?"Yes":"No")),e.createElement(M,{variant:"h5",component:"h5",className:r.mb10},e.createElement("span",{className:r.spanNone},p?.location_setting?.instanceMediaChatEnabled?"Yes":"No"))))),e.createElement(Ge,{className:r.mb10},m?e.createElement("div",{className:r.marginTpM},e.createElement(G,{onClick:x,className:r.saveBtn},e.createElement("span",{style:{marginRight:"15px"}},e.createElement(Pa,null))," ","Submit"),e.createElement(G,{className:r.saveBtn,onClick:()=>{u(!1)}},"CANCEL")):e.createElement("div",{className:r.marginTpM},e.createElement(G,{disabled:!j,className:r.saveBtn,onClick:()=>{u(!0)}},"EDIT"),e.createElement(G,{onClick:()=>_(),className:r.saveBtn},"CANCEL"))),e.createElement(Ot,{open:C,autoHideDuration:6e3,onClose:$,anchorOrigin:{vertical:"top",horizontal:"center"}},e.createElement(Kn,{onClose:$,severity:"warning"}," ",f," "))))},Xn=a=>{const t=ze(),l=bt(),n=La(),[d,c]=e.useState(0),[r,m]=e.useState(Ma),[u,o]=e.useState(!1),[s,p]=e.useState(""),[y,f]=e.useState(!1),[w,C]=e.useState(""),b=he(),h=je(),v=h.user,B=ct(),T=_a().readError.scopeErrorMessage,R=it(),j=R.locations.locations,F=R.locations.total,{t:x}=ue(),$=Ba(),_=(k,O)=>{const A=d<O?"increment":"decrement";b(Te.fetchAdminLocations(A)),c(O)},g=k=>{m(+k.target.value),c(0)};i.exports.useEffect(()=>{v?.id?.value!==null&&R.locations.updateNeeded.value&&!T?.value&&b(Te.fetchAdminLocations()),v?.id.value!=null&&B.scenes.updateNeeded.value===!0&&b(Ra.fetchAdminScenes("all")),v?.id.value!=null&&R.locationTypes.updateNeeded.value===!0&&b(Te.fetchLocationTypes()),v?.id.value!=null&&$.users.updateNeeded.value===!0&&b(Vn.fetchUsersAsAdmin()),v?.id.value!=null&&n.instances.updateNeeded.value===!0&&b(Gn.fetchAdminInstances())},[h.user?.id?.value,B.scenes.updateNeeded.value,n.instances.updateNeeded.value,R.locations.updateNeeded.value,R.locationTypes.updateNeeded.value]);const E=(k,O)=>A=>{A.type==="keydown"&&(A.key==="Tab"||A.key==="Shift")||(C(O),f(k))},L=k=>{f(k)},H=(k,O,A,q,le,D,W,Oe,Se,qe)=>({el:k,id:O,name:A,sceneId:q,maxUsersPerInstance:le,scene:D,type:W,tags:Oe,instanceMediaChatEnabled:Se,videoEnabled:qe,action:e.createElement(e.Fragment,null,e.createElement("a",{href:"#h",className:l.actionStyle,onClick:E(!0,k)},e.createElement("span",{className:l.spanWhite},"View")),e.createElement("a",{href:"#h",className:l.actionStyle,onClick:()=>{o(!0),p(O)}}," ",e.createElement("span",{className:l.spanDange},"Delete")," "))}),be=j.value.map(k=>H(k,k.id,k.name,k.sceneId,k.maxUsersPerInstance,k.slugifiedName,k.location_setting?.locationType,e.createElement("div",null," ",k.isFeatured&&e.createElement(Xe,{style:{marginLeft:"5px"},avatar:e.createElement(Me,null,"F"),label:x("admin:components.index.featured")}),k.isLobby&&e.createElement(Xe,{avatar:e.createElement(Me,null,"L"),label:x("admin:components.index.lobby")})," "),e.createElement("div",null," ",k.location_setting?.instanceMediaChatEnabled?"Yes":"No"," "),e.createElement("div",null," ",k.location_setting?.videoEnabled?"Yes":"No")));return e.createElement("div",null,e.createElement(e.Fragment,null,e.createElement(Ja,{className:t.container},e.createElement(Qa,{stickyHeader:!0,"aria-label":"sticky table"},e.createElement(Za,null,e.createElement(Ht,null,aa.map(k=>e.createElement(Ke,{key:k.id,align:k.align,style:{minWidth:k.minWidth},className:l.tableCellHeader},k.label)))),e.createElement(en,null,be.slice(d*r,d*r+r).map((k,O)=>e.createElement(Ht,{hover:!0,role:"checkbox",tabIndex:-1,key:k.id},aa.map(A=>{const q=k[A.id];return e.createElement(Ke,{key:A.id,align:A.align,className:l.tableCellBody},q)})))))),e.createElement(Rn,{rowsPerPageOptions:[12],component:"div",count:F.value,rowsPerPage:r,page:d,onPageChange:_,onRowsPerPageChange:g,className:l.tableFooter})),e.createElement(Gt,{open:u,onClose:()=>o(!1),"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description",classes:{paper:t.paperDialog}},e.createElement(dt,{id:"alert-dialog-title"},"Confirm location deletion"),e.createElement(Ge,null,e.createElement(G,{onClick:()=>o(!1),className:t.spanNone},"Cancel"),e.createElement(G,{className:t.spanDange,onClick:async()=>{await b(Te.removeLocation(s)),o(!1)},autoFocus:!0},"Confirm"))),e.createElement(Yn,{openView:y,closeViewModel:L,locationAdmin:w}))},Jn=a=>e.createElement(qt,{elevation:6,variant:"filled",...a}),Qn=a=>{const{open:t,handleClose:l,closeViewModel:n}=a,d=bt(),c=ze(),[r,m]=e.useState(!1),[u,o]=e.useState(""),[s,p]=e.useState({name:"",maxUsers:10,scene:"",type:"private",videoEnabled:!1,audioEnabled:!1,screenSharingEnabled:!1,faceStreamingEnabled:!1,globalMediaEnabled:!1,isLobby:!1,isFeatured:!1,formErrors:{name:"",maxUsers:"",scene:"",type:""}}),y=he(),{t:f}=ue(),w=it(),C=w.locationTypes.locationTypes,b=w.locations,h=ct().scenes.scenes,v=Aa(),B=v.type,T=v.message;e.useEffect(()=>{b.created.value&&(n(!1),p({...s,name:"",maxUsers:10,scene:"",type:"private",videoEnabled:!1,audioEnabled:!1,screenSharingEnabled:!1,faceStreamingEnabled:!1,globalMediaEnabled:!1,isLobby:!1,isFeatured:!1}))},[b.created.value]),e.useEffect(()=>{B.value==="error"&&(o(T.value),m(!0),setTimeout(()=>{m(!1)},5e3))},[B.value,T.value]);const R=(x,$)=>{$!=="clickaway"&&m(!1)},j=x=>{const{name:$,value:_}=x.target;let g=s.formErrors;switch($){case"name":g.name=_.length<2?"Name is required!":"";break;case"maxUsers":g.maxUsers=_.length<2?"Max users is required!":"";break;case"scene":g.scene=_.length<2?"Scene is required!":"";break;case"private":g.type=_.length<2?"Private role is required!":"";break}p({...s,[$]:_,formErrors:g})},F=()=>{const x={name:s.name,sceneId:s.scene,maxUsersPerInstance:s.maxUsers,location_settings:{locationType:s.type,instanceMediaChatEnabled:s.globalMediaEnabled,audioEnabled:s.audioEnabled,screenSharingEnabled:s.screenSharingEnabled,faceStreamingEnabled:s.faceStreamingEnabled,videoEnabled:s.videoEnabled},isLobby:s.isLobby,isFeatured:s.isFeatured},$=s.formErrors;s.name||($.name="Name can't be empty"),s.maxUsers||($.maxUsers="Max user can't be empty"),s.scene||($.scene="Scene can't be empty"),p({...s,formErrors:$}),na(s,s.formErrors)?y(Te.createLocation(x)):(o("Please fill all required field"),m(!0))};return e.createElement(e.Fragment,null,e.createElement(jt,{anchor:"right",classes:{paper:d.paper},open:t,onClose:l(!1)},e.createElement(Ce,{maxWidth:"sm",className:c.marginTp},e.createElement(dt,{id:"form-dialog-title",className:c.texAlign},"Create New Location"),e.createElement("label",null,"Name"),e.createElement(ce,{component:"div",className:s.formErrors.name.length>0?c.redBorder:c.createInput},e.createElement($e,{className:c.input,name:"name",placeholder:"Enter name",style:{color:"#fff"},autoComplete:"off",value:s.name,onChange:j})),e.createElement("label",null,"Max Users"),e.createElement(ce,{component:"div",className:s.formErrors.maxUsers.length>0?c.redBorder:c.createInput},e.createElement($e,{className:c.input,name:"maxUsers",placeholder:"Enter max users",style:{color:"#fff"},autoComplete:"off",type:"number",value:s.maxUsers,onChange:j})),e.createElement("label",null,"Scene"),e.createElement(ce,{component:"div",className:s.formErrors.scene.length>0?c.redBorder:c.createInput},e.createElement(Y,{fullWidth:!0},e.createElement(We,{labelId:"demo-controlled-open-select-label",id:"demo-controlled-open-select",value:s.scene,fullWidth:!0,displayEmpty:!0,onChange:j,className:c.select,name:"scene",MenuProps:{classes:{paper:d.selectPaper}}},e.createElement(pe,{value:"",disabled:!0},e.createElement("em",null,"Select scene")),h.value.map(x=>e.createElement(pe,{value:x.sid,key:x.sid},`${x.name} (${x.sid})`))))),e.createElement("label",null,"Private"),e.createElement(ce,{component:"div",className:c.createInput},e.createElement(Y,{fullWidth:!0},e.createElement(We,{labelId:"demo-controlled-open-select-label",id:"demo-controlled-open-select",value:s.type,fullWidth:!0,displayEmpty:!0,onChange:j,className:c.select,name:"type",MenuProps:{classes:{paper:d.selectPaper}}},e.createElement(pe,{value:"",disabled:!0},e.createElement("em",null,"Select type")),C.value.map(x=>e.createElement(pe,{value:x.type,key:x.type},x.type))))),e.createElement(N,{container:!0,spacing:5,className:c.marginBottm},e.createElement(N,{item:!0,xs:6},e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:s.videoEnabled,onChange:x=>p({...s,videoEnabled:x.target.checked}),name:"videoEnabled"}),label:f("admin:components.locationModel.lbl-ve")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:s.audioEnabled,onChange:x=>p({...s,audioEnabled:x.target.checked}),name:"audioEnabled"}),label:f("admin:components.locationModel.lbl-ae")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:s.globalMediaEnabled,onChange:x=>p({...s,globalMediaEnabled:x.target.checked}),name:"globalMediaEnabled"}),label:f("admin:components.locationModel.lbl-gme")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:s.screenSharingEnabled,onChange:x=>p({...s,screenSharingEnabled:x.target.checked}),name:"screenSharingEnabled"}),label:f("admin:components.locationModel.lbl-se")})))),e.createElement(N,{item:!0,xs:6,style:{display:"flex"}},e.createElement("div",{style:{marginLeft:"auto"}},e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:s.faceStreamingEnabled,onChange:x=>p({...s,faceStreamingEnabled:x.target.checked}),name:"faceStreamingEnabled"}),label:f("admin:components.locationModel.lbl-fe")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:s.isLobby,onChange:x=>p({...s,isLobby:x.target.checked}),name:"isLobby"}),label:f("admin:components.locationModel.lbl-lobby")}))),e.createElement(ee,null,e.createElement(Y,null,e.createElement(J,{color:"primary",control:e.createElement(te,{checked:s.isFeatured,onChange:x=>p({...s,isFeatured:x.target.checked}),name:"isFeatured"}),label:f("admin:components.locationModel.lbl-featured")})))))),e.createElement(Ge,null,e.createElement(G,{className:c.saveBtn,onClick:F},"Submit"),e.createElement(G,{onClick:l(!1),className:c.saveBtn},"Cancel")),e.createElement(Ot,{open:r,autoHideDuration:6e3,onClose:l,anchorOrigin:{vertical:"top",horizontal:"center"}},e.createElement(Jn,{onClose:R,severity:"warning"}," ",u," ")))))},Zn=()=>{const a=ze(),[t,l]=e.useState(!1),n=c=>r=>{r.type==="keydown"&&(r.key==="Tab"||r.key==="Shift")||l(c)},d=c=>{l(c)};return e.createElement("div",null,e.createElement(N,{container:!0,spacing:3,className:a.marginBottom},e.createElement(N,{item:!0,xs:9},e.createElement(Hn,null)),e.createElement(N,{item:!0,xs:3},e.createElement(G,{className:a.createBtn,type:"submit",variant:"contained",onClick:n(!0)},"Create New Location"))),e.createElement("div",{className:a.rootTable},e.createElement(Xn,null)),e.createElement(Qn,{open:t,handleClose:n,closeViewModel:d}))};var ht={},er=ye.exports,tr=xe.exports;Object.defineProperty(ht,"__esModule",{value:!0});var ra=ht.default=void 0,ar=tr(i.exports),nr=er(Ee),rr=(0,nr.default)(ar.createElement("path",{d:"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"}),"Email");ra=ht.default=rr;var vt={},lr=ye.exports,or=xe.exports;Object.defineProperty(vt,"__esModule",{value:!0});var la=vt.default=void 0,cr=or(i.exports),ir=lr(Ee),sr=(0,ir.default)(cr.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"}),"Public");la=vt.default=sr;var Et={},dr=ye.exports,mr=xe.exports;Object.defineProperty(Et,"__esModule",{value:!0});var oa=Et.default=void 0,ur=mr(i.exports),pr=dr(Ee),fr=(0,pr.default)(ur.createElement("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),"Person");oa=Et.default=fr;const br={emailPhone:"",isSubmitted:!1,isAgreedTermsOfService:!1,label:"",descr:""},gr=Z.publicRuntimeConfig.staticPages?.termsOfService??"/terms-of-service",hr=a=>{const{type:t,isAddConnection:l}=a,n=he(),d=je(),[c,r]=i.exports.useState(br),{t:m}=ue(),u=f=>{r({...c,[f.target.name]:f.target.value})},o=f=>{r({...c,[f.target.name]:f.target.checked})},s=f=>{if(f.preventDefault(),!l){n(re.createMagicLink(c.emailPhone)),r({...c,isSubmitted:!0});return}const w=d.user,C=w?w.id.value:"";n(t==="email"?re.addConnectionByEmail(c.emailPhone,C):re.addConnectionBySms(c.emailPhone,C))};let p="",y="";return i.exports.useEffect(()=>{if(t==="email"){p=m("user:auth.magiklink.descriptionEmail"),y=m("user:auth.magiklink.lbl-email");return}else if(t==="sms"){p=m("user:auth.magiklink.descriptionSMS"),y=m("user:auth.magiklink.lbl-phone");return}else if(!Z.publicRuntimeConfig.auth){p=m("user:auth.magiklink.descriptionEmail"),y=m("user:auth.magiklink.lbl-email");return}Z.publicRuntimeConfig.auth.enableSmsMagicLink&&Z.publicRuntimeConfig.auth.enableEmailMagicLink&&!t?(p=m("user:auth.magiklink.descriptionEmailSMS"),y=m("user:auth.magiklink.lbl-emailPhone")):Z.publicRuntimeConfig.auth.enableSmsMagicLink?(p=m("user:auth.magiklink.descriptionSMSUS"),y=m("user:auth.magiklink.lbl-phone")):(p=m("user:auth.magiklink.descriptionEmail"),y=m("user:auth.magiklink.lbl-email")),r({...c,label:y,descr:p})},[]),e.createElement(Ce,{component:"main",maxWidth:"xs"},e.createElement("div",null,e.createElement(M,{component:"h1",variant:"h5"},m("user:auth.magiklink.header")),e.createElement(M,{variant:"body2",color:"textSecondary",align:"center"},c.descr),e.createElement("form",{className:X.form,noValidate:!0,onSubmit:f=>s(f)},e.createElement(N,{container:!0},e.createElement(N,{item:!0,xs:12},e.createElement(_e,{variant:"outlined",margin:"normal",required:!0,fullWidth:!0,id:"emailPhone",label:c.label,name:"emailPhone",autoFocus:!0,onChange:f=>u(f)})),e.createElement(N,{item:!0,xs:12},e.createElement(J,{control:e.createElement(zt,{value:!0,onChange:f=>o(f),color:"primary",name:"isAgreedTermsOfService"}),label:e.createElement("div",{className:X.termsLink},m("user:auth.magiklink.agree"),e.createElement(Da,{to:gr},m("user:auth.magiklink.terms")))})),e.createElement(N,{item:!0,xs:12},e.createElement(G,{type:"submit",fullWidth:!0,variant:"contained",color:"primary",className:X.submit,disabled:!c.isAgreedTermsOfService},m("user:auth.magiklink.lbl-submit")))))))},Je=a=>e.createElement(hr,{...a});var yt={},vr=ye.exports,Er=xe.exports;Object.defineProperty(yt,"__esModule",{value:!0});var ca=yt.default=void 0,yr=Er(i.exports),xr=vr(Ee),Sr=(0,xr.default)(yr.createElement("path",{d:"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3"}),"GitHub");ca=yt.default=Sr;var xt={},Cr=ye.exports,kr=xe.exports;Object.defineProperty(xt,"__esModule",{value:!0});var ia=xt.default=void 0,wr=kr(i.exports),Nr=Cr(Ee),Pr=(0,Nr.default)(wr.createElement("path",{d:"M5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2m13 2h-2.5A3.5 3.5 0 0 0 12 8.5V11h-2v3h2v7h3v-7h3v-3h-3V9a1 1 0 0 1 1-1h2V5z"}),"Facebook");ia=xt.default=Pr;var St={},Ir=ye.exports,Rr=xe.exports;Object.defineProperty(St,"__esModule",{value:!0});var sa=St.default=void 0,$r=Rr(i.exports),Tr=Ir(Ee),Lr=(0,Tr.default)($r.createElement("path",{d:"M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69 1.69 0 0 0-1.69 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z"}),"LinkedIn");sa=St.default=Lr;var Ct={},Mr=ye.exports,_r=xe.exports;Object.defineProperty(Ct,"__esModule",{value:!0});var da=Ct.default=void 0,Br=_r(i.exports),Ar=Mr(Ee),Dr=(0,Ar.default)(Br.createElement("path",{d:"M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z"}),"Twitter");da=Ct.default=Dr;const jr=a=>{const{enableFacebookSocial:t,enableGithubSocial:l,enableGoogleSocial:n,enableLinkedInSocial:d,enableTwitterSocial:c}=a,{t:r}=ue(),m=he(),u=v=>{v.preventDefault(),m(re.loginUserByOAuth("github"))},o=v=>{v.preventDefault(),m(re.loginUserByOAuth("google"))},s=v=>{v.preventDefault(),m(re.loginUserByOAuth("facebook"))},p=v=>{v.preventDefault(),m(re.loginUserByOAuth("linkedin2"))},y=v=>{v.preventDefault(),m(re.loginUserByOAuth("twitter"))},f=l?e.createElement(N,{item:!0,xs:12},e.createElement(G,{onClick:v=>u(v),startIcon:e.createElement(ca,null),variant:"contained",className:X.github,fullWidth:!0},r("user:auth.social.gitHub"))):"",w=n?e.createElement(N,{item:!0,xs:12},e.createElement(G,{onClick:v=>o(v),variant:"contained",className:X.google,fullWidth:!0},r("user:auth.social.google"))):"",C=t?e.createElement(N,{item:!0,xs:12},e.createElement(G,{onClick:v=>s(v),startIcon:e.createElement(ia,null),variant:"contained",className:X.facebook,fullWidth:!0},r("user:auth.social.facebook"))):"",b=d?e.createElement(N,{item:!0,xs:12},e.createElement(G,{onClick:v=>p(v),startIcon:e.createElement(sa,null),variant:"contained",className:X.facebook,fullWidth:!0},r("user:auth.social.linkedin"))):"",h=c?e.createElement(N,{item:!0,xs:12},e.createElement(G,{onClick:v=>y(v),startIcon:e.createElement(da,null),variant:"contained",className:X.facebook,fullWidth:!0},r("user:auth.social.twitter"))):"";return e.createElement(Ce,{component:"main",maxWidth:"xs"},e.createElement("div",{className:X.paper},e.createElement(N,{container:!0,justify:"center",spacing:2},f,C,w,b,h)))},ma=a=>e.createElement(jr,{...a});var kt={},Fr=ye.exports,Wr=xe.exports;Object.defineProperty(kt,"__esModule",{value:!0});var wt=kt.default=void 0,Ur=Wr(i.exports),zr=Fr(Ee),Or=(0,zr.default)(Ur.createElement("path",{d:"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"}),"LockOutlined");wt=kt.default=Or;const qr=a=>{const t=he(),l={email:"",password:"",phone:""},[n,d]=i.exports.useState(l),{t:c}=ue(),r=u=>{u.preventDefault(),d({...n,[u.target.name]:u.target.value})},m=u=>{u.preventDefault(),t(re.registerUserByEmail({email:n.email,password:n.password}))};return e.createElement(Ce,{component:"main",maxWidth:"xs"},e.createElement("div",{className:X.paper},e.createElement(Me,{className:X.avatar},e.createElement(wt,null)),e.createElement(M,{component:"h1",variant:"h5"},c("user:auth.register.header")),e.createElement("form",{className:X.form,noValidate:!0,onSubmit:u=>m(u)},e.createElement(N,{container:!0,spacing:2},e.createElement(N,{item:!0,xs:12},e.createElement(_e,{variant:"outlined",required:!0,fullWidth:!0,id:"email",label:c("user:auth.register.lbl-email"),name:"email",autoComplete:"email",onChange:u=>r(u)})),e.createElement(N,{item:!0,xs:12},e.createElement(_e,{variant:"outlined",required:!0,fullWidth:!0,name:"password",label:c("user:auth.register.lbl-password"),type:"password",id:"password",autoComplete:"current-password",onChange:u=>r(u)})),e.createElement(N,{item:!0,xs:12},e.createElement(G,{type:"submit",fullWidth:!0,variant:"contained",color:"primary",className:X.submit},c("user:auth.register.lbl-signup")))))))},Hr=a=>e.createElement(qr,{...a}),Vr={email:"",password:""},Gr=a=>{const{isAddConnection:t}=a,l=je(),[n,d]=i.exports.useState(Vr),{t:c}=ue(),r=he(),m=o=>d({...n,[o.target.name]:o.target.value}),u=o=>{if(o.preventDefault(),t){const s=l.user,p=s?s.id.value:"";r(re.addConnectionByPassword({email:n.email,password:n.password},p)),r(mt.dialogClose())}else r(re.loginUserByPassword({email:n.email,password:n.password}))};return e.createElement(Ce,{component:"main",maxWidth:"xs"},e.createElement("div",{className:X.paper},e.createElement(Me,{className:X.avatar},e.createElement(wt,null)),e.createElement(M,{component:"h1",variant:"h5"},c("user:auth.passwordLogin.header")),e.createElement("form",{className:X.form,noValidate:!0,onSubmit:o=>u(o)},e.createElement(N,{container:!0},e.createElement(N,{item:!0,xs:12},e.createElement(_e,{variant:"outlined",margin:"normal",required:!0,fullWidth:!0,id:"email",label:c("user:auth.passwordLogin.lbl-email"),name:"email",autoComplete:"email",autoFocus:!0,onChange:o=>m(o)})),e.createElement(N,{item:!0,xs:12},e.createElement(_e,{variant:"outlined",margin:"normal",required:!0,fullWidth:!0,name:"password",label:c("user:auth.passwordLogin.lbl-password"),type:"password",id:"password",autoComplete:"current-password",onChange:o=>m(o)})),e.createElement(N,{item:!0,xs:12},e.createElement(J,{control:e.createElement(zt,{value:"remember",color:"primary"}),label:c("user:auth.passwordLogin.lbl-rememberMe")})),e.createElement(N,{item:!0,xs:12},e.createElement(G,{type:"submit",fullWidth:!0,variant:"contained",color:"primary",className:X.submit},c("user:auth.passwordLogin.lbl-signin"))),e.createElement(N,{item:!0,xs:!0},!t&&e.createElement("a",{href:"#",onClick:()=>r(mt.dialogShow({children:e.createElement(an,null)}))},c("user:auth.passwordLogin.forgotPassword"))),e.createElement(N,{item:!0},!t&&e.createElement("a",{href:"#",onClick:()=>r(mt.dialogShow({children:e.createElement(Hr,null)}))},c("user:auth.passwordLogin.signup")))))))},ua=a=>e.createElement(Gr,{...a}),Nt=a=>{const{children:t,value:l,index:n}=a;return e.createElement(i.exports.Fragment,null,l===n&&t)},Kr=()=>{let a=!0,t=!0,l=!1,n=!1,d=!1,c=!1,r=!1,m=!1;const[u,o]=i.exports.useState(0),{t:s}=ue(),p=(h,v)=>{h.preventDefault(),o(v)};Z.publicRuntimeConfig?.auth&&(a=Z.publicRuntimeConfig.auth.enableSmsMagicLink,t=Z.publicRuntimeConfig.auth.enableEmailMagicLink,l=Z.publicRuntimeConfig.auth.enableUserPassword,n=Z.publicRuntimeConfig.auth.enableGithubSocial,d=Z.publicRuntimeConfig.auth.enableGoogleSocial,c=Z.publicRuntimeConfig.auth.enableFacebookSocial,r=Z.publicRuntimeConfig.auth.enableLinkedInSocial,m=Z.publicRuntimeConfig.auth.enableTwitterSocial);const y=[n,d,c,r,m],w=[a,t,l,n,d,c,r,m].filter(h=>h).length,C=y.filter(h=>h).length;let b=e.createElement(Je,null);if(w===1)a?b=e.createElement(Je,null):t?b=e.createElement(Je,null):l?b=e.createElement(ua,null):C>0&&(b=e.createElement(ma,null));else{let h=0;const v=(t||a)&&e.createElement(Ue,{icon:e.createElement(ra,null),label:s("user:auth.login.email")}),B=(t||a)&&e.createElement(Nt,{value:u,index:h},e.createElement(Je,null));(t||a)&&++h;const T=l&&e.createElement(Ue,{icon:e.createElement(oa,null),label:s("user:auth.login.username")}),R=l&&e.createElement(Nt,{value:u,index:h},e.createElement(ua,null));l&&++h;const j=C>0&&e.createElement(Ue,{icon:e.createElement(la,null),label:s("user:auth.login.social")}),F=C>0&&e.createElement(Nt,{value:u,index:h},e.createElement(ma,{enableFacebookSocial:c,enableGoogleSocial:d,enableGithubSocial:n,enableLinkedInSocial:r,enableTwitterSocial:m}));C>0&&++h,b=e.createElement(i.exports.Fragment,null,(l||C>0)&&e.createElement(ta,{value:u,onChange:p,variant:"fullWidth",indicatorColor:"secondary",textColor:"secondary","aria-label":"Login Configure"},v,T,j),B,R,F)}return b},Yr=De(a=>lt({paperDialog:{background:"rgb(58, 65, 73) !important",color:"#f1f1f1"},flex:{display:"flex",justifyContent:"center",alignContent:"center"},input:{marginLeft:a.spacing(1),color:"#f1f1f1"}})),Xr=De({spanDange:{color:"#FF8C00"},spanNone:{color:"#808080"},spanWhite:{color:"#f1f1f1"}}),Jr=()=>{const a=Yr(),t=Xr(),[l,n]=e.useState(!0),d=()=>{n(!1)};return e.createElement("div",null,e.createElement(Gt,{open:l,onClose:d,"aria-labelledby":"form-dialog-title",classes:{paper:a.paperDialog}},e.createElement(dt,{id:"form-dialog-title"}," No access"),e.createElement(tn,null,e.createElement(Ya,{className:t.spanNone},"To access this resource, please enter your username here to ask for access."),e.createElement(_e,{autoFocus:!0,id:"name",label:"Username",type:"text",fullWidth:!0})),e.createElement(Ge,null,e.createElement(G,{onClick:d,className:t.spanNone},"Cancel"),e.createElement(G,{onClick:d,className:t.spanDange},"Submit"))))},pa=a=>{const{children:t,value:l,index:n,...d}=a;return e.createElement("div",{role:"tabpanel",hidden:l!==n,id:`scrollable-auto-tabpanel-${n}`,"aria-labelledby":`scrollable-auto-tab-${n}`,...d},l===n&&e.createElement("div",null,t))},fa=a=>({id:`scrollable-auto-tab-${a}`,"aria-controls":`scrollable-auto-tabpanel-${a}`}),Qr=De(a=>({root:{flexGrow:1,width:"100%",backgroundColor:"#15171B",display:"flex",minHeight:"94.9vh"},tabs:{borderRight:"1px solid #43484F",background:"#1f252d",paddingTop:"40px"},indicator:{background:"#fff",width:"3px"}})),Qe=Fe.section`
 padding-bottom: 100px;
 display: flex;
 flex: ${a=>a.flex===void 0?1:a.flex};

 &:first-child {
   padding-top: 50px;
 }

 h1 {
   font-size: 36px;
 }

 h2 {
   font-size: 16px;
 }
`,Ze=Fe.div`
 display: flex;
 flex: 1;
 flex-direction: column;
 margin: 0 auto;
 width: 90vw;
 padding: 0 20px;
`,Zr=Fe(Ze)`
  align-items: center;
  & > * {
    text-align: center;
  }
  & > *:not(:first-child) {
    margin-top: 20px;
  }
  h2 {
    max-width: 480px;
  }
`,el=Fe.div`
 margin-bottom: 36px;
 display: flex;
 justify-content: space-between;
 align-items: center;
`,tl=Fe.div`
 box-sizing: border-box;
 border-radius: 50%;
 margin: auto 10px;
 cursor: pointer;
 height: 40px;
 width: 40px;
 &.on {
     .offIcon{
         display: none;
     }
     .onIcon{
         display: block;
     }
 }
 &.off{
     .offIcon{
         display: block;
     }
     .onIcon{
         display: none;
     }
 }


 .onIcon{
     color: rgba(122, 255, 100, 1)
 }

 > svg{
     height: 1.2em;
     width: 1.2em;
     box-sizing: border-box;
     cursor: pointer;
     margin: 6px;
 }
 background-color: rgb(50, 170, 75);
 color: white;
 margin-right: 5px;

 &:hover {
     cursor: pointer;
     background-color: rgb(70, 201, 97);
 }
`,Pt="project-menu",ao=a=>{const t=he(),l=ja(),n=Qr(),[d,c]=e.useState(0),[r,m]=i.exports.useState([]),[u,o]=i.exports.useState(!1),[s,p]=i.exports.useState(null),[y,f]=i.exports.useState(!1),w=je(),C=w.authUser,b=w.user,h=b?.scopes?.value||[];let v=!1,B=!1;for(const E of h)if(E.type.split(":")[0]==="location"&&E.type.split(":")[1]==="read"&&(v=!0),E.type.split(":")[0]==="editor"&&E.type.split(":")[1]==="write"&&(B=!0,v)||E.type.split(":")[0]==="editor"&&E.type.split(":")[1]==="write"&&(B=!0,v))break;const{t:T}=ue();i.exports.useEffect(()=>{t(re.doLoginAuto(!0)),console.warn("PROJECTS PAGE PROPS: ",a)},[]);const R=(E,L)=>{c(L)};i.exports.useEffect(()=>{C?.accessToken.value!=null&&C.accessToken.value.length>0&&b?.id.value!=null&&za().then(E=>{m(E.map(L=>({...L,url:`/editor/projects/${L.project_id}`}))),o(!1)}).catch(E=>{if(console.error(E),E.response&&E.response.status===401)return l.push("/editor/projects");p(E),o(!1)})},[C,b]);const j=async E=>{try{await Ka(E.project_id),m(r.filter(L=>L.project_id!==E.project_id))}catch(L){console.log("Delete project error")}},F=E=>()=>{l.push(E)},x=E=>e.createElement(e.Fragment,null,e.createElement(Va,{id:Pt},e.createElement(Ga,{onClick:L=>j(E.trigger.project)},T("editor.projects.contextMenu.deleteProject")))),$=Oa(Pt)(x),_=[];for(let E=0;E<Kt.length&&E<4;E++)_.push(Kt[E]);const g=()=>f(!0);return e.createElement(e.Fragment,null,C?e.createElement(Jt,null,e.createElement(Ye,null),e.createElement(Ye,null,e.createElement(tl,{onClick:()=>g()},e.createElement(qn,null)))):e.createElement(Qe,null,e.createElement(Ze,null,e.createElement(el,null,e.createElement("h1",null,T("editor.projects.header"))),e.createElement(Yt,null,e.createElement(Xt,null,e.createElement(Kr,null))))),C&&e.createElement("div",{className:n.root},e.createElement(ta,{value:d,onChange:R,indicatorColor:"primary","aria-label":"scrollable auto tabs example",orientation:"vertical",className:n.tabs,classes:{indicator:n.indicator}},e.createElement(Ue,{label:T("editor.projects.projectHeader"),...fa(0)}),v&&e.createElement(Ue,{label:T("editor.projects.locationHeader"),...fa(1)})),e.createElement(pa,{value:d,index:0},C?.accessToken.value!=null&&C.accessToken.value.length>0&&b?.id.value!=null&&e.createElement("main",null,B?e.createElement(e.Fragment,null,r.length===0&&!u?e.createElement(Qe,{flex:0},e.createElement(Zr,null,e.createElement("h1",null,T("editor.projects.welcomeMsg")),e.createElement("h2",null,T("editor.projects.description")),e.createElement(qa,{onClick:F("/editor/tutorial")},T("editor.projects.lbl-startTutorial")))):null,e.createElement(Qe,null,e.createElement(Ze,null,e.createElement(Yt,null,e.createElement(Jt,null,e.createElement(Ye,null),e.createElement(Ye,null,e.createElement(Ha,{onClick:F("/editor/create")},T("editor.projects.lbl-newProject")))),e.createElement(Xt,null,s&&e.createElement(ln,null,s.message),!s&&e.createElement(on,{loading:u,projects:r,newProjectPath:"/editor/create",newProjectLabel:T("editor.projects.lbl-newProject"),contextMenuId:Pt}))))),e.createElement($,null)):e.createElement(Jr,null))),e.createElement(pa,{value:d,index:1},e.createElement(Qe,null,e.createElement(Ze,null,e.createElement(Zn,null))))),y&&e.createElement(Xa,{onClickAway:()=>f(!1)},e.createElement("div",{className:"profileMenu"},e.createElement(rn,{setProfileMenuOpen:f}))))};export{ao as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
