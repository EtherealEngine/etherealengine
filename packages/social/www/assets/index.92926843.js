import{A as $t}from"./AuthService.6db25508.js";import{r,R as e,u as Y,g as Dt}from"./vendor.c8b8cc93.js";import{u as Z,a as _,P as Ot,b as Lt,c as zt,d as A,e as qe,f as Ue,g as qt,p as Xe,C as He,h as Ge,i as Ve,j as Ut}from"./_app.009e96ac.js";import{C as de,a as Xt}from"./CreatorService.2fe5442c.js";import{W as Ye}from"./WebxrNativeService.ca552518.js";import{s as $}from"./index.module.bb0750b5.js";import{A as Ht}from"./index.6b9ef4cc.js";import{d as Gt,C as Vt}from"./index.8221d0c2.js";import{c as Ee,i as X,a as Q}from"./createSvgIcon.43fd6609.js";import{P as E}from"./PopupsStateService.d6dc4710.js";import{C as Ze,a as Qe}from"./CardContent.33751f6e.js";import{C as me}from"./CardMedia.1681aab5.js";import{A as Yt}from"./Avatar.42349c47.js";import{T as D}from"./Typography.52db5622.js";import{d as Zt,a as Je,F as Qt}from"./index.64cdcbaf.js";import{T as Jt,a as Kt}from"./TheFeedsService.2793e11c.js";import{d as er,F as tr}from"./index.8a6b9b2f.js";import{A as Ce}from"./AlertService.bfed2141.js";import{c as Se}from"./feathers.081246a7.js";import{F as Ke}from"./FeedService.1e1a3393.js";import{B as P}from"./Button.9f6477a8.js";import{A as J,X as k}from"./index.821475c5.js";import{C as rr}from"./index.5c8080a0.js";import{S as et,m as ar}from"./Slide.c23656e9.js";import{D as tt}from"./Dialog.869ec0a3.js";import{D as or}from"./DialogTitle.49ec867b.js";import{C as sr}from"./index.02aa5acf.js";import{d as nr}from"./ArrowBackIos.b66b83b5.js";import{A as be,_ as xe,d as cr,r as ir,o as lr,a as ur}from"./index.14f14606.js";import{P as dr,F as mr}from"./index.b1f8906e.js";import{S as pr}from"./index.683a8168.js";import{B as fr}from"./Box.a81f5212.js";import{S as rt}from"./index.0040ebb6.js";import{Q as vr,V as hr,S as _r,G as gr,P as Er,W as Cr,s as Sr}from"./three.module.0404e109.js";import br from"./Player.78b7e742.js";import xr from"./workerFunction.efd6a346.js";import Fr from"./terms.27e53fc6.js";import yr from"./policy.0161e0f1.js";import"./avatarFunctions.c7a0e273.js";import"./upload.38e3baaf.js";import"./capitalize.afc8605e.js";import"./IconButton.6d410d2a.js";import"./ButtonBase.4949ff38.js";import"./Modal.0a92aab7.js";import"./ownerWindow.3d7152ce.js";import"./createSvgIcon.f69c4b03.js";import"./useControlled.815a4900.js";import"./Grid.7f9f57eb.js";import"./TextField.556bc809.js";import"./Input.d01777ba.js";import"./useFormControl.7fcaf9d0.js";import"./InputLabel.e3f1626a.js";import"./Select.f8860986.js";import"./List.8fe8fc26.js";import"./Snackbar.ed7a56d5.js";import"./Alert.702d7c18.js";import"./index.038eb325.js";import"./DialogContentText.4d134c54.js";import"./Backdrop.4981fe97.js";import"./styled.2b87e6b6.js";import"./createStyles.1d8ebf67.js";import"./index.bce0f5bf.js";import"./index.9af95596.js";import"./index.472b90b5.js";import"./Paragraph.9f4506c4.js";const pe=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;var Fe={},wr=X.exports,kr=Q.exports;Object.defineProperty(Fe,"__esModule",{value:!0});var at=Fe.default=void 0,Nr=kr(r.exports),Ir=wr(Ee),Pr=(0,Ir.default)(Nr.createElement("path",{d:"M12 2c-4.97 0-9 4.03-9 9 0 4.17 2.84 7.67 6.69 8.69L12 22l2.31-2.31C18.16 18.67 21 15.17 21 11c0-4.97-4.03-9-9-9zm0 2c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.3c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"}),"PersonPin");at=Fe.default=Pr;const Rr="_creatorContainer_1mzwg_1",Tr="_creatorItem_1mzwg_18",Br="_previewImage_1mzwg_21",Mr="_avatarPlaceholder_1mzwg_28",jr="_titleContainer_1mzwg_31",Ar="_usernameContainer_1mzwg_36";var O={creatorContainer:Rr,creatorItem:Tr,previewImage:Br,avatarPlaceholder:Mr,titleContainer:jr,usernameContainer:Ar};const Wr=o=>{const t=Z(),a=_();r.exports.useEffect(()=>{a(de.getCreators())},[]);const s=t.creators.creators?.value&&t.creators.fetchingCreators?.value===!1?t.creators.creators.value:null,n=c=>{a(E.updateCreatorPageState(!1)),a(E.updateCreatorPageState(!0,c))},i=t.creators.currentCreator?.id?.value;r.exports.useEffect(()=>{a(de.getBlockedList(i))},[]);const u=t?.creators?.blocked.value;return e.createElement("section",{className:O.creatorContainer},s&&u&&s.length>0&&s?.filter(c=>c.isBlocked<1).map((c,d)=>e.createElement(Ze,{className:O.creatorItem,elevation:0,key:d,onClick:()=>n(c.id)},c.avatar?e.createElement(me,{className:O.previewImage,image:c.avatar||e.createElement(at,null),title:c.name}):e.createElement("section",{className:O.previewImage},e.createElement(Yt,{className:O.avatarPlaceholder})),e.createElement(Qe,null,e.createElement(D,{className:O.titleContainer},c.name,c.verified===1&&e.createElement(Gt,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}})),e.createElement(D,{className:O.usernameContainer},c.username)))))},ye={getTheFeedsFires:(o,t)=>async(a,s)=>{try{const n=await Se.service("thefeeds-fires").find({query:{thefeedsId:o}});t(n)}catch(n){console.log(n),Ce.dispatchAlertError(a,n.message)}},addFireToTheFeeds:o=>async t=>{try{const s={id:(await Se.service("thefeeds-fires").create({thefeedsId:o})).creatorId};t(addTheFeedsFire(s))}catch(a){console.log(a),Ce.dispatchAlertError(t,a.message)}},removeFireToTheFeeds:o=>async t=>{try{await Se.service("thefeeds-fires").remove(o),t(Jt.removeTheFeedsFire(o))}catch(a){console.log(a),Ce.dispatchAlertError(t,a.message)}}},$r="_tipItem_160j6_1",Dr="_previewImage_160j6_6",Or="_eyeLine_160j6_12",Lr="_cardContent_160j6_27",zr="_iconsContainer_160j6_33",qr="_titleContainer_160j6_38",Ur="_flamesCount_160j6_42",Xr="_cartText_160j6_46";var R={tipItem:$r,previewImage:Dr,eyeLine:Or,cardContent:Lr,iconsContainer:zr,titleContainer:qr,flamesCount:Ur,cartText:Xr};const{Share:Hr}=Ot,Gr=o=>{r.exports.useState(!1);const[t,a]=r.exports.useState(!1),{feed:s}=o,[n,i]=r.exports.useState(s.fires),u=_(),[c,d]=r.exports.useState(null),b=F=>{u(ye.addFireToTheFeeds(F)),i(n+1),a(!0)},p=F=>{u(ye.removeFireToTheFeeds(F)),i(n-1),a(!1)};r.exports.useEffect(()=>{u(ye.getTheFeedsFires(s.id,d))},[]);const{t:C}=Y(),h=()=>{Hr.share({title:C("social:shareForm.arcMedia"),text:C("social:shareForm.videoCreated"),url:encodeURI(s.videoUrl),dialogTitle:C("social:shareForm.shareWithBuddies")})},x=Z().creators.currentCreator?.id?.value;return r.exports.useEffect(()=>{a(!!c?.data.find(F=>F.id===x))},[c]),s?e.createElement(e.Fragment,null,e.createElement(Ze,{className:R.tipItem,square:!1,elevation:0,key:s.id},s.videoUrl?e.createElement(me,{className:R.previewImage,component:"video",src:s.videoUrl,title:s.title,controls:!0}):"",e.createElement("span",{className:R.eyeLine},s.viewsCount,e.createElement(Zt,{style:{fontSize:"16px"}})),e.createElement(Qe,{className:R.cardContent},e.createElement("section",{className:R.iconsContainer},e.createElement(D,{className:R.titleContainer,gutterBottom:!0,variant:"h4"},s.title),e.createElement(Vt,{creator:s.creator}),e.createElement("section",{className:R.iconSubContainer},t?e.createElement(Je,{className:R.fireIcon,htmlColor:"#FF6201",onClick:()=>p(s.id)}):e.createElement(Je,{className:R.fireIcon,htmlColor:"#DDDDDD",onClick:()=>b(s.id)}),e.createElement(er,{onClick:h}))),e.createElement(D,{variant:"subtitle2"},n," flames"),e.createElement(D,{className:R.cartText,variant:"h6"},s.description)))):e.createElement(e.Fragment,null)},Vr="_theFeedItem_m1i9m_1",Yr="_thefeedContainer_m1i9m_6",Zr="_fireIcon_m1i9m_11",Qr="_noContent_m1i9m_15";var ot={theFeedItem:Vr,thefeedContainer:Yr,fireIcon:Zr,noContent:Qr};const Jr=o=>{const t=_();r.exports.useEffect(()=>{t(Kt.getTheFeedsNew())},[]);const s=Lt()?.thefeeds?.value||[];return e.createElement("section",{className:ot.thefeedContainer},s&&s.length>0?s.map((n,i)=>e.createElement(Gr,{key:i,feed:n})):e.createElement("p",{className:ot.noContent},"Coming soon..."))},Kr="_feedMenuContainer_v4zby_1",ea="_subWrapper_v4zby_7",ta="_feedMenu_v4zby_1",ra="_active_v4zby_51",aa="_featuredButton_v4zby_54",oa="_creatorsButton_v4zby_57",sa="_thefeedButton_v4zby_60",na="_tipsandtricksButton_v4zby_63",ca="_content_v4zby_67";var w={feedMenuContainer:Kr,subWrapper:ea,feedMenu:ta,active:ra,featuredButton:aa,creatorsButton:oa,thefeedButton:sa,tipsandtricksButton:na,content:ca};const ia=({view:o,setView:t})=>{const a=r.exports.useRef(),s=r.exports.useRef(),n=r.exports.useRef(),i=r.exports.useRef(),u=r.exports.useRef(),{t:c}=Y(),d=_(),b=zt();r.exports.useEffect(()=>{d(Ke.getFeeds("featured"))},[]);const p=40,C=F=>{t(F);let M=0;switch(F){case"creators":M=n.current.offsetLeft-p;break;case"thefeed":M=i.current.offsetLeft-p;break;case"tipsandtricks":M=u.current.offsetLeft-p;break;default:M=0;break}a.current.scrollTo({left:M,behavior:"smooth"})};let h=null;switch(o){case"creators":h=e.createElement(Wr,null);break;case"thefeed":h=e.createElement(Jr,null);break;default:h=e.createElement(Qt,{thisData:b.feeds.feedsFeatured.value});break}const x={featured:[w.featuredButton,o==="featured"&&w.active],creators:[w.creatorsButton,o==="creators"&&w.active],thefeed:[w.thefeedButton,o==="thefeed"&&w.active],tipsandtricks:[w.tipsandtricksButton,o==="tipsandtricks"&&w.active]};return e.createElement(e.Fragment,null,e.createElement("nav",{className:w.feedMenuContainer},e.createElement("section",{className:w.subWrapper,ref:a},e.createElement("section",{className:w.feedMenu},e.createElement(P,{ref:s,variant:"contained",className:x.featured.join(" "),onClick:()=>C("featured")},c("social:feedMenu.featured")),e.createElement(P,{ref:n,variant:"contained",className:x.creators.join(" "),onClick:()=>C("creators")},c("social:feedMenu.creators"))))),e.createElement("section",{className:w.content},h))},la=e.forwardRef((o,t)=>e.createElement(et,{direction:"up",ref:t,...o})),K=o=>{const{children:t,open:a,onClose:s,title:n,className:i}=o;return e.createElement(tt,{open:a,TransitionComponent:la,keepMounted:!0,onClose:s,className:i,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description"},n&&e.createElement(or,{id:"alert-dialog-slide-title"},n),t)},ua="_creatorPopup_18hmn_1";var da={creatorPopup:ua};const ma=({webxrRecorderActivity:o,setView:t})=>{const a=A(),s=_(),n=()=>{s(E.updateCreatorPageState(!1))},i=()=>a?.popups?.creatorPage?.value===!0&&a?.popups?.creatorId?.value&&!o&&e.createElement(K,{open:a?.popups?.creatorPage?.value,onClose:n,className:da.creatorPopup},e.createElement(rr,{creatorId:a?.popups?.creatorId?.value}),e.createElement(J,{setView:t}));return r.exports.useEffect(()=>{i()},[a?.popups?.creatorPage?.value,a?.popups?.creatorId?.value]),i()},pa="_isIos_1iqvw_1",fa="_feedPageIosWrapper_1iqvw_4",va="_feedPagePopup_1iqvw_9";var we={isIos:pa,feedPageIosWrapper:fa,feedPagePopup:va};const ha=({webxrRecorderActivity:o,setView:t})=>{const a=A(),s=pe?we.isIos:"",n=_(),i=()=>{n(E.updateFeedPageState(!1))},u=()=>a?.popups?.feedPage?.value===!0&&!o&&e.createElement(K,{open:a?.popups?.feedPage?.value,onClose:i,className:we.feedPagePopup+" "+s},e.createElement("div",{className:we.feedPageIosWrapper},e.createElement(tr,null),e.createElement(J,{setView:t})));return r.exports.useEffect(()=>{u()},[a?.popups?.feedPage?.value,a?.popups?.feedId?.value]),u()},_a="_isIos_sl85y_1",ga="_creatorFormPopup_sl85y_6";var st={isIos:_a,creatorFormPopup:ga};const Ea=({webxrRecorderActivity:o,setView:t})=>{const a=_(),s=A(),n=()=>{a(E.updateCreatorFormState(!1))},i=pe?st.isIos:"",u=()=>s?.popups?.creatorForm?.value===!0&&!o&&e.createElement(K,{open:s?.popups?.creatorForm?.value,onClose:n,className:st.creatorFormPopup+" "+i},e.createElement(sr,null),e.createElement(J,{setView:t}));return r.exports.useEffect(()=>{u()},[s?.popups.creatorForm.value]),u()},Ca="_arMediaContainer_1cnq4_1",Sa="_switcher_1cnq4_1",ba="_switchButton_1cnq4_8",xa="_active_1cnq4_17",Fa="_flexContainer_1cnq4_20",ya="_previewImageContainer_1cnq4_24",wa="_previewImage_1cnq4_24",ka="_textC_1cnq4_39",Na="_backButton_1cnq4_42",Ia="_startRecirding_1cnq4_48";var T={arMediaContainer:Ca,switcher:Sa,switchButton:ba,active:xa,flexContainer:Fa,previewImageContainer:ya,previewImage:wa,textC:ka,backButton:Na,startRecirding:Ia};const Pa=o=>{const[t,a]=r.exports.useState("clip"),[s,n]=r.exports.useState(null),[i,u]=r.exports.useState(!1),[c,d]=r.exports.useState(null),b=qe();r.exports.useEffect(()=>{C(be.getArMedia())},[]);const{t:p}=Y();Ue();const C=_();return r.exports.useEffect(()=>{b.fetching.value===!1&&n(b?.list?.value?.filter(h=>h.type===t))},[b.fetching.value,t]),e.createElement("section",{className:T.arMediaContainer},i&&e.createElement(dr,{text:"Loading..."}),e.createElement(P,{variant:"text",className:T.backButton,onClick:()=>{C(E.updateArMediaState(!1))}},e.createElement(nr,null),p("social:arMedia.back")),e.createElement("section",{className:T.switcher},e.createElement(P,{variant:t==="clip"?"contained":"text",className:T.switchButton+(t==="clip"?" "+T.active:""),onClick:()=>a("clip")},p("social:arMedia.clip"))),e.createElement("section",{className:T.flexContainer},s?.map((h,x)=>e.createElement("section",{key:h.id,className:T.previewImageContainer},e.createElement(me,{onClick:()=>d(h),className:T.previewImage,image:h.previewUrl}),e.createElement(D,null,h.title)))),t=="background"?e.createElement("text",{className:T.textC},"Coming soon ..."):" ",c?e.createElement(P,{className:T.startRecirding,onClick:async()=>{u(!0),k.uploadFiles!==void 0&&await k.uploadFiles({audioPath:c.audioUrl,audioId:c.audioId}),u(!1),C(E.updateArMediaState(!1)),C(E.updateWebXRState(!0,c.id))},variant:"contained"},p("social:arMedia.start")):null)},Ra="_arMediaPopup_1sxy7_1";var Ta={arMediaPopup:Ra};const Ba=o=>{const t=A(),a=_(),s=()=>{a(E.updateArMediaState(!1))},n=()=>t?.popups.arMedia?.value===!0&&e.createElement(K,{open:t?.popups.arMedia?.value,onClose:s,className:Ta.arMediaPopup},e.createElement(Pa,null));return r.exports.useEffect(()=>{n()},[t?.popups?.arMedia?.value]),n()},Ma=({setView:o})=>{_();const t=A(),a=()=>t.popups.shareFeedPage?.value===!0&&e.createElement(mr,null);return r.exports.useEffect(()=>{a()},[t.popups.shareFeedPage.value]),a()},ja="_shareFormContainer_1cvkg_1",Aa="_btnAction_1cvkg_7",Wa="_btnDisableAction_1cvkg_12",$a="_media_1cvkg_15";var ke={shareFormContainer:ja,btnAction:Aa,btnDisableAction:Wa,media:$a};const Da=ar({root:{maxWidth:"375pt"},media:{height:"340pt",width:"375pt"},btn_share:{backgroundColor:"black",color:"white",bottom:"0",width:"100%",borderRadius:"12px","&:hover":{backgroundColor:"black",color:"white"}}}),Oa=o=>{const t=A(),a=t.popups.videoUrl?.value,s=t.popups.imgSrc?.value,n=Da(),{t:i}=Y(),u=_(),c=()=>{u(E.updateShareFormState(!1)),u(E.updateNewFeedPageState(!1))},d=()=>{pr.share({title:i("social:shareForm.arcMedia"),text:i("social:shareForm.videoCreated"),url:encodeURI(a),dialogTitle:i("social:shareForm.shareWithBuddies")})};return r.exports.useEffect(()=>{console.log("previewUrlpreviewUrl",s)}),e.createElement("div",{className:ke.shareFormContainer},e.createElement(fr,{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"45vh"},e.createElement(me,{className:n.media+" "+ke.media,component:"img",alt:"Contemplative Reptile",src:s,title:"Arc",style:{maxWidth:"calc(100% - 36pt)",maxHeight:"40vh"}})),e.createElement(P,{size:"large",color:"primary",onClick:d,className:n.btn_share},i("social:shareForm.shareVideo")),e.createElement(P,{size:"large",color:"primary",onClick:()=>{c()},className:ke.btnDisableAction},i("social:shareForm.close")))},La="_shareFormPopup_2fj50_1",za="_popUpFooter_2fj50_14";var nt={shareFormPopup:La,popUpFooter:za};const qa=({setView:o})=>{const t=_(),a=A(),s=()=>{t(E.updateShareFormState(!1))},n=()=>a?.popups?.shareForm?.value===!0&&e.createElement(K,{open:a?.popups.shareForm.value,onClose:s,className:nt.shareFormPopup},e.createElement(Oa,null),e.createElement("div",{className:nt.popUpFooter},e.createElement(J,{setView:o})));return r.exports.useEffect(()=>{n()},[a?.popups.shareForm?.value]),n()},Ua="_styleLink_1yeto_1",Xa="_mainBlock_1yeto_6",Ha="_bottomBox_1yeto_10",Ga="_popup_1yeto_23",Va="_media_1yeto_30",Ya="_media2_1yeto_41",Za="_title_1yeto_53",Qa="_box_1yeto_71",Ja="_btn_start_1yeto_74",Ka="_btn_cancel_1yeto_84",eo="_dialogWindow_1yeto_136",to="_horizontalMode_1yeto_142",ro="_ldsring_1yeto_1";var Ne={styleLink:Ua,mainBlock:Xa,bottomBox:Ha,popup:Ga,media:Va,media2:Ya,title:Za,box:Qa,btn_start:Ja,btn_cancel:Ka,dialogWindow:eo,horizontalMode:to,ldsring:ro},ee={},ao=Dt(qt),te={},ct=X.exports;Object.defineProperty(te,"__esModule",{value:!0});te.default=void 0;var oo=ct(xe.exports),so=ir,no=ct(cr);function co(o,t){return(0,so.withStyles)(o,(0,oo.default)({defaultTheme:no.default},t))}var io=co;te.default=io;var lo=Q.exports,re=X.exports;Object.defineProperty(ee,"__esModule",{value:!0});var it=ee.default=ee.styles=void 0,uo=re(xe.exports),mo=re(lr.exports),lt=lo(r.exports);re(Xe.exports);var po=re(ao),fo=re(te),ut=function(t){return{root:{flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"8px 24px","&:first-child":{paddingTop:20}},dividers:{padding:"16px 24px",borderTop:"1px solid ".concat(t.palette.divider),borderBottom:"1px solid ".concat(t.palette.divider)}}};ee.styles=ut;var vo=lt.forwardRef(function(t,a){var s=t.classes,n=t.className,i=t.dividers,u=i===void 0?!1:i,c=(0,mo.default)(t,["classes","className","dividers"]);return lt.createElement("div",(0,uo.default)({className:(0,po.default)(s.root,n,u&&s.dividers),ref:a},c))}),ho=(0,fo.default)(ut,{name:"MuiDialogContent"})(vo);it=ee.default=ho;var ae={},_o=Q.exports,fe=X.exports;Object.defineProperty(ae,"__esModule",{value:!0});var dt=ae.default=ae.styles=void 0,go=fe(xe.exports),mt=_o(r.exports);fe(Xe.exports);var Eo=fe(te),Co=fe(ur),pt={root:{marginBottom:12}};ae.styles=pt;var So=mt.forwardRef(function(t,a){return mt.createElement(Co.default,(0,go.default)({component:"p",variant:"body1",color:"textSecondary",ref:a},t))}),bo=(0,Eo.default)(pt,{name:"MuiDialogContentText"})(So);dt=ae.default=bo;const xo=e.forwardRef((o,t)=>e.createElement(et,{direction:"up",ref:t,...o})),Fo=({setView:o})=>{const t=Z(),a=t.creators.currentCreator.value,s=_(),[n,i]=r.exports.useState(!a.terms),[u,c]=r.exports.useState(a.terms?!a.policy:!1);Y(),r.exports.useState(!1),r.exports.useState(!1);const d=()=>{i(!1),c(!1),s(de.updateCreator({id:t.creators.currentCreator?.id?.value,terms:!0,policy:!0,name:t.creators.currentCreator?.name?.value}))};return e.createElement("div",{className:Ne.mainBlock},e.createElement(tt,{open:n,TransitionComponent:xo,keepMounted:!0,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description",className:Ne.dialogWindow,PaperProps:{style:{width:"100%",maxWidth:"100%",height:"max-content",borderRadius:"12px"}}},e.createElement(it,null,e.createElement(dt,null,e.createElement(D,{align:"center",variant:"subtitle1"},'By tapping "I agree to Terms of Service and Policy of Service", you agree to our ',e.createElement(P,{style:{padding:"0"},onClick:()=>{o("terms")}},e.createElement("b",null,"Terms of Service"))," and acknowledge that you have our ",e.createElement(P,{style:{padding:"0"},onClick:()=>{o("policy")}},e.createElement("b",null,"Privacy Policy"))," to learn how we collect, use, and share your data."))),e.createElement("div",{className:Ne.bottomBox},e.createElement("div",null,e.createElement(P,{variant:"contained",onClick:d},"Agree and continue")))))},yo="_wrap_1rles_1",wo="_container_1rles_12",ko="_mail_1rles_45";var Ie={wrap:yo,container:wo,mail:ko};const No=()=>e.createElement("div",{className:Ie.wrap},e.createElement("div",{className:Ie.container},e.createElement("p",null,"You have been temporarily blocked pending further review"),e.createElement("p",null,"Please contact support with any questions"),e.createElement("hr",null),e.createElement("div",{className:Ie.mail},e.createElement("a",{href:"mailto:info@arcmedia.us"},"info@arcmedia.us"))));var Pe={},Io=X.exports,Po=Q.exports;Object.defineProperty(Pe,"__esModule",{value:!0});var ft=Pe.default=void 0,Ro=Po(r.exports),To=Io(Ee),Bo=(0,To.default)(Ro.createElement("path",{d:"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"}),"Videocam");ft=Pe.default=Bo;var Re={},Mo=X.exports,jo=Q.exports;Object.defineProperty(Re,"__esModule",{value:!0});var vt=Re.default=void 0,Ao=jo(r.exports),Wo=Mo(Ee),$o=(0,Wo.default)(Ao.createElement("path",{d:"M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-8 13c-2.76 0-5-2.24-5-5H5l2.5-2.5L10 13H8c0 2.21 1.79 4 4 4 .58 0 1.13-.13 1.62-.35l.74.74c-.71.37-1.5.61-2.36.61zm4.5-2.5L14 13h2c0-2.21-1.79-4-4-4-.58 0-1.13.13-1.62.35l-.74-.73C10.35 8.24 11.14 8 12 8c2.76 0 5 2.24 5 5h2l-2.5 2.5z"}),"FlipCameraIos");vt=Re.default=$o;const Do="_waterMarkWrapper_11g2p_1",Oo="_waterMark_11g2p_1",Lo="_subContainer_11g2p_19",zo="_startButtonWrapper_11g2p_28",qo="_stopButtonWrapper_11g2p_29",Uo="_startButton_11g2p_28",Xo="_stopButton_11g2p_29",Ho="_flipCamera_11g2p_69",Go="_changeOrientation_11g2p_84",Vo="_closeButtonWrapper_11g2p_99",Yo="_closeButton_11g2p_99",Zo="_horizontalOrientation_11g2p_116",Qo="_hideButtons_11g2p_147";var B={waterMarkWrapper:Do,waterMark:Oo,subContainer:Lo,startButtonWrapper:zo,stopButtonWrapper:qo,startButton:Uo,stopButton:Xo,flipCamera:Ho,changeOrientation:Go,closeButtonWrapper:Vo,closeButton:Yo,horizontalOrientation:Zo,hideButtons:Qo};const Jo="_hideButtons_k86sc_1",Ko="_waterMarkWrapper_k86sc_4",es="_startButtonWrapper_k86sc_7",ts="_stopButtonWrapper_k86sc_8",rs="_hintOne_k86sc_15",as="_onboarding_k86sc_15",os="_skip_k86sc_29",ss="_mobImage_k86sc_38",ns="_hintButtonTwo_k86sc_79",cs="_offsetImg_k86sc_82",is="_loadingFrame_k86sc_89",ls="_circle_k86sc_95",us="_animate_k86sc_1",ds="_firstScreen_k86sc_150",ms="_relativeImage_k86sc_158",ps="_secondScreen_k86sc_162",fs="_thirdScreen_k86sc_168",vs="_relativePointer_k86sc_175",hs="_hintTwo_k86sc_192";var l={hideButtons:Jo,waterMarkWrapper:Ko,startButtonWrapper:es,stopButtonWrapper:ts,hintOne:rs,onboarding:as,skip:os,mobImage:ss,hintButtonTwo:ns,offsetImg:cs,loadingFrame:is,circle:ls,animate:us,firstScreen:ds,relativeImage:ms,secondScreen:ps,thirdScreen:fs,relativePointer:vs,hintTwo:hs};const _s=({hintOneShow:o})=>e.createElement("div",{className:l.hintOne},e.createElement("div",{className:l.thirdScreen+" "+l.onboarding},e.createElement("div",{className:l.relativeImage},e.createElement("img",{src:"/assets/feedOnboarding/camera.png",className:l.mobImage}),e.createElement("div",{className:l.relativePointer},e.createElement("ul",{className:l.loadingFrame},e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle})),e.createElement("p",{className:l.offsetImg},"Tap the screen to lock me in place."))),e.createElement("button",{type:"button",onClick:()=>{o(!1)}}," ","Got it!"," "))),gs=({hintTwoShow:o})=>e.createElement("div",{className:`${l.hintOne} ${l.hintTwo}`},e.createElement("div",{className:l.thirdScreen+" "+l.onboarding},e.createElement("div",{className:l.relativeImage},e.createElement("div",{className:l.relativePointer},e.createElement("ul",{className:l.loadingFrame+" "+l.hintButtonTwo},e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle})),e.createElement("p",{className:l.offsetImg},"Hit record to start the performance."))),e.createElement("button",{type:"button",onClick:()=>{o(!1)}}," ","Got it!"," ")));class Es{element;callback;previousGestureDistance=0;scale=1;constructor(t,a){this.element=t,this.callback=a,this.element.addEventListener("touchstart",this.onTouchStart)}dispose(){this.element.removeEventListener("touchstart",this.onTouchStart),this.element.removeEventListener("touchend",this.onTouchEnd),this.element.removeEventListener("touchmove",this.onTouchMove)}onTouchStart=t=>{t.touches.length===2&&(this.previousGestureDistance=Math.hypot(t.touches[0].pageX-t.touches[1].pageX,t.touches[0].pageY-t.touches[1].pageY),this.element.addEventListener("touchend",this.onTouchEnd),this.element.addEventListener("touchmove",this.onTouchMove))};onTouchEnd=()=>{this.element.removeEventListener("touchmove",this.onTouchMove)};onTouchMove=t=>{const a=Math.hypot(t.touches[0].pageX-t.touches[1].pageX,t.touches[0].pageY-t.touches[1].pageY);this.scale=a/this.previousGestureDistance,this.previousGestureDistance=a,this.callback(this.scale)}}const{isNative:Cs}=He;var S;(function(o){o.OFF="off",o.ON="on",o.STARTING="starting",o.ENDING="ending"})(S||(S={}));const Ss=new vr().setFromAxisAngle(new hr(0,0,1),Math.PI/2),bs=({setContentHidden:o,webxrRecorderActivity:t,feedHintsOnborded:a,setFeedHintsOnborded:s})=>{const n=e.useRef(),[i,u]=r.exports.useState(""),[c,d]=r.exports.useState("");r.exports.useState("");const[b,p]=r.exports.useState(""),[C,h]=r.exports.useState(""),[x,F]=r.exports.useState(""),[M,oe]=r.exports.useState(!1),[se,ne]=r.exports.useState(!1),[N,ht]=r.exports.useState(null),[Te,_t]=r.exports.useState(null),[I,gt]=r.exports.useState(S.OFF),y=r.exports.useRef(null),L=r.exports.useRef(null),ce=r.exports.useRef(null),H=r.exports.useRef(null),z=r.exports.useRef(null),ve=r.exports.useRef(0),G=r.exports.useRef(null),q=_(),V=qe(),he=e.useRef(I),ie=m=>{he.current=m,gt(m)},Et=A(),le=e.useRef(N),Ct=m=>{le.current=m,ht(m)},_e=e.useRef(!1),St=()=>{t||o()};function Be(){console.log("onBackButton recordingState:",he.current),_e.current=!0,ge(),q(E.updateWebXRState(!1,null)),St()}r.exports.useEffect(()=>{console.log("recordingState USE EFFECT:",I)},[I]),r.exports.useEffect(()=>(document.addEventListener("backbutton",Be),G.current||(G.current=new Es(n.current,m=>{L.current&&L.current.scale.multiplyScalar(m)})),a||oe(!0),()=>{document.removeEventListener("backbutton",Be),ve.current&&cancelAnimationFrame(ve.current),y.current&&(console.log("WebXRComponent - dispose player"),y.current.dispose(),y.current=null),G.current&&(console.log("WebXRComponent - dispose zoom handler"),G.current.dispose(),G.current=null),console.log("WebXRComponent - stop plugin"),k.removeAllListeners(),k.stop({}),window.screen.orientation.unlock()}),[]);const Me=()=>{ve.current=requestAnimationFrame(Me);const m=ce.current,g=H.current,j=z.current;!j||(y.current?.handleRender(()=>{}),j.render(m,g))},ue=Et.popups.itemId?.value;r.exports.useEffect(()=>{q(be.getArMediaItem(ue))},[ue]),r.exports.useEffect(()=>{V.fetchingItem.value||Ct(V.item.value)},[V.fetchingItem.value,V,ue]);const je=N?.id;r.exports.useEffect(()=>{if(!je){console.log("Media item is not here yet",ue,V?.fetchingItem.value);return}(async function(){ce.current||(ce.current=new _r);const m=ce.current;L.current||(L.current=new gr);const g=L.current;g.visible=!1,H.current||(H.current=new Er(75,window.innerWidth/window.innerHeight,.001,100));const j=H.current;m.background=null,z.current?(console.log("USE ref Renderer",z.current),console.log("CANVAS is same??",z.current.domElement===n.current)):(console.log("CREATE new Renderer"),z.current=new Cr({alpha:!0,canvas:n.current}));const v=z.current;v.outputEncoding=Sr,v.setSize(window.innerWidth,window.innerHeight),v.domElement.style.position="fixed",v.domElement.style.width="100vw",v.domElement.style.height="100vh",v.domElement.style.zIndex="-1",v.domElement.style.top="0",v.domElement.style.left="0",v.domElement.style.margin="0",v.domElement.style.padding="0",m.add(j),m.add(g),g.position.set(0,0,0),g.scale.setScalar(1),y.current||(y.current=new br({scene:g,renderer:v,worker:new xr,meshFilePath:N.dracosisUrl,videoFilePath:N.audioUrl,manifestFilePath:N.manifestUrl,onMeshBuffering:f=>{},onFrameShow:()=>{}})),requestAnimationFrame(Me),await k.initialize({}).then(f=>{u(f.status),o()}).catch(f=>console.log(f.message)),k.addListener("poseDataReceived",f=>{const W=H.current,U=L.current,{cameraPositionX:wt,cameraPositionY:kt,cameraPositionZ:Nt,cameraRotationX:It,cameraRotationY:Pt,cameraRotationZ:Rt,cameraRotationW:Tt}=f;if(W.quaternion.set(It,Pt,Rt,Tt).multiply(Ss),W.position.set(wt,kt,Nt),W.updateProjectionMatrix(),f.placed){const{anchorPositionX:Ae,anchorPositionY:We,anchorPositionZ:$e,anchorRotationX:De,anchorRotationY:Oe,anchorRotationZ:Le,anchorRotationW:ze}=f,Bt=JSON.stringify([Ae,We,$e,De,Oe,Le,ze]);if(p(Bt),U.quaternion.set(De,Oe,Le,ze),U.position.set(Ae,We,$e),!U.visible){console.log("SET ANCHOR VISIBLE!");const Mt=2,jt=W.position.distanceTo(U.position),At=W.fov*Math.PI/180/2,Wt=jt*Math.tan(At)/Mt*.75;U.scale.setScalar(Wt),U.visible=!0,a||setTimeout(()=>{ne(!0),s(!0)},1e3)}}}),k.addListener("cameraIntrinsicsReceived",f=>{h(JSON.stringify({fX:f.fX,fY:f.fY,cX:f.cX,cY:f.cy,x:f.x,y:f.y}))}),k.start({}).then(()=>{d(Cs?"Camera started on native":"Camera started on web")}).catch(f=>console.log(f.message))})()},[je]);let ge=()=>{if(console.log("finishRecord recordingState:",I),he.current===S.ON){console.log("finishRecord"),console.log("mediaItemRef.current.audioId",le.current),console.log("closeBtnAction",_e),console.log("VIDEO DELAY",Te);const m=le.current.title.replace(/ /gi,"_"),g=new Date().toLocaleTimeString().replace(/[\:\ ]/gi,"_");console.log(g),console.log(m),k.stopRecording({audioId:le.current.audioId,videoDelay:Te,clipTitle:m,clipTime:g}).then(({result:j,filePath:v,nameId:f})=>{if(q(Ke.setLastFeedVideoUrl(v)),q(be.getArMediaItem(null)),F("file://"+v),!_e.current){const W=He.convertFileSrc(v);console.log(W),q(E.updateNewFeedPageState(!0,W,v,f))}ie(S.OFF),q(E.updateWebXRState(!1,null))}).catch(j=>alert(j.message))}else return console.log("Record state is OFF")};function bt(m){return(m/1e3).toFixed(1)}const xt=()=>{if(!window.confirm("Double click to finish the record."))return;ie(S.STARTING);const m=new Date,g=Math.floor(screen.height/2)*2,j=Math.floor(screen.width/2)*2;k.startRecording({isAudio:!0,width:j,height:g,bitRate:6e6,dpi:100,filePath:"/test.mp4"}).then(({status:v})=>{if(console.log("RECORDING, STATUS IS",v),y.current){y.current.video.muted=!0,console.log("Player.play()!"),y.current.play();const f=new Date;_t(parseFloat(bt(f.getTime()-m.getTime())))}ie(S.ON)}).catch(v=>{alert(v.message),ie(S.OFF)})},Ft=()=>{I===S.OFF?xt():I===S.ON&&ge()},yt=m=>{if(I!==S.OFF)return;const g={x:m.clientX*window.devicePixelRatio,y:m.clientY*window.devicePixelRatio};y.current&&y.current.currentFrame<=0&&y.current.playOneFrame(),k.handleTap(g)};return e.createElement(e.Fragment,null,M?e.createElement(_s,{hintOneShow:oe}):"",se?e.createElement(gs,{hintTwoShow:ne}):"",e.createElement("div",{className:"plugintestControls"},e.createElement("div",{className:I===S.OFF?"":B.hideButtons},e.createElement("section",{className:B.waterMarkWrapper},e.createElement("section",{className:B.waterMark},e.createElement("section",{className:B.subContainer}))),e.createElement("button",{type:"button",className:B.flipCamera,onClick:()=>{}},e.createElement(vt,null)),e.createElement("section",{className:I===S.OFF?B.startButtonWrapper:B.stopButtonWrapper},e.createElement("button",{type:"button",className:I===S.OFF?B.startButton:B.stopButton,onClick:()=>Ft()},e.createElement(ft,null))))),e.createElement("canvas",{ref:n,className:B.arcCanvas,id:"arcCanvas",onClick:m=>yt(m),onDoubleClick:ge}))},xs=({webxrRecorderActivity:o,feedHintsOnborded:t,setFeedHintsOnborded:a,setContentHidden:s})=>{const n=A(),i=()=>n?.popups?.webxr?.value===!0&&e.createElement("div",null,e.createElement(bs,{feedHintsOnborded:t,setFeedHintsOnborded:a,setContentHidden:s,webxrRecorderActivity:o}));return r.exports.useEffect(()=>{i()},[n?.popups?.webxr.value]),i()},Fs=({view:o,setView:t})=>e.createElement(e.Fragment,null,o==="terms"?e.createElement(Fr,{setView:t}):null,o==="policy"?e.createElement(yr,{setView:t}):null),ys=o=>{Ue();const t=_(),a=Ge(),[s,n]=r.exports.useState(!0);r.exports.useState(!0);const[i,u]=r.exports.useState(!0);r.exports.useState(!0);const[c,d]=r.exports.useState("featured"),b=Z(),p=b.creators.currentCreator,C=new Date(Date.now()).toISOString();r.exports.useEffect(()=>{!!p?.value&&!!p?.createdAt?.value&&C.slice(0,-5)===p?.createdAt?.value?.slice(0,-5)&&n(!1)},[p]);const x=Ve().webxrnative.value,F=pe?$.isIos:"",M=b.creators.splashTimeout.value,oe=x?$.hideContentOnRecord:"";if(!p?.value||p?.value===null||M&&p?.isBlocked?.value==!1){const N=setTimeout(()=>{t(Xt.setStateCreators(!1)),clearTimeout(N)},5e3);return e.createElement(rt,null)}const se=N=>{N&&N()};if(p?.isBlocked?.value==!0)return e.createElement("div",null,e.createElement(rt,null),e.createElement(No,null));const ne=()=>{t(Ye.changeWebXrNative())};return e.createElement(e.Fragment,null,c==="terms"||c==="policy"?e.createElement(Fs,{view:c,setView:d}):e.createElement("div",{className:F+" "+oe},e.createElement("div",{className:x?$.hideContent+" "+$.viewport:$.viewport},e.createElement(Ht,{setView:d,onGoRegistration:se}),e.createElement(ia,{view:c,setView:d}),e.createElement(J,{setView:d,onGoRegistration:se}),p?.value&&(!p.terms.value||!p.policy.value)&&a.user.userRole.value==="user"||a.user.userRole.value==="guest"&&e.createElement(Fo,{view:c,setView:d}),e.createElement(Ba,null),e.createElement(xs,{feedHintsOnborded:i,webxrRecorderActivity:x,setContentHidden:ne,setFeedHintsOnborded:u}),e.createElement(ma,{webxrRecorderActivity:x,setView:d}),e.createElement(ha,{webxrRecorderActivity:x,setView:d}),e.createElement(Ea,{webxrRecorderActivity:x,setView:d}),e.createElement(Ma,{setView:d}),e.createElement(qa,{setView:d}))))},Dn=({})=>{const o=_(),t=Ge(),a=Ut(),s=a?.authUser?a.authUser.accessToken:void 0;r.exports.useEffect(()=>{o($t.doLoginAuto(!0)),o(Ye.getWebXrNative())},[s]),r.exports.useEffect(()=>{t?.authUser?.accessToken&&t.user.id.value&&o(de.createCreator())},[t.isLoggedIn.value,t.user.id.value]);const[n,i]=r.exports.useState(!0);r.exports.useState(!0),r.exports.useState(!0),r.exports.useState(!0),r.exports.useState(!0),r.exports.useState("featured");const c=Z().creators.currentCreator.value,d=new Date(Date.now()).toISOString();r.exports.useEffect(()=>{!!c&&!!c.createdAt&&d.slice(0,-5)===c.createdAt.slice(0,-5)&&i(!1)},[c]);const b=Ve().webxrnative.value;return pe&&$.isIos,b&&$.hideContentOnRecord,e.createElement(ys,null)};export{Dn as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOTI5MjY4NDMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC1jb3JlL3NyYy91dGlsL3BsYXRmb3JtQ2hlY2sudHMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1BlcnNvblBpbi5qcyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0NyZWF0b3JzL2luZGV4LnRzeCIsIi4uLy4uL3NyYy9yZWR1Y2Vycy90aGVmZWVkc0ZpcmVzL1RoZUZlZWRzRmlyZXNTZXJ2aWNlLnRzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvVGhlRmVlZHNDYXJkL2luZGV4LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1RoZUZlZWQvaW5kZXgudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvRmVlZE1lbnUvaW5kZXgudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvU2hhcmVkTW9kYWwvaW5kZXgudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvcG9wdXBzL0NyZWF0b3JQb3B1cC9pbmRleC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9wb3B1cHMvRmVlZFBvcHVwL2luZGV4LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL3BvcHVwcy9DcmVhdG9yRm9ybVBvcHVwL2luZGV4LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0FyTWVkaWEvaW5kZXgudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvcG9wdXBzL0FyTWVkaWFQb3B1cC9pbmRleC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9wb3B1cHMvRmVlZEZvcm1Qb3B1cC9pbmRleC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9TaGFyZUZvcm0vU2hhcmVGb3JtLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL3BvcHVwcy9TaGFyZWRGb3JtUG9wdXAvaW5kZXgudHN4IiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy93aXRoU3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0NvbnRlbnQvRGlhbG9nQ29udGVudC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dDb250ZW50VGV4dC9EaWFsb2dDb250ZW50VGV4dC5qcyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1Rlcm1zYW5kUG9saWN5L2luZGV4LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0Jsb2NrZWQvaW5kZXgudHN4IiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9WaWRlb2NhbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvRmxpcENhbWVyYUlvcy5qcyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1dlYlhySGludHMvSGludE9uZS50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9XZWJYckhpbnRzL0hpbnRUd28udHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvV2ViWFJQbHVnaW4vWm9vbUdlc3R1cmVIYW5kbGVyLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1dlYlhSUGx1Z2luL2luZGV4LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL3BvcHVwcy9XZWJYUi9pbmRleC50c3giLCIuLi8uLi9zcmMvcGFnZXMvVGVtcG9yYXJ5U29sdXRpb24udHN4IiwiLi4vLi4vc3JjL3BhZ2VzL0FwcC50c3giLCIuLi8uLi9zcmMvcGFnZXMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc0lPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICEod2luZG93IGFzIGFueSkuTVNTdHJlYW1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyYy00Ljk3IDAtOSA0LjAzLTkgOSAwIDQuMTcgMi44NCA3LjY3IDYuNjkgOC42OUwxMiAyMmwyLjMxLTIuMzFDMTguMTYgMTguNjcgMjEgMTUuMTcgMjEgMTFjMC00Ljk3LTQuMDMtOS05LTl6bTAgMmMxLjY2IDAgMyAxLjM0IDMgM3MtMS4zNCAzLTMgMy0zLTEuMzQtMy0zIDEuMzQtMyAzLTN6bTAgMTQuM2MtMi41IDAtNC43MS0xLjI4LTYtMy4yMi4wMy0xLjk5IDQtMy4wOCA2LTMuMDggMS45OSAwIDUuOTcgMS4wOSA2IDMuMDgtMS4yOSAxLjk0LTMuNSAzLjIyLTYgMy4yMnpcIlxufSksICdQZXJzb25QaW4nKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5pbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZE1lZGlhLCBUeXBvZ3JhcGh5LCBBdmF0YXIgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcbmltcG9ydCBWZXJpZmllZFVzZXJJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9WZXJpZmllZFVzZXInXG5pbXBvcnQgUGVyc29uUGluSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUGVyc29uUGluJ1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMsIERpc3BhdGNoIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyB1c2VDcmVhdG9yU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9jcmVhdG9yL0NyZWF0b3JTdGF0ZSdcbmltcG9ydCB7IENyZWF0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvY3JlYXRvci9DcmVhdG9yU2VydmljZSdcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9DcmVhdG9ycy5tb2R1bGUuc2NzcydcbmltcG9ydCB7IFBvcHVwc1N0YXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL3BvcHVwc1N0YXRlL1BvcHVwc1N0YXRlU2VydmljZSdcblxuaW50ZXJmYWNlIFByb3BzIHt9XG5cbmNvbnN0IENyZWF0b3JzID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCBjcmVhdG9yc1N0YXRlID0gdXNlQ3JlYXRvclN0YXRlKClcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2goQ3JlYXRvclNlcnZpY2UuZ2V0Q3JlYXRvcnMoKSlcbiAgfSwgW10pXG4gIGNvbnN0IGNyZWF0b3JzID1cbiAgICBjcmVhdG9yc1N0YXRlLmNyZWF0b3JzLmNyZWF0b3JzPy52YWx1ZSAmJiBjcmVhdG9yc1N0YXRlLmNyZWF0b3JzLmZldGNoaW5nQ3JlYXRvcnM/LnZhbHVlID09PSBmYWxzZVxuICAgICAgPyBjcmVhdG9yc1N0YXRlLmNyZWF0b3JzLmNyZWF0b3JzLnZhbHVlXG4gICAgICA6IG51bGxcblxuICBjb25zdCBoYW5kbGVDcmVhdG9yVmlldyA9IChpZCkgPT4ge1xuICAgIGRpc3BhdGNoKFBvcHVwc1N0YXRlU2VydmljZS51cGRhdGVDcmVhdG9yUGFnZVN0YXRlKGZhbHNlKSlcbiAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlQ3JlYXRvclBhZ2VTdGF0ZSh0cnVlLCBpZCkpXG4gIH1cblxuICBjb25zdCBjdXJyZW50Q3JlYXRvciA9IGNyZWF0b3JzU3RhdGUuY3JlYXRvcnMuY3VycmVudENyZWF0b3I/LmlkPy52YWx1ZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKENyZWF0b3JTZXJ2aWNlLmdldEJsb2NrZWRMaXN0KGN1cnJlbnRDcmVhdG9yKSlcbiAgfSwgW10pXG4gIGNvbnN0IGJsYWNrTGlzdCA9IGNyZWF0b3JzU3RhdGU/LmNyZWF0b3JzPy5ibG9ja2VkLnZhbHVlXG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5jcmVhdG9yQ29udGFpbmVyfT5cbiAgICAgIHsvKiAgICAgPGgzPkZlYXR1cmVkIENyZWF0b3JzPC9oMz4gKi99XG4gICAgICB7Y3JlYXRvcnMgJiZcbiAgICAgICAgYmxhY2tMaXN0ICYmXG4gICAgICAgIGNyZWF0b3JzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgY3JlYXRvcnNcbiAgICAgICAgICA/LmZpbHRlcigocGVyc29uKSA9PiBwZXJzb24uaXNCbG9ja2VkIDwgMSlcbiAgICAgICAgICAubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IChcbiAgICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmNyZWF0b3JJdGVtfVxuICAgICAgICAgICAgICBlbGV2YXRpb249ezB9XG4gICAgICAgICAgICAgIGtleT17aXRlbUluZGV4fVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDcmVhdG9yVmlldyhpdGVtLmlkKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2l0ZW0uYXZhdGFyID8gKFxuICAgICAgICAgICAgICAgIDxDYXJkTWVkaWEgY2xhc3NOYW1lPXtzdHlsZXMucHJldmlld0ltYWdlfSBpbWFnZT17aXRlbS5hdmF0YXIgfHwgPFBlcnNvblBpbkljb24gLz59IHRpdGxlPXtpdGVtLm5hbWV9IC8+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMucHJldmlld0ltYWdlfT5cbiAgICAgICAgICAgICAgICAgIDxBdmF0YXIgY2xhc3NOYW1lPXtzdHlsZXMuYXZhdGFyUGxhY2Vob2xkZXJ9IC8+XG4gICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtzdHlsZXMudGl0bGVDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAge2l0ZW0ubmFtZX1cbiAgICAgICAgICAgICAgICAgIHtpdGVtLnZlcmlmaWVkID09PSAxICYmIChcbiAgICAgICAgICAgICAgICAgICAgPFZlcmlmaWVkVXNlckljb24gaHRtbENvbG9yPVwiIzAwN0FGRlwiIHN0eWxlPXt7IGZvbnRTaXplOiAnMTNweCcsIG1hcmdpbjogJzAgMCAwIDVweCcgfX0gLz5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17c3R5bGVzLnVzZXJuYW1lQ29udGFpbmVyfT57aXRlbS51c2VybmFtZX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgKSl9XG4gICAgPC9zZWN0aW9uPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IENyZWF0b3JzXG4iLCIvKipcbiAqIEBhdXRob3IgR2xlYiBPcmRpbnNreSA8Z2xlYm9yZGluc2tpampAZ21haWwuY29tPlxuICovXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9jb21tb24vcmVkdWNlcnMvYWxlcnQvQWxlcnRTZXJ2aWNlJ1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9mZWF0aGVycydcbmltcG9ydCB7IFRoZUZlZWRzQWN0aW9uIH0gZnJvbSAnLi4vdGhlZmVlZHMvVGhlRmVlZHNBY3Rpb25zJ1xuXG4vLyB0aGVmZWVkc1xuLy8gVGhlRmVlZHNcbi8vIFRIRUZFRURTXG5cbmV4cG9ydCBjb25zdCBUaGVGZWVkc0ZpcmVzU2VydmljZSA9IHtcbiAgZ2V0VGhlRmVlZHNGaXJlczogKHRoZWZlZWRzSWQ6IHN0cmluZywgc2V0VGhlZmVlZHNGaXJlczogYW55KSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaDogRGlzcGF0Y2gsIGdldFN0YXRlOiBhbnkpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gICAgICAgZGlzcGF0Y2goZmV0Y2hpbmdUaGVGZWVkc0ZpcmVzKCkpO1xuICAgICAgICBjb25zdCB0aGVmZWVkc1Jlc3VsdHMgPSBhd2FpdCBjbGllbnQuc2VydmljZSgndGhlZmVlZHMtZmlyZXMnKS5maW5kKHsgcXVlcnk6IHsgdGhlZmVlZHNJZDogdGhlZmVlZHNJZCB9IH0pXG4gICAgICAgIC8vICAgICAgIGNvbnNvbGUubG9nKHRoZWZlZWRzUmVzdWx0cylcblxuICAgICAgICAvLyAgICAgICBkaXNwYXRjaCh0aGVmZWVkc0ZpcmVzUmV0cmlldmVkKHRoZWZlZWRzUmVzdWx0cy5kYXRhLCB0aGVmZWVkc0lkKSk7XG4gICAgICAgIHNldFRoZWZlZWRzRmlyZXModGhlZmVlZHNSZXN1bHRzKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBhZGRGaXJlVG9UaGVGZWVkczogKHRoZWZlZWRzSWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZlZWRzRmlyZSA9IGF3YWl0IGNsaWVudC5zZXJ2aWNlKCd0aGVmZWVkcy1maXJlcycpLmNyZWF0ZSh7IHRoZWZlZWRzSWQgfSlcbiAgICAgICAgY29uc3QgZmVlZHNGaXJlU3RvcmUgPSB7XG4gICAgICAgICAgaWQ6IGZlZWRzRmlyZS5jcmVhdG9ySWRcbiAgICAgICAgfVxuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgZGlzcGF0Y2goYWRkVGhlRmVlZHNGaXJlKGZlZWRzRmlyZVN0b3JlKSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVtb3ZlRmlyZVRvVGhlRmVlZHM6ICh0aGVmZWVkc0lkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjbGllbnQuc2VydmljZSgndGhlZmVlZHMtZmlyZXMnKS5yZW1vdmUodGhlZmVlZHNJZClcbiAgICAgICAgZGlzcGF0Y2goVGhlRmVlZHNBY3Rpb24ucmVtb3ZlVGhlRmVlZHNGaXJlKHRoZWZlZWRzSWQpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEBhdXRob3IgVGFueWEgVnlrbGl1ayA8dGFueWEudnlrbGl1a0BnbWFpbC5jb20+LCBHbGViIE9yZGluc2t5XG4gKi9cbmltcG9ydCB7IFBsdWdpbnMgfSBmcm9tICdAY2FwYWNpdG9yL2NvcmUnXG5pbXBvcnQgQ2FyZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DYXJkJ1xuaW1wb3J0IENhcmRDb250ZW50IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NhcmRDb250ZW50J1xuaW1wb3J0IENhcmRNZWRpYSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DYXJkTWVkaWEnXG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5J1xuaW1wb3J0IFRlbGVncmFtSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvVGVsZWdyYW0nXG5pbXBvcnQgVmlzaWJpbGl0eUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1Zpc2liaWxpdHknXG5pbXBvcnQgV2hhdHNob3RJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9XaGF0c2hvdCdcbmltcG9ydCB7IEZlZWQgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL0ZlZWQnXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgY29ubmVjdCwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IHVzZUNyZWF0b3JTdGF0ZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL2NyZWF0b3IvQ3JlYXRvclN0YXRlJ1xuaW1wb3J0IHsgVGhlRmVlZHNGaXJlc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy90aGVmZWVkc0ZpcmVzL1RoZUZlZWRzRmlyZXNTZXJ2aWNlJ1xuaW1wb3J0IENyZWF0b3JBc1RpdGxlIGZyb20gJy4uL0NyZWF0b3JBc1RpdGxlJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1RoZUZlZWRzQ2FyZC5tb2R1bGUuc2NzcydcblxuY29uc3QgeyBTaGFyZSB9ID0gUGx1Z2luc1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBmZWVkOiBGZWVkXG59XG5jb25zdCBUaGVGZWVkc0NhcmQgPSAocHJvcHM6IFByb3BzKTogYW55ID0+IHtcbiAgY29uc3QgW2J1dHRvblBvcHVwLCBzZXRCdXR0b25Qb3B1cF0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW2ZpcmVkLCBzZXRGaXJlZF0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgeyBmZWVkIH0gPSBwcm9wc1xuICBjb25zdCBbZmlyZWRDb3VudCwgc2V0RmlyZWRDb3VudF0gPSB1c2VTdGF0ZShmZWVkLmZpcmVzKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgW3RoZWZlZWRzRmlyZXNDcmVhdG9ycywgc2V0VGhlZmVlZHNGaXJlc0NyZWF0b3JzXSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgY29uc3QgaGFuZGxlQWRkRmlyZUNsaWNrID0gKGZlZWRJZCkgPT4ge1xuICAgIGRpc3BhdGNoKFRoZUZlZWRzRmlyZXNTZXJ2aWNlLmFkZEZpcmVUb1RoZUZlZWRzKGZlZWRJZCkpXG4gICAgc2V0RmlyZWRDb3VudChmaXJlZENvdW50ICsgMSlcbiAgICBzZXRGaXJlZCh0cnVlKVxuICB9XG4gIGNvbnN0IGhhbmRsZVJlbW92ZUZpcmVDbGljayA9IChmZWVkSWQpID0+IHtcbiAgICBkaXNwYXRjaChUaGVGZWVkc0ZpcmVzU2VydmljZS5yZW1vdmVGaXJlVG9UaGVGZWVkcyhmZWVkSWQpKVxuICAgIHNldEZpcmVkQ291bnQoZmlyZWRDb3VudCAtIDEpXG4gICAgc2V0RmlyZWQoZmFsc2UpXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKFRoZUZlZWRzRmlyZXNTZXJ2aWNlLmdldFRoZUZlZWRzRmlyZXMoZmVlZC5pZCwgc2V0VGhlZmVlZHNGaXJlc0NyZWF0b3JzKSlcbiAgfSwgW10pXG5cbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IHNoYXJlVmlhID0gKCkgPT4ge1xuICAgIFNoYXJlLnNoYXJlKHtcbiAgICAgIHRpdGxlOiB0KCdzb2NpYWw6c2hhcmVGb3JtLmFyY01lZGlhJyksXG4gICAgICB0ZXh0OiB0KCdzb2NpYWw6c2hhcmVGb3JtLnZpZGVvQ3JlYXRlZCcpLFxuICAgICAgdXJsOiBlbmNvZGVVUkkoZmVlZC52aWRlb1VybCksXG4gICAgICBkaWFsb2dUaXRsZTogdCgnc29jaWFsOnNoYXJlRm9ybS5zaGFyZVdpdGhCdWRkaWVzJylcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgY3JlYXRvcklkID0gdXNlQ3JlYXRvclN0YXRlKCkuY3JlYXRvcnMuY3VycmVudENyZWF0b3I/LmlkPy52YWx1ZVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0RmlyZWQoISF0aGVmZWVkc0ZpcmVzQ3JlYXRvcnM/LmRhdGEuZmluZCgoaSkgPT4gaS5pZCA9PT0gY3JlYXRvcklkKSlcbiAgfSwgW3RoZWZlZWRzRmlyZXNDcmVhdG9yc10pXG5cbiAgcmV0dXJuIGZlZWQgPyAoXG4gICAgPD5cbiAgICAgIDxDYXJkIGNsYXNzTmFtZT17c3R5bGVzLnRpcEl0ZW19IHNxdWFyZT17ZmFsc2V9IGVsZXZhdGlvbj17MH0ga2V5PXtmZWVkLmlkfT5cbiAgICAgICAge2ZlZWQudmlkZW9VcmwgPyAoXG4gICAgICAgICAgPENhcmRNZWRpYVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucHJldmlld0ltYWdlfVxuICAgICAgICAgICAgY29tcG9uZW50PVwidmlkZW9cIlxuICAgICAgICAgICAgc3JjPXtmZWVkLnZpZGVvVXJsfVxuICAgICAgICAgICAgdGl0bGU9e2ZlZWQudGl0bGV9XG4gICAgICAgICAgICBjb250cm9sc1xuICAgICAgICAgIC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgJydcbiAgICAgICAgKX1cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuZXllTGluZX0+XG4gICAgICAgICAge2ZlZWQudmlld3NDb3VudH1cbiAgICAgICAgICA8VmlzaWJpbGl0eUljb24gc3R5bGU9e3sgZm9udFNpemU6ICcxNnB4JyB9fSAvPlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9e3N0eWxlcy5jYXJkQ29udGVudH0+XG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuaWNvbnNDb250YWluZXJ9PlxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtzdHlsZXMudGl0bGVDb250YWluZXJ9IGd1dHRlckJvdHRvbSB2YXJpYW50PVwiaDRcIj5cbiAgICAgICAgICAgICAge2ZlZWQudGl0bGV9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8Q3JlYXRvckFzVGl0bGUgY3JlYXRvcj17ZmVlZC5jcmVhdG9yfSAvPlxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuaWNvblN1YkNvbnRhaW5lcn0+XG4gICAgICAgICAgICAgIHtmaXJlZCA/IChcbiAgICAgICAgICAgICAgICA8V2hhdHNob3RJY29uXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5maXJlSWNvbn1cbiAgICAgICAgICAgICAgICAgIGh0bWxDb2xvcj1cIiNGRjYyMDFcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlUmVtb3ZlRmlyZUNsaWNrKGZlZWQuaWQpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPFdoYXRzaG90SWNvblxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZmlyZUljb259XG4gICAgICAgICAgICAgICAgICBodG1sQ29sb3I9XCIjREREREREXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUFkZEZpcmVDbGljayhmZWVkLmlkKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8VGVsZWdyYW1JY29uIG9uQ2xpY2s9e3NoYXJlVmlhfSAvPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUyXCI+e2ZpcmVkQ291bnR9IGZsYW1lczwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e3N0eWxlcy5jYXJ0VGV4dH0gdmFyaWFudD1cImg2XCI+XG4gICAgICAgICAgICB7ZmVlZC5kZXNjcmlwdGlvbn1cbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICA8L0NhcmQ+XG4gICAgPC8+XG4gICkgOiAoXG4gICAgPD48Lz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVGZWVkc0NhcmRcbiIsIi8qKlxuICogQGF1dGhvciBUYW55YSBWeWtsaXVrIDx0YW55YS52eWtsaXVrQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcbi8vIGltcG9ydCB7IHNlbGVjdEZlZWRzU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9mZWVkL3NlbGVjdG9yJztcbi8vIGltcG9ydCB7IGdldEZlZWRzIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvZmVlZC9zZXJ2aWNlJztcbmltcG9ydCB7IFRoZUZlZWRzU2VydmljZSB9IGZyb20gJ0B4cmVuZ2luZS9zb2NpYWwvc3JjL3JlZHVjZXJzL3RoZWZlZWRzL1RoZUZlZWRzU2VydmljZSdcbmltcG9ydCB7IHVzZVRoZUZlZWRzU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9yZWR1Y2Vycy90aGVmZWVkcy9UaGVGZWVkc1N0YXRlJ1xuXG5pbXBvcnQgVGhlRmVlZHNDYXJkIGZyb20gJy4uL1RoZUZlZWRzQ2FyZCdcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1RoZUZlZWQubW9kdWxlLnNjc3MnXG5pbXBvcnQgeyB1c2VGZWVkU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9mZWVkL0ZlZWRTdGF0ZSdcblxuaW50ZXJmYWNlIFByb3BzIHt9XG5cbmNvbnN0IFRoZUZlZWQgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBsZXQgZmVlZHNMaXN0ID0gbnVsbFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKFRoZUZlZWRzU2VydmljZS5nZXRUaGVGZWVkc05ldygpKVxuICB9LCBbXSlcbiAgY29uc3QgdGhlRmVlZHNTdGF0ZSA9IHVzZVRoZUZlZWRzU3RhdGUoKVxuXG4gIGNvbnN0IFRoZUZlZWRzTGlzdCA9IHRoZUZlZWRzU3RhdGU/LnRoZWZlZWRzPy52YWx1ZSB8fCBbXVxuICAvLyAgICAgdXNlRWZmZWN0KCgpPT4gY29uc29sZS5sb2coVGhlRmVlZHNMaXN0KSwgW1RoZUZlZWRzTGlzdF0pO1xuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLnRoZWZlZWRDb250YWluZXJ9PlxuICAgICAge1RoZUZlZWRzTGlzdCAmJiBUaGVGZWVkc0xpc3QubGVuZ3RoID4gMCA/IChcbiAgICAgICAgVGhlRmVlZHNMaXN0Lm1hcCgoaXRlbSwga2V5KSA9PiA8VGhlRmVlZHNDYXJkIGtleT17a2V5fSBmZWVkPXtpdGVtfSAvPilcbiAgICAgICkgOiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT17c3R5bGVzLm5vQ29udGVudH0+Q29taW5nIHNvb24uLi48L3A+XG4gICAgICApfVxuICAgIDwvc2VjdGlvbj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVGZWVkXG4iLCIvKipcbiAqIEBhdXRob3IgVGFueWEgVnlrbGl1ayA8dGFueWEudnlrbGl1a0BnbWFpbC5jb20+XG4gKi9cbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJ1xuaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgQ3JlYXRvcnMgZnJvbSAnLi4vQ3JlYXRvcnMnXG5pbXBvcnQgRmVhdHVyZWQgZnJvbSAnLi4vRmVhdHVyZWQnXG5pbXBvcnQgVGhlRmVlZCBmcm9tICcuLi9UaGVGZWVkJ1xuLy8gaW1wb3J0IFRpcHNBbmRUcmlja3MgZnJvbSAnLi4vVGlwc0FuZFRyaWNrcydcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBGZWVkU2VydmljZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL2ZlZWQvRmVlZFNlcnZpY2UnXG5pbXBvcnQgeyB1c2VGZWVkU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9mZWVkL0ZlZWRTdGF0ZSdcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0ZlZWRNZW51Lm1vZHVsZS5zY3NzJ1xuXG5jb25zdCBGZWVkTWVudSA9ICh7IHZpZXcsIHNldFZpZXcgfSkgPT4ge1xuICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4oKVxuICBjb25zdCBmZWF0dXJlZFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PigpXG4gIGNvbnN0IGNyZWF0b3JzUmVmID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KClcbiAgY29uc3QgdGhlZmVlZFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PigpXG4gIGNvbnN0IHRpcHNhbmR0cmlja3NSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4oKVxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IGZlZWRzU3RhdGUgPSB1c2VGZWVkU3RhdGUoKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2goRmVlZFNlcnZpY2UuZ2V0RmVlZHMoJ2ZlYXR1cmVkJykpXG4gIH0sIFtdKVxuXG4gIGNvbnN0IHBhZGRpbmcgPSA0MFxuICBjb25zdCBoYW5kbGVNZW51Q2xpY2sgPSAodmlldykgPT4ge1xuICAgIHNldFZpZXcodmlldylcblxuICAgIGxldCBsZWZ0U2Nyb2xsUG9zID0gMFxuICAgIHN3aXRjaCAodmlldykge1xuICAgICAgY2FzZSAnY3JlYXRvcnMnOlxuICAgICAgICBsZWZ0U2Nyb2xsUG9zID0gY3JlYXRvcnNSZWYuY3VycmVudC5vZmZzZXRMZWZ0IC0gcGFkZGluZ1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAndGhlZmVlZCc6XG4gICAgICAgIGxlZnRTY3JvbGxQb3MgPSB0aGVmZWVkUmVmLmN1cnJlbnQub2Zmc2V0TGVmdCAtIHBhZGRpbmdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3RpcHNhbmR0cmlja3MnOlxuICAgICAgICBsZWZ0U2Nyb2xsUG9zID0gdGlwc2FuZHRyaWNrc1JlZi5jdXJyZW50Lm9mZnNldExlZnQgLSBwYWRkaW5nXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZWZ0U2Nyb2xsUG9zID0gMFxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBjb250YWluZXJSZWYuY3VycmVudC5zY3JvbGxUbyh7IGxlZnQ6IGxlZnRTY3JvbGxQb3MsIGJlaGF2aW9yOiAnc21vb3RoJyB9KVxuICB9XG4gIGxldCBjb250ZW50ID0gbnVsbFxuICBzd2l0Y2ggKHZpZXcpIHtcbiAgICBjYXNlICdjcmVhdG9ycyc6XG4gICAgICBjb250ZW50ID0gPENyZWF0b3JzIC8+XG4gICAgICBicmVha1xuICAgIGNhc2UgJ3RoZWZlZWQnOlxuICAgICAgY29udGVudCA9IDxUaGVGZWVkIC8+XG4gICAgICBicmVha1xuICAgIC8vIGNhc2UgJ3RpcHNhbmR0cmlja3MnOlxuICAgIC8vICAgY29udGVudCA9IDxUaXBzQW5kVHJpY2tzIC8+XG4gICAgLy8gICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb250ZW50ID0gPEZlYXR1cmVkIHRoaXNEYXRhPXtmZWVkc1N0YXRlLmZlZWRzLmZlZWRzRmVhdHVyZWQudmFsdWV9IC8+XG4gICAgICBicmVha1xuICB9XG4gIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgZmVhdHVyZWQ6IFtzdHlsZXMuZmVhdHVyZWRCdXR0b24sIHZpZXcgPT09ICdmZWF0dXJlZCcgJiYgc3R5bGVzLmFjdGl2ZV0sXG4gICAgY3JlYXRvcnM6IFtzdHlsZXMuY3JlYXRvcnNCdXR0b24sIHZpZXcgPT09ICdjcmVhdG9ycycgJiYgc3R5bGVzLmFjdGl2ZV0sXG4gICAgdGhlZmVlZDogW3N0eWxlcy50aGVmZWVkQnV0dG9uLCB2aWV3ID09PSAndGhlZmVlZCcgJiYgc3R5bGVzLmFjdGl2ZV0sXG4gICAgdGlwc2FuZHRyaWNrczogW3N0eWxlcy50aXBzYW5kdHJpY2tzQnV0dG9uLCB2aWV3ID09PSAndGlwc2FuZHRyaWNrcycgJiYgc3R5bGVzLmFjdGl2ZV1cbiAgfVxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8bmF2IGNsYXNzTmFtZT17c3R5bGVzLmZlZWRNZW51Q29udGFpbmVyfT5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuc3ViV3JhcHBlcn0gcmVmPXtjb250YWluZXJSZWZ9PlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLmZlZWRNZW51fT5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgcmVmPXtmZWF0dXJlZFJlZn1cbiAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc1snZmVhdHVyZWQnXS5qb2luKCcgJyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZU1lbnVDbGljaygnZmVhdHVyZWQnKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3QoJ3NvY2lhbDpmZWVkTWVudS5mZWF0dXJlZCcpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIHJlZj17Y3JlYXRvcnNSZWZ9XG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXNbJ2NyZWF0b3JzJ10uam9pbignICcpfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVNZW51Q2xpY2soJ2NyZWF0b3JzJyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdzb2NpYWw6ZmVlZE1lbnUuY3JlYXRvcnMnKX1cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgey8qPEJ1dHRvbiovfVxuICAgICAgICAgICAgey8qICByZWY9e3RoZWZlZWRSZWZ9Ki99XG4gICAgICAgICAgICB7LyogIHZhcmlhbnQ9XCJjb250YWluZWRcIiovfVxuICAgICAgICAgICAgey8qICBjbGFzc05hbWU9e2NsYXNzZXNbJ3RoZWZlZWQnXS5qb2luKCcgJyl9Ki99XG4gICAgICAgICAgICB7LyogIG9uQ2xpY2s9eygpID0+IGhhbmRsZU1lbnVDbGljaygndGhlZmVlZCcpfSovfVxuICAgICAgICAgICAgey8qPiovfVxuICAgICAgICAgICAgey8qICB7dCgnc29jaWFsOmZlZWRNZW51LmZlZWQnKX0qL31cbiAgICAgICAgICAgIHsvKjwvQnV0dG9uPiovfVxuICAgICAgICAgICAgey8qPEJ1dHRvbiovfVxuICAgICAgICAgICAgey8qICByZWY9e3RpcHNhbmR0cmlja3NSZWZ9Ki99XG4gICAgICAgICAgICB7LyogIHZhcmlhbnQ9XCJjb250YWluZWRcIiovfVxuICAgICAgICAgICAgey8qICBjbGFzc05hbWU9e2NsYXNzZXNbJ3RpcHNhbmR0cmlja3MnXS5qb2luKCcgJyl9Ki99XG4gICAgICAgICAgICB7LyogIG9uQ2xpY2s9eygpID0+IGhhbmRsZU1lbnVDbGljaygndGlwc2FuZHRyaWNrcycpfSovfVxuICAgICAgICAgICAgey8qPiovfVxuICAgICAgICAgICAgey8qICB7dCgnc29jaWFsOmZlZWRNZW51LnRpcHMnKX0qL31cbiAgICAgICAgICAgIHsvKjwvQnV0dG9uPiovfVxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgPC9uYXY+XG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5jb250ZW50fT57Y29udGVudH08L3NlY3Rpb24+XG4gICAgPC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVlZE1lbnVcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJ1xuaW1wb3J0IERpYWxvZyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2cnXG5pbXBvcnQgRGlhbG9nQWN0aW9ucyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2dBY3Rpb25zJ1xuaW1wb3J0IERpYWxvZ1RpdGxlIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ1RpdGxlJ1xuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW4/OiBhbnlcbiAgb3BlbjogYm9vbGVhblxuICBUcmFuc2l0aW9uQ29tcG9uZW50PzogYW55XG4gIG9uQ2xvc2U/OiBhbnlcbiAgdGl0bGU/OiBzdHJpbmdcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG59XG5cbmltcG9ydCB7IFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3RyYW5zaXRpb25zJ1xuaW1wb3J0IFNsaWRlIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1NsaWRlJ1xuXG5jb25zdCBUcmFuc2l0aW9uID0gUmVhY3QuZm9yd2FyZFJlZihcbiAgKHByb3BzOiBUcmFuc2l0aW9uUHJvcHMgJiB7IGNoaWxkcmVuPzogUmVhY3QuUmVhY3RFbGVtZW50PGFueSwgYW55PiB9LCByZWY6IFJlYWN0LlJlZjx1bmtub3duPikgPT4ge1xuICAgIHJldHVybiA8U2xpZGUgZGlyZWN0aW9uPVwidXBcIiByZWY9e3JlZn0gey4uLnByb3BzfSAvPlxuICB9XG4pXG5cbmNvbnN0IFNoYXJlZE1vZGFsID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGNoaWxkcmVuLCBvcGVuLCBvbkNsb3NlLCB0aXRsZSwgY2xhc3NOYW1lIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxEaWFsb2dcbiAgICAgIG9wZW49e29wZW59XG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50PXtUcmFuc2l0aW9ufVxuICAgICAga2VlcE1vdW50ZWRcbiAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgIGFyaWEtbGFiZWxsZWRieT1cImFsZXJ0LWRpYWxvZy1zbGlkZS10aXRsZVwiXG4gICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiYWxlcnQtZGlhbG9nLXNsaWRlLWRlc2NyaXB0aW9uXCJcbiAgICA+XG4gICAgICB7LyogPERpYWxvZ0FjdGlvbnM+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uICB2YXJpYW50PVwib3V0bGluZWRcIiBvbkNsaWNrPXtvbkNsb3NlfSBjb2xvcj1cInByaW1hcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICBDbG9zZVxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDwvRGlhbG9nQWN0aW9ucz4gKi99XG4gICAgICB7dGl0bGUgJiYgPERpYWxvZ1RpdGxlIGlkPVwiYWxlcnQtZGlhbG9nLXNsaWRlLXRpdGxlXCI+e3RpdGxlfTwvRGlhbG9nVGl0bGU+fVxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRGlhbG9nPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNoYXJlZE1vZGFsXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgdXNlUG9wdXBzU3RhdGVTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL3BvcHVwc1N0YXRlL1BvcHVwc1N0YXRlU3RhdGUnXG5pbXBvcnQgeyBQb3B1cHNTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVNlcnZpY2UnXG5pbXBvcnQgQ3JlYXRvciBmcm9tICcuLi8uLi9DcmVhdG9yJ1xuaW1wb3J0IFNoYXJlZE1vZGFsIGZyb20gJy4uLy4uL1NoYXJlZE1vZGFsJ1xuaW1wb3J0IEFwcEZvb3RlciBmcm9tICcuLi8uLi9Gb290ZXInXG5cbi8vQHRzLWlnbm9yZVxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NyZWF0b3JQb3B1cC5tb2R1bGUuc2NzcydcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgd2VieHJSZWNvcmRlckFjdGl2aXR5OiBhbnlcbiAgc2V0Vmlldz86IGFueVxufVxuZXhwb3J0IGNvbnN0IENyZWF0b3JQb3B1cCA9ICh7IHdlYnhyUmVjb3JkZXJBY3Rpdml0eSwgc2V0VmlldyB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBwb3B1cHNTdGF0ZSA9IHVzZVBvcHVwc1N0YXRlU3RhdGUoKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcblxuICBjb25zdCBoYW5kbGVDcmVhdG9yQ2xvc2UgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goUG9wdXBzU3RhdGVTZXJ2aWNlLnVwZGF0ZUNyZWF0b3JQYWdlU3RhdGUoZmFsc2UpKVxuICB9XG4gIGNvbnN0IHJlbmRlckNyZWF0b3JNb2RhbCA9ICgpID0+XG4gICAgcG9wdXBzU3RhdGU/LnBvcHVwcz8uY3JlYXRvclBhZ2U/LnZhbHVlID09PSB0cnVlICYmXG4gICAgcG9wdXBzU3RhdGU/LnBvcHVwcz8uY3JlYXRvcklkPy52YWx1ZSAmJlxuICAgICF3ZWJ4clJlY29yZGVyQWN0aXZpdHkgJiYgKFxuICAgICAgPFNoYXJlZE1vZGFsXG4gICAgICAgIG9wZW49e3BvcHVwc1N0YXRlPy5wb3B1cHM/LmNyZWF0b3JQYWdlPy52YWx1ZX1cbiAgICAgICAgb25DbG9zZT17aGFuZGxlQ3JlYXRvckNsb3NlfVxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5jcmVhdG9yUG9wdXB9XG4gICAgICA+XG4gICAgICAgIDxDcmVhdG9yIGNyZWF0b3JJZD17cG9wdXBzU3RhdGU/LnBvcHVwcz8uY3JlYXRvcklkPy52YWx1ZX0gLz5cbiAgICAgICAgPEFwcEZvb3RlciBzZXRWaWV3PXtzZXRWaWV3fSAvPlxuICAgICAgPC9TaGFyZWRNb2RhbD5cbiAgICApXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVuZGVyQ3JlYXRvck1vZGFsKClcbiAgfSwgW3BvcHVwc1N0YXRlPy5wb3B1cHM/LmNyZWF0b3JQYWdlPy52YWx1ZSwgcG9wdXBzU3RhdGU/LnBvcHVwcz8uY3JlYXRvcklkPy52YWx1ZV0pXG4gIHJldHVybiByZW5kZXJDcmVhdG9yTW9kYWwoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDcmVhdG9yUG9wdXBcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyB1c2VQb3B1cHNTdGF0ZVN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vcmVkdWNlcnMvcG9wdXBzU3RhdGUvUG9wdXBzU3RhdGVTdGF0ZSdcbmltcG9ydCB7IFBvcHVwc1N0YXRlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL3BvcHVwc1N0YXRlL1BvcHVwc1N0YXRlU2VydmljZSdcbmltcG9ydCBTaGFyZWRNb2RhbCBmcm9tICcuLi8uLi9TaGFyZWRNb2RhbCdcbmltcG9ydCBBcHBGb290ZXIgZnJvbSAnLi4vLi4vRm9vdGVyJ1xuaW1wb3J0IEZlZWQgZnJvbSAnLi4vLi4vRmVlZCdcblxuLy9AdHMtaWdub3JlXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRmVlZFBvcHVwLm1vZHVsZS5zY3NzJ1xuaW1wb3J0IHsgaXNJT1MgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3V0aWwvcGxhdGZvcm1DaGVjaydcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgd2VieHJSZWNvcmRlckFjdGl2aXR5OiBhbnlcbiAgc2V0Vmlldz86IGFueVxufVxuZXhwb3J0IGNvbnN0IEZlZWRQb3B1cCA9ICh7IHdlYnhyUmVjb3JkZXJBY3Rpdml0eSwgc2V0VmlldyB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBwb3B1cHNTdGF0ZSA9IHVzZVBvcHVwc1N0YXRlU3RhdGUoKVxuICAvL2NvbW1vbiBmb3IgZmVlZCBwYWdlXG5cbiAgY29uc3QgcGxhdGZvcm1DbGFzcyA9IGlzSU9TID8gc3R5bGVzLmlzSW9zIDogJydcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG5cbiAgY29uc3QgaGFuZGxlRmVlZENsb3NlID0gKCkgPT4ge1xuICAgIGRpc3BhdGNoKFBvcHVwc1N0YXRlU2VydmljZS51cGRhdGVGZWVkUGFnZVN0YXRlKGZhbHNlKSlcbiAgfVxuICBjb25zdCByZW5kZXJGZWVkTW9kYWwgPSAoKSA9PlxuICAgIHBvcHVwc1N0YXRlPy5wb3B1cHM/LmZlZWRQYWdlPy52YWx1ZSA9PT0gdHJ1ZSAmJlxuICAgICF3ZWJ4clJlY29yZGVyQWN0aXZpdHkgJiYgKFxuICAgICAgPFNoYXJlZE1vZGFsXG4gICAgICAgIG9wZW49e3BvcHVwc1N0YXRlPy5wb3B1cHM/LmZlZWRQYWdlPy52YWx1ZX1cbiAgICAgICAgb25DbG9zZT17aGFuZGxlRmVlZENsb3NlfVxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5mZWVkUGFnZVBvcHVwICsgJyAnICsgcGxhdGZvcm1DbGFzc31cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5mZWVkUGFnZUlvc1dyYXBwZXJ9PlxuICAgICAgICAgIDxGZWVkIC8+XG4gICAgICAgICAgPEFwcEZvb3RlciBzZXRWaWV3PXtzZXRWaWV3fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvU2hhcmVkTW9kYWw+XG4gICAgKVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlbmRlckZlZWRNb2RhbCgpXG4gIH0sIFtwb3B1cHNTdGF0ZT8ucG9wdXBzPy5mZWVkUGFnZT8udmFsdWUsIHBvcHVwc1N0YXRlPy5wb3B1cHM/LmZlZWRJZD8udmFsdWVdKVxuICByZXR1cm4gcmVuZGVyRmVlZE1vZGFsKClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVlZFBvcHVwXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0LCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgdXNlUG9wdXBzU3RhdGVTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL3BvcHVwc1N0YXRlL1BvcHVwc1N0YXRlU3RhdGUnXG5pbXBvcnQgeyBQb3B1cHNTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVNlcnZpY2UnXG5pbXBvcnQgU2hhcmVkTW9kYWwgZnJvbSAnLi4vLi4vU2hhcmVkTW9kYWwnXG5pbXBvcnQgQXBwRm9vdGVyIGZyb20gJy4uLy4uL0Zvb3RlcidcblxuLy9AdHMtaWdub3JlXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQ3JlYXRvckZvcm1Qb3B1cC5tb2R1bGUuc2NzcydcbmltcG9ydCBDcmVhdG9yRm9ybSBmcm9tICcuLi8uLi9DcmVhdG9yRm9ybSdcbmltcG9ydCB7IGlzSU9TIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy91dGlsL3BsYXRmb3JtQ2hlY2snXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHdlYnhyUmVjb3JkZXJBY3Rpdml0eTogYW55XG4gIHNldFZpZXc/OiBhbnlcbn1cbmV4cG9ydCBjb25zdCBDcmVhdG9yRm9ybVBvcHVwID0gKHsgd2VieHJSZWNvcmRlckFjdGl2aXR5LCBzZXRWaWV3IH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuXG4gIGNvbnN0IHBvcHVwc1N0YXRlID0gdXNlUG9wdXBzU3RhdGVTdGF0ZSgpXG5cbiAgLy9jb21tb24gZm9yIGNyZWF0b3IgZm9ybVxuICBjb25zdCBoYW5kbGVDcmVhdG9yRm9ybUNsb3NlID0gKCkgPT4ge1xuICAgIGRpc3BhdGNoKFBvcHVwc1N0YXRlU2VydmljZS51cGRhdGVDcmVhdG9yRm9ybVN0YXRlKGZhbHNlKSlcbiAgfVxuICBjb25zdCBwbGF0Zm9ybUNsYXNzID0gaXNJT1MgPyBzdHlsZXMuaXNJb3MgOiAnJ1xuXG4gIGNvbnN0IHJlbmRlckNyZWF0b0Zvcm1Nb2RhbCA9ICgpID0+XG4gICAgcG9wdXBzU3RhdGU/LnBvcHVwcz8uY3JlYXRvckZvcm0/LnZhbHVlID09PSB0cnVlICYmXG4gICAgIXdlYnhyUmVjb3JkZXJBY3Rpdml0eSAmJiAoXG4gICAgICA8U2hhcmVkTW9kYWxcbiAgICAgICAgb3Blbj17cG9wdXBzU3RhdGU/LnBvcHVwcz8uY3JlYXRvckZvcm0/LnZhbHVlfVxuICAgICAgICBvbkNsb3NlPXtoYW5kbGVDcmVhdG9yRm9ybUNsb3NlfVxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5jcmVhdG9yRm9ybVBvcHVwICsgJyAnICsgcGxhdGZvcm1DbGFzc31cbiAgICAgID5cbiAgICAgICAgPENyZWF0b3JGb3JtIC8+XG4gICAgICAgIDxBcHBGb290ZXIgc2V0Vmlldz17c2V0Vmlld30gLz5cbiAgICAgIDwvU2hhcmVkTW9kYWw+XG4gICAgKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVuZGVyQ3JlYXRvRm9ybU1vZGFsKClcbiAgfSwgW3BvcHVwc1N0YXRlPy5wb3B1cHMuY3JlYXRvckZvcm0udmFsdWVdKVxuICByZXR1cm4gcmVuZGVyQ3JlYXRvRm9ybU1vZGFsKClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3JlYXRvckZvcm1Qb3B1cFxuIiwiLyoqXG4gKiBAYXV0aG9yIFRhbnlhIFZ5a2xpdWsgPHRhbnlhLnZ5a2xpdWtAZ21haWwuY29tPlxuICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IEJ1dHRvbiwgQ2FyZE1lZGlhLCBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXG5pbXBvcnQgQXJyb3dCYWNrSW9zSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQXJyb3dCYWNrSW9zJ1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgQXJNZWRpYVNlcnZpY2UgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9hck1lZGlhL0FyTWVkaWFTZXJ2aWNlJ1xuaW1wb3J0IHsgdXNlQXJNZWRpYVN0YXRlIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvYXJNZWRpYS9Bck1lZGlhU3RhdGUnXG5pbXBvcnQgeyBQb3B1cHNTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVNlcnZpY2UnXG4vLyBpbXBvcnQgeyAgUGx1Z2lucyB9IGZyb20gJ0BjYXBhY2l0b3IvY29yZSc7XG5pbXBvcnQgUHJlbG9hZGVyIGZyb20gJ0B4cmVuZ2luZS9zb2NpYWwvc3JjL2NvbXBvbmVudHMvUHJlbG9hZGVyJ1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQXJNZWRpYS5tb2R1bGUuc2NzcydcblxuLy8gY29uc3Qge1hSUGx1Z2lufSA9IFBsdWdpbnM7XG5pbXBvcnQgeyBYUlBsdWdpbiB9IGZyb20gJ3dlYnhyLW5hdGl2ZSdcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBwcm9qZWN0cz86IGFueVtdXG4gIHZpZXc/OiBhbnlcbn1cblxuY29uc3QgQXJNZWRpYSA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgW3R5cGUsIHNldFR5cGVdID0gdXNlU3RhdGUoJ2NsaXAnKVxuICBjb25zdCBbbGlzdCwgc2V0TGlzdF0gPSB1c2VTdGF0ZShudWxsKVxuICBjb25zdCBbcHJlbG9hZGluZywgc2V0UHJlbG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW3NlbGVjdGVkSXRlbSwgc2V0U2VsZWN0ZWRJdGVtXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IGFyTWVkaWFTdGF0ZSA9IHVzZUFyTWVkaWFTdGF0ZSgpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2goQXJNZWRpYVNlcnZpY2UuZ2V0QXJNZWRpYSgpKVxuICB9LCBbXSlcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KClcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGFyTWVkaWFTdGF0ZS5mZXRjaGluZy52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHNldExpc3QoYXJNZWRpYVN0YXRlPy5saXN0Py52YWx1ZT8uZmlsdGVyKChpdGVtKSA9PiBpdGVtLnR5cGUgPT09IHR5cGUpKVxuICAgIH1cbiAgfSwgW2FyTWVkaWFTdGF0ZS5mZXRjaGluZy52YWx1ZSwgdHlwZV0pXG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5hck1lZGlhQ29udGFpbmVyfT5cbiAgICAgIHtwcmVsb2FkaW5nICYmIDxQcmVsb2FkZXIgdGV4dD17J0xvYWRpbmcuLi4nfSAvPn1cbiAgICAgIDxCdXR0b25cbiAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5iYWNrQnV0dG9ufVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgZGlzcGF0Y2goUG9wdXBzU3RhdGVTZXJ2aWNlLnVwZGF0ZUFyTWVkaWFTdGF0ZShmYWxzZSkpXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxBcnJvd0JhY2tJb3NJY29uIC8+XG4gICAgICAgIHt0KCdzb2NpYWw6YXJNZWRpYS5iYWNrJyl9XG4gICAgICA8L0J1dHRvbj5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLnN3aXRjaGVyfT5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHZhcmlhbnQ9e3R5cGUgPT09ICdjbGlwJyA/ICdjb250YWluZWQnIDogJ3RleHQnfVxuICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnN3aXRjaEJ1dHRvbiArICh0eXBlID09PSAnY2xpcCcgPyAnICcgKyBzdHlsZXMuYWN0aXZlIDogJycpfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFR5cGUoJ2NsaXAnKX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0KCdzb2NpYWw6YXJNZWRpYS5jbGlwJyl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgICB7Lyo8QnV0dG9uKi99XG4gICAgICAgIHsvKiAgdmFyaWFudD17dHlwZSA9PT0gJ2JhY2tncm91bmQnID8gJ2NvbnRhaW5lZCcgOiAndGV4dCd9Ki99XG4gICAgICAgIHsvKiAgY2xhc3NOYW1lPXtzdHlsZXMuc3dpdGNoQnV0dG9uICsgKHR5cGUgPT09ICdiYWNrZ3JvdW5kJyA/ICcgJyArIHN0eWxlcy5hY3RpdmUgOiAnJyl9Ki99XG4gICAgICAgIHsvKiAgb25DbGljaz17KCkgPT4gc2V0VHlwZSgnYmFja2dyb3VuZCcpfSovfVxuICAgICAgICB7Lyo+Ki99XG4gICAgICAgIHsvKiAge3QoJ3NvY2lhbDphck1lZGlhLmJhY2tncm91bmRzJyl9Ki99XG4gICAgICAgIHsvKjwvQnV0dG9uPiovfVxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuZmxleENvbnRhaW5lcn0+XG4gICAgICAgIHtsaXN0Py5tYXAoKGl0ZW0sIGl0ZW1JbmRleCkgPT4gKFxuICAgICAgICAgIDxzZWN0aW9uIGtleT17aXRlbS5pZH0gY2xhc3NOYW1lPXtzdHlsZXMucHJldmlld0ltYWdlQ29udGFpbmVyfT5cbiAgICAgICAgICAgIDxDYXJkTWVkaWEgb25DbGljaz17KCkgPT4gc2V0U2VsZWN0ZWRJdGVtKGl0ZW0pfSBjbGFzc05hbWU9e3N0eWxlcy5wcmV2aWV3SW1hZ2V9IGltYWdlPXtpdGVtLnByZXZpZXdVcmx9IC8+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeT57aXRlbS50aXRsZX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICApKX1cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgIHt0eXBlID09ICdiYWNrZ3JvdW5kJyA/IDx0ZXh0IGNsYXNzTmFtZT17c3R5bGVzLnRleHRDfT5Db21pbmcgc29vbiAuLi48L3RleHQ+IDogJyAnfVxuICAgICAgeyFzZWxlY3RlZEl0ZW0gPyBudWxsIDogKFxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuc3RhcnRSZWNpcmRpbmd9XG4gICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgc2V0UHJlbG9hZGluZyh0cnVlKVxuICAgICAgICAgICAgaWYgKFhSUGx1Z2luLnVwbG9hZEZpbGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgYXdhaXQgWFJQbHVnaW4udXBsb2FkRmlsZXMoe1xuICAgICAgICAgICAgICAgIGF1ZGlvUGF0aDogc2VsZWN0ZWRJdGVtLmF1ZGlvVXJsLFxuICAgICAgICAgICAgICAgIGF1ZGlvSWQ6IHNlbGVjdGVkSXRlbS5hdWRpb0lkXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRQcmVsb2FkaW5nKGZhbHNlKVxuICAgICAgICAgICAgZGlzcGF0Y2goUG9wdXBzU3RhdGVTZXJ2aWNlLnVwZGF0ZUFyTWVkaWFTdGF0ZShmYWxzZSkpXG4gICAgICAgICAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlV2ViWFJTdGF0ZSh0cnVlLCBzZWxlY3RlZEl0ZW0uaWQpKVxuICAgICAgICAgIH19XG4gICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXG4gICAgICAgID5cbiAgICAgICAgICB7dCgnc29jaWFsOmFyTWVkaWEuc3RhcnQnKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvc2VjdGlvbj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBBck1lZGlhXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0LCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgdXNlUG9wdXBzU3RhdGVTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL3BvcHVwc1N0YXRlL1BvcHVwc1N0YXRlU3RhdGUnXG5pbXBvcnQgeyBQb3B1cHNTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVNlcnZpY2UnXG5pbXBvcnQgQXJNZWRpYSBmcm9tICcuLi8uLi9Bck1lZGlhJ1xuaW1wb3J0IFNoYXJlZE1vZGFsIGZyb20gJy4uLy4uL1NoYXJlZE1vZGFsJ1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0FyTWVkaWFQb3B1cC5tb2R1bGUuc2NzcydcblxuaW50ZXJmYWNlIFByb3BzIHt9XG5cbmV4cG9ydCBjb25zdCBBck1lZGlhUG9wdXAgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IHBvcHVwc1N0YXRlID0gdXNlUG9wdXBzU3RhdGVTdGF0ZSgpXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICAvL2NvbW1vbiBmb3IgQXJNZWRpYSBjaG9vc2VcbiAgY29uc3QgaGFuZGxlQXJNZWRpYW1DbG9zZSA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlQXJNZWRpYVN0YXRlKGZhbHNlKSlcbiAgfVxuICBjb25zdCByZW5kZXJBck1lZGlhTW9kYWwgPSAoKSA9PlxuICAgIHBvcHVwc1N0YXRlPy5wb3B1cHMuYXJNZWRpYT8udmFsdWUgPT09IHRydWUgJiYgKFxuICAgICAgPFNoYXJlZE1vZGFsXG4gICAgICAgIG9wZW49e3BvcHVwc1N0YXRlPy5wb3B1cHMuYXJNZWRpYT8udmFsdWV9XG4gICAgICAgIG9uQ2xvc2U9e2hhbmRsZUFyTWVkaWFtQ2xvc2V9XG4gICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmFyTWVkaWFQb3B1cH1cbiAgICAgID5cbiAgICAgICAgPEFyTWVkaWEgLz5cbiAgICAgIDwvU2hhcmVkTW9kYWw+XG4gICAgKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVuZGVyQXJNZWRpYU1vZGFsKClcbiAgfSwgW3BvcHVwc1N0YXRlPy5wb3B1cHM/LmFyTWVkaWE/LnZhbHVlXSlcbiAgcmV0dXJuIHJlbmRlckFyTWVkaWFNb2RhbCgpXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFyTWVkaWFQb3B1cFxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IHVzZVBvcHVwc1N0YXRlU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVN0YXRlJ1xuaW1wb3J0IHsgUG9wdXBzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vcmVkdWNlcnMvcG9wdXBzU3RhdGUvUG9wdXBzU3RhdGVTZXJ2aWNlJ1xuaW1wb3J0IEZlZWRGb3JtIGZyb20gJy4uLy4uL0ZlZWRGb3JtJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZXRWaWV3PzogYW55XG59XG5leHBvcnQgY29uc3QgRmVlZEZvcm1Qb3B1cCA9ICh7IHNldFZpZXcgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IHBvcHVwc1N0YXRlID0gdXNlUG9wdXBzU3RhdGVTdGF0ZSgpXG4gIC8vY29tbW9uIGZvciBuZXcgZmVlZCBwYWdlXG4gIGNvbnN0IGhhbmRsZU5ld0ZlZWRDbG9zZSA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlTmV3RmVlZFBhZ2VTdGF0ZShmYWxzZSkpXG4gIH1cblxuICBjb25zdCByZW5kZXJOZXdGZWVkTW9kYWwgPSAoKSA9PlxuICAgIHBvcHVwc1N0YXRlLnBvcHVwcy5zaGFyZUZlZWRQYWdlPy52YWx1ZSA9PT0gdHJ1ZSAmJiAoXG4gICAgICAvLyA8U2hhcmVkTW9kYWxcbiAgICAgIC8vICAgICBvcGVuPXtwb3B1cHNTdGF0ZT8uZ2V0KCdzaGFyZUZlZWRQYWdlJyl9XG4gICAgICAvLyAgICAgb25DbG9zZT17aGFuZGxlTmV3RmVlZENsb3NlfVxuICAgICAgLy8gICAgIGNsYXNzTmFtZT17c3R5bGVzLmZlZWRGb3JtUG9wdXB9XG4gICAgICAvLyA+XG5cbiAgICAgIDxGZWVkRm9ybSAvPlxuICAgIClcbiAgLy8gPEFwcEZvb3RlciAvPlxuICAvLyAgPC9TaGFyZWRNb2RhbD47XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZW5kZXJOZXdGZWVkTW9kYWwoKVxuICB9LCBbcG9wdXBzU3RhdGUucG9wdXBzLnNoYXJlRmVlZFBhZ2UudmFsdWVdKVxuICByZXR1cm4gcmVuZGVyTmV3RmVlZE1vZGFsKClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRmVlZEZvcm1Qb3B1cFxuIiwiaW1wb3J0IHsgQm94LCBDYXJkQWN0aW9uQXJlYSwgQ2FyZEFjdGlvbnMsIENhcmRDb250ZW50LCBDYXJkTWVkaWEsIG1ha2VTdHlsZXMsIFR5cG9ncmFwaHkgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJ1xuaW1wb3J0IENhcmQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZCdcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMsIERpc3BhdGNoIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyBQb3B1cHNTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVNlcnZpY2UnXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vU2hhcmVGb3JtLm1vZHVsZS5zY3NzJ1xuaW1wb3J0IHsgUGx1Z2lucyB9IGZyb20gJ0BjYXBhY2l0b3IvY29yZSdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcbmltcG9ydCB7IHVzZVBvcHVwc1N0YXRlU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVN0YXRlJ1xuaW1wb3J0IHsgU2hhcmUgfSBmcm9tICdAY2FwYWNpdG9yL3NoYXJlJ1xuXG5pbnRlcmZhY2UgUHJvcHMge31cblxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyh7XG4gIHJvb3Q6IHtcbiAgICBtYXhXaWR0aDogJzM3NXB0J1xuICB9LFxuICBtZWRpYToge1xuICAgIGhlaWdodDogJzM0MHB0JyxcbiAgICB3aWR0aDogJzM3NXB0J1xuICB9LFxuICBidG5fc2hhcmU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycsXG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgYm90dG9tOiAnMCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBib3JkZXJSYWRpdXM6ICcxMnB4JyxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJyxcbiAgICAgIGNvbG9yOiAnd2hpdGUnXG4gICAgfVxuICB9XG59KVxuXG5jb25zdCBTaGFyZUZvcm0gPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IHBvcHVwc1N0YXRlID0gdXNlUG9wdXBzU3RhdGVTdGF0ZSgpXG4gIGNvbnN0IHZpZGVvVXJsID0gcG9wdXBzU3RhdGUucG9wdXBzLnZpZGVvVXJsPy52YWx1ZVxuICBjb25zdCBwcmV2aWV3VXJsID0gcG9wdXBzU3RhdGUucG9wdXBzLmltZ1NyYz8udmFsdWVcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKVxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgY2xvc2VQb3BVcHMgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goUG9wdXBzU3RhdGVTZXJ2aWNlLnVwZGF0ZVNoYXJlRm9ybVN0YXRlKGZhbHNlKSlcbiAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlTmV3RmVlZFBhZ2VTdGF0ZShmYWxzZSkpXG4gIH1cblxuICBjb25zdCBzaGFyZVZpYSA9ICgpID0+IHtcbiAgICBTaGFyZS5zaGFyZSh7XG4gICAgICB0aXRsZTogdCgnc29jaWFsOnNoYXJlRm9ybS5hcmNNZWRpYScpLFxuICAgICAgdGV4dDogdCgnc29jaWFsOnNoYXJlRm9ybS52aWRlb0NyZWF0ZWQnKSxcbiAgICAgIHVybDogZW5jb2RlVVJJKHZpZGVvVXJsKSxcbiAgICAgIGRpYWxvZ1RpdGxlOiB0KCdzb2NpYWw6c2hhcmVGb3JtLnNoYXJlV2l0aEJ1ZGRpZXMnKVxuICAgIH0pXG4gIH1cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygncHJldmlld1VybHByZXZpZXdVcmwnLCBwcmV2aWV3VXJsKVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zaGFyZUZvcm1Db250YWluZXJ9PlxuICAgICAgPEJveCBkaXNwbGF5PVwiZmxleFwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIG1pbkhlaWdodD1cIjQ1dmhcIj5cbiAgICAgICAgPENhcmRNZWRpYVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5tZWRpYSArICcgJyArIHN0eWxlcy5tZWRpYX1cbiAgICAgICAgICBjb21wb25lbnQ9XCJpbWdcIlxuICAgICAgICAgIGFsdD1cIkNvbnRlbXBsYXRpdmUgUmVwdGlsZVwiXG4gICAgICAgICAgc3JjPXtwcmV2aWV3VXJsfVxuICAgICAgICAgIC8vIGltYWdlPXtwcmV2aWV3VXJsfVxuICAgICAgICAgIHRpdGxlPVwiQXJjXCJcbiAgICAgICAgICBzdHlsZT17eyBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDM2cHQpJywgbWF4SGVpZ2h0OiAnNDB2aCcgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvQm94PlxuICAgICAgPEJ1dHRvbiBzaXplPVwibGFyZ2VcIiBjb2xvcj1cInByaW1hcnlcIiBvbkNsaWNrPXtzaGFyZVZpYX0gY2xhc3NOYW1lPXtjbGFzc2VzLmJ0bl9zaGFyZX0+XG4gICAgICAgIHt0KCdzb2NpYWw6c2hhcmVGb3JtLnNoYXJlVmlkZW8nKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgey8qPEJ1dHRvbiBzaXplPVwibGFyZ2VcIiBjb2xvcj1cInByaW1hcnlcIiBvbkNsaWNrPXsoKSA9PiB7dXBkYXRlU2hhcmVGb3JtU3RhdGUoZmFsc2UpO319Ki99XG4gICAgICB7LyogIGNsYXNzTmFtZT17c3R5bGVzLmJ0bkFjdGlvbn0+Ki99XG4gICAgICB7LyogIHt0KCdzb2NpYWw6c2hhcmVGb3JtLnNhdmUnKX0qL31cbiAgICAgIHsvKjwvQnV0dG9uPiovfVxuICAgICAgPEJ1dHRvblxuICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgY2xvc2VQb3BVcHMoKVxuICAgICAgICB9fVxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5idG5EaXNhYmxlQWN0aW9ufVxuICAgICAgPlxuICAgICAgICB7dCgnc29jaWFsOnNoYXJlRm9ybS5jbG9zZScpfVxuICAgICAgPC9CdXR0b24+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2hhcmVGb3JtXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0LCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgdXNlUG9wdXBzU3RhdGVTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3JlZHVjZXJzL3BvcHVwc1N0YXRlL1BvcHVwc1N0YXRlU3RhdGUnXG5pbXBvcnQgeyBQb3B1cHNTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9wb3B1cHNTdGF0ZS9Qb3B1cHNTdGF0ZVNlcnZpY2UnXG5pbXBvcnQgU2hhcmVkTW9kYWwgZnJvbSAnLi4vLi4vU2hhcmVkTW9kYWwnXG5pbXBvcnQgQXBwRm9vdGVyIGZyb20gJy4uLy4uL0Zvb3RlcidcbmltcG9ydCBTaGFyZUZvcm0gZnJvbSAnLi4vLi4vU2hhcmVGb3JtL1NoYXJlRm9ybSdcblxuLy9AdHMtaWdub3JlXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vU2hhcmVkRm9ybVBvcHVwLm1vZHVsZS5zY3NzJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZXRWaWV3PzogYW55XG59XG5leHBvcnQgY29uc3QgU2hhcmVkRm9ybVBvcHVwID0gKHsgc2V0VmlldyB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgY29uc3QgcG9wdXBzU3RhdGUgPSB1c2VQb3B1cHNTdGF0ZVN0YXRlKClcbiAgLy9jb21tb24gZm9yIHNoYXJlIGZvcm0gcGFnZVxuICBjb25zdCBoYW5kbGVTaGFyZUZvcm1DbG9zZSA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlU2hhcmVGb3JtU3RhdGUoZmFsc2UpKVxuICB9XG4gIGNvbnN0IHJlbmRlclNoYXJlRm9ybU1vZGFsID0gKCkgPT5cbiAgICBwb3B1cHNTdGF0ZT8ucG9wdXBzPy5zaGFyZUZvcm0/LnZhbHVlID09PSB0cnVlICYmIChcbiAgICAgIDxTaGFyZWRNb2RhbFxuICAgICAgICBvcGVuPXtwb3B1cHNTdGF0ZT8ucG9wdXBzLnNoYXJlRm9ybS52YWx1ZX1cbiAgICAgICAgb25DbG9zZT17aGFuZGxlU2hhcmVGb3JtQ2xvc2V9XG4gICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnNoYXJlRm9ybVBvcHVwfVxuICAgICAgPlxuICAgICAgICA8U2hhcmVGb3JtIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucG9wVXBGb290ZXJ9PlxuICAgICAgICAgIDxBcHBGb290ZXIgc2V0Vmlldz17c2V0Vmlld30gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1NoYXJlZE1vZGFsPlxuICAgIClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlbmRlclNoYXJlRm9ybU1vZGFsKClcbiAgfSwgW3BvcHVwc1N0YXRlPy5wb3B1cHMuc2hhcmVGb3JtPy52YWx1ZV0pXG4gIHJldHVybiByZW5kZXJTaGFyZUZvcm1Nb2RhbCgpXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNoYXJlZEZvcm1Qb3B1cFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9zdHlsZXMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3N0eWxlc1wiKTtcblxudmFyIF9kZWZhdWx0VGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2RlZmF1bHRUaGVtZVwiKSk7XG5cbmZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHJldHVybiAoMCwgX3N0eWxlcy53aXRoU3R5bGVzKShzdHlsZXNPckNyZWF0b3IsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGRlZmF1bHRUaGVtZTogX2RlZmF1bHRUaGVtZS5kZWZhdWx0XG4gIH0sIG9wdGlvbnMpKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gd2l0aFN0eWxlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbHN4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xzeFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmc6ICc4cHggMjRweCcsXG4gICAgICAnJjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgLy8gZGlhbG9nIHdpdGhvdXQgdGl0bGVcbiAgICAgICAgcGFkZGluZ1RvcDogMjBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGl2aWRlcnM9e3RydWV9YC4gKi9cbiAgICBkaXZpZGVyczoge1xuICAgICAgcGFkZGluZzogJzE2cHggMjRweCcsXG4gICAgICBib3JkZXJUb3A6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpLFxuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xudmFyIERpYWxvZ0NvbnRlbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2dDb250ZW50KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpdmlkZXJzID0gcHJvcHMuZGl2aWRlcnMsXG4gICAgICBkaXZpZGVycyA9IF9wcm9wcyRkaXZpZGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGl2aWRlcnMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGl2aWRlcnNcIl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGRpdmlkZXJzICYmIGNsYXNzZXMuZGl2aWRlcnMpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0NvbnRlbnQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIERpc3BsYXkgdGhlIHRvcCBhbmQgYm90dG9tIGRpdmlkZXJzLlxuICAgKi9cbiAgZGl2aWRlcnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDogdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2dDb250ZW50J1xufSkoRGlhbG9nQ29udGVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX1R5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9UeXBvZ3JhcGh5XCIpKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIG1hcmdpbkJvdHRvbTogMTJcbiAgfVxufTtcbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xudmFyIERpYWxvZ0NvbnRlbnRUZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQ29udGVudFRleHQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHkuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY29tcG9uZW50OiBcInBcIixcbiAgICB2YXJpYW50OiBcImJvZHkxXCIsXG4gICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0NvbnRlbnRUZXh0LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSA6IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQ29udGVudFRleHQnXG59KShEaWFsb2dDb250ZW50VGV4dCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IERpYWxvZyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EaWFsb2cnXG5pbXBvcnQgU2xpZGUgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvU2xpZGUnXG5pbXBvcnQgeyBUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS90cmFuc2l0aW9ucydcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1Rlcm1zYW5kUG9saWN5Lm1vZHVsZS5zY3NzJ1xuaW1wb3J0IERpYWxvZ0NvbnRlbnQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRGlhbG9nQ29udGVudC9EaWFsb2dDb250ZW50J1xuaW1wb3J0IERpYWxvZ0NvbnRlbnRUZXh0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpYWxvZ0NvbnRlbnRUZXh0L0RpYWxvZ0NvbnRlbnRUZXh0J1xuaW1wb3J0IHsgQnV0dG9uLCBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMsIERpc3BhdGNoIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyBDcmVhdG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL2NyZWF0b3IvQ3JlYXRvclNlcnZpY2UnXG5pbXBvcnQgeyBjb25uZWN0LCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgdXNlQ3JlYXRvclN0YXRlIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvY3JlYXRvci9DcmVhdG9yU3RhdGUnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuY29uc3QgVHJhbnNpdGlvbiA9IFJlYWN0LmZvcndhcmRSZWYoXG4gIChwcm9wczogVHJhbnNpdGlvblByb3BzICYgeyBjaGlsZHJlbj86IFJlYWN0LlJlYWN0RWxlbWVudDxhbnksIGFueT4gfSwgcmVmOiBSZWFjdC5SZWY8dW5rbm93bj4pID0+IHtcbiAgICByZXR1cm4gPFNsaWRlIGRpcmVjdGlvbj1cInVwXCIgcmVmPXtyZWZ9IHsuLi5wcm9wc30gLz5cbiAgfVxuKVxuXG5jb25zdCBUZXJtc0FuZFBvbGljeSA9ICh7IHNldFZpZXcgfTogYW55KSA9PiB7XG4gIGNvbnN0IGNyZWF0b3JzU3RhdGUgPSB1c2VDcmVhdG9yU3RhdGUoKVxuICBjb25zdCBjdXJyZW50Q3JlYXRvciA9IGNyZWF0b3JzU3RhdGUuY3JlYXRvcnMuY3VycmVudENyZWF0b3IudmFsdWVcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG5cbiAgLy8gTWFkZSBhdCB0aGUgdGltZSBvZiB0aGUgdGVzdCBBbGVrczk1MVxuICBjb25zdCBbb3BlblRlcm1zLCBzZXRPcGVuVGVybXNdID0gdXNlU3RhdGUoISEhY3VycmVudENyZWF0b3IudGVybXMpXG4gIC8vIGNvbnN0IFtvcGVuVGVybXMsIHNldE9wZW5UZXJtc10gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbb3BlblBvbGljeSwgc2V0T3BlblBvbGljeV0gPSB1c2VTdGF0ZSghISFjdXJyZW50Q3JlYXRvci50ZXJtcyA/IGZhbHNlIDogISEhY3VycmVudENyZWF0b3IucG9saWN5KVxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKClcbiAgY29uc3QgW2FncmVlLCBzZXRBZ3JlZV0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgW2FncmVlUFAsIHNldEFncmVlUFBdID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgY29uc3QgY2hlY2tib3hIYW5kbGVyID0gKCkgPT4ge1xuICAgIC8vIGlmIGFncmVlID09PSB0cnVlLCBpdCB3aWxsIGJlIHNldCB0byBmYWxzZVxuICAgIC8vIGlmIGFncmVlID09PSBmYWxzZSwgaXQgd2lsbCBiZSBzZXQgdG8gdHJ1ZVxuICAgIHNldEFncmVlKCFhZ3JlZSlcbiAgICAvLyBEb24ndCBtaXNzIHRoZSBleGNsYW1hdGlvbiBtYXJrXG4gIH1cblxuICBjb25zdCBjaGVja2JveEhhbmRsZXJQUCA9ICgpID0+IHtcbiAgICAvLyBpZiBhZ3JlZSA9PT0gdHJ1ZSwgaXQgd2lsbCBiZSBzZXQgdG8gZmFsc2VcbiAgICAvLyBpZiBhZ3JlZSA9PT0gZmFsc2UsIGl0IHdpbGwgYmUgc2V0IHRvIHRydWVcbiAgICBzZXRBZ3JlZVBQKCFhZ3JlZVBQKVxuICAgIC8vIERvbid0IG1pc3MgdGhlIGV4Y2xhbWF0aW9uIG1hcmtcbiAgfVxuXG4gIC8vIGNvbnN0IGhhbmRsZVRlcm1zQWNjZXB0ID0gKCkgPT4ge1xuICAvLyAgIHNldE9wZW5UZXJtcyhmYWxzZSlcbiAgLy8gICB1cGRhdGVDcmVhdG9yKHsgaWQ6IGNyZWF0b3JzU3RhdGUuZ2V0KCdjdXJyZW50Q3JlYXRvcicpLmlkLCB0ZXJtczogdHJ1ZSB9KVxuICAvLyAgICEhIWN1cnJlbnRDcmVhdG9yLnBvbGljeSAmJiBzZXRPcGVuUG9saWN5KHRydWUpXG4gIC8vIH1cblxuICAvLyBjb25zdCBoYW5kbGVQb2xpY3lBY2NlcHQgPSAoKSA9PiB7XG4gIC8vICAgdXBkYXRlQ3JlYXRvcih7IGlkOiBjcmVhdG9yc1N0YXRlLmdldCgnY3VycmVudENyZWF0b3InKS5pZCwgcG9saWN5OiB0cnVlIH0pXG4gIC8vICAgc2V0T3BlblBvbGljeShmYWxzZSlcbiAgLy8gfVxuXG4gIGNvbnN0IGhhbmRsZUFjY2VwdCA9ICgpID0+IHtcbiAgICBzZXRPcGVuVGVybXMoZmFsc2UpXG4gICAgc2V0T3BlblBvbGljeShmYWxzZSlcbiAgICBkaXNwYXRjaChcbiAgICAgIENyZWF0b3JTZXJ2aWNlLnVwZGF0ZUNyZWF0b3Ioe1xuICAgICAgICBpZDogY3JlYXRvcnNTdGF0ZS5jcmVhdG9ycy5jdXJyZW50Q3JlYXRvcj8uaWQ/LnZhbHVlLFxuICAgICAgICB0ZXJtczogdHJ1ZSxcbiAgICAgICAgcG9saWN5OiB0cnVlLFxuICAgICAgICBuYW1lOiBjcmVhdG9yc1N0YXRlLmNyZWF0b3JzLmN1cnJlbnRDcmVhdG9yPy5uYW1lPy52YWx1ZVxuICAgICAgfSlcbiAgICApXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFpbkJsb2NrfT5cbiAgICAgIDxEaWFsb2dcbiAgICAgICAgb3Blbj17b3BlblRlcm1zfVxuICAgICAgICBUcmFuc2l0aW9uQ29tcG9uZW50PXtUcmFuc2l0aW9ufVxuICAgICAgICBrZWVwTW91bnRlZFxuICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJhbGVydC1kaWFsb2ctc2xpZGUtdGl0bGVcIlxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiYWxlcnQtZGlhbG9nLXNsaWRlLWRlc2NyaXB0aW9uXCJcbiAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuZGlhbG9nV2luZG93fVxuICAgICAgICBQYXBlclByb3BzPXt7XG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnbWF4LWNvbnRlbnQnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTJweCdcbiAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxEaWFsb2dDb250ZW50PlxuICAgICAgICAgIDxEaWFsb2dDb250ZW50VGV4dD5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGFsaWduPVwiY2VudGVyXCIgdmFyaWFudD1cInN1YnRpdGxlMVwiPlxuICAgICAgICAgICAgICB7J0J5IHRhcHBpbmcgXCJJIGFncmVlIHRvIFRlcm1zIG9mIFNlcnZpY2UgYW5kIFBvbGljeSBvZiBTZXJ2aWNlXCIsIHlvdSBhZ3JlZSB0byBvdXIgJ31cbiAgICAgICAgICAgICAgey8qIDxMaW5rIGNsYXNzTmFtZT17c3R5bGVzLnN0eWxlTGlua30gdG89XCIvdGVybXNcIj5cbiAgICAgICAgICAgICAgICBUZXJtcyBvZiBTZXJ2aWNlXG4gICAgICAgICAgICAgIDwvTGluaz4gKi99XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzAnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZXRWaWV3KCd0ZXJtcycpXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxiPlRlcm1zIG9mIFNlcnZpY2U8L2I+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICB7JyBhbmQgYWNrbm93bGVkZ2UgdGhhdCB5b3UgaGF2ZSBvdXIgJ31cbiAgICAgICAgICAgICAgey8qIDxMaW5rIGNsYXNzTmFtZT17c3R5bGVzLnN0eWxlTGlua30gdG89XCIvcG9saWN5XCI+XG4gICAgICAgICAgICAgICAgUHJpdmFjeSBQb2xpY3lcbiAgICAgICAgICAgICAgPC9MaW5rPiAqL31cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCdcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIHNldFZpZXcoJ3BvbGljeScpXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxiPlByaXZhY3kgUG9saWN5PC9iPlxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgeycgdG8gbGVhcm4gaG93IHdlIGNvbGxlY3QsIHVzZSwgYW5kIHNoYXJlIHlvdXIgZGF0YS4nfVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvRGlhbG9nQ29udGVudFRleHQ+XG4gICAgICAgIDwvRGlhbG9nQ29udGVudD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5ib3R0b21Cb3h9PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7LyogRG9uJ3QgbWlzcyB0aGUgZXhjbGFtYXRpb24gbWFyayogKi99XG4gICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBvbkNsaWNrPXtoYW5kbGVBY2NlcHR9PlxuICAgICAgICAgICAgICBBZ3JlZSBhbmQgY29udGludWVcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRlcm1zQW5kUG9saWN5XG4iLCIvKipcbiAqIEBhdXRob3IgWWV2aGVueWkgUGV0cmVua28gPGV2aGVueWlwZXRyZW5rb0BnbWFpbC5jb20+XG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9CbG9ja2VkLm1vZHVsZS5zY3NzJ1xuXG5jb25zdCBCbG9ja2VkID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMud3JhcH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxwPllvdSBoYXZlIGJlZW4gdGVtcG9yYXJpbHkgYmxvY2tlZCBwZW5kaW5nIGZ1cnRoZXIgcmV2aWV3PC9wPlxuICAgICAgICA8cD5QbGVhc2UgY29udGFjdCBzdXBwb3J0IHdpdGggYW55IHF1ZXN0aW9uczwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFpbH0+XG4gICAgICAgICAgPGEgaHJlZj1cIm1haWx0bzppbmZvQGFyY21lZGlhLnVzXCI+aW5mb0BhcmNtZWRpYS51czwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBCbG9ja2VkXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTcgMTAuNVY3YzAtLjU1LS40NS0xLTEtMUg0Yy0uNTUgMC0xIC40NS0xIDF2MTBjMCAuNTUuNDUgMSAxIDFoMTJjLjU1IDAgMS0uNDUgMS0xdi0zLjVsNCA0di0xMWwtNCA0elwiXG59KSwgJ1ZpZGVvY2FtJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMCA1aC0zLjE3TDE1IDNIOUw3LjE3IDVINGMtMS4xIDAtMiAuOS0yIDJ2MTJjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY3YzAtMS4xLS45LTItMi0yem0tOCAxM2MtMi43NiAwLTUtMi4yNC01LTVINWwyLjUtMi41TDEwIDEzSDhjMCAyLjIxIDEuNzkgNCA0IDQgLjU4IDAgMS4xMy0uMTMgMS42Mi0uMzVsLjc0Ljc0Yy0uNzEuMzctMS41LjYxLTIuMzYuNjF6bTQuNS0yLjVMMTQgMTNoMmMwLTIuMjEtMS43OS00LTQtNC0uNTggMC0xLjEzLjEzLTEuNjIuMzVsLS43NC0uNzNDMTAuMzUgOC4yNCAxMS4xNCA4IDEyIDhjMi43NiAwIDUgMi4yNCA1IDVoMmwtMi41IDIuNXpcIlxufSksICdGbGlwQ2FtZXJhSW9zJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9XZWJYUkhpbnRzLm1vZHVsZS5zY3NzJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBoaW50T25lU2hvdz86IGFueVxufVxuXG5jb25zdCBIaW50T25lID0gKHsgaGludE9uZVNob3cgfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmhpbnRPbmV9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy50aGlyZFNjcmVlbiArICcgJyArIHN0eWxlcy5vbmJvYXJkaW5nfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZWxhdGl2ZUltYWdlfT5cbiAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvZmVlZE9uYm9hcmRpbmcvY2FtZXJhLnBuZ1wiIGNsYXNzTmFtZT17c3R5bGVzLm1vYkltYWdlfSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVsYXRpdmVQb2ludGVyfT5cbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9e3N0eWxlcy5sb2FkaW5nRnJhbWV9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jaXJjbGV9IC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2lyY2xlfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jaXJjbGV9IC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2lyY2xlfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jaXJjbGV9IC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2lyY2xlfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy5vZmZzZXRJbWd9PlRhcCB0aGUgc2NyZWVuIHRvIGxvY2sgbWUgaW4gcGxhY2UuPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGhpbnRPbmVTaG93KGZhbHNlKVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7JyAnfVxuICAgICAgICAgIEdvdCBpdCF7JyAnfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhpbnRPbmVcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9XZWJYUkhpbnRzLm1vZHVsZS5zY3NzJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBoaW50VHdvU2hvdz86IGFueVxufVxuXG5jb25zdCBIaW50VHdvID0gKHsgaGludFR3b1Nob3cgfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17YCR7c3R5bGVzLmhpbnRPbmV9YCArICcgJyArIGAke3N0eWxlcy5oaW50VHdvfWB9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy50aGlyZFNjcmVlbiArICcgJyArIHN0eWxlcy5vbmJvYXJkaW5nfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZWxhdGl2ZUltYWdlfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnJlbGF0aXZlUG9pbnRlcn0+XG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGluZ0ZyYW1lICsgJyAnICsgc3R5bGVzLmhpbnRCdXR0b25Ud299PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jaXJjbGV9IC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2lyY2xlfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jaXJjbGV9IC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2lyY2xlfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5jaXJjbGV9IC8+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2lyY2xlfSAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNpcmNsZX0gLz5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy5vZmZzZXRJbWd9PkhpdCByZWNvcmQgdG8gc3RhcnQgdGhlIHBlcmZvcm1hbmNlLjwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBoaW50VHdvU2hvdyhmYWxzZSlcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgeycgJ31cbiAgICAgICAgICBHb3QgaXQheycgJ31cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBIaW50VHdvXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBab29tR2VzdHVyZUhhbmRsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIHByaXZhdGUgcmVhZG9ubHkgY2FsbGJhY2s6ICh6b29tOiBudW1iZXIpID0+IHZvaWRcbiAgcHJpdmF0ZSBwcmV2aW91c0dlc3R1cmVEaXN0YW5jZSA9IDBcbiAgcHVibGljIHNjYWxlID0gMVxuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjYWxsYmFjazogKHpvb206IG51bWJlcikgPT4gdm9pZCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcblxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQpXG4gIH1cblxuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQpXG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kKVxuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKVxuICB9XG5cbiAgb25Ub3VjaFN0YXJ0ID0gKGU6IFRvdWNoRXZlbnQpOiB2b2lkID0+IHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdGhpcy5wcmV2aW91c0dlc3R1cmVEaXN0YW5jZSA9IE1hdGguaHlwb3QoXG4gICAgICAgIGUudG91Y2hlc1swXS5wYWdlWCAtIGUudG91Y2hlc1sxXS5wYWdlWCxcbiAgICAgICAgZS50b3VjaGVzWzBdLnBhZ2VZIC0gZS50b3VjaGVzWzFdLnBhZ2VZXG4gICAgICApXG5cbiAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZClcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKVxuICAgIH1cbiAgfVxuXG4gIG9uVG91Y2hFbmQgPSAoKTogdm9pZCA9PiB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUpXG4gIH1cblxuICBvblRvdWNoTW92ZSA9IChlOiBUb3VjaEV2ZW50KTogdm9pZCA9PiB7XG4gICAgY29uc3QgY3VycmVudEdlc3R1cmVEaXN0YW5jZSA9IE1hdGguaHlwb3QoXG4gICAgICBlLnRvdWNoZXNbMF0ucGFnZVggLSBlLnRvdWNoZXNbMV0ucGFnZVgsXG4gICAgICBlLnRvdWNoZXNbMF0ucGFnZVkgLSBlLnRvdWNoZXNbMV0ucGFnZVlcbiAgICApXG5cbiAgICB0aGlzLnNjYWxlID0gY3VycmVudEdlc3R1cmVEaXN0YW5jZSAvIHRoaXMucHJldmlvdXNHZXN0dXJlRGlzdGFuY2VcbiAgICB0aGlzLnByZXZpb3VzR2VzdHVyZURpc3RhbmNlID0gY3VycmVudEdlc3R1cmVEaXN0YW5jZVxuXG4gICAgdGhpcy5jYWxsYmFjayh0aGlzLnNjYWxlKVxuICB9XG59XG4iLCJpbXBvcnQgeyBDYXBhY2l0b3IgfSBmcm9tICdAY2FwYWNpdG9yL2NvcmUnXG5pbXBvcnQgeyBYUlBsdWdpbiB9IGZyb20gJ3dlYnhyLW5hdGl2ZSdcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7XG4gIENhbWVyYUhlbHBlcixcbiAgQ29sb3IsXG4gIEdyb3VwLFxuICBPcnRob2dyYXBoaWNDYW1lcmEsXG4gIFBlcnNwZWN0aXZlQ2FtZXJhLFxuICBRdWF0ZXJuaW9uLFxuICBTY2VuZSxcbiAgc1JHQkVuY29kaW5nLFxuICBWZWN0b3IzLFxuICBXZWJHTFJlbmRlcmVyXG59IGZyb20gJ3RocmVlJ1xuaW1wb3J0IFZpZGVvY2FtSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvVmlkZW9jYW0nXG5pbXBvcnQgRmxpcENhbWVyYUlvc0ljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0ZsaXBDYW1lcmFJb3MnXG5pbXBvcnQgUGxheWVyIGZyb20gJ3ZvbHVtZXRyaWMvd2ViL2RlY29kZXIvUGxheWVyJ1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IFBsYXllcldvcmtlciBmcm9tICd2b2x1bWV0cmljL3dlYi9kZWNvZGVyL3dvcmtlckZ1bmN0aW9uLnRzP3dvcmtlcidcblxuLy9AdHMtaWdub3JlXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vV2ViWFJQbHVnaW4ubW9kdWxlLnNjc3MnXG5pbXBvcnQgeyBjb25uZWN0LCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgUG9wdXBzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvcG9wdXBzU3RhdGUvUG9wdXBzU3RhdGVTZXJ2aWNlJ1xuaW1wb3J0IHsgdXNlUG9wdXBzU3RhdGVTdGF0ZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL3BvcHVwc1N0YXRlL1BvcHVwc1N0YXRlU3RhdGUnXG5pbXBvcnQgeyB1c2VBck1lZGlhU3RhdGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9hck1lZGlhL0FyTWVkaWFTdGF0ZSdcbmltcG9ydCB7IEFyTWVkaWFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvYXJNZWRpYS9Bck1lZGlhU2VydmljZSdcbi8vIGltcG9ydCBIaW50T25lIGZyb20gJy4uL1dlYlhySGludHMvSGludE9uZSdcbi8vIGltcG9ydCBIaW50VHdvIGZyb20gJy4uL1dlYlhySGludHMvSGludFR3bydcbmltcG9ydCB7IEZlZWRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvZmVlZC9GZWVkU2VydmljZSdcbmltcG9ydCBIaW50T25lIGZyb20gJy4uL1dlYlhySGludHMvSGludE9uZSdcbmltcG9ydCBIaW50VHdvIGZyb20gJy4uL1dlYlhySGludHMvSGludFR3bydcbmltcG9ydCBab29tR2VzdHVyZUhhbmRsZXIgZnJvbSAnLi9ab29tR2VzdHVyZUhhbmRsZXInXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNldENvbnRlbnRIaWRkZW4/OiBhbnlcbiAgd2VieHJSZWNvcmRlckFjdGl2aXR5PzogYW55XG4gIGZlZWRIaW50c09uYm9yZGVkPzogYW55XG4gIHNldEZlZWRIaW50c09uYm9yZGVkPzogYW55XG59XG5cbmNvbnN0IHsgaXNOYXRpdmUgfSA9IENhcGFjaXRvclxuXG5lbnVtIFJlY29yZGluZ1N0YXRlcyB7XG4gIE9GRiA9ICdvZmYnLFxuICBPTiA9ICdvbicsXG4gIFNUQVJUSU5HID0gJ3N0YXJ0aW5nJyxcbiAgRU5ESU5HID0gJ2VuZGluZydcbn1cblxuY29uc3QgY29ycmVjdGlvblF1YXRlcm5pb25aID0gbmV3IFF1YXRlcm5pb24oKS5zZXRGcm9tQXhpc0FuZ2xlKG5ldyBWZWN0b3IzKDAsIDAsIDEpLCBNYXRoLlBJIC8gMilcblxuLy8gVE9ETzogcmV0dXJuIGl0IHRvIGZhbHNlXG5jb25zdCBfREVCVUcgPSBmYWxzZVxuY29uc3QgREVCVUdfTUlOSV9WSUVXUE9SVF9TSVpFID0gMTAwXG5cbmV4cG9ydCBjb25zdCBXZWJYUlBsdWdpbiA9ICh7XG4gIHNldENvbnRlbnRIaWRkZW4sXG4gIHdlYnhyUmVjb3JkZXJBY3Rpdml0eSxcbiAgZmVlZEhpbnRzT25ib3JkZWQsXG4gIHNldEZlZWRIaW50c09uYm9yZGVkXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCBjYW52YXNSZWYgPSBSZWFjdC51c2VSZWYoKVxuICBjb25zdCBbaW5pdGlhbGl6YXRpb25SZXNwb25zZSwgc2V0SW5pdGlhbGl6YXRpb25SZXNwb25zZV0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3QgW2NhbWVyYVN0YXJ0ZWRTdGF0ZSwgc2V0Q2FtZXJhU3RhcnRlZFN0YXRlXSA9IHVzZVN0YXRlKCcnKVxuICBjb25zdCBbY2FtZXJhUG9zZVN0YXRlLCBzZXRDYW1lcmFQb3NlU3RhdGVdID0gdXNlU3RhdGUoJycpXG4gIGNvbnN0IFthbmNob3JQb3NlU3RhdGUsIHNldEFuY2hvclBvc2VTdGF0ZV0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3QgW2ludHJpbnNpY3NTdGF0ZSwgc2V0Q2FtZXJhSW50cmluc2ljc1N0YXRlXSA9IHVzZVN0YXRlKCcnKVxuICBjb25zdCBbc2F2ZWRGaWxlUGF0aCwgc2V0U2F2ZWRGaWxlUGF0aF0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3QgW2hpbnRPbmUsIGhpbnRPbmVTaG93XSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbaGludFR3bywgaGludFR3b1Nob3ddID0gdXNlU3RhdGUoZmFsc2UpXG4gIC8vICAgICBjb25zdCBbaG9yaXpvbnRhbE9yaWVudGF0aW9uLCBzZXRIb3Jpem9udGFsT3JpZW50YXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbWVkaWFJdGVtLCBfc2V0TWVkaWFJdGVtXSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFt2aWRlb0RlbGF5LCBzZXRWaWRlb0RlbGF5XSA9IHVzZVN0YXRlKG51bGwpXG4gIGNvbnN0IFtyZWNvcmRpbmdTdGF0ZSwgX3NldFJlY29yZGluZ1N0YXRlXSA9IHVzZVN0YXRlKFJlY29yZGluZ1N0YXRlcy5PRkYpXG4gIGNvbnN0IHBsYXllclJlZiA9IHVzZVJlZjxQbGF5ZXIgfCBudWxsPihudWxsKVxuICBjb25zdCBhbmNob3JSZWYgPSB1c2VSZWY8R3JvdXAgfCBudWxsPihudWxsKVxuICBjb25zdCBzY2VuZVJlZiA9IHVzZVJlZjxTY2VuZSB8IG51bGw+KG51bGwpXG4gIGNvbnN0IGNhbWVyYVJlZiA9IHVzZVJlZjxQZXJzcGVjdGl2ZUNhbWVyYSB8IG51bGw+KG51bGwpXG4gIGNvbnN0IHJlbmRlcmVyUmVmID0gdXNlUmVmPFdlYkdMUmVuZGVyZXIgfCBudWxsPihudWxsKVxuICBjb25zdCBhbmltYXRpb25GcmFtZUlkUmVmID0gdXNlUmVmPG51bWJlcj4oMClcbiAgY29uc3Qgem9vbUhhbmRsZXJSZWYgPSB1c2VSZWY8Wm9vbUdlc3R1cmVIYW5kbGVyIHwgbnVsbD4obnVsbClcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IGFyTWVkaWFTdGF0ZSA9IHVzZUFyTWVkaWFTdGF0ZSgpXG4gIGNvbnN0IHJlY29yZGluZ1N0YXRlUmVmID0gUmVhY3QudXNlUmVmKHJlY29yZGluZ1N0YXRlKVxuICBjb25zdCBzZXRSZWNvcmRpbmdTdGF0ZSA9IChkYXRhKSA9PiB7XG4gICAgcmVjb3JkaW5nU3RhdGVSZWYuY3VycmVudCA9IGRhdGFcbiAgICBfc2V0UmVjb3JkaW5nU3RhdGUoZGF0YSlcbiAgfVxuICBjb25zdCBwb3B1cHNTdGF0ZSA9IHVzZVBvcHVwc1N0YXRlU3RhdGUoKVxuICBjb25zdCBtZWRpYUl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobWVkaWFJdGVtKVxuICBjb25zdCBzZXRNZWRpYUl0ZW0gPSAoZGF0YSkgPT4ge1xuICAgIG1lZGlhSXRlbVJlZi5jdXJyZW50ID0gZGF0YVxuICAgIF9zZXRNZWRpYUl0ZW0oZGF0YSlcbiAgfVxuICBjb25zdCBjbG9zZUJ0bkFjdGlvbiA9IFJlYWN0LnVzZVJlZihmYWxzZSlcblxuICBjb25zdCBkZWJ1Z0NhbWVyYToge1xuICAgIHVzZXJDYW1lcmFIZWxwZXI6IENhbWVyYUhlbHBlclxuICAgIG92ZXJ2aWV3OiBQZXJzcGVjdGl2ZUNhbWVyYVxuICAgIHh6OiBPcnRob2dyYXBoaWNDYW1lcmFcbiAgICB4eTogT3J0aG9ncmFwaGljQ2FtZXJhXG4gICAgenk6IE9ydGhvZ3JhcGhpY0NhbWVyYVxuICB9ID0ge1xuICAgIHVzZXJDYW1lcmFIZWxwZXI6IG51bGwsXG4gICAgb3ZlcnZpZXc6IG51bGwsXG4gICAgeHo6IG51bGwsXG4gICAgeHk6IG51bGwsXG4gICAgenk6IG51bGxcbiAgfVxuXG4gIGNvbnN0IHNob3dDb250ZW50ID0gKCkgPT4ge1xuICAgIGlmICghd2VieHJSZWNvcmRlckFjdGl2aXR5KSB7XG4gICAgICBzZXRDb250ZW50SGlkZGVuKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkJhY2tCdXR0b24oKSB7XG4gICAgY29uc29sZS5sb2coJ29uQmFja0J1dHRvbiByZWNvcmRpbmdTdGF0ZTonLCByZWNvcmRpbmdTdGF0ZVJlZi5jdXJyZW50KVxuICAgIGNsb3NlQnRuQWN0aW9uLmN1cnJlbnQgPSB0cnVlXG4gICAgZmluaXNoUmVjb3JkKClcbiAgICAvLyBleGl0IHRoaXMgcG9wdXBcbiAgICBkaXNwYXRjaChQb3B1cHNTdGF0ZVNlcnZpY2UudXBkYXRlV2ViWFJTdGF0ZShmYWxzZSwgbnVsbCkpXG5cbiAgICBzaG93Q29udGVudCgpXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdyZWNvcmRpbmdTdGF0ZSBVU0UgRUZGRUNUOicsIHJlY29yZGluZ1N0YXRlKVxuICB9LCBbcmVjb3JkaW5nU3RhdGVdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ1dlYlhSQ29tcG9uZW50IE1PVU5URUQnKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdiYWNrYnV0dG9uJywgb25CYWNrQnV0dG9uKVxuXG4gICAgaWYgKCF6b29tSGFuZGxlclJlZi5jdXJyZW50KSB7XG4gICAgICB6b29tSGFuZGxlclJlZi5jdXJyZW50ID0gbmV3IFpvb21HZXN0dXJlSGFuZGxlcihjYW52YXNSZWYuY3VycmVudCwgKHNjYWxlKSA9PiB7XG4gICAgICAgIGlmIChhbmNob3JSZWYuY3VycmVudCkge1xuICAgICAgICAgIGFuY2hvclJlZi5jdXJyZW50LnNjYWxlLm11bHRpcGx5U2NhbGFyKHNjYWxlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICghZmVlZEhpbnRzT25ib3JkZWQpIHtcbiAgICAgIGhpbnRPbmVTaG93KHRydWUpXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdXZWJYUkNvbXBvbmVudCBVTk1PVU5UJyk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdiYWNrYnV0dG9uJywgb25CYWNrQnV0dG9uKVxuXG4gICAgICBpZiAoYW5pbWF0aW9uRnJhbWVJZFJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSWRSZWYuY3VycmVudClcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYXllclJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdXZWJYUkNvbXBvbmVudCAtIGRpc3Bvc2UgcGxheWVyJylcbiAgICAgICAgcGxheWVyUmVmLmN1cnJlbnQuZGlzcG9zZSgpXG4gICAgICAgIHBsYXllclJlZi5jdXJyZW50ID0gbnVsbFxuICAgICAgfVxuICAgICAgaWYgKHpvb21IYW5kbGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1dlYlhSQ29tcG9uZW50IC0gZGlzcG9zZSB6b29tIGhhbmRsZXInKVxuICAgICAgICB6b29tSGFuZGxlclJlZi5jdXJyZW50LmRpc3Bvc2UoKVxuICAgICAgICB6b29tSGFuZGxlclJlZi5jdXJyZW50ID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZygnV2ViWFJDb21wb25lbnQgLSBzdG9wIHBsdWdpbicpXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBYUlBsdWdpbi5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgWFJQbHVnaW4uc3RvcCh7fSlcbiAgICAgIHdpbmRvdy5zY3JlZW4ub3JpZW50YXRpb24udW5sb2NrKClcblxuICAgICAgLy8gc2V0Q29udGVudEhpZGRlbigpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ1dlYlhSQ29tcG9uZW50IC0gVU5NT1VOVCBFTkQnKTtcbiAgICB9XG4gIH0sIFtdKVxuXG4gIGNvbnN0IHJhZiA9ICgpID0+IHtcbiAgICBhbmltYXRpb25GcmFtZUlkUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmFmKSAvLyBhbHdheXMgcmVxdWVzdCBuZXcgZnJhbWVcbiAgICBjb25zdCBzY2VuZSA9IHNjZW5lUmVmLmN1cnJlbnRcbiAgICBjb25zdCBjYW1lcmEgPSBjYW1lcmFSZWYuY3VycmVudFxuICAgIGNvbnN0IHJlbmRlcmVyID0gcmVuZGVyZXJSZWYuY3VycmVudFxuICAgIGlmICghcmVuZGVyZXIpIHtcbiAgICAgIC8vIGlmIHJlbmRlcmVyIGlzIG5vdCBjcmVhdGVkIHlldCwgd2UgaGF2ZSBub3RoaW5nIHRvIHJlbmRlclxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgcGxheWVyUmVmLmN1cnJlbnQ/LmhhbmRsZVJlbmRlcigoKSA9PiB7fSlcblxuICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKVxuXG4gICAgaWYgKF9ERUJVRykge1xuICAgICAgY29uc3QgY2xlYXJDb2xvciA9IG5ldyBDb2xvcigpXG4gICAgICByZW5kZXJlci5nZXRDbGVhckNvbG9yKGNsZWFyQ29sb3IpXG4gICAgICBjb25zdCBjbGVhckFscGhhID0gcmVuZGVyZXIuZ2V0Q2xlYXJBbHBoYSgpXG5cbiAgICAgIGRlYnVnQ2FtZXJhLnVzZXJDYW1lcmFIZWxwZXIudmlzaWJsZSA9IHRydWVcblxuICAgICAgcmVuZGVyZXIuc2V0U2Npc3NvclRlc3QodHJ1ZSlcbiAgICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHhhMGEwYTAsIDEpXG5cbiAgICAgIHJlbmRlcmVyLnNldFZpZXdwb3J0KDEwLCAxMCAqIDIgKyBERUJVR19NSU5JX1ZJRVdQT1JUX1NJWkUsIERFQlVHX01JTklfVklFV1BPUlRfU0laRSwgREVCVUdfTUlOSV9WSUVXUE9SVF9TSVpFKVxuICAgICAgcmVuZGVyZXIuc2V0U2Npc3NvcigxMCwgMTAgKiAyICsgREVCVUdfTUlOSV9WSUVXUE9SVF9TSVpFLCBERUJVR19NSU5JX1ZJRVdQT1JUX1NJWkUsIERFQlVHX01JTklfVklFV1BPUlRfU0laRSlcbiAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgZGVidWdDYW1lcmEub3ZlcnZpZXcpXG4gICAgICA7W2RlYnVnQ2FtZXJhLnh6LCBkZWJ1Z0NhbWVyYS54eSwgZGVidWdDYW1lcmEuenldLmZvckVhY2goKGNhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgbGVmdCA9IDEwICsgKERFQlVHX01JTklfVklFV1BPUlRfU0laRSArIDEwKSAqIGluZGV4XG4gICAgICAgIHJlbmRlcmVyLnNldFZpZXdwb3J0KGxlZnQsIDEwLCBERUJVR19NSU5JX1ZJRVdQT1JUX1NJWkUsIERFQlVHX01JTklfVklFV1BPUlRfU0laRSlcbiAgICAgICAgcmVuZGVyZXIuc2V0U2Npc3NvcihsZWZ0LCAxMCwgREVCVUdfTUlOSV9WSUVXUE9SVF9TSVpFLCBERUJVR19NSU5JX1ZJRVdQT1JUX1NJWkUpXG4gICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtKVxuICAgICAgfSlcblxuICAgICAgLy8gcmVzZXQgY2hhbmdlc1xuICAgICAgZGVidWdDYW1lcmEudXNlckNhbWVyYUhlbHBlci52aXNpYmxlID0gZmFsc2VcbiAgICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoY2xlYXJDb2xvciwgY2xlYXJBbHBoYSlcbiAgICAgIHJlbmRlcmVyLnNldFNjaXNzb3JUZXN0KGZhbHNlKVxuICAgICAgcmVuZGVyZXIuc2V0Vmlld3BvcnQoMCwgMCwgd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcbiAgICB9XG4gIH1cblxuICBjb25zdCBpdGVtSWQgPSBwb3B1cHNTdGF0ZS5wb3B1cHMuaXRlbUlkPy52YWx1ZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKEFyTWVkaWFTZXJ2aWNlLmdldEFyTWVkaWFJdGVtKGl0ZW1JZCkpXG4gIH0sIFtpdGVtSWRdKVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghYXJNZWRpYVN0YXRlLmZldGNoaW5nSXRlbS52YWx1ZSkge1xuICAgICAgc2V0TWVkaWFJdGVtKGFyTWVkaWFTdGF0ZS5pdGVtLnZhbHVlKVxuICAgIH1cbiAgfSwgW2FyTWVkaWFTdGF0ZS5mZXRjaGluZ0l0ZW0udmFsdWUsIGFyTWVkaWFTdGF0ZSwgaXRlbUlkXSlcblxuICBjb25zdCBtZWRpYUl0ZW1JZCA9IG1lZGlhSXRlbT8uaWRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW1lZGlhSXRlbUlkKSB7XG4gICAgICBjb25zb2xlLmxvZygnTWVkaWEgaXRlbSBpcyBub3QgaGVyZSB5ZXQnLCBpdGVtSWQsIGFyTWVkaWFTdGF0ZT8uZmV0Y2hpbmdJdGVtLnZhbHVlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgOyhhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXNjZW5lUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc2NlbmVSZWYuY3VycmVudCA9IG5ldyBTY2VuZSgpXG4gICAgICB9XG4gICAgICBjb25zdCBzY2VuZSA9IHNjZW5lUmVmLmN1cnJlbnRcblxuICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICBkZWJ1Z0NhbWVyYS54eiA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoMiwgLTIsIDIsIC0yLCAwLjAwMSwgMTAwKVxuICAgICAgICBkZWJ1Z0NhbWVyYS54ei5wb3NpdGlvbi55ID0gMTBcbiAgICAgICAgZGVidWdDYW1lcmEueHoucm90YXRlWCgtTWF0aC5QSSAvIDIpXG5cbiAgICAgICAgZGVidWdDYW1lcmEueHkgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKDIsIC0yLCAyLCAtMiwgMC4wMDEsIDEwMClcbiAgICAgICAgZGVidWdDYW1lcmEueHkucG9zaXRpb24ueiA9IDEwXG5cbiAgICAgICAgZGVidWdDYW1lcmEuenkgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKDIsIC0yLCAyLCAtMiwgMC4wMDEsIDEwMClcbiAgICAgICAgZGVidWdDYW1lcmEuenkucG9zaXRpb24ueCA9IDEwXG4gICAgICAgIGRlYnVnQ2FtZXJhLnp5LnJvdGF0ZVkoTWF0aC5QSSAvIDIpXG4gICAgICB9XG5cbiAgICAgIC8vICAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KC4xLCAuMSwgLjEpO1xuICAgICAgLy8gICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxYID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4ZmYwMDAwIH0pO1xuICAgICAgLy8gICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxZID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4MDBmZjAwIH0pO1xuICAgICAgLy8gICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxaID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4MDAwMGZmIH0pO1xuICAgICAgLy8gICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxDID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4ZmZmZmZmIH0pO1xuXG4gICAgICBpZiAoIWFuY2hvclJlZi5jdXJyZW50KSB7XG4gICAgICAgIGFuY2hvclJlZi5jdXJyZW50ID0gbmV3IEdyb3VwKClcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFuY2hvciA9IGFuY2hvclJlZi5jdXJyZW50XG4gICAgICAvLyBUT0RPOiByZXR1cm4gaXQgdG8gZmFsc2VcbiAgICAgIGFuY2hvci52aXNpYmxlID0gZmFsc2VcblxuICAgICAgLy8gICAgICAgICAgICAgYW5jaG9yLmFkZChuZXcgQXhlc0hlbHBlcigwLjMpKTtcbiAgICAgIC8vICAgICAgICAgICAgIGNvbnN0IGFuY2hvckMgPSBuZXcgTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWxDKTtcbiAgICAgIC8vICAgICAgICAgICAgIGFuY2hvci5hZGQoYW5jaG9yQyk7XG4gICAgICAvLyAgICAgICAgICAgICBjb25zdCBhbmNob3JYID0gbmV3IE1lc2goZ2VvbWV0cnksIG1hdGVyaWFsWCk7XG4gICAgICAvLyAgICAgICAgICAgICBhbmNob3JYLnBvc2l0aW9uLnggPSAwLjM7XG4gICAgICAvLyAgICAgICAgICAgICBhbmNob3IuYWRkKGFuY2hvclgpO1xuICAgICAgLy8gICAgICAgICAgICAgY29uc3QgYW5jaG9yWSA9IG5ldyBNZXNoKGdlb21ldHJ5LCBtYXRlcmlhbFkpO1xuICAgICAgLy8gICAgICAgICAgICAgYW5jaG9yWS5wb3NpdGlvbi55ID0gMC4zO1xuICAgICAgLy8gICAgICAgICAgICAgYW5jaG9yLmFkZChhbmNob3JZKTtcbiAgICAgIC8vICAgICAgICAgICAgIGNvbnN0IGFuY2hvclogPSBuZXcgTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWxaKTtcbiAgICAgIC8vICAgICAgICAgICAgIGFuY2hvcloucG9zaXRpb24ueiA9IDAuMztcbiAgICAgIC8vICAgICAgICAgICAgIGFuY2hvci5hZGQoYW5jaG9yWik7XG4gICAgICAvL1xuICAgICAgLy8gICAgICAgICAgICAgc2NlbmUuYWRkKG5ldyBBeGVzSGVscGVyKDAuMikpO1xuXG4gICAgICBpZiAoIWNhbWVyYVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNhbWVyYVJlZi5jdXJyZW50ID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4wMDEsIDEwMClcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNhbWVyYSA9IGNhbWVyYVJlZi5jdXJyZW50XG5cbiAgICAgIGlmIChfREVCVUcpIHtcbiAgICAgICAgZGVidWdDYW1lcmEub3ZlcnZpZXcgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoNzUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjAwMSwgMTAwKVxuICAgICAgICBkZWJ1Z0NhbWVyYS5vdmVydmlldy5wb3NpdGlvbi5zZXQoMywgMywgMylcbiAgICAgICAgZGVidWdDYW1lcmEub3ZlcnZpZXcubG9va0F0KG5ldyBWZWN0b3IzKCkpXG4gICAgICB9XG4gICAgICBzY2VuZS5iYWNrZ3JvdW5kID0gbnVsbFxuXG4gICAgICBpZiAoIXJlbmRlcmVyUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NSRUFURSBuZXcgUmVuZGVyZXInKVxuICAgICAgICByZW5kZXJlclJlZi5jdXJyZW50ID0gbmV3IFdlYkdMUmVuZGVyZXIoeyBhbHBoYTogdHJ1ZSwgY2FudmFzOiBjYW52YXNSZWYuY3VycmVudCB9KVxuICAgICAgICAvL2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnVVNFIHJlZiBSZW5kZXJlcicsIHJlbmRlcmVyUmVmLmN1cnJlbnQpXG4gICAgICAgIGNvbnNvbGUubG9nKCdDQU5WQVMgaXMgc2FtZT8/JywgcmVuZGVyZXJSZWYuY3VycmVudC5kb21FbGVtZW50ID09PSBjYW52YXNSZWYuY3VycmVudClcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlbmRlcmVyID0gcmVuZGVyZXJSZWYuY3VycmVudFxuXG4gICAgICByZW5kZXJlci5vdXRwdXRFbmNvZGluZyA9IHNSR0JFbmNvZGluZ1xuICAgICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICAgICAgcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcbiAgICAgIHJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwdncnXG4gICAgICByZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDB2aCdcbiAgICAgIHJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUuekluZGV4ID0gJy0xJ1xuXG4gICAgICByZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwJ1xuICAgICAgcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gJzAnXG4gICAgICByZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLm1hcmdpbiA9ICcwJ1xuICAgICAgcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzAnXG5cbiAgICAgIHNjZW5lLmFkZChjYW1lcmEpXG5cbiAgICAgIGlmIChfREVCVUcpIHtcbiAgICAgICAgZGVidWdDYW1lcmEudXNlckNhbWVyYUhlbHBlciA9IG5ldyBDYW1lcmFIZWxwZXIoY2FtZXJhKVxuICAgICAgICBzY2VuZS5hZGQoZGVidWdDYW1lcmEudXNlckNhbWVyYUhlbHBlcilcbiAgICAgIH1cblxuICAgICAgc2NlbmUuYWRkKGFuY2hvcilcbiAgICAgIGFuY2hvci5wb3NpdGlvbi5zZXQoMCwgMCwgMClcbiAgICAgIGFuY2hvci5zY2FsZS5zZXRTY2FsYXIoMSlcblxuICAgICAgLy8gc2NlbmUuYWRkKG5ldyBBeGVzSGVscGVyKDIpKTtcbiAgICAgIC8vIGNvbnN0IGdoID0gbmV3IEdyaWRIZWxwZXIoMik7XG4gICAgICAvLyBzY2VuZS5hZGQoZ2gpO1xuXG4gICAgICBpZiAoIXBsYXllclJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIHNldHVwIHBsYXllciBpZiBub3QgZXhpc3RzXG4gICAgICAgIC8vIHNyMS51cmwgYXMgbWFuaWZlc3RVcmwsIHNyMi51cmwgYXMgcHJldmlld1VybCwgc3IzLnVybCBhcyBkcmFjb3Npc1VybCwgc3I0LnVybCBhcyBhdWRpb1VybFxuICAgICAgICBwbGF5ZXJSZWYuY3VycmVudCA9IG5ldyBQbGF5ZXIoe1xuICAgICAgICAgIHNjZW5lOiBhbmNob3IsXG4gICAgICAgICAgcmVuZGVyZXIsXG4gICAgICAgICAgd29ya2VyOiBuZXcgUGxheWVyV29ya2VyKCksXG4gICAgICAgICAgbWVzaEZpbGVQYXRoOiBtZWRpYUl0ZW0uZHJhY29zaXNVcmwsXG4gICAgICAgICAgdmlkZW9GaWxlUGF0aDogbWVkaWFJdGVtLmF1ZGlvVXJsLFxuICAgICAgICAgIG1hbmlmZXN0RmlsZVBhdGg6IG1lZGlhSXRlbS5tYW5pZmVzdFVybCxcbiAgICAgICAgICBvbk1lc2hCdWZmZXJpbmc6IChwcm9ncmVzcykgPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdCVUZGRVJJTkchIScsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIC8vIHNldEJ1ZmZlcmluZ1Byb2dyZXNzKE1hdGgucm91bmQocHJvZ3Jlc3MgKiAxMDApKTtcbiAgICAgICAgICAgIC8vIHNldElzQnVmZmVyaW5nKHRydWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25GcmFtZVNob3c6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIHNldElzQnVmZmVyaW5nKGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gdmlkZW86IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW9cIilcbiAgICAgICAgfSlcbiAgICAgICAgLy9jb25zdCB2aWRlbyA9IHBsYXllclJlZi5jdXJyZW50LnZpZGVvIGFzIEhUTUxNZWRpYUVsZW1lbnQ7XG4gICAgICAgIC8vdmlkZW8ubXV0ZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmFmKVxuXG4gICAgICAvLyBjb25zdCB7IFhSUGx1Z2luIH0gPSBQbHVnaW5zO1xuXG4gICAgICBhd2FpdCBYUlBsdWdpbi5pbml0aWFsaXplKHt9KVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBzZXRJbml0aWFsaXphdGlvblJlc3BvbnNlKHJlc3BvbnNlLnN0YXR1cylcbiAgICAgICAgICBzZXRDb250ZW50SGlkZGVuKClcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSkpXG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIFhSUGx1Z2luLmFkZExpc3RlbmVyKCdwb3NlRGF0YVJlY2VpdmVkJywgKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjYW1lcmEgPSBjYW1lcmFSZWYuY3VycmVudFxuICAgICAgICBjb25zdCBhbmNob3IgPSBhbmNob3JSZWYuY3VycmVudFxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBjYW1lcmFQb3NpdGlvblgsXG4gICAgICAgICAgY2FtZXJhUG9zaXRpb25ZLFxuICAgICAgICAgIGNhbWVyYVBvc2l0aW9uWixcbiAgICAgICAgICBjYW1lcmFSb3RhdGlvblgsXG4gICAgICAgICAgY2FtZXJhUm90YXRpb25ZLFxuICAgICAgICAgIGNhbWVyYVJvdGF0aW9uWixcbiAgICAgICAgICBjYW1lcmFSb3RhdGlvbldcbiAgICAgICAgfSA9IGRhdGFcblxuICAgICAgICAvLyBzZXRDYW1lcmFQb3NlU3RhdGUoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAvLyAgICAgY2FtZXJhUG9zaXRpb25YLFxuICAgICAgICAvLyAgICAgY2FtZXJhUG9zaXRpb25ZLFxuICAgICAgICAvLyAgICAgY2FtZXJhUG9zaXRpb25aLFxuICAgICAgICAvLyAgICAgY2FtZXJhUm90YXRpb25YLFxuICAgICAgICAvLyAgICAgY2FtZXJhUm90YXRpb25ZLFxuICAgICAgICAvLyAgICAgY2FtZXJhUm90YXRpb25aLFxuICAgICAgICAvLyAgICAgY2FtZXJhUm90YXRpb25XXG4gICAgICAgIC8vIH0pKTtcblxuICAgICAgICBjYW1lcmEucXVhdGVybmlvblxuICAgICAgICAgIC5zZXQoY2FtZXJhUm90YXRpb25YLCBjYW1lcmFSb3RhdGlvblksIGNhbWVyYVJvdGF0aW9uWiwgY2FtZXJhUm90YXRpb25XKVxuICAgICAgICAgIC5tdWx0aXBseShjb3JyZWN0aW9uUXVhdGVybmlvblopXG4gICAgICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoY2FtZXJhUG9zaXRpb25YLCBjYW1lcmFQb3NpdGlvblksIGNhbWVyYVBvc2l0aW9uWilcblxuICAgICAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXG5cbiAgICAgICAgaWYgKF9ERUJVRykge1xuICAgICAgICAgIC8vIHN5bmMgY2Ftc1xuICAgICAgICAgIGRlYnVnQ2FtZXJhLm92ZXJ2aWV3Py5sb29rQXQoY2FtZXJhLnBvc2l0aW9uKVxuICAgICAgICAgIGlmIChkZWJ1Z0NhbWVyYS54eikge1xuICAgICAgICAgICAgZGVidWdDYW1lcmEueHoucG9zaXRpb24ueCA9IGNhbWVyYS5wb3NpdGlvbi54XG4gICAgICAgICAgICBkZWJ1Z0NhbWVyYS54ei5wb3NpdGlvbi56ID0gY2FtZXJhLnBvc2l0aW9uLnpcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlYnVnQ2FtZXJhLnh5KSB7XG4gICAgICAgICAgICBkZWJ1Z0NhbWVyYS54eS5wb3NpdGlvbi54ID0gY2FtZXJhLnBvc2l0aW9uLnhcbiAgICAgICAgICAgIGRlYnVnQ2FtZXJhLnh5LnBvc2l0aW9uLnkgPSBjYW1lcmEucG9zaXRpb24ueVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZGVidWdDYW1lcmEuenkpIHtcbiAgICAgICAgICAgIGRlYnVnQ2FtZXJhLnp5LnBvc2l0aW9uLnogPSBjYW1lcmEucG9zaXRpb24uelxuICAgICAgICAgICAgZGVidWdDYW1lcmEuenkucG9zaXRpb24ueSA9IGNhbWVyYS5wb3NpdGlvbi55XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHN5bmMgY2Ftc1xuXG4gICAgICAgIGlmIChkYXRhLnBsYWNlZCkge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGFuY2hvclBvc2l0aW9uWCxcbiAgICAgICAgICAgIGFuY2hvclBvc2l0aW9uWSxcbiAgICAgICAgICAgIGFuY2hvclBvc2l0aW9uWixcbiAgICAgICAgICAgIGFuY2hvclJvdGF0aW9uWCxcbiAgICAgICAgICAgIGFuY2hvclJvdGF0aW9uWSxcbiAgICAgICAgICAgIGFuY2hvclJvdGF0aW9uWixcbiAgICAgICAgICAgIGFuY2hvclJvdGF0aW9uV1xuICAgICAgICAgIH0gPSBkYXRhXG5cbiAgICAgICAgICBjb25zdCBuZXdBbmNob3JUcmFuc2Zvcm1TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgICAgICBhbmNob3JQb3NpdGlvblgsXG4gICAgICAgICAgICBhbmNob3JQb3NpdGlvblksXG4gICAgICAgICAgICBhbmNob3JQb3NpdGlvblosXG4gICAgICAgICAgICBhbmNob3JSb3RhdGlvblgsXG4gICAgICAgICAgICBhbmNob3JSb3RhdGlvblksXG4gICAgICAgICAgICBhbmNob3JSb3RhdGlvblosXG4gICAgICAgICAgICBhbmNob3JSb3RhdGlvbldcbiAgICAgICAgICBdKVxuICAgICAgICAgIHNldEFuY2hvclBvc2VTdGF0ZShuZXdBbmNob3JUcmFuc2Zvcm1TdHJpbmcpXG5cbiAgICAgICAgICBhbmNob3IucXVhdGVybmlvbi5zZXQoYW5jaG9yUm90YXRpb25YLCBhbmNob3JSb3RhdGlvblksIGFuY2hvclJvdGF0aW9uWiwgYW5jaG9yUm90YXRpb25XKVxuICAgICAgICAgIGFuY2hvci5wb3NpdGlvbi5zZXQoYW5jaG9yUG9zaXRpb25YLCBhbmNob3JQb3NpdGlvblksIGFuY2hvclBvc2l0aW9uWilcblxuICAgICAgICAgIGlmICghYW5jaG9yLnZpc2libGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTRVQgQU5DSE9SIFZJU0lCTEUhJylcblxuICAgICAgICAgICAgLy8gYXV0b3NpemUgYW5jaG9yXG4gICAgICAgICAgICBjb25zdCB2b2x1bWV0cmljSGVpZ2h0ID0gMiAvLyBhc3N1bWluZyB0aGlzIGFzIGhpZ2hlc3QgaGVpZ2h0XG4gICAgICAgICAgICBjb25zdCBrID0gY2FtZXJhLnBvc2l0aW9uLmRpc3RhbmNlVG8oYW5jaG9yLnBvc2l0aW9uKVxuICAgICAgICAgICAgY29uc3QgYSA9IChjYW1lcmEuZm92ICogTWF0aC5QSSkgLyAxODAgLyAyXG5cbiAgICAgICAgICAgIGNvbnN0IGhhbGZTY3JlZW5IZWlnaHRBdFBvaW50ID0gayAqIE1hdGgudGFuKGEpXG4gICAgICAgICAgICBjb25zdCBuZXdTY2FsZSA9IChoYWxmU2NyZWVuSGVpZ2h0QXRQb2ludCAvIHZvbHVtZXRyaWNIZWlnaHQpICogMC43NVxuICAgICAgICAgICAgYW5jaG9yLnNjYWxlLnNldFNjYWxhcihuZXdTY2FsZSlcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3BsYXllciA9ICcsIHBsYXllclJlZi5jdXJyZW50KTtcbiAgICAgICAgICAgIGFuY2hvci52aXNpYmxlID0gdHJ1ZVxuXG4gICAgICAgICAgICBpZiAoIWZlZWRIaW50c09uYm9yZGVkKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGhpbnRUd29TaG93KHRydWUpXG4gICAgICAgICAgICAgICAgc2V0RmVlZEhpbnRzT25ib3JkZWQodHJ1ZSlcbiAgICAgICAgICAgICAgfSwgMTAwMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVE9ETzogYWRkIHZvbHVtZXRyaWMgaXNQbGF5aW5nIHByb3BlcnR5XG4gICAgICAgICAgLy8gaWYgKHBsYXllclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ3BsYXllciBwbGF5IScsIGRhdGEpO1xuICAgICAgICAgIC8vIHBsYXllclJlZi5jdXJyZW50Lm1lc2gudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgLy8gaWYgKChwbGF5ZXJSZWYuY3VycmVudC52aWRlbyBhcyBIVE1MTWVkaWFFbGVtZW50KS5wYXVzZWQpIHtcbiAgICAgICAgICAvLyAgICAgcGxheWVyUmVmLmN1cnJlbnQucGxheSgpO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIFhSUGx1Z2luLmFkZExpc3RlbmVyKCdjYW1lcmFJbnRyaW5zaWNzUmVjZWl2ZWQnLCAoZGF0YTogYW55KSA9PiB7XG4gICAgICAgIHNldENhbWVyYUludHJpbnNpY3NTdGF0ZShcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBmWDogZGF0YS5mWCxcbiAgICAgICAgICAgIGZZOiBkYXRhLmZZLFxuICAgICAgICAgICAgY1g6IGRhdGEuY1gsXG4gICAgICAgICAgICBjWTogZGF0YS5jeSxcbiAgICAgICAgICAgIHg6IGRhdGEueCxcbiAgICAgICAgICAgIHk6IGRhdGEueVxuICAgICAgICAgIH0pXG4gICAgICAgIClcblxuICAgICAgICAvLyBUT0RPOiBjaGVja291dCBmb2NhbCBsZW5ndGhcbiAgICAgICAgLy8gY2FtZXJhLnNldEZvY2FsTGVuZ3RoKGRhdGEuZlkvMTApO1xuICAgICAgICAvLyBjYW1lcmEuc2V0Rm9jYWxMZW5ndGgoNTApO1xuXG4gICAgICAgIC8vIFRPRE86XG4gICAgICAgIC8vIFNldCBjYW1lcmEgcG9zaXRpb24gYW5kIHJvdGF0aW9uXG4gICAgICAgIC8vIEVuYWJsZSBjdWJlIGFuZCBtb3ZlIHRvIHBvc2l0aW9uL3JvdGF0aW9uIGlmIHBsYWNlZCBpcyB0cnVlXG4gICAgICB9KVxuXG4gICAgICBYUlBsdWdpbi5zdGFydCh7fSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHNldENhbWVyYVN0YXJ0ZWRTdGF0ZShpc05hdGl2ZSA/ICdDYW1lcmEgc3RhcnRlZCBvbiBuYXRpdmUnIDogJ0NhbWVyYSBzdGFydGVkIG9uIHdlYicpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpKVxuICAgIH0pKClcbiAgfSwgW21lZGlhSXRlbUlkXSlcblxuICBsZXQgZmluaXNoUmVjb3JkID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdmaW5pc2hSZWNvcmQgcmVjb3JkaW5nU3RhdGU6JywgcmVjb3JkaW5nU3RhdGUpXG4gICAgaWYgKHJlY29yZGluZ1N0YXRlUmVmLmN1cnJlbnQgPT09IFJlY29yZGluZ1N0YXRlcy5PTikge1xuICAgICAgY29uc29sZS5sb2coJ2ZpbmlzaFJlY29yZCcpXG4gICAgICBjb25zb2xlLmxvZygnbWVkaWFJdGVtUmVmLmN1cnJlbnQuYXVkaW9JZCcsIG1lZGlhSXRlbVJlZi5jdXJyZW50KVxuICAgICAgY29uc29sZS5sb2coJ2Nsb3NlQnRuQWN0aW9uJywgY2xvc2VCdG5BY3Rpb24pXG4gICAgICBjb25zb2xlLmxvZygnVklERU8gREVMQVknLCB2aWRlb0RlbGF5KVxuICAgICAgY29uc3QgY2xpcFRpdGxlID0gbWVkaWFJdGVtUmVmLmN1cnJlbnQudGl0bGUucmVwbGFjZSgvIC9naSwgJ18nKVxuICAgICAgY29uc3QgY2xpcFRpbWUgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpLnJlcGxhY2UoL1tcXDpcXCBdL2dpLCAnXycpXG4gICAgICBjb25zb2xlLmxvZyhjbGlwVGltZSlcbiAgICAgIGNvbnNvbGUubG9nKGNsaXBUaXRsZSlcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgWFJQbHVnaW4uc3RvcFJlY29yZGluZyh7XG4gICAgICAgIGF1ZGlvSWQ6IG1lZGlhSXRlbVJlZi5jdXJyZW50LmF1ZGlvSWQsXG4gICAgICAgIHZpZGVvRGVsYXk6IHZpZGVvRGVsYXksXG4gICAgICAgIGNsaXBUaXRsZTogY2xpcFRpdGxlLFxuICAgICAgICBjbGlwVGltZTogY2xpcFRpbWVcbiAgICAgIH0pXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgLnRoZW4oKHsgcmVzdWx0LCBmaWxlUGF0aCwgbmFtZUlkIH0pID0+IHtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdFTkQgUkVDT1JESU5HLCByZXN1bHQgSVMnLCByZXN1bHQpXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZpbGVQYXRoIGlzJywgZmlsZVBhdGgpXG4gICAgICAgICAgZGlzcGF0Y2goRmVlZFNlcnZpY2Uuc2V0TGFzdEZlZWRWaWRlb1VybChmaWxlUGF0aCkpXG4gICAgICAgICAgZGlzcGF0Y2goQXJNZWRpYVNlcnZpY2UuZ2V0QXJNZWRpYUl0ZW0obnVsbCkpXG4gICAgICAgICAgc2V0U2F2ZWRGaWxlUGF0aCgnZmlsZTovLycgKyBmaWxlUGF0aClcbiAgICAgICAgICBpZiAoIWNsb3NlQnRuQWN0aW9uLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvUGF0aCA9IENhcGFjaXRvci5jb252ZXJ0RmlsZVNyYyhmaWxlUGF0aClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZpZGVvUGF0aClcbiAgICAgICAgICAgIGRpc3BhdGNoKFBvcHVwc1N0YXRlU2VydmljZS51cGRhdGVOZXdGZWVkUGFnZVN0YXRlKHRydWUsIHZpZGVvUGF0aCwgZmlsZVBhdGgsIG5hbWVJZCkpXG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFJlY29yZGluZ1N0YXRlKFJlY29yZGluZ1N0YXRlcy5PRkYpXG4gICAgICAgICAgZGlzcGF0Y2goUG9wdXBzU3RhdGVTZXJ2aWNlLnVwZGF0ZVdlYlhSU3RhdGUoZmFsc2UsIG51bGwpKVxuXG4gICAgICAgICAgLy8gaWYgKHBsYXllclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgLy8gICAgIGNvbnN0IHZpZGVvID0gcGxheWVyUmVmLmN1cnJlbnQudmlkZW8gYXMgSFRNTE1lZGlhRWxlbWVudDtcbiAgICAgICAgICAvLyAgICAgdmlkZW8ubXV0ZWQgPSB0cnVlO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvLyBzZXRDb250ZW50SGlkZGVuKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGFsZXJ0KGVycm9yLm1lc3NhZ2UpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coJ1JlY29yZCBzdGF0ZSBpcyBPRkYnKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1zVG9UaW1lKG1zKSB7XG4gICAgbGV0IHNlY29uZHMgPSAobXMgLyAxMDAwKS50b0ZpeGVkKDEpXG4gICAgcmV0dXJuIHNlY29uZHNcbiAgfVxuXG4gIGNvbnN0IHN0YXJ0UmVjb3JkID0gKCkgPT4ge1xuICAgIGlmICghd2luZG93LmNvbmZpcm0oJ0RvdWJsZSBjbGljayB0byBmaW5pc2ggdGhlIHJlY29yZC4nKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNldFJlY29yZGluZ1N0YXRlKFJlY29yZGluZ1N0YXRlcy5TVEFSVElORylcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKClcbiAgICBjb25zdCBzY3JlZW5IZWlnaHQgPSBNYXRoLmZsb29yKHNjcmVlbi5oZWlnaHQgLyAyKSAqIDJcbiAgICBjb25zdCBzY3JlZW5XaWR0aCA9IE1hdGguZmxvb3Ioc2NyZWVuLndpZHRoIC8gMikgKiAyXG5cbiAgICAvL1RPRE86IGNoZWNrIHdoeSB0aGVyZSBhcmUgZXJyb3JzXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFhSUGx1Z2luLnN0YXJ0UmVjb3JkaW5nKHtcbiAgICAgIGlzQXVkaW86IHRydWUsXG4gICAgICB3aWR0aDogc2NyZWVuV2lkdGgsXG4gICAgICBoZWlnaHQ6IHNjcmVlbkhlaWdodCxcbiAgICAgIGJpdFJhdGU6IDYwMDAwMDAsXG4gICAgICBkcGk6IDEwMCxcbiAgICAgIGZpbGVQYXRoOiAnL3Rlc3QubXA0J1xuICAgIH0pXG4gICAgICAudGhlbigoeyBzdGF0dXMgfSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnUkVDT1JESU5HLCBTVEFUVVMgSVMnLCBzdGF0dXMpXG4gICAgICAgIGlmIChwbGF5ZXJSZWYuY3VycmVudCkge1xuICAgICAgICAgIC8vIGNvbnN0IHZpZGVvID0gcGxheWVyUmVmLmN1cnJlbnQudmlkZW8gYXMgSFRNTE1lZGlhRWxlbWVudDtcbiAgICAgICAgICAvLyB2aWRlby5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgcGxheWVyUmVmLmN1cnJlbnQudmlkZW8ubXV0ZWQgPSB0cnVlXG4gICAgICAgICAgY29uc29sZS5sb2coJ1BsYXllci5wbGF5KCkhJylcbiAgICAgICAgICBwbGF5ZXJSZWYuY3VycmVudC5wbGF5KClcbiAgICAgICAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZSgpXG4gICAgICAgICAgc2V0VmlkZW9EZWxheShwYXJzZUZsb2F0KG1zVG9UaW1lKGVuZC5nZXRUaW1lKCkgLSBzdGFydC5nZXRUaW1lKCkpKSlcbiAgICAgICAgfVxuICAgICAgICBzZXRSZWNvcmRpbmdTdGF0ZShSZWNvcmRpbmdTdGF0ZXMuT04pXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBhbGVydChlcnJvci5tZXNzYWdlKVxuICAgICAgICBzZXRSZWNvcmRpbmdTdGF0ZShSZWNvcmRpbmdTdGF0ZXMuT0ZGKVxuICAgICAgfSlcbiAgfVxuXG4gIGNvbnN0IHRvZ2dsZVJlY29yZGluZyA9ICgpID0+IHtcbiAgICBpZiAocmVjb3JkaW5nU3RhdGUgPT09IFJlY29yZGluZ1N0YXRlcy5PRkYpIHtcbiAgICAgIHN0YXJ0UmVjb3JkKClcbiAgICB9IGVsc2UgaWYgKHJlY29yZGluZ1N0YXRlID09PSBSZWNvcmRpbmdTdGF0ZXMuT04pIHtcbiAgICAgIGZpbmlzaFJlY29yZCgpXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlVGFwID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTENhbnZhc0VsZW1lbnQ+KSA9PiB7XG4gICAgaWYgKHJlY29yZGluZ1N0YXRlICE9PSBSZWNvcmRpbmdTdGF0ZXMuT0ZGKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgeDogZS5jbGllbnRYICogd2luZG93LmRldmljZVBpeGVsUmF0aW8sXG4gICAgICB5OiBlLmNsaWVudFkgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb1xuICAgIH1cblxuICAgIGlmIChwbGF5ZXJSZWYuY3VycmVudCAmJiBwbGF5ZXJSZWYuY3VycmVudC5jdXJyZW50RnJhbWUgPD0gMCkge1xuICAgICAgcGxheWVyUmVmLmN1cnJlbnQucGxheU9uZUZyYW1lKClcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFhSUGx1Z2luLmhhbmRsZVRhcChwYXJhbXMpXG4gIH1cblxuICBjb25zdCBwbGF5VmlkZW8gPSAoKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFhSUGx1Z2luLnBsYXlWaWRlbygpXG4gIH1cblxuICBjb25zdCBwYXVzZVZpZGVvID0gKCkgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBYUlBsdWdpbi5wYXVzZVZpZGVvKClcbiAgfVxuXG4gIGNvbnN0IGNsZWFyQW5jaG9ycyA9ICgpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgWFJQbHVnaW4uY2xlYXJBbmNob3JzKClcbiAgfVxuXG4gIGNvbnN0IHN0b3BSZWNvcmQgPSAoKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFhSUGx1Z2luLnN0b3Aoe30pXG4gIH1cblxuICAvLyB1c2VFZmZlY3QoKCkgPT4ge1xuICAvLyAgICAgc2V0U2Vjb25kU3RhdGUoXCJJbml0aWFsaXplZCBhbmQgZWZmZWN0ZWRcIik7XG4gIC8vIH0sIFtpbml0aWFsaXphdGlvblJlc3BvbnNlXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgey8qIDxkaXYgY2xhc3NOYW1lPVwicGx1Z2ludGVzdFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwbHVnaW50ZXN0UmVhZG91dFwiPlxuICAgICAgICAgICAgICAgIDxwPklSOntpbml0aWFsaXphdGlvblJlc3BvbnNlfTwvcD5cbiAgICAgICAgICAgICAgICA8cD5DU1M6e2NhbWVyYVN0YXJ0ZWRTdGF0ZX08L3A+XG4gICAgICAgICAgICAgICAgPHA+SVM6e2ludHJpbnNpY3NTdGF0ZX08L3A+XG4gICAgICAgICAgICAgICAgPHA+Q1BTOntjYW1lcmFQb3NlU3RhdGV9PC9wPlxuICAgICAgICAgICAgICAgIDxwPkFQUzp7YW5jaG9yUG9zZVN0YXRlfTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj4gKi99XG4gICAgICB7aGludE9uZSA/IDxIaW50T25lIGhpbnRPbmVTaG93PXtoaW50T25lU2hvd30gLz4gOiAnJ31cbiAgICAgIHtoaW50VHdvID8gPEhpbnRUd28gaGludFR3b1Nob3c9e2hpbnRUd29TaG93fSAvPiA6ICcnfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwbHVnaW50ZXN0Q29udHJvbHNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3JlY29yZGluZ1N0YXRlID09PSBSZWNvcmRpbmdTdGF0ZXMuT0ZGID8gJycgOiBzdHlsZXMuaGlkZUJ1dHRvbnN9PlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT17c3R5bGVzLndhdGVyTWFya1dyYXBwZXJ9PlxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMud2F0ZXJNYXJrfT5cbiAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuc3ViQ29udGFpbmVyfSAvPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9e3N0eWxlcy5mbGlwQ2FtZXJhfSBvbkNsaWNrPXsoKSA9PiB7fX0+XG4gICAgICAgICAgICA8RmxpcENhbWVyYUlvc0ljb24gLz5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB7LyogICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT17c3R5bGVzLmNoYW5nZU9yaWVudGF0aW9ufSBvbkNsaWNrPXsoKSA9PiB7c2V0SG9yaXpvbnRhbE9yaWVudGF0aW9uKCFob3Jpem9udGFsT3JpZW50YXRpb24pO319PjxGbGlwQ2FtZXJhSW9zSWNvbiAvPjwvYnV0dG9uPiAqL31cbiAgICAgICAgICA8c2VjdGlvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtyZWNvcmRpbmdTdGF0ZSA9PT0gUmVjb3JkaW5nU3RhdGVzLk9GRiA/IHN0eWxlcy5zdGFydEJ1dHRvbldyYXBwZXIgOiBzdHlsZXMuc3RvcEJ1dHRvbldyYXBwZXJ9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgey8qe3JlY29yZGluZ1N0YXRlID09PSBSZWNvcmRpbmdTdGF0ZXMuT0ZGID8gXCJSZWNvcmRcIiA6IFwiU3RvcCBSZWNvcmRpbmdcIn0qL31cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17cmVjb3JkaW5nU3RhdGUgPT09IFJlY29yZGluZ1N0YXRlcy5PRkYgPyBzdHlsZXMuc3RhcnRCdXR0b24gOiBzdHlsZXMuc3RvcEJ1dHRvbn1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdG9nZ2xlUmVjb3JkaW5nKCl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxWaWRlb2NhbUljb24gLz5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICB7LyogPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9e3sgcGFkZGluZzogXCIxZW1cIiB9fSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUYXAoKX0+UGxhY2UgQVI8L2J1dHRvbj4gKi99XG4gICAgICAgICAgey8qIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHN0eWxlPXt7IHBhZGRpbmc6IFwiMWVtXCIgfX0gb25DbGljaz17KCkgPT4gY2xlYXJBbmNob3JzKCl9PmNsZWFyQW5jaG9yczwvYnV0dG9uPiAqL31cbiAgICAgICAgICB7LyogPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9e3sgcGFkZGluZzogXCIxZW1cIiB9fSBvbkNsaWNrPXsoKSA9PiBwbGF5VmlkZW8oKX0+cGxheVZpZGVvPC9idXR0b24+ICovfVxuICAgICAgICAgIHsvKiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBzdHlsZT17eyBwYWRkaW5nOiBcIjFlbVwiIH19IG9uQ2xpY2s9eygpID0+IHBhdXNlVmlkZW8oKX0+cGF1c2VWaWRlbzwvYnV0dG9uPiAqL31cbiAgICAgICAgICB7LypcbiAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5jbG9zZUJ1dHRvbldyYXBwZXJ9PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9e3N0eWxlcy5jbG9zZUJ1dHRvbn0gb25DbGljaz17KCkgPT4gc3RvcFJlY29yZCgpfT48Q2hldnJvbkxlZnRJY29uIC8+U2xpZGUgdG8gY2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAqL31cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxjYW52YXNcbiAgICAgICAgcmVmPXtjYW52YXNSZWZ9XG4gICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmFyY0NhbnZhc31cbiAgICAgICAgaWQ9eydhcmNDYW52YXMnfVxuICAgICAgICBvbkNsaWNrPXsoZSkgPT4gaGFuZGxlVGFwKGUpfVxuICAgICAgICBvbkRvdWJsZUNsaWNrPXtmaW5pc2hSZWNvcmR9XG4gICAgICAvPlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYlhSUGx1Z2luXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMsIERpc3BhdGNoIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyB1c2VQb3B1cHNTdGF0ZVN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vcmVkdWNlcnMvcG9wdXBzU3RhdGUvUG9wdXBzU3RhdGVTdGF0ZSdcblxuaW1wb3J0IFdlYlhSUGx1Z2luIGZyb20gJy4uLy4uL1dlYlhSUGx1Z2luJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZXRDb250ZW50SGlkZGVuPzogYW55XG4gIGZlZWRIaW50c09uYm9yZGVkPzogYW55XG4gIHNldEZlZWRIaW50c09uYm9yZGVkPzogYW55XG4gIHdlYnhyUmVjb3JkZXJBY3Rpdml0eT86IGFueVxufVxuZXhwb3J0IGNvbnN0IFdlYlhSU3RhcnQgPSAoe1xuICB3ZWJ4clJlY29yZGVyQWN0aXZpdHksXG4gIGZlZWRIaW50c09uYm9yZGVkLFxuICBzZXRGZWVkSGludHNPbmJvcmRlZCxcbiAgc2V0Q29udGVudEhpZGRlblxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgcG9wdXBzU3RhdGUgPSB1c2VQb3B1cHNTdGF0ZVN0YXRlKClcbiAgLy9jb21tb24gZm9yIHdlYiB4clxuXG4gIGNvbnN0IHJlbmRlcldlYlhSTW9kYWwgPSAoKSA9PlxuICAgIHBvcHVwc1N0YXRlPy5wb3B1cHM/LndlYnhyPy52YWx1ZSA9PT0gdHJ1ZSAmJiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8V2ViWFJQbHVnaW5cbiAgICAgICAgICBmZWVkSGludHNPbmJvcmRlZD17ZmVlZEhpbnRzT25ib3JkZWR9XG4gICAgICAgICAgc2V0RmVlZEhpbnRzT25ib3JkZWQ9e3NldEZlZWRIaW50c09uYm9yZGVkfVxuICAgICAgICAgIHNldENvbnRlbnRIaWRkZW49e3NldENvbnRlbnRIaWRkZW59XG4gICAgICAgICAgd2VieHJSZWNvcmRlckFjdGl2aXR5PXt3ZWJ4clJlY29yZGVyQWN0aXZpdHl9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZW5kZXJXZWJYUk1vZGFsKClcbiAgfSwgW3BvcHVwc1N0YXRlPy5wb3B1cHM/LndlYnhyLnZhbHVlXSlcbiAgcmV0dXJuIHJlbmRlcldlYlhSTW9kYWwoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWJYUlN0YXJ0XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgVGVybXMgZnJvbSAnLi9UZXJtc0FuZFBvbGljeS90ZXJtcydcbmltcG9ydCBQb2xpY3kgZnJvbSAnLi9UZXJtc0FuZFBvbGljeS9wb2xpY3knXG5cbmNvbnN0IFRlbXBvcmFyeVNvbHV0aW9uID0gKHsgdmlldywgc2V0VmlldyB9OiBhbnkpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge3ZpZXcgPT09ICd0ZXJtcycgPyA8VGVybXMgc2V0Vmlldz17c2V0Vmlld30gLz4gOiBudWxsfVxuICAgICAge3ZpZXcgPT09ICdwb2xpY3knID8gPFBvbGljeSBzZXRWaWV3PXtzZXRWaWV3fSAvPiA6IG51bGx9XG4gICAgPC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGVtcG9yYXJ5U29sdXRpb25cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0LCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzLCBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgU25hY2tiYXJQcm92aWRlciB9IGZyb20gJ25vdGlzdGFjaydcblxuaW1wb3J0IEFwcEhlYWRlciBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL0hlYWRlcidcbmltcG9ydCBGZWVkTWVudSBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL0ZlZWRNZW51J1xuaW1wb3J0IEFwcEZvb3RlciBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL0Zvb3RlcidcbmltcG9ydCB7IHVzZUNyZWF0b3JTdGF0ZSB9IGZyb20gJ0B4cmVuZ2luZS9zb2NpYWwvc3JjL3JlZHVjZXJzL2NyZWF0b3IvQ3JlYXRvclN0YXRlJ1xuLy8gaW1wb3J0IHtTdG9yaWVzfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbG1lZGlhL2NvbXBvbmVudHMvU3Rvcmllcyc7XG5pbXBvcnQgeyB1c2VBdXRoU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3VzZXIvcmVkdWNlcnMvYXV0aC9BdXRoU3RhdGUnXG5pbXBvcnQgeyB1c2VXZWJ4ck5hdGl2ZVN0YXRlIH0gZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvcmVkdWNlcnMvd2VieHJfbmF0aXZlL1dlYnhyTmF0aXZlU3RhdGUnXG5cbmltcG9ydCB7IFdlYnhyTmF0aXZlU2VydmljZSB9IGZyb20gJ0B4cmVuZ2luZS9zb2NpYWwvc3JjL3JlZHVjZXJzL3dlYnhyX25hdGl2ZS9XZWJ4ck5hdGl2ZVNlcnZpY2UnXG5cbmltcG9ydCBDcmVhdG9yUG9wdXAgZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvY29tcG9uZW50cy9wb3B1cHMvQ3JlYXRvclBvcHVwJ1xuaW1wb3J0IEZlZWRQb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9GZWVkUG9wdXAnXG5pbXBvcnQgQ3JlYXRvckZvcm1Qb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9DcmVhdG9yRm9ybVBvcHVwJ1xuaW1wb3J0IEFyTWVkaWFQb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9Bck1lZGlhUG9wdXAnXG5pbXBvcnQgRmVlZEZvcm1Qb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9GZWVkRm9ybVBvcHVwJ1xuaW1wb3J0IFNoYXJlZEZvcm1Qb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9TaGFyZWRGb3JtUG9wdXAnXG5pbXBvcnQgT25ib2FyZCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL09uQm9hcmQnXG5pbXBvcnQgRmVlZE9uYm9hcmRpbmcgZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvY29tcG9uZW50cy9GZWVkT25ib2FyZGluZydcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pbmRleC5tb2R1bGUuc2NzcydcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJ1xuXG4vLyBpbXBvcnQgaW1hZ2UgZnJvbSAnL3N0YXRpYy9pbWFnZXMvaW1hZ2UuanBnJ1xuLy8gaW1wb3J0IG1vY2t1cElQaG9uZSBmcm9tICcvc3RhdGljL2ltYWdlcy9tb2NrdXBJUGhvbmUuanBnJ1xuaW1wb3J0IFNwbGFzaCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL1NwbGFzaCdcbmltcG9ydCB7IGlzSU9TIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy91dGlsL3BsYXRmb3JtQ2hlY2snXG5pbXBvcnQgVGVybXNBbmRQb2xpY3kgZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvY29tcG9uZW50cy9UZXJtc2FuZFBvbGljeSdcbmltcG9ydCBCbG9ja2VkIGZyb20gJ0B4cmVuZ2luZS9zb2NpYWwvc3JjL2NvbXBvbmVudHMvQmxvY2tlZCdcbmltcG9ydCBXZWJYUlN0YXJ0IGZyb20gJy4uL2NvbXBvbmVudHMvcG9wdXBzL1dlYlhSJ1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgVGVtcG9yYXJ5U29sdXRpb24gZnJvbSAnLi9UZW1wb3JhcnlTb2x1dGlvbidcblxuaW1wb3J0IHsgQ3JlYXRvckFjdGlvbiB9IGZyb20gJy4uL3JlZHVjZXJzL2NyZWF0b3IvQ3JlYXRvckFjdGlvbnMnXG5cbmludGVyZmFjZSBQcm9wcyB7fVxuXG5jb25zdCBIb21lID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICBjb25zdCBhdXRoID0gdXNlQXV0aFN0YXRlKClcbiAgLypoaWRlZCBmb3Igbm93Ki9cbiAgY29uc3QgW29uYm9yZGVkLCBzZXRPbmJvcmRlZF0gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbZmVlZE9uYm9yZGVkLCBzZXRGZWVkT25ib3JkZWRdID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW2ZlZWRIaW50c09uYm9yZGVkLCBzZXRGZWVkSGludHNPbmJvcmRlZF0gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbcmVnaXN0cmF0aW9uRm9ybSwgc2V0UmVnaXN0cmF0aW9uRm9ybV0gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbdmlldywgc2V0Vmlld10gPSB1c2VTdGF0ZSgnZmVhdHVyZWQnKVxuICBjb25zdCBjcmVhdG9yc1N0YXRlID0gdXNlQ3JlYXRvclN0YXRlKClcbiAgY29uc3QgY3VycmVudENyZWF0b3IgPSBjcmVhdG9yc1N0YXRlLmNyZWF0b3JzLmN1cnJlbnRDcmVhdG9yXG4gIGNvbnN0IGN1cnJlbnRUaW1lID0gbmV3IERhdGUoRGF0ZS5ub3coKSkudG9JU09TdHJpbmcoKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCEhY3VycmVudENyZWF0b3I/LnZhbHVlICYmICEhY3VycmVudENyZWF0b3I/LmNyZWF0ZWRBdD8udmFsdWUpIHtcbiAgICAgIGN1cnJlbnRUaW1lLnNsaWNlKDAsIC01KSA9PT0gY3VycmVudENyZWF0b3I/LmNyZWF0ZWRBdD8udmFsdWU/LnNsaWNlKDAsIC01KSAmJiBzZXRPbmJvcmRlZChmYWxzZSlcbiAgICB9XG4gIH0sIFtjdXJyZW50Q3JlYXRvcl0pXG4gIGNvbnN0IHdlYnhybmF0aXZlU3RhdGUgPSB1c2VXZWJ4ck5hdGl2ZVN0YXRlKClcbiAgY29uc3Qgd2VieHJSZWNvcmRlckFjdGl2aXR5ID0gd2VieHJuYXRpdmVTdGF0ZS53ZWJ4cm5hdGl2ZS52YWx1ZVxuXG4gIGNvbnN0IGNoYW5nZU9uYm9hcmRpbmcgPSAoKSA9PiB7XG4gICAgc2V0T25ib3JkZWQodHJ1ZSlcbiAgICBzZXRGZWVkT25ib3JkZWQoZmFsc2UpXG4gICAgc2V0RmVlZEhpbnRzT25ib3JkZWQoZmFsc2UpXG4gIH1cbiAgY29uc3QgcGxhdGZvcm1DbGFzcyA9IGlzSU9TID8gc3R5bGVzLmlzSW9zIDogJydcbiAgY29uc3Qgc3BsYXNoVGltZW91dCA9IGNyZWF0b3JzU3RhdGUuY3JlYXRvcnMuc3BsYXNoVGltZW91dC52YWx1ZVxuICBjb25zdCBoaWRlQ29udGVudE9uUmVjb3JkID0gd2VieHJSZWNvcmRlckFjdGl2aXR5ID8gc3R5bGVzLmhpZGVDb250ZW50T25SZWNvcmQgOiAnJ1xuXG4gIGlmIChcbiAgICAhY3VycmVudENyZWF0b3I/LnZhbHVlIHx8XG4gICAgY3VycmVudENyZWF0b3I/LnZhbHVlID09PSBudWxsIHx8XG4gICAgKHNwbGFzaFRpbWVvdXQgJiYgY3VycmVudENyZWF0b3I/LmlzQmxvY2tlZD8udmFsdWUgPT0gZmFsc2UpXG4gICkge1xuICAgIC8vYWRkIGFkZGl0aW9uYWwgZHVyYXRpb24gU3BsYXNoIGFmdGVyIGluaXRpYWxpemVkIHVzZXJcbiAgICBjb25zdCBzcGxhc2ggPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGRpc3BhdGNoKENyZWF0b3JBY3Rpb24uc2V0U3RhdGVDcmVhdG9ycyhmYWxzZSkpXG4gICAgICBjbGVhclRpbWVvdXQoc3BsYXNoKVxuICAgIH0sIDUwMDApXG4gICAgcmV0dXJuIDxTcGxhc2ggLz5cbiAgfVxuXG4gIGNvbnN0IG9uR29SZWdpc3RyYXRpb24gPSAoY2FsbEJhY2s/KSA9PiB7XG4gICAgLy8gaWYgKGF1dGgudXNlci51c2VyUm9sZS52YWx1ZSA9PT0gJ2d1ZXN0Jykge1xuICAgIGlmIChmYWxzZSkge1xuICAgICAgaGlzdG9yeS5wdXNoKCcvcmVnaXN0cmF0aW9uJylcbiAgICB9IGVsc2UgaWYgKGNhbGxCYWNrKSB7XG4gICAgICBjYWxsQmFjaygpXG4gICAgfVxuICB9XG5cbiAgaWYgKGN1cnJlbnRDcmVhdG9yPy5pc0Jsb2NrZWQ/LnZhbHVlID09IHRydWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFNwbGFzaCAvPlxuICAgICAgICA8QmxvY2tlZCAvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgY29uc3QgY2hhbmdlV2ViWHJOYXRpdmUgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goV2VieHJOYXRpdmVTZXJ2aWNlLmNoYW5nZVdlYlhyTmF0aXZlKCkpXG4gIH1cblxuICAvLyBpZiAoIW9uYm9yZGVkKSByZXR1cm4gPE9uYm9hcmQgc2V0T25ib3JkZWQ9e2NoYW5nZU9uYm9hcmRpbmd9IGltYWdlPXtpbWFnZX0gbW9ja3VwSVBob25lPXttb2NrdXBJUGhvbmV9IC8+XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHt2aWV3ID09PSAndGVybXMnIHx8IHZpZXcgPT09ICdwb2xpY3knID8gKFxuICAgICAgICA8VGVtcG9yYXJ5U29sdXRpb24gdmlldz17dmlld30gc2V0Vmlldz17c2V0Vmlld30gLz5cbiAgICAgICkgOiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtwbGF0Zm9ybUNsYXNzICsgJyAnICsgaGlkZUNvbnRlbnRPblJlY29yZH0+XG4gICAgICAgICAgey8qeyFmZWVkT25ib3JkZWQgJiYgPEZlZWRPbmJvYXJkaW5nIHNldEZlZWRPbmJvcmRlZD17c2V0RmVlZE9uYm9yZGVkfSAvPn0qL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17d2VieHJSZWNvcmRlckFjdGl2aXR5ID8gc3R5bGVzLmhpZGVDb250ZW50ICsgJyAnICsgc3R5bGVzLnZpZXdwb3J0IDogc3R5bGVzLnZpZXdwb3J0fT5cbiAgICAgICAgICAgIDxBcHBIZWFkZXIgc2V0Vmlldz17c2V0Vmlld30gb25Hb1JlZ2lzdHJhdGlvbj17b25Hb1JlZ2lzdHJhdGlvbn0gLz5cbiAgICAgICAgICAgIHsvKiA8U3RvcmllcyBzdG9yaWVzPXtzdG9yaWVzfSAvPiAqL31cbiAgICAgICAgICAgIDxGZWVkTWVudSB2aWV3PXt2aWV3fSBzZXRWaWV3PXtzZXRWaWV3fSAvPlxuICAgICAgICAgICAgPEFwcEZvb3RlciBzZXRWaWV3PXtzZXRWaWV3fSBvbkdvUmVnaXN0cmF0aW9uPXtvbkdvUmVnaXN0cmF0aW9ufSAvPlxuICAgICAgICAgICAgeyhjdXJyZW50Q3JlYXRvcj8udmFsdWUgJiZcbiAgICAgICAgICAgICAgLy8gTWFkZSBhdCB0aGUgdGltZSBvZiB0aGUgdGVzdCBBbGVrczk1MVxuICAgICAgICAgICAgICAoISEhY3VycmVudENyZWF0b3IudGVybXMudmFsdWUgfHwgISEhY3VycmVudENyZWF0b3IucG9saWN5LnZhbHVlKSAmJlxuICAgICAgICAgICAgICBhdXRoLnVzZXIudXNlclJvbGUudmFsdWUgPT09ICd1c2VyJykgfHxcbiAgICAgICAgICAgICAgKGF1dGgudXNlci51c2VyUm9sZS52YWx1ZSA9PT0gJ2d1ZXN0JyAmJiA8VGVybXNBbmRQb2xpY3kgdmlldz17dmlld30gc2V0Vmlldz17c2V0Vmlld30gLz4pfVxuICAgICAgICAgICAgPEFyTWVkaWFQb3B1cCAvPlxuICAgICAgICAgICAgPFdlYlhSU3RhcnRcbiAgICAgICAgICAgICAgZmVlZEhpbnRzT25ib3JkZWQ9e2ZlZWRIaW50c09uYm9yZGVkfVxuICAgICAgICAgICAgICB3ZWJ4clJlY29yZGVyQWN0aXZpdHk9e3dlYnhyUmVjb3JkZXJBY3Rpdml0eX1cbiAgICAgICAgICAgICAgc2V0Q29udGVudEhpZGRlbj17Y2hhbmdlV2ViWHJOYXRpdmV9XG4gICAgICAgICAgICAgIHNldEZlZWRIaW50c09uYm9yZGVkPXtzZXRGZWVkSGludHNPbmJvcmRlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q3JlYXRvclBvcHVwIHdlYnhyUmVjb3JkZXJBY3Rpdml0eT17d2VieHJSZWNvcmRlckFjdGl2aXR5fSBzZXRWaWV3PXtzZXRWaWV3fSAvPlxuICAgICAgICAgICAgPEZlZWRQb3B1cCB3ZWJ4clJlY29yZGVyQWN0aXZpdHk9e3dlYnhyUmVjb3JkZXJBY3Rpdml0eX0gc2V0Vmlldz17c2V0Vmlld30gLz5cbiAgICAgICAgICAgIDxDcmVhdG9yRm9ybVBvcHVwIHdlYnhyUmVjb3JkZXJBY3Rpdml0eT17d2VieHJSZWNvcmRlckFjdGl2aXR5fSBzZXRWaWV3PXtzZXRWaWV3fSAvPlxuICAgICAgICAgICAgPEZlZWRGb3JtUG9wdXAgc2V0Vmlldz17c2V0Vmlld30gLz5cbiAgICAgICAgICAgIDxTaGFyZWRGb3JtUG9wdXAgc2V0Vmlldz17c2V0Vmlld30gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVcbiIsIi8vIGltcG9ydCB7U3Rvcmllc30gZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvY29tcG9uZW50cy9TdG9yaWVzJztcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy91c2VyL3JlZHVjZXJzL2F1dGgvQXV0aFNlcnZpY2UnXG5pbXBvcnQgeyBpc0lPUyB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvdXRpbC9wbGF0Zm9ybUNoZWNrJ1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycywgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcblxuaW1wb3J0IEFwcEhlYWRlciBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL0hlYWRlcidcbmltcG9ydCBGZWVkTWVudSBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL0ZlZWRNZW51J1xuaW1wb3J0IEFwcEZvb3RlciBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL0Zvb3RlcidcblxuLy8gaW1wb3J0IHtTdG9yaWVzfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3NvY2lhbG1lZGlhL2NvbXBvbmVudHMvU3Rvcmllcyc7XG5cbmltcG9ydCB7IFVzZXIgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL1VzZXInXG5cbmltcG9ydCBDcmVhdG9yUG9wdXAgZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvY29tcG9uZW50cy9wb3B1cHMvQ3JlYXRvclBvcHVwJ1xuaW1wb3J0IEZlZWRQb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9GZWVkUG9wdXAnXG5pbXBvcnQgQ3JlYXRvckZvcm1Qb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9DcmVhdG9yRm9ybVBvcHVwJ1xuaW1wb3J0IEFyTWVkaWFQb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9Bck1lZGlhUG9wdXAnXG5pbXBvcnQgRmVlZEZvcm1Qb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9GZWVkRm9ybVBvcHVwJ1xuaW1wb3J0IFNoYXJlZEZvcm1Qb3B1cCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9TaGFyZWRGb3JtUG9wdXAnXG5pbXBvcnQgV2ViWFJTdGFydCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL3BvcHVwcy9XZWJYUidcbmltcG9ydCB7IHVzZUNyZWF0b3JTdGF0ZSB9IGZyb20gJ0B4cmVuZ2luZS9zb2NpYWwvc3JjL3JlZHVjZXJzL2NyZWF0b3IvQ3JlYXRvclN0YXRlJ1xuaW1wb3J0IHsgQ3JlYXRvclNlcnZpY2UgfSBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9yZWR1Y2Vycy9jcmVhdG9yL0NyZWF0b3JTZXJ2aWNlJ1xuaW1wb3J0IHsgdXNlV2VieHJOYXRpdmVTdGF0ZSB9IGZyb20gJ0B4cmVuZ2luZS9zb2NpYWwvc3JjL3JlZHVjZXJzL3dlYnhyX25hdGl2ZS9XZWJ4ck5hdGl2ZVN0YXRlJ1xuaW1wb3J0IHsgV2VieHJOYXRpdmVTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvcmVkdWNlcnMvd2VieHJfbmF0aXZlL1dlYnhyTmF0aXZlU2VydmljZSdcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9pbmRleC5tb2R1bGUuc2NzcydcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJ1xuXG4vLyBpbXBvcnQgaW1hZ2UgZnJvbSAnL3N0YXRpYy9pbWFnZXMvaW1hZ2UuanBnJ1xuLy8gaW1wb3J0IG1vY2t1cElQaG9uZSBmcm9tICcvc3RhdGljL2ltYWdlcy9tb2NrdXBJUGhvbmUuanBnJ1xuaW1wb3J0IFNwbGFzaCBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL1NwbGFzaCdcbmltcG9ydCBUZXJtc0FuZFBvbGljeSBmcm9tICdAeHJlbmdpbmUvc29jaWFsL3NyYy9jb21wb25lbnRzL1Rlcm1zYW5kUG9saWN5J1xuaW1wb3J0IEJsb2NrZWQgZnJvbSAnQHhyZW5naW5lL3NvY2lhbC9zcmMvY29tcG9uZW50cy9CbG9ja2VkJ1xuLy8gaW1wb3J0IHsgV2ViWFJTdGFydCB9IGZyb20gJy4uL2NvbXBvbmVudHMvcG9wdXBzL1dlYlhSJ1xuaW1wb3J0IHsgdXNlQXV0aFN0YXRlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy91c2VyL3JlZHVjZXJzL2F1dGgvQXV0aFN0YXRlJ1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuXG5pbXBvcnQgeyBnZXRTdG9yZWRBdXRoU3RhdGUgfSBmcm9tICdAeHJlbmdpbmUvY2xpZW50LWNvcmUvc3JjL3BlcnNpc3RlZC5zdG9yZSdcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnXG5cbmNvbnN0IEhvbWUgPSAoe30pID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gIGNvbnN0IGF1dGggPSB1c2VBdXRoU3RhdGUoKVxuXG4gIC8qaGlkZWQgZm9yIG5vdyovXG5cbiAgY29uc3QgYXV0aERhdGEgPSBnZXRTdG9yZWRBdXRoU3RhdGUoKVxuICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF1dGhEYXRhPy5hdXRoVXNlciA/IGF1dGhEYXRhLmF1dGhVc2VyLmFjY2Vzc1Rva2VuIDogdW5kZWZpbmVkXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICBkaXNwYXRjaChBdXRoU2VydmljZS5kb0xvZ2luQXV0byh0cnVlKSlcbiAgICBkaXNwYXRjaChXZWJ4ck5hdGl2ZVNlcnZpY2UuZ2V0V2ViWHJOYXRpdmUoKSlcbiAgICAvLyB9XG4gIH0sIFthY2Nlc3NUb2tlbl0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0aD8uYXV0aFVzZXI/LmFjY2Vzc1Rva2VuKSB7XG4gICAgICBpZiAoYXV0aC51c2VyLmlkLnZhbHVlKSB7XG4gICAgICAgIGRpc3BhdGNoKENyZWF0b3JTZXJ2aWNlLmNyZWF0ZUNyZWF0b3IoKSlcbiAgICAgIH1cbiAgICB9XG4gIH0sIFthdXRoLmlzTG9nZ2VkSW4udmFsdWUsIGF1dGgudXNlci5pZC52YWx1ZV0pXG5cbiAgY29uc3QgW29uYm9yZGVkLCBzZXRPbmJvcmRlZF0gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbZmVlZE9uYm9yZGVkLCBzZXRGZWVkT25ib3JkZWRdID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW3NwbGFzaFRpbWVvdXQsIHNldFNwbGFzaFRpbWVvdXRdID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW2ZlZWRIaW50c09uYm9yZGVkLCBzZXRGZWVkSGludHNPbmJvcmRlZF0gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbcmVnaXN0cmF0aW9uRm9ybSwgc2V0UmVnaXN0cmF0aW9uRm9ybV0gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbdmlldywgc2V0Vmlld10gPSB1c2VTdGF0ZSgnZmVhdHVyZWQnKVxuXG4gIGNvbnN0IGNyZWF0b3JzU3RhdGUgPSB1c2VDcmVhdG9yU3RhdGUoKVxuXG4gIGNvbnN0IGN1cnJlbnRDcmVhdG9yID0gY3JlYXRvcnNTdGF0ZS5jcmVhdG9ycy5jdXJyZW50Q3JlYXRvci52YWx1ZVxuICBjb25zdCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKERhdGUubm93KCkpLnRvSVNPU3RyaW5nKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghIWN1cnJlbnRDcmVhdG9yICYmICEhY3VycmVudENyZWF0b3IuY3JlYXRlZEF0KSB7XG4gICAgICBjdXJyZW50VGltZS5zbGljZSgwLCAtNSkgPT09IGN1cnJlbnRDcmVhdG9yLmNyZWF0ZWRBdC5zbGljZSgwLCAtNSkgJiYgc2V0T25ib3JkZWQoZmFsc2UpXG4gICAgfVxuICB9LCBbY3VycmVudENyZWF0b3JdKVxuXG4gIGNvbnN0IHdlYnhyUmVjb3JkZXJBY3Rpdml0eSA9IHVzZVdlYnhyTmF0aXZlU3RhdGUoKS53ZWJ4cm5hdGl2ZS52YWx1ZVxuXG4gIGNvbnN0IGNoYW5nZU9uYm9hcmRpbmcgPSAoKSA9PiB7XG4gICAgc2V0T25ib3JkZWQodHJ1ZSlcbiAgICBzZXRGZWVkT25ib3JkZWQoZmFsc2UpXG4gICAgc2V0RmVlZEhpbnRzT25ib3JkZWQoZmFsc2UpXG4gIH1cbiAgY29uc3QgcGxhdGZvcm1DbGFzcyA9IGlzSU9TID8gc3R5bGVzLmlzSW9zIDogJydcbiAgY29uc3QgaGlkZUNvbnRlbnRPblJlY29yZCA9IHdlYnhyUmVjb3JkZXJBY3Rpdml0eSA/IHN0eWxlcy5oaWRlQ29udGVudE9uUmVjb3JkIDogJydcblxuICAvLyBpZiAoIWN1cnJlbnRDcmVhdG9yIHx8IGN1cnJlbnRDcmVhdG9yID09PSBudWxsIHx8IChzcGxhc2hUaW1lb3V0ICYmIGN1cnJlbnRDcmVhdG9yLmlzQmxvY2tlZCA9PSBmYWxzZSkpIHtcbiAgLy8gICAvL2FkZCBhZGRpdGlvbmFsIGR1cmF0aW9uIFNwbGFzaCBhZnRlciBpbml0aWFsaXplZCB1c2VyXG4gIC8vICAgY29uc3Qgc3BsYXNoID0gc2V0VGltZW91dCgoKSA9PiB7XG4gIC8vICAgICBzZXRTcGxhc2hUaW1lb3V0KGZhbHNlKVxuICAvLyAgICAgY2xlYXJUaW1lb3V0KHNwbGFzaClcbiAgLy8gICB9LCA1MDAwKVxuICAvLyAgIHJldHVybiA8U3BsYXNoIC8+XG4gIC8vIH1cblxuICAvLyBpZiAoY3VycmVudENyZWF0b3IuaXNCbG9ja2VkID09IHRydWUpIHtcbiAgLy8gICByZXR1cm4gKFxuICAvLyAgICAgPGRpdj5cbiAgLy8gICAgICAgPFNwbGFzaCAvPlxuICAvLyAgICAgICA8QmxvY2tlZCAvPlxuICAvLyAgICAgPC9kaXY+XG4gIC8vICAgKVxuICAvLyB9XG5cbiAgLy8gaWYgKGF1dGguZ2V0KCd1c2VyJykudXNlclJvbGUgIT09ICd1c2VyJykge1xuICAvLyAgIHJldHVybiA8UmVnaXN0cmF0aW9uIC8+XG4gIC8vIH1cblxuICAvLyBpZiAoIW9uYm9yZGVkKSByZXR1cm4gPE9uYm9hcmQgc2V0T25ib3JkZWQ9e2NoYW5nZU9uYm9hcmRpbmd9IGltYWdlPXtpbWFnZX0gbW9ja3VwSVBob25lPXttb2NrdXBJUGhvbmV9IC8+XG5cbiAgLy8gaWYgKCFhY2Nlc3NUb2tlbikge1xuICAvLyAgIHJldHVybiA8UmVkaXJlY3QgdG89XCIvcmVnaXN0cmF0aW9uXCIgLz5cbiAgLy8gfVxuXG4gIHJldHVybiA8QXBwIC8+XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVcbiJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSQkMCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSQkMSIsIlJlYWN0IiwicmVxdWlyZSQkMiIsIl9jcmVhdGVTdmdJY29uIiwicmVxdWlyZSQkMyIsIl9kZWZhdWx0IiwiZGVmYXVsdF8xIiwic3R5bGVzIiwiUGVyc29uUGluSWNvbiIsIlZlcmlmaWVkVXNlckljb24iLCJ1c2VTdGF0ZSIsIlZpc2liaWxpdHlJY29uIiwiV2hhdHNob3RJY29uIiwiVGVsZWdyYW1JY29uIiwidXNlUmVmIiwiVHJhbnNpdGlvbiIsIkFycm93QmFja0lvc0ljb24iLCJ3aXRoU3R5bGVzXzEiLCJfZXh0ZW5kczIiLCJEaWFsb2dDb250ZW50XzEiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNSIsIl93aXRoU3R5bGVzIiwicmVxdWlyZSQkNyIsIkRpYWxvZ0NvbnRlbnRUZXh0XzEiLCJyZXF1aXJlJCQ2IiwiRGlhbG9nQ29udGVudCIsIkRpYWxvZ0NvbnRlbnRUZXh0IiwiUGxheWVyV29ya2VyIiwiRmxpcENhbWVyYUlvc0ljb24iLCJWaWRlb2NhbUljb24iLCJIb21lIiwiQXBwIl0sIm1hcHBpbmdzIjoiZ3dGQUFhLElBQVEsbUJBQW1CLEtBQUssVUFBVSxZQUFjLENBQUUsT0FBZSxtQkNFbEZBLEdBQXlCQyxVQUV6QkMsR0FBMEJDLFVBRTlCLE9BQU8sZUFBZSxHQUFTLGFBQWMsQ0FDM0MsTUFBTyxLQUVULGtCQUFrQixPQUVkQyxHQUFRRixHQUF3QkcsV0FFaENDLEdBQWlCTixHQUF1Qk8sSUFFeENDLE1BQWVGLEdBQWUsU0FBdUJGLEdBQU0sY0FBYyxPQUFRLENBQ25GLEVBQUcsdVJBQ0QsYUFFSkssY0FBa0JELHNUQ0ZsQixLQUFNLElBQVcsQUFBQyxHQUFpQixNQUMzQixHQUFnQixJQUNoQixFQUFXLHdCQUNQLElBQU0sR0FDTCxHQUFlLGdCQUN2QixTQUNHLEdBQ0osRUFBYyxTQUFTLFVBQVUsT0FBUyxFQUFjLFNBQVMsa0JBQWtCLFFBQVUsR0FDekYsRUFBYyxTQUFTLFNBQVMsTUFDaEMsS0FFQSxFQUFvQixBQUFDLEdBQU8sR0FDdkIsRUFBbUIsdUJBQXVCLE9BQzFDLEVBQW1CLHVCQUF1QixHQUFNLEtBR3JELEVBQWlCLEVBQWMsU0FBUyxnQkFBZ0IsSUFBSSwwQkFDeEQsSUFBTSxHQUNMLEdBQWUsZUFBZSxLQUN0QyxTQUNHLEdBQVksR0FBZSxVQUFVLFFBQVEsNkJBR2hELFVBQUQsQ0FBUyxVQUFXRSxFQUFPLGtCQUV4QixHQUNDLEdBQ0EsRUFBUyxPQUFTLEdBQ2xCLEdBQ0ksT0FBTyxBQUFDLEdBQVcsRUFB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
