import{A as $t}from"./AuthService.e8999ddc.js";import{r,R as e,u as Y,g as Dt}from"./vendor.475cb2ff.js";import{u as Z,a as _,P as Ot,b as Lt,c as zt,d as A,e as qe,f as Ue,g as qt,p as Xe,C as He,h as Ge,i as Ve,j as Ut}from"./_app.f0a72417.js";import{C as de,a as Xt}from"./CreatorService.46518bb7.js";import{W as Ye}from"./WebxrNativeService.bf3f0be0.js";import{s as $}from"./index.module.bb0750b5.js";import{A as Ht}from"./index.07b783b7.js";import{d as Gt,C as Vt}from"./index.301f4863.js";import{c as Ee,i as X,a as Q}from"./createSvgIcon.57924123.js";import{P as E}from"./PopupsStateService.a3af5f05.js";import{C as Ze,a as Qe}from"./CardContent.1f497982.js";import{C as me}from"./CardMedia.b80c1774.js";import{A as Yt}from"./Avatar.7391d47d.js";import{T as D}from"./Typography.19cbe78d.js";import{d as Zt,a as Je,F as Qt}from"./index.3f644741.js";import{T as Jt,a as Kt}from"./TheFeedsService.9620790e.js";import{d as er,F as tr}from"./index.8b1cb91a.js";import{A as Ce}from"./AlertService.5d8abaff.js";import{c as Se}from"./feathers.32f4d4e8.js";import{F as Ke}from"./FeedService.76ef4a42.js";import{B as P}from"./Button.a7dce846.js";import{A as J,X as k}from"./index.e9ab7b95.js";import{C as rr}from"./index.b93ee66e.js";import{S as et,m as ar}from"./Slide.a5edb72c.js";import{D as tt}from"./Dialog.016d78d4.js";import{D as or}from"./DialogTitle.30786a4b.js";import{C as sr}from"./index.81a70c71.js";import{d as nr}from"./ArrowBackIos.d81b172a.js";import{A as be,_ as xe,d as cr,r as ir,o as lr,a as ur}from"./index.c1f5a49b.js";import{P as dr,F as mr}from"./index.51d3e235.js";import{S as pr}from"./index.4ce46cdd.js";import{B as fr}from"./Box.03b1797a.js";import{S as rt}from"./index.7b02be28.js";import{Q as vr,V as hr,S as _r,G as gr,P as Er,W as Cr,s as Sr}from"./three.module.493739a3.js";import br from"./Player.1091a6aa.js";import xr from"./workerFunction.efd6a346.js";import Fr from"./terms.345e1479.js";import yr from"./policy.430946f1.js";import"./avatarFunctions.6d66cf01.js";import"./upload.bd537b46.js";import"./capitalize.fc001633.js";import"./IconButton.ce216bbb.js";import"./ButtonBase.fb193a96.js";import"./Modal.58912532.js";import"./ownerWindow.3d7152ce.js";import"./createSvgIcon.896642b4.js";import"./useControlled.8dca0ac1.js";import"./Grid.07f86457.js";import"./TextField.6a51581a.js";import"./Input.1feafe2f.js";import"./useFormControl.a2039fae.js";import"./InputLabel.f59c7db7.js";import"./Select.d94966eb.js";import"./List.bc139f02.js";import"./Snackbar.6d62c301.js";import"./Alert.94d06d4f.js";import"./index.eadf06b5.js";import"./DialogContentText.58aee466.js";import"./Backdrop.724616ec.js";import"./styled.00afe216.js";import"./createStyles.1d8ebf67.js";import"./index.d8244ba1.js";import"./index.81138b53.js";import"./index.ebe70c7a.js";import"./Paragraph.b674cc44.js";const pe=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;var Fe={},wr=X.exports,kr=Q.exports;Object.defineProperty(Fe,"__esModule",{value:!0});var at=Fe.default=void 0,Nr=kr(r.exports),Ir=wr(Ee),Pr=(0,Ir.default)(Nr.createElement("path",{d:"M12 2c-4.97 0-9 4.03-9 9 0 4.17 2.84 7.67 6.69 8.69L12 22l2.31-2.31C18.16 18.67 21 15.17 21 11c0-4.97-4.03-9-9-9zm0 2c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.3c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"}),"PersonPin");at=Fe.default=Pr;const Rr="_creatorContainer_1mzwg_1",Tr="_creatorItem_1mzwg_18",Br="_previewImage_1mzwg_21",Mr="_avatarPlaceholder_1mzwg_28",jr="_titleContainer_1mzwg_31",Ar="_usernameContainer_1mzwg_36";var O={creatorContainer:Rr,creatorItem:Tr,previewImage:Br,avatarPlaceholder:Mr,titleContainer:jr,usernameContainer:Ar};const Wr=o=>{const t=Z(),a=_();r.exports.useEffect(()=>{a(de.getCreators())},[]);const s=t.creators.creators?.value&&t.creators.fetchingCreators?.value===!1?t.creators.creators.value:null,n=c=>{a(E.updateCreatorPageState(!1)),a(E.updateCreatorPageState(!0,c))},i=t.creators.currentCreator?.id?.value;r.exports.useEffect(()=>{a(de.getBlockedList(i))},[]);const u=t?.creators?.blocked.value;return e.createElement("section",{className:O.creatorContainer},s&&u&&s.length>0&&s?.filter(c=>c.isBlocked<1).map((c,d)=>e.createElement(Ze,{className:O.creatorItem,elevation:0,key:d,onClick:()=>n(c.id)},c.avatar?e.createElement(me,{className:O.previewImage,image:c.avatar||e.createElement(at,null),title:c.name}):e.createElement("section",{className:O.previewImage},e.createElement(Yt,{className:O.avatarPlaceholder})),e.createElement(Qe,null,e.createElement(D,{className:O.titleContainer},c.name,c.verified===1&&e.createElement(Gt,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}})),e.createElement(D,{className:O.usernameContainer},c.username)))))},ye={getTheFeedsFires:(o,t)=>async(a,s)=>{try{const n=await Se.service("thefeeds-fires").find({query:{thefeedsId:o}});t(n)}catch(n){console.log(n),Ce.dispatchAlertError(a,n.message)}},addFireToTheFeeds:o=>async t=>{try{const s={id:(await Se.service("thefeeds-fires").create({thefeedsId:o})).creatorId};t(addTheFeedsFire(s))}catch(a){console.log(a),Ce.dispatchAlertError(t,a.message)}},removeFireToTheFeeds:o=>async t=>{try{await Se.service("thefeeds-fires").remove(o),t(Jt.removeTheFeedsFire(o))}catch(a){console.log(a),Ce.dispatchAlertError(t,a.message)}}},$r="_tipItem_160j6_1",Dr="_previewImage_160j6_6",Or="_eyeLine_160j6_12",Lr="_cardContent_160j6_27",zr="_iconsContainer_160j6_33",qr="_titleContainer_160j6_38",Ur="_flamesCount_160j6_42",Xr="_cartText_160j6_46";var R={tipItem:$r,previewImage:Dr,eyeLine:Or,cardContent:Lr,iconsContainer:zr,titleContainer:qr,flamesCount:Ur,cartText:Xr};const{Share:Hr}=Ot,Gr=o=>{r.exports.useState(!1);const[t,a]=r.exports.useState(!1),{feed:s}=o,[n,i]=r.exports.useState(s.fires),u=_(),[c,d]=r.exports.useState(null),b=F=>{u(ye.addFireToTheFeeds(F)),i(n+1),a(!0)},p=F=>{u(ye.removeFireToTheFeeds(F)),i(n-1),a(!1)};r.exports.useEffect(()=>{u(ye.getTheFeedsFires(s.id,d))},[]);const{t:C}=Y(),h=()=>{Hr.share({title:C("social:shareForm.arcMedia"),text:C("social:shareForm.videoCreated"),url:encodeURI(s.videoUrl),dialogTitle:C("social:shareForm.shareWithBuddies")})},x=Z().creators.currentCreator?.id?.value;return r.exports.useEffect(()=>{a(!!c?.data.find(F=>F.id===x))},[c]),s?e.createElement(e.Fragment,null,e.createElement(Ze,{className:R.tipItem,square:!1,elevation:0,key:s.id},s.videoUrl?e.createElement(me,{className:R.previewImage,component:"video",src:s.videoUrl,title:s.title,controls:!0}):"",e.createElement("span",{className:R.eyeLine},s.viewsCount,e.createElement(Zt,{style:{fontSize:"16px"}})),e.createElement(Qe,{className:R.cardContent},e.createElement("section",{className:R.iconsContainer},e.createElement(D,{className:R.titleContainer,gutterBottom:!0,variant:"h4"},s.title),e.createElement(Vt,{creator:s.creator}),e.createElement("section",{className:R.iconSubContainer},t?e.createElement(Je,{className:R.fireIcon,htmlColor:"#FF6201",onClick:()=>p(s.id)}):e.createElement(Je,{className:R.fireIcon,htmlColor:"#DDDDDD",onClick:()=>b(s.id)}),e.createElement(er,{onClick:h}))),e.createElement(D,{variant:"subtitle2"},n," flames"),e.createElement(D,{className:R.cartText,variant:"h6"},s.description)))):e.createElement(e.Fragment,null)},Vr="_theFeedItem_m1i9m_1",Yr="_thefeedContainer_m1i9m_6",Zr="_fireIcon_m1i9m_11",Qr="_noContent_m1i9m_15";var ot={theFeedItem:Vr,thefeedContainer:Yr,fireIcon:Zr,noContent:Qr};const Jr=o=>{const t=_();r.exports.useEffect(()=>{t(Kt.getTheFeedsNew())},[]);const s=Lt()?.thefeeds?.value||[];return e.createElement("section",{className:ot.thefeedContainer},s&&s.length>0?s.map((n,i)=>e.createElement(Gr,{key:i,feed:n})):e.createElement("p",{className:ot.noContent},"Coming soon..."))},Kr="_feedMenuContainer_v4zby_1",ea="_subWrapper_v4zby_7",ta="_feedMenu_v4zby_1",ra="_active_v4zby_51",aa="_featuredButton_v4zby_54",oa="_creatorsButton_v4zby_57",sa="_thefeedButton_v4zby_60",na="_tipsandtricksButton_v4zby_63",ca="_content_v4zby_67";var w={feedMenuContainer:Kr,subWrapper:ea,feedMenu:ta,active:ra,featuredButton:aa,creatorsButton:oa,thefeedButton:sa,tipsandtricksButton:na,content:ca};const ia=({view:o,setView:t})=>{const a=r.exports.useRef(),s=r.exports.useRef(),n=r.exports.useRef(),i=r.exports.useRef(),u=r.exports.useRef(),{t:c}=Y(),d=_(),b=zt();r.exports.useEffect(()=>{d(Ke.getFeeds("featured"))},[]);const p=40,C=F=>{t(F);let M=0;switch(F){case"creators":M=n.current.offsetLeft-p;break;case"thefeed":M=i.current.offsetLeft-p;break;case"tipsandtricks":M=u.current.offsetLeft-p;break;default:M=0;break}a.current.scrollTo({left:M,behavior:"smooth"})};let h=null;switch(o){case"creators":h=e.createElement(Wr,null);break;case"thefeed":h=e.createElement(Jr,null);break;default:h=e.createElement(Qt,{thisData:b.feeds.feedsFeatured.value});break}const x={featured:[w.featuredButton,o==="featured"&&w.active],creators:[w.creatorsButton,o==="creators"&&w.active],thefeed:[w.thefeedButton,o==="thefeed"&&w.active],tipsandtricks:[w.tipsandtricksButton,o==="tipsandtricks"&&w.active]};return e.createElement(e.Fragment,null,e.createElement("nav",{className:w.feedMenuContainer},e.createElement("section",{className:w.subWrapper,ref:a},e.createElement("section",{className:w.feedMenu},e.createElement(P,{ref:s,variant:"contained",className:x.featured.join(" "),onClick:()=>C("featured")},c("social:feedMenu.featured")),e.createElement(P,{ref:n,variant:"contained",className:x.creators.join(" "),onClick:()=>C("creators")},c("social:feedMenu.creators"))))),e.createElement("section",{className:w.content},h))},la=e.forwardRef((o,t)=>e.createElement(et,{direction:"up",ref:t,...o})),K=o=>{const{children:t,open:a,onClose:s,title:n,className:i}=o;return e.createElement(tt,{open:a,TransitionComponent:la,keepMounted:!0,onClose:s,className:i,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description"},n&&e.createElement(or,{id:"alert-dialog-slide-title"},n),t)},ua="_creatorPopup_18hmn_1";var da={creatorPopup:ua};const ma=({webxrRecorderActivity:o,setView:t})=>{const a=A(),s=_(),n=()=>{s(E.updateCreatorPageState(!1))},i=()=>a?.popups?.creatorPage?.value===!0&&a?.popups?.creatorId?.value&&!o&&e.createElement(K,{open:a?.popups?.creatorPage?.value,onClose:n,className:da.creatorPopup},e.createElement(rr,{creatorId:a?.popups?.creatorId?.value}),e.createElement(J,{setView:t}));return r.exports.useEffect(()=>{i()},[a?.popups?.creatorPage?.value,a?.popups?.creatorId?.value]),i()},pa="_isIos_1iqvw_1",fa="_feedPageIosWrapper_1iqvw_4",va="_feedPagePopup_1iqvw_9";var we={isIos:pa,feedPageIosWrapper:fa,feedPagePopup:va};const ha=({webxrRecorderActivity:o,setView:t})=>{const a=A(),s=pe?we.isIos:"",n=_(),i=()=>{n(E.updateFeedPageState(!1))},u=()=>a?.popups?.feedPage?.value===!0&&!o&&e.createElement(K,{open:a?.popups?.feedPage?.value,onClose:i,className:we.feedPagePopup+" "+s},e.createElement("div",{className:we.feedPageIosWrapper},e.createElement(tr,null),e.createElement(J,{setView:t})));return r.exports.useEffect(()=>{u()},[a?.popups?.feedPage?.value,a?.popups?.feedId?.value]),u()},_a="_isIos_sl85y_1",ga="_creatorFormPopup_sl85y_6";var st={isIos:_a,creatorFormPopup:ga};const Ea=({webxrRecorderActivity:o,setView:t})=>{const a=_(),s=A(),n=()=>{a(E.updateCreatorFormState(!1))},i=pe?st.isIos:"",u=()=>s?.popups?.creatorForm?.value===!0&&!o&&e.createElement(K,{open:s?.popups?.creatorForm?.value,onClose:n,className:st.creatorFormPopup+" "+i},e.createElement(sr,null),e.createElement(J,{setView:t}));return r.exports.useEffect(()=>{u()},[s?.popups.creatorForm.value]),u()},Ca="_arMediaContainer_1cnq4_1",Sa="_switcher_1cnq4_1",ba="_switchButton_1cnq4_8",xa="_active_1cnq4_17",Fa="_flexContainer_1cnq4_20",ya="_previewImageContainer_1cnq4_24",wa="_previewImage_1cnq4_24",ka="_textC_1cnq4_39",Na="_backButton_1cnq4_42",Ia="_startRecirding_1cnq4_48";var T={arMediaContainer:Ca,switcher:Sa,switchButton:ba,active:xa,flexContainer:Fa,previewImageContainer:ya,previewImage:wa,textC:ka,backButton:Na,startRecirding:Ia};const Pa=o=>{const[t,a]=r.exports.useState("clip"),[s,n]=r.exports.useState([]),[i,u]=r.exports.useState(!1),[c,d]=r.exports.useState(null),b=qe();r.exports.useEffect(()=>{C(be.getArMedia())},[]);const{t:p}=Y();Ue();const C=_();return r.exports.useEffect(()=>{b.fetching.value===!1&&n(b?.list?.value?.filter(h=>h.type===t)||[])},[b.fetching.value,t]),e.createElement("section",{className:T.arMediaContainer},i&&e.createElement(dr,{text:"Loading..."}),e.createElement(P,{variant:"text",className:T.backButton,onClick:()=>{C(E.updateArMediaState(!1))}},e.createElement(nr,null),p("social:arMedia.back")),e.createElement("section",{className:T.switcher},e.createElement(P,{variant:t==="clip"?"contained":"text",className:T.switchButton+(t==="clip"?" "+T.active:""),onClick:()=>a("clip")},p("social:arMedia.clip"))),e.createElement("section",{className:T.flexContainer},s.map((h,x)=>e.createElement("section",{key:h.id,className:T.previewImageContainer},e.createElement(me,{onClick:()=>d(h),className:T.previewImage,image:h.previewUrl}),e.createElement(D,null,h.title)))),t=="background"?e.createElement("text",{className:T.textC},"Coming soon ..."):" ",c?e.createElement(P,{className:T.startRecirding,onClick:async()=>{u(!0),k.uploadFiles!==void 0&&await k.uploadFiles({audioPath:c.audioUrl,audioId:c.audioId}),u(!1),C(E.updateArMediaState(!1)),C(E.updateWebXRState(!0,c.id))},variant:"contained"},p("social:arMedia.start")):null)},Ra="_arMediaPopup_1sxy7_1";var Ta={arMediaPopup:Ra};const Ba=o=>{const t=A(),a=_(),s=()=>{a(E.updateArMediaState(!1))},n=()=>t?.popups.arMedia?.value===!0&&e.createElement(K,{open:t?.popups.arMedia?.value,onClose:s,className:Ta.arMediaPopup},e.createElement(Pa,null));return r.exports.useEffect(()=>{n()},[t?.popups?.arMedia?.value]),n()},Ma=({setView:o})=>{_();const t=A(),a=()=>t.popups.shareFeedPage?.value===!0&&e.createElement(mr,null);return r.exports.useEffect(()=>{a()},[t.popups.shareFeedPage.value]),a()},ja="_shareFormContainer_1cvkg_1",Aa="_btnAction_1cvkg_7",Wa="_btnDisableAction_1cvkg_12",$a="_media_1cvkg_15";var ke={shareFormContainer:ja,btnAction:Aa,btnDisableAction:Wa,media:$a};const Da=ar({root:{maxWidth:"375pt"},media:{height:"340pt",width:"375pt"},btn_share:{backgroundColor:"black",color:"white",bottom:"0",width:"100%",borderRadius:"12px","&:hover":{backgroundColor:"black",color:"white"}}}),Oa=o=>{const t=A(),a=t.popups.videoUrl?.value,s=t.popups.imgSrc?.value,n=Da(),{t:i}=Y(),u=_(),c=()=>{u(E.updateShareFormState(!1)),u(E.updateNewFeedPageState(!1))},d=()=>{pr.share({title:i("social:shareForm.arcMedia"),text:i("social:shareForm.videoCreated"),url:encodeURI(a),dialogTitle:i("social:shareForm.shareWithBuddies")})};return r.exports.useEffect(()=>{console.log("previewUrlpreviewUrl",s)}),e.createElement("div",{className:ke.shareFormContainer},e.createElement(fr,{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"45vh"},e.createElement(me,{className:n.media+" "+ke.media,component:"img",alt:"Contemplative Reptile",src:s,title:"Arc",style:{maxWidth:"calc(100% - 36pt)",maxHeight:"40vh"}})),e.createElement(P,{size:"large",color:"primary",onClick:d,className:n.btn_share},i("social:shareForm.shareVideo")),e.createElement(P,{size:"large",color:"primary",onClick:()=>{c()},className:ke.btnDisableAction},i("social:shareForm.close")))},La="_shareFormPopup_2fj50_1",za="_popUpFooter_2fj50_14";var nt={shareFormPopup:La,popUpFooter:za};const qa=({setView:o})=>{const t=_(),a=A(),s=()=>{t(E.updateShareFormState(!1))},n=()=>a?.popups?.shareForm?.value===!0&&e.createElement(K,{open:a?.popups.shareForm.value,onClose:s,className:nt.shareFormPopup},e.createElement(Oa,null),e.createElement("div",{className:nt.popUpFooter},e.createElement(J,{setView:o})));return r.exports.useEffect(()=>{n()},[a?.popups.shareForm?.value]),n()},Ua="_styleLink_1yeto_1",Xa="_mainBlock_1yeto_6",Ha="_bottomBox_1yeto_10",Ga="_popup_1yeto_23",Va="_media_1yeto_30",Ya="_media2_1yeto_41",Za="_title_1yeto_53",Qa="_box_1yeto_71",Ja="_btn_start_1yeto_74",Ka="_btn_cancel_1yeto_84",eo="_dialogWindow_1yeto_136",to="_horizontalMode_1yeto_142",ro="_ldsring_1yeto_1";var Ne={styleLink:Ua,mainBlock:Xa,bottomBox:Ha,popup:Ga,media:Va,media2:Ya,title:Za,box:Qa,btn_start:Ja,btn_cancel:Ka,dialogWindow:eo,horizontalMode:to,ldsring:ro},ee={},ao=Dt(qt),te={},ct=X.exports;Object.defineProperty(te,"__esModule",{value:!0});te.default=void 0;var oo=ct(xe.exports),so=ir,no=ct(cr);function co(o,t){return(0,so.withStyles)(o,(0,oo.default)({defaultTheme:no.default},t))}var io=co;te.default=io;var lo=Q.exports,re=X.exports;Object.defineProperty(ee,"__esModule",{value:!0});var it=ee.default=ee.styles=void 0,uo=re(xe.exports),mo=re(lr.exports),lt=lo(r.exports);re(Xe.exports);var po=re(ao),fo=re(te),ut=function(t){return{root:{flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"8px 24px","&:first-child":{paddingTop:20}},dividers:{padding:"16px 24px",borderTop:"1px solid ".concat(t.palette.divider),borderBottom:"1px solid ".concat(t.palette.divider)}}};ee.styles=ut;var vo=lt.forwardRef(function(t,a){var s=t.classes,n=t.className,i=t.dividers,u=i===void 0?!1:i,c=(0,mo.default)(t,["classes","className","dividers"]);return lt.createElement("div",(0,uo.default)({className:(0,po.default)(s.root,n,u&&s.dividers),ref:a},c))}),ho=(0,fo.default)(ut,{name:"MuiDialogContent"})(vo);it=ee.default=ho;var ae={},_o=Q.exports,fe=X.exports;Object.defineProperty(ae,"__esModule",{value:!0});var dt=ae.default=ae.styles=void 0,go=fe(xe.exports),mt=_o(r.exports);fe(Xe.exports);var Eo=fe(te),Co=fe(ur),pt={root:{marginBottom:12}};ae.styles=pt;var So=mt.forwardRef(function(t,a){return mt.createElement(Co.default,(0,go.default)({component:"p",variant:"body1",color:"textSecondary",ref:a},t))}),bo=(0,Eo.default)(pt,{name:"MuiDialogContentText"})(So);dt=ae.default=bo;const xo=e.forwardRef((o,t)=>e.createElement(et,{direction:"up",ref:t,...o})),Fo=({setView:o})=>{const t=Z(),a=t.creators.currentCreator.value,s=_(),[n,i]=r.exports.useState(!a.terms),[u,c]=r.exports.useState(a.terms?!a.policy:!1);Y(),r.exports.useState(!1),r.exports.useState(!1);const d=()=>{i(!1),c(!1),s(de.updateCreator({id:t.creators.currentCreator?.id?.value,terms:!0,policy:!0,name:t.creators.currentCreator?.name?.value}))};return e.createElement("div",{className:Ne.mainBlock},e.createElement(tt,{open:n,TransitionComponent:xo,keepMounted:!0,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description",className:Ne.dialogWindow,PaperProps:{style:{width:"100%",maxWidth:"100%",height:"max-content",borderRadius:"12px"}}},e.createElement(it,null,e.createElement(dt,null,e.createElement(D,{align:"center",variant:"subtitle1"},'By tapping "I agree to Terms of Service and Policy of Service", you agree to our ',e.createElement(P,{style:{padding:"0"},onClick:()=>{o("terms")}},e.createElement("b",null,"Terms of Service"))," and acknowledge that you have our ",e.createElement(P,{style:{padding:"0"},onClick:()=>{o("policy")}},e.createElement("b",null,"Privacy Policy"))," to learn how we collect, use, and share your data."))),e.createElement("div",{className:Ne.bottomBox},e.createElement("div",null,e.createElement(P,{variant:"contained",onClick:d},"Agree and continue")))))},yo="_wrap_1rles_1",wo="_container_1rles_12",ko="_mail_1rles_45";var Ie={wrap:yo,container:wo,mail:ko};const No=()=>e.createElement("div",{className:Ie.wrap},e.createElement("div",{className:Ie.container},e.createElement("p",null,"You have been temporarily blocked pending further review"),e.createElement("p",null,"Please contact support with any questions"),e.createElement("hr",null),e.createElement("div",{className:Ie.mail},e.createElement("a",{href:"mailto:info@arcmedia.us"},"info@arcmedia.us"))));var Pe={},Io=X.exports,Po=Q.exports;Object.defineProperty(Pe,"__esModule",{value:!0});var ft=Pe.default=void 0,Ro=Po(r.exports),To=Io(Ee),Bo=(0,To.default)(Ro.createElement("path",{d:"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"}),"Videocam");ft=Pe.default=Bo;var Re={},Mo=X.exports,jo=Q.exports;Object.defineProperty(Re,"__esModule",{value:!0});var vt=Re.default=void 0,Ao=jo(r.exports),Wo=Mo(Ee),$o=(0,Wo.default)(Ao.createElement("path",{d:"M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-8 13c-2.76 0-5-2.24-5-5H5l2.5-2.5L10 13H8c0 2.21 1.79 4 4 4 .58 0 1.13-.13 1.62-.35l.74.74c-.71.37-1.5.61-2.36.61zm4.5-2.5L14 13h2c0-2.21-1.79-4-4-4-.58 0-1.13.13-1.62.35l-.74-.73C10.35 8.24 11.14 8 12 8c2.76 0 5 2.24 5 5h2l-2.5 2.5z"}),"FlipCameraIos");vt=Re.default=$o;const Do="_waterMarkWrapper_11g2p_1",Oo="_waterMark_11g2p_1",Lo="_subContainer_11g2p_19",zo="_startButtonWrapper_11g2p_28",qo="_stopButtonWrapper_11g2p_29",Uo="_startButton_11g2p_28",Xo="_stopButton_11g2p_29",Ho="_flipCamera_11g2p_69",Go="_changeOrientation_11g2p_84",Vo="_closeButtonWrapper_11g2p_99",Yo="_closeButton_11g2p_99",Zo="_horizontalOrientation_11g2p_116",Qo="_hideButtons_11g2p_147";var B={waterMarkWrapper:Do,waterMark:Oo,subContainer:Lo,startButtonWrapper:zo,stopButtonWrapper:qo,startButton:Uo,stopButton:Xo,flipCamera:Ho,changeOrientation:Go,closeButtonWrapper:Vo,closeButton:Yo,horizontalOrientation:Zo,hideButtons:Qo};const Jo="_hideButtons_k86sc_1",Ko="_waterMarkWrapper_k86sc_4",es="_startButtonWrapper_k86sc_7",ts="_stopButtonWrapper_k86sc_8",rs="_hintOne_k86sc_15",as="_onboarding_k86sc_15",os="_skip_k86sc_29",ss="_mobImage_k86sc_38",ns="_hintButtonTwo_k86sc_79",cs="_offsetImg_k86sc_82",is="_loadingFrame_k86sc_89",ls="_circle_k86sc_95",us="_animate_k86sc_1",ds="_firstScreen_k86sc_150",ms="_relativeImage_k86sc_158",ps="_secondScreen_k86sc_162",fs="_thirdScreen_k86sc_168",vs="_relativePointer_k86sc_175",hs="_hintTwo_k86sc_192";var l={hideButtons:Jo,waterMarkWrapper:Ko,startButtonWrapper:es,stopButtonWrapper:ts,hintOne:rs,onboarding:as,skip:os,mobImage:ss,hintButtonTwo:ns,offsetImg:cs,loadingFrame:is,circle:ls,animate:us,firstScreen:ds,relativeImage:ms,secondScreen:ps,thirdScreen:fs,relativePointer:vs,hintTwo:hs};const _s=({hintOneShow:o})=>e.createElement("div",{className:l.hintOne},e.createElement("div",{className:l.thirdScreen+" "+l.onboarding},e.createElement("div",{className:l.relativeImage},e.createElement("img",{src:"/assets/feedOnboarding/camera.png",className:l.mobImage}),e.createElement("div",{className:l.relativePointer},e.createElement("ul",{className:l.loadingFrame},e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle})),e.createElement("p",{className:l.offsetImg},"Tap the screen to lock me in place."))),e.createElement("button",{type:"button",onClick:()=>{o(!1)}}," ","Got it!"," "))),gs=({hintTwoShow:o})=>e.createElement("div",{className:`${l.hintOne} ${l.hintTwo}`},e.createElement("div",{className:l.thirdScreen+" "+l.onboarding},e.createElement("div",{className:l.relativeImage},e.createElement("div",{className:l.relativePointer},e.createElement("ul",{className:l.loadingFrame+" "+l.hintButtonTwo},e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle}),e.createElement("div",{className:l.circle})),e.createElement("p",{className:l.offsetImg},"Hit record to start the performance."))),e.createElement("button",{type:"button",onClick:()=>{o(!1)}}," ","Got it!"," ")));class Es{element;callback;previousGestureDistance=0;scale=1;constructor(t,a){this.element=t,this.callback=a,this.element.addEventListener("touchstart",this.onTouchStart)}dispose(){this.element.removeEventListener("touchstart",this.onTouchStart),this.element.removeEventListener("touchend",this.onTouchEnd),this.element.removeEventListener("touchmove",this.onTouchMove)}onTouchStart=t=>{t.touches.length===2&&(this.previousGestureDistance=Math.hypot(t.touches[0].pageX-t.touches[1].pageX,t.touches[0].pageY-t.touches[1].pageY),this.element.addEventListener("touchend",this.onTouchEnd),this.element.addEventListener("touchmove",this.onTouchMove))};onTouchEnd=()=>{this.element.removeEventListener("touchmove",this.onTouchMove)};onTouchMove=t=>{const a=Math.hypot(t.touches[0].pageX-t.touches[1].pageX,t.touches[0].pageY-t.touches[1].pageY);this.scale=a/this.previousGestureDistance,this.previousGestureDistance=a,this.callback(this.scale)}}const{isNative:Cs}=He;var S;(function(o){o.OFF="off",o.ON="on",o.STARTING="starting",o.ENDING="ending"})(S||(S={}));const Ss=new vr().setFromAxisAngle(new hr(0,0,1),Math.PI/2),bs=({setContentHidden:o,webxrRecorderActivity:t,feedHintsOnborded:a,setFeedHintsOnborded:s})=>{const n=e.useRef(),[i,u]=r.exports.useState(""),[c,d]=r.exports.useState("");r.exports.useState("");const[b,p]=r.exports.useState(""),[C,h]=r.exports.useState(""),[x,F]=r.exports.useState(""),[M,oe]=r.exports.useState(!1),[se,ne]=r.exports.useState(!1),[N,ht]=r.exports.useState(null),[Te,_t]=r.exports.useState(null),[I,gt]=r.exports.useState(S.OFF),y=r.exports.useRef(null),L=r.exports.useRef(null),ce=r.exports.useRef(null),H=r.exports.useRef(null),z=r.exports.useRef(null),ve=r.exports.useRef(0),G=r.exports.useRef(null),q=_(),V=qe(),he=e.useRef(I),ie=m=>{he.current=m,gt(m)},Et=A(),le=e.useRef(N),Ct=m=>{le.current=m,ht(m)},_e=e.useRef(!1),St=()=>{t||o()};function Be(){console.log("onBackButton recordingState:",he.current),_e.current=!0,ge(),q(E.updateWebXRState(!1,null)),St()}r.exports.useEffect(()=>{console.log("recordingState USE EFFECT:",I)},[I]),r.exports.useEffect(()=>(document.addEventListener("backbutton",Be),G.current||(G.current=new Es(n.current,m=>{L.current&&L.current.scale.multiplyScalar(m)})),a||oe(!0),()=>{document.removeEventListener("backbutton",Be),ve.current&&cancelAnimationFrame(ve.current),y.current&&(console.log("WebXRComponent - dispose player"),y.current.dispose(),y.current=null),G.current&&(console.log("WebXRComponent - dispose zoom handler"),G.current.dispose(),G.current=null),console.log("WebXRComponent - stop plugin"),k.removeAllListeners(),k.stop({}),window.screen.orientation.unlock()}),[]);const Me=()=>{ve.current=requestAnimationFrame(Me);const m=ce.current,g=H.current,j=z.current;!j||(y.current?.handleRender(()=>{}),j.render(m,g))},ue=Et.popups.itemId?.value;r.exports.useEffect(()=>{q(be.getArMediaItem(ue))},[ue]),r.exports.useEffect(()=>{V.fetchingItem.value||Ct(V.item.value)},[V.fetchingItem.value,V,ue]);const je=N?.id;r.exports.useEffect(()=>{if(!je){console.log("Media item is not here yet",ue,V?.fetchingItem.value);return}(async function(){ce.current||(ce.current=new _r);const m=ce.current;L.current||(L.current=new gr);const g=L.current;g.visible=!1,H.current||(H.current=new Er(75,window.innerWidth/window.innerHeight,.001,100));const j=H.current;m.background=null,z.current?(console.log("USE ref Renderer",z.current),console.log("CANVAS is same??",z.current.domElement===n.current)):(console.log("CREATE new Renderer"),z.current=new Cr({alpha:!0,canvas:n.current}));const v=z.current;v.outputEncoding=Sr,v.setSize(window.innerWidth,window.innerHeight),v.domElement.style.position="fixed",v.domElement.style.width="100vw",v.domElement.style.height="100vh",v.domElement.style.zIndex="-1",v.domElement.style.top="0",v.domElement.style.left="0",v.domElement.style.margin="0",v.domElement.style.padding="0",m.add(j),m.add(g),g.position.set(0,0,0),g.scale.setScalar(1),y.current||(y.current=new br({scene:g,renderer:v,worker:new xr,meshFilePath:N.dracosisUrl,videoFilePath:N.audioUrl,manifestFilePath:N.manifestUrl,onMeshBuffering:f=>{},onFrameShow:()=>{}})),requestAnimationFrame(Me),await k.initialize({}).then(f=>{u(f.status),o()}).catch(f=>console.log(f.message)),k.addListener("poseDataReceived",f=>{const W=H.current,U=L.current,{cameraPositionX:wt,cameraPositionY:kt,cameraPositionZ:Nt,cameraRotationX:It,cameraRotationY:Pt,cameraRotationZ:Rt,cameraRotationW:Tt}=f;if(W.quaternion.set(It,Pt,Rt,Tt).multiply(Ss),W.position.set(wt,kt,Nt),W.updateProjectionMatrix(),f.placed){const{anchorPositionX:Ae,anchorPositionY:We,anchorPositionZ:$e,anchorRotationX:De,anchorRotationY:Oe,anchorRotationZ:Le,anchorRotationW:ze}=f,Bt=JSON.stringify([Ae,We,$e,De,Oe,Le,ze]);if(p(Bt),U.quaternion.set(De,Oe,Le,ze),U.position.set(Ae,We,$e),!U.visible){console.log("SET ANCHOR VISIBLE!");const Mt=2,jt=W.position.distanceTo(U.position),At=W.fov*Math.PI/180/2,Wt=jt*Math.tan(At)/Mt*.75;U.scale.setScalar(Wt),U.visible=!0,a||setTimeout(()=>{ne(!0),s(!0)},1e3)}}}),k.addListener("cameraIntrinsicsReceived",f=>{h(JSON.stringify({fX:f.fX,fY:f.fY,cX:f.cX,cY:f.cy,x:f.x,y:f.y}))}),k.start({}).then(()=>{d(Cs?"Camera started on native":"Camera started on web")}).catch(f=>console.log(f.message))})()},[je]);let ge=()=>{if(console.log("finishRecord recordingState:",I),he.current===S.ON){console.log("finishRecord"),console.log("mediaItemRef.current.audioId",le.current),console.log("closeBtnAction",_e),console.log("VIDEO DELAY",Te);const m=le.current.title.replace(/ /gi,"_"),g=new Date().toLocaleTimeString().replace(/[\:\ ]/gi,"_");console.log(g),console.log(m),k.stopRecording({audioId:le.current.audioId,videoDelay:Te,clipTitle:m,clipTime:g}).then(({result:j,filePath:v,nameId:f})=>{if(q(Ke.setLastFeedVideoUrl(v)),q(be.getArMediaItem(null)),F("file://"+v),!_e.current){const W=He.convertFileSrc(v);console.log(W),q(E.updateNewFeedPageState(!0,W,v,f))}ie(S.OFF),q(E.updateWebXRState(!1,null))}).catch(j=>alert(j.message))}else return console.log("Record state is OFF")};function bt(m){return(m/1e3).toFixed(1)}const xt=()=>{if(!window.confirm("Double click to finish the record."))return;ie(S.STARTING);const m=new Date,g=Math.floor(screen.height/2)*2,j=Math.floor(screen.width/2)*2;k.startRecording({isAudio:!0,width:j,height:g,bitRate:6e6,dpi:100,filePath:"/test.mp4"}).then(({status:v})=>{if(console.log("RECORDING, STATUS IS",v),y.current){y.current.video.muted=!0,console.log("Player.play()!"),y.current.play();const f=new Date;_t(parseFloat(bt(f.getTime()-m.getTime())))}ie(S.ON)}).catch(v=>{alert(v.message),ie(S.OFF)})},Ft=()=>{I===S.OFF?xt():I===S.ON&&ge()},yt=m=>{if(I!==S.OFF)return;const g={x:m.clientX*window.devicePixelRatio,y:m.clientY*window.devicePixelRatio};y.current&&y.current.currentFrame<=0&&y.current.playOneFrame(),k.handleTap(g)};return e.createElement(e.Fragment,null,M?e.createElement(_s,{hintOneShow:oe}):"",se?e.createElement(gs,{hintTwoShow:ne}):"",e.createElement("div",{className:"plugintestControls"},e.createElement("div",{className:I===S.OFF?"":B.hideButtons},e.createElement("section",{className:B.waterMarkWrapper},e.createElement("section",{className:B.waterMark},e.createElement("section",{className:B.subContainer}))),e.createElement("button",{type:"button",className:B.flipCamera,onClick:()=>{}},e.createElement(vt,null)),e.createElement("section",{className:I===S.OFF?B.startButtonWrapper:B.stopButtonWrapper},e.createElement("button",{type:"button",className:I===S.OFF?B.startButton:B.stopButton,onClick:()=>Ft()},e.createElement(ft,null))))),e.createElement("canvas",{ref:n,className:B.arcCanvas,id:"arcCanvas",onClick:m=>yt(m),onDoubleClick:ge}))},xs=({webxrRecorderActivity:o,feedHintsOnborded:t,setFeedHintsOnborded:a,setContentHidden:s})=>{const n=A(),i=()=>n?.popups?.webxr?.value===!0&&e.createElement("div",null,e.createElement(bs,{feedHintsOnborded:t,setFeedHintsOnborded:a,setContentHidden:s,webxrRecorderActivity:o}));return r.exports.useEffect(()=>{i()},[n?.popups?.webxr.value]),i()},Fs=({view:o,setView:t})=>e.createElement(e.Fragment,null,o==="terms"?e.createElement(Fr,{setView:t}):null,o==="policy"?e.createElement(yr,{setView:t}):null),ys=o=>{Ue();const t=_(),a=Ge(),[s,n]=r.exports.useState(!0);r.exports.useState(!0);const[i,u]=r.exports.useState(!0);r.exports.useState(!0);const[c,d]=r.exports.useState("featured"),b=Z(),p=b.creators.currentCreator,C=new Date(Date.now()).toISOString();r.exports.useEffect(()=>{!!p?.value&&!!p?.createdAt?.value&&C.slice(0,-5)===p?.createdAt?.value?.slice(0,-5)&&n(!1)},[p]);const x=Ve().webxrnative.value,F=pe?$.isIos:"",M=b.creators.splashTimeout.value,oe=x?$.hideContentOnRecord:"";if(!p?.value||p?.value===null||M&&p?.isBlocked?.value==!1){const N=setTimeout(()=>{t(Xt.setStateCreators(!1)),clearTimeout(N)},5e3);return e.createElement(rt,null)}const se=N=>{N&&N()};if(p?.isBlocked?.value==!0)return e.createElement("div",null,e.createElement(rt,null),e.createElement(No,null));const ne=()=>{t(Ye.changeWebXrNative())};return e.createElement(e.Fragment,null,c==="terms"||c==="policy"?e.createElement(Fs,{view:c,setView:d}):e.createElement("div",{className:F+" "+oe},e.createElement("div",{className:x?$.hideContent+" "+$.viewport:$.viewport},e.createElement(Ht,{setView:d,onGoRegistration:se}),e.createElement(ia,{view:c,setView:d}),e.createElement(J,{setView:d,onGoRegistration:se}),p?.value&&(!p.terms.value||!p.policy.value)&&a.user.userRole.value==="user"||a.user.userRole.value==="guest"&&e.createElement(Fo,{view:c,setView:d}),e.createElement(Ba,null),e.createElement(xs,{feedHintsOnborded:i,webxrRecorderActivity:x,setContentHidden:ne,setFeedHintsOnborded:u}),e.createElement(ma,{webxrRecorderActivity:x,setView:d}),e.createElement(ha,{webxrRecorderActivity:x,setView:d}),e.createElement(Ea,{webxrRecorderActivity:x,setView:d}),e.createElement(Ma,{setView:d}),e.createElement(qa,{setView:d}))))},Dn=({})=>{const o=_(),t=Ge(),a=Ut(),s=a?.authUser?a.authUser.accessToken:void 0;r.exports.useEffect(()=>{o($t.doLoginAuto(!0)),o(Ye.getWebXrNative())},[s]),r.exports.useEffect(()=>{t?.authUser?.accessToken&&t.user.id.value&&o(de.createCreator())},[t.isLoggedIn.value,t.user.id.value]);const[n,i]=r.exports.useState(!0);r.exports.useState(!0),r.exports.useState(!0),r.exports.useState(!0),r.exports.useState(!0),r.exports.useState("featured");const c=Z().creators.currentCreator.value,d=new Date(Date.now()).toISOString();r.exports.useEffect(()=>{!!c&&!!c.createdAt&&d.slice(0,-5)===c.createdAt.slice(0,-5)&&i(!1)},[c]);const b=Ve().webxrnative.value;return pe&&$.isIos,b&&$.hideContentOnRecord,e.createElement(ys,null)};export{Dn as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
