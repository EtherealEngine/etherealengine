import{B as l,aj as M,s as R,M as c,a3 as T,ay as L,U as k,g as p}from"./three.module.493739a3.js";const P=typeof self=="object"&&self.constructor&&self.constructor.name==="DedicatedWorkerGlobalScope",S=(a,e)=>(Object.entries(e).forEach(t=>{const[r,s]=t;a[r]=s}),a),q=(a,e)=>P?document.createElement(a,e):S(document.createElement(a),e),z=(a,e)=>(a+e)%e;class N{frameRate=30;speed=1;loop=!0;encoderWindowSize=8;encoderByteLength=16;videoSize=1024;scene;renderer;mesh;meshFilePath;material;failMaterial;bufferGeometry;_scale=1;_video=null;_videoTexture=null;meshBuffer=new Map;_worker;onMeshBuffering=null;onFrameShow=null;rendererCallback=null;fileHeader;tempBufferObject;manifestFilePath;counterCtx;actorCtx;numberOfFrames;maxNumberOfFrames;actorCanvas;currentFrame=0;lastFrameRequested=0;targetFramesToRequest=30;set paused(e){e?(this._video.pause(),this.hasPlayed=!1,this.stopOnNextFrame=!1):this.play()}bufferLoop=()=>{const e=this.lastFrameRequested<this.currentFrame;for(const[s,i]of this.meshBuffer.entries())(e&&s>this.lastFrameRequested&&s<this.currentFrame||!e&&s<this.currentFrame)&&(i&&i instanceof l&&i?.dispose(),this.meshBuffer.delete(s));const t=this.targetFramesToRequest*2,r=this.meshBuffer.size>=t;if(r)this._video.paused&&this.hasPlayed&&this._video.play();else if(z(this.lastFrameRequested-this.currentFrame,this.numberOfFrames)<=t*2){const s=Math.max(this.lastFrameRequested+t,this.lastFrameRequested+this.targetFramesToRequest)%this.numberOfFrames,i={frameStart:this.lastFrameRequested,frameEnd:s};console.log("Posting request",i),this._worker.postMessage({type:"request",payload:i}),this.lastFrameRequested=s,!r&&typeof this.onMeshBuffering=="function"&&this.onMeshBuffering(this.meshBuffer.size/t)}requestAnimationFrame(()=>this.bufferLoop())};hasPlayed=!1;stopOnNextFrame=!1;constructor({scene:e,renderer:t,manifestFilePath:r=null,meshFilePath:s,videoFilePath:i,targetFramesToRequest:d=90,frameRate:y=30,loop:g=!0,scale:F=1,encoderWindowSize:v=8,encoderByteLength:x=16,videoSize:b=1024,video:B=null,onMeshBuffering:w=null,onFrameShow:_=null,rendererCallback:C=null,worker:f=null}){this.onMeshBuffering=w,this.onFrameShow=_,this.rendererCallback=C,this.encoderWindowSize=v,this.encoderByteLength=x,this.maxNumberOfFrames=Math.pow(2,this.encoderByteLength)-2,this.videoSize=b,this.targetFramesToRequest=d,this._worker=f??new Worker("./workerFunction.ts"),this.scene=e,this.renderer=t,this.meshFilePath=s,this.manifestFilePath=r??s.replace("uvol","manifest"),this.loop=g,this._scale=F,this._video=B??q("video",{crossorigin:"",playsInline:"true",preload:"auto",loop:!0,src:i,style:{display:"none",position:"fixed",zIndex:"-1",top:"0",left:"0",width:"1px"},playbackRate:1}),this._video.setAttribute("crossorigin",""),this._video.setAttribute("preload","auto"),this.frameRate=y;const m=document.createElement("canvas");m.width=this.encoderByteLength,m.height=1,this.counterCtx=m.getContext("2d"),this.actorCanvas=document.createElement("canvas"),this.actorCtx=this.actorCanvas.getContext("2d"),this.actorCtx.canvas.width=this.actorCtx.canvas.height=this.videoSize,this.counterCtx.canvas.setAttribute("crossOrigin","Anonymous"),this.actorCtx.canvas.setAttribute("crossOrigin","Anonymous"),this.actorCtx.fillStyle="#ACC",this.actorCtx.fillRect(0,0,this.actorCtx.canvas.width,this.actorCtx.canvas.height),this._videoTexture=new M(this.actorCtx.canvas),this._videoTexture.encoding=R,this.material=new c({map:this._videoTexture}),this.failMaterial=new c({color:"#555555"}),this.mesh=new T(new L(1e-5,1e-5),this.material),this.mesh.scale.set(this._scale,this._scale,this._scale),this.scene.add(this.mesh);const O=h=>{for(const n of h){let u=new l;u.setIndex(new k(n.bufferGeometry.index,1)),u.setAttribute("position",new p(n.bufferGeometry.position,3)),u.setAttribute("uv",new p(n.bufferGeometry.uv,2)),this.meshBuffer.set(n.keyframeNumber,u)}if(typeof this.onMeshBuffering=="function"){const n=this.targetFramesToRequest*2;this.onMeshBuffering(this.meshBuffer.size/n)}};f.onmessage=h=>{switch(h.data.type){case"initialized":console.log("Worker initialized"),Promise.resolve().then(()=>{this.bufferLoop()});break;case"framedata":Promise.resolve().then(()=>{O(h.data.payload)});break}};const o=new XMLHttpRequest;o.onreadystatechange=()=>{o.readyState===4&&(this.fileHeader=JSON.parse(o.responseText),this.frameRate=this.fileHeader.frameRate,this.numberOfFrames=this.fileHeader.frameData.length,this.numberOfFrames>this.maxNumberOfFrames&&console.error("There are more frames (%d) in file then our decoder can handle(%d) with provided encoderByteLength(%d)",this.numberOfFrames,this.maxNumberOfFrames,this.encoderByteLength),f.postMessage({type:"initialize",payload:{targetFramesToRequest:d,meshFilePath:s,numberOfFrames:this.numberOfFrames,fileHeader:this.fileHeader}}))},o.open("GET",this.manifestFilePath,!0),o.send()}handleRender(e){!this.fileHeader||this.processFrame(e)}processFrame(e){const t=this.getCurrentFrameNumber();if(t>this.numberOfFrames){console.warn("video texture is not ready? frameToPlay:",t);return}if(this.currentFrame===t)return;this.currentFrame=t,this.stopOnNextFrame&&(this._video.pause(),this.hasPlayed=!1,this.stopOnNextFrame=!1),this.meshBuffer.has(t)?(this.mesh.material=this.material,this.material.needsUpdate=!0,this.mesh.material.needsUpdate=!0,this.mesh.geometry=this.meshBuffer.get(t),this.mesh.geometry.attributes.position.needsUpdate=!0,this.mesh.geometry.needsUpdate=!0,this.currentFrame=t,typeof this.onFrameShow=="function"&&this.onFrameShow(t),this.rendererCallback&&this.rendererCallback(),e&&e()):(this._video.paused||this._video.pause(),typeof this.onMeshBuffering=="function"&&this.onMeshBuffering(0),this.mesh.material=this.failMaterial)}getCurrentFrameNumber(){const e=this.encoderWindowSize*this.encoderByteLength,t=this.encoderWindowSize/2;this.actorCtx.drawImage(this._video,0,0),this.counterCtx.drawImage(this.actorCtx.canvas,0,this.videoSize-t,e,t,0,0,this.encoderByteLength,1);const r=this.counterCtx.getImageData(0,0,this.encoderByteLength,1);let s=0;for(let i=0;i<this.encoderByteLength;i++)s+=Math.round(r.data[i*4]/255)*Math.pow(2,i);return s=Math.max(s-1,0),this._videoTexture.needsUpdate=this.currentFrame!==s,s}get video(){return this._video}play(){this.hasPlayed=!0,this._video.playsInline=!0,this.mesh.visible=!0,this._video.play()}playOneFrame(){this.stopOnNextFrame=!0,this.play()}dispose(){if(this._worker?.terminate(),this._video&&(this._video.pause(),this._video=null,this._videoTexture.dispose(),this._videoTexture=null),this.meshBuffer){for(let e=0;e<this.meshBuffer.size;e++){const t=this.meshBuffer.get(e);t&&t instanceof l&&t?.dispose()}this.meshBuffer.clear()}}}export{N as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
