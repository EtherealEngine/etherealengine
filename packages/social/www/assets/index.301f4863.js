import{c as f,i as y,a as h}from"./createSvgIcon.57924123.js";import{r as o,j as I,R as a,u as z}from"./vendor.475cb2ff.js";import{_ as g,t as N,a as q,d as D}from"./_app.f0a72417.js";import{P as b}from"./PopupsStateService.a3af5f05.js";import{C as H}from"./CreatorService.46518bb7.js";import{w as k}from"./capitalize.fc001633.js";import{T as p}from"./Typography.19cbe78d.js";import{A as w}from"./Avatar.7391d47d.js";import{I as V}from"./IconButton.ce216bbb.js";import{M as A}from"./Modal.58912532.js";import{C as W}from"./CardContent.1f497982.js";var B={root:{display:"flex",alignItems:"center",padding:16},avatar:{flex:"0 0 auto",marginRight:16},action:{flex:"0 0 auto",alignSelf:"flex-start",marginTop:-8,marginRight:-8},content:{flex:"1 1 auto"},title:{},subheader:{}},L=o.exports.forwardRef(function(e,i){var s=e.action,t=e.avatar,l=e.classes,m=e.className,d=e.component,v=d===void 0?"div":d,u=e.disableTypography,S=u===void 0?!1:u,j=e.subheader,T=e.subheaderTypographyProps,R=e.title,$=e.titleTypographyProps,M=I(e,["action","avatar","classes","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"]),n=R;n!=null&&n.type!==p&&!S&&(n=o.exports.createElement(p,g({variant:t?"body2":"h5",className:l.title,component:"span",display:"block"},$),n));var c=j;return c!=null&&c.type!==p&&!S&&(c=o.exports.createElement(p,g({variant:t?"body2":"body1",className:l.subheader,color:"textSecondary",component:"span",display:"block"},T),c)),o.exports.createElement(v,g({className:N(l.root,m),ref:i},M),t&&o.exports.createElement("div",{className:l.avatar},t),o.exports.createElement("div",{className:l.content},n,c),s&&o.exports.createElement("div",{className:l.action},s))}),F=k(B,{name:"MuiCardHeader"})(L),x={},O=y.exports,U=h.exports;Object.defineProperty(x,"__esModule",{value:!0});var E=x.default=void 0,G=U(o.exports),J=O(f),K=(0,J.default)(G.createElement("path",{d:"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"}),"VerifiedUser");E=x.default=K;var _={},Q=y.exports,X=h.exports;Object.defineProperty(_,"__esModule",{value:!0});var P=_.default=void 0,Y=X(o.exports),Z=Q(f),ee=(0,Z.default)(Y.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete");P=_.default=ee;const ae=({creator:r})=>{const e=q(),i=D(),s=t=>{e(H.unBlockCreator(t))};return r?a.createElement(F,{avatar:a.createElement(w,{src:r.avatar,alt:r.username,onClick:()=>{if(i.popups.creatorPage?.value===!0){e(b.updateCreatorPageState(!1));const t=setTimeout(()=>{clearInterval(t),e(b.updateCreatorPageState(!0,r.id))},100)}else e(b.updateCreatorPageState(!0,r.id))}}),title:a.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-between"}},a.createElement(p,{variant:"h6"},r.username,r.verified===!0&&a.createElement(E,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}})),a.createElement(V,{"aria-label":"delete",color:"primary",onClick:()=>s(r.id)},a.createElement(P,null)))}):a.createElement(a.Fragment,null)};var C={},te=y.exports,re=h.exports;Object.defineProperty(C,"__esModule",{value:!0});var oe=C.default=void 0,le=re(o.exports),se=te(f),ie=(0,se.default)(le.createElement("path",{d:"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"MoreHoriz");oe=C.default=ie;const be=r=>{const{onClose:e,selectedValue:i,open:s,list:t,type:l}=r,{t:m}=z(),d=()=>{e(i)};return console.log(t),a.createElement(A,{onClose:d,open:s,style:{display:"flex",justifyContent:"center",alignItems:"center"}},a.createElement(W,{style:{width:"auto",height:"60%",overflow:"auto",padding:"1%"}},t?.length>0?t?.map((v,u)=>a.createElement(ae,{creator:v,key:u})):a.createElement("p",null,m("social:simpleModal.emptyList"))))};export{ae as C,be as S,F as a,oe as b,E as d};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
