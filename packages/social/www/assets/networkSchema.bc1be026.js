const g=o=>({type:`Uint${o}`,bytes:o===8?1:o===16?2:4}),u=g(8),p=g(16),_=g(32),w=o=>({type:`Big${o?"Int":"Uint"}64`,bytes:8}),B=w(!1),x=o=>({type:`Float${o}`,bytes:o===32?4:8}),c=x(32),P={type:"String",bytes:1};DataView.prototype.setBigUint64??=function(o,t,e){const i=Number(t>>32n&0xffffffffn),n=Number(t&0xffffffffn),[s,r]=e?[4,0]:[0,4];this.setUint32(o+s,i,e),this.setUint32(o+r,n,e)};DataView.prototype.getBigUint64??=function(o,t){const[e,i]=t?[4,0]:[0,4],n=BigInt(this.getUint32(o+e,t)),s=BigInt(this.getUint32(o+i,t));return(n<<32n)+s};class U{maxByteSize;_buffer;_dataView;_offset;_textEncoder;_textDecoder;_uint8Array;get offset(){return this._offset}constructor(t){this.maxByteSize=t??1e6,this._offset=0,this._buffer=new ArrayBuffer(this.maxByteSize),this._dataView=new DataView(this._buffer),this._uint8Array=new Uint8Array(this._buffer),this._textEncoder=new TextEncoder,this._textDecoder=new TextDecoder}refresh(t){this._offset=0,t&&this._uint8Array.set(new Uint8Array(t))}finalize(){return this._buffer.slice(0,this._offset)}append(t,e){if(t.type==="String"){this._dataView.setUint8(this._offset,34),this._offset+=u.bytes;const i=this._textEncoder.encode(e.toString());this._uint8Array.set(i,this._offset),this._offset+=i.byteLength,this._dataView.setUint8(this._offset,34),this._offset+=u.bytes;return}if(t.type==="Boolean")this._dataView.setUint8(this._offset,e===!0?1:0);else{switch(t.type){case"BigInt64":case"BigUint64":{e=typeof e=="bigint"?e:BigInt(e);break}case"Float32":case"Float64":{e=Number(Number(e).toPrecision(t.type==="Float32"?7:16));break}}this._dataView[`set${t.type}`](this._offset,e)}this._offset+=t.bytes}read(t){let e,i=this._offset+t.bytes;if(t.type==="String"){const n=this._uint8Array[this._offset],s=this._uint8Array.indexOf(34,this._offset+1);if(n!==34||s<this._offset)throw new Error("Buffer contains invalid string.");e=this._textDecoder.decode(this._uint8Array.subarray(this._offset+1,s)),i=s+1}else t.type==="Boolean"?e=Boolean(this._dataView.getUint8(this._offset)):(e=this._dataView[`get${t.type}`](this._offset),(t.type==="Float32"||t.type==="Float64")&&(e=Number(Number(e).toPrecision(t.type==="Float32"?7:16))));return this._offset=i,e}}function b(o){return typeof o=="object"&&Object.getPrototypeOf(o)===Object.prototype}function l(o){return o&&typeof o.type=="string"&&typeof o.bytes=="number"}class f{static instances=new Map;id;struct;constructor(t,e=f.instances.size){if(this.struct=f.definition(t),this.id=e,f.instances.get(e))throw new Error(`A Schema with the name "${e}" already exists.`);if(f.instances.set(e,this),f.instances.size>255)throw new Error("The maximum number of Schema instances (255) has been reached.")}static definition(t){return this.sortStruct(t)}static sortStruct(t){const e=Object.keys(t);e.length<=1&&this.getSortPriority(t[e[0]]);const i=e.sort((s,r)=>{const a=this.getSortPriority(t[s]),h=this.getSortPriority(t[r]);return a===h?s<r?-1:1:a<h?-1:1}),n={};for(const s of i){const r=t[s];b(r)&&!l(r)?n[s]=this.sortStruct(r):n[s]=r}return n}static getSortPriority(t){if(l(t))return t.type==="String"?2:0;if(t instanceof f)return 5;if(Array.isArray(t)){if(l(t[0]))return t[0].type==="String"?3:1;if(t[0]instanceof f)return 6}if(b(t))return 4;throw new Error(`Unsupported data type in schema definition: ${t}`)}}class y{static BUFFER_ARRAY=0;static BUFFER_OBJECT=1;schema;_buffer;constructor(t,e){this._buffer=new U(e),this.schema=t}static fromSchemaDefinition(t,e){return new y(new f(t,e))}static getIdFromBuffer(t){return new Uint8Array(t)[1]}toBuffer(t){if(this._buffer.refresh(),Array.isArray(t)){this._buffer.append(u,y.BUFFER_ARRAY),this._buffer.append(u,this.schema.id),this._buffer.append(p,t.length);for(let e=0;e<t.length;e++)this.serialize(t[e],this.schema.struct)}else this._buffer.append(u,y.BUFFER_OBJECT),this._buffer.append(u,this.schema.id),this.serialize(t,this.schema.struct);return this._buffer.finalize()}fromBuffer(t,e){if(t.byteLength>this._buffer.maxByteSize)throw new Error("Buffer exceeds max allocation size.");this._buffer.refresh(t);const i=this._buffer.read(u);if(e&&e!==i)throw new Error(`Expected buffer type to be ${e} but got ${i}.`);if(this._buffer.read(u)!==this.schema.id)throw new Error(`Expected schema id to be ${this.schema.id}`);if(i===y.BUFFER_OBJECT)return this.deserialize(this.schema.struct);const n=this._buffer.read(p),s=[];for(let r=0;r<n;r++)s.push(this.deserialize(this.schema.struct));return s}serialize(t,e){const i=Object.keys(e);for(let n=0;n<i.length;n++){const s=t[i[n]],r=e[i[n]];if(l(r))this._buffer.append(r,s);else if(r instanceof f)this.serialize(s,r.struct);else if(Array.isArray(r)){this._buffer.append(p,s.length);const a=r[0];if(a instanceof f)for(let h=0;h<s.length;h++)this.serialize(s[h],a.struct);else if(l(a))for(let h=0;h<s.length;h++)this._buffer.append(a,s[h])}else b(r)&&this.serialize(s,r)}}deserialize(t){const e={},i=Object.keys(t);for(let n=0;n<i.length;n++){const s=t[i[n]];if(l(s))e[i[n]]=this._buffer.read(s);else if(Array.isArray(s)){const r=this._buffer.read(p),a=s[0],h=[];if(a instanceof f)for(let d=0;d<r;d++)h.push(this.deserialize(a.struct));else if(l(a))for(let d=0;d<r;d++)h.push(this._buffer.read(a));e[i[n]]=h}else e[i[n]]=this.deserialize(s instanceof f?s.struct:s)}return e}}const A=new f({networkId:_,position:[c],rotation:[c],linearVelocity:[c],angularVelocity:[c]}),z=new f({key:P,position:[c],rotation:[c]}),E=new f({joints:[z]}),S=new f({networkId:_,hands:[E]}),F=new f({networkId:_,headPosePosition:[c],headPoseRotation:[c],leftPosePosition:[c],leftPoseRotation:[c],rightPosePosition:[c],rightPoseRotation:[c]}),k=new f({tick:_,time:B,pose:[A],ikPose:[F],handsPose:[S]});class m{static model=new y(k);static toBuffer(t){return t.time=Date.now(),m.model.toBuffer(t)}static fromBuffer(t){const e=m.model.fromBuffer(t);return{...e,time:Number(e.time)}}}export{m as W};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
