import{a as y,b as v,c as C}from"./index.2272cc2f.js";import{d as m,g as i,E as S}from"./avatarFunctions.6d66cf01.js";import{O as c,L as T,j as d}from"./[projectId].a008d20c.js";import{a3 as x}from"./SystemUpdateType.772fc25d.js";import"./index.81138b53.js";import"./_app.f0a72417.js";import"./vendor.475cb2ff.js";import"./index.7b02be28.js";import"./three.module.493739a3.js";import"./AuthService.e8999ddc.js";import"./AlertService.5d8abaff.js";import"./feathers.32f4d4e8.js";import"./upload.bd537b46.js";const L=3.14159265359;async function _(n){const p=m([c,T]),u=m([d]);let r=!1;return()=>{for(const t of p.enter(n))i(t,c).value.position;for(const t of p(n)){const s=i(t,c).value.position,a=C(),j=a[0],f=a[1],l=y(),b=s.x/(111134.861111*l)+j,g=-s.z/(Math.cos(f*L/180)*111321.377778*l)+f,e=v(),o=x([b,g]);r==!1&&o[0]&&e[0]?e[0]==o[0]&&e[1]==o[1]?console.log("in center"):r=!0:e[0]==o[0]&&e[1]==o[1]&&(r=!1)}for(const t of u(n)){const s=i(t,d).value;for(const a of s)a.onUpdate(S.camera)}}}export{_ as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwVXBkYXRlU3lzdGVtLmY4ZDZiNDA3LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9lbmdpbmUvc3JjL2NvbW1vbi9jb25zdGFudHMvTWF0aENvbnN0YW50cy50cyIsIi4uLy4uLy4uL2VuZ2luZS9zcmMvbWFwL01hcFVwZGF0ZVN5c3RlbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUEkgPSAzLjE0MTU5MjY1MzU5XG5leHBvcnQgY29uc3QgVEFVID0gNi4yODMxODUzMDcxOFxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ3RocmVlJ1xuaW1wb3J0IHsgZ2V0Q29vcmQsIGdldFNjYWxlQXJnLCBnZXRUaWxlIH0gZnJvbSAnLidcbmltcG9ydCB7IFBJIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cy9NYXRoQ29uc3RhbnRzJ1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vZWNzL2NsYXNzZXMvRW5naW5lJ1xuaW1wb3J0IHsgZGVmaW5lUXVlcnksIGdldENvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9mdW5jdGlvbnMvQ29tcG9uZW50RnVuY3Rpb25zJ1xuaW1wb3J0IHsgT2JqZWN0M0RDb21wb25lbnQgfSBmcm9tICcuLi9zY2VuZS9jb21wb25lbnRzL09iamVjdDNEQ29tcG9uZW50J1xuaW1wb3J0IHsgZ2V0Q2VudGVyVGlsZSB9IGZyb20gJy4vTWFwQm94Q2xpZW50J1xuaW1wb3J0IHsgTG9jYWxJbnB1dFRhZ0NvbXBvbmVudCB9IGZyb20gJy4uL2lucHV0L2NvbXBvbmVudHMvTG9jYWxJbnB1dFRhZ0NvbXBvbmVudCdcbmltcG9ydCB7IHVwZGF0ZU1hcCB9IGZyb20gJy4uL3NjZW5lL2Z1bmN0aW9ucy9jcmVhdGVNYXAnXG5pbXBvcnQgeyBHZW9MYWJlbFNldENvbXBvbmVudCB9IGZyb20gJy4vR2VvTGFiZWxTZXRDb21wb25lbnQnXG5pbXBvcnQgeyBTeXN0ZW0gfSBmcm9tICcuLi9lY3MvY2xhc3Nlcy9TeXN0ZW0nXG5pbXBvcnQgeyBXb3JsZCB9IGZyb20gJy4uL2Vjcy9jbGFzc2VzL1dvcmxkJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBNYXBVcGRhdGVTeXN0ZW0od29ybGQ6IFdvcmxkKTogUHJvbWlzZTxTeXN0ZW0+IHtcbiAgY29uc3QgbW92ZVF1ZXJ5ID0gZGVmaW5lUXVlcnkoW09iamVjdDNEQ29tcG9uZW50LCBMb2NhbElucHV0VGFnQ29tcG9uZW50XSlcbiAgY29uc3QgbGFiZWxzUXVlcnkgPSBkZWZpbmVRdWVyeShbR2VvTGFiZWxTZXRDb21wb25lbnRdKVxuICBsZXQgdXBkYXRlU3RhdHVzID0gZmFsc2VcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGZvciAoY29uc3QgZW50aXR5IG9mIG1vdmVRdWVyeS5lbnRlcih3b3JsZCkpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0Q29tcG9uZW50KGVudGl0eSwgT2JqZWN0M0RDb21wb25lbnQpLnZhbHVlLnBvc2l0aW9uXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgbW92ZVF1ZXJ5KHdvcmxkKSkge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRDb21wb25lbnQoZW50aXR5LCBPYmplY3QzRENvbXBvbmVudCkudmFsdWUucG9zaXRpb25cbiAgICAgIGNvbnN0IGNlbnRyQ29vcmQgPSBnZXRDb29yZCgpXG4gICAgICAvL0NhbGN1bGF0ZSBuZXcgbW92ZSBjb29yZHNcbiAgICAgIGNvbnN0IHN0YXJ0TG9uZyA9IGNlbnRyQ29vcmRbMF1cbiAgICAgIGNvbnN0IHN0YXJ0TGF0ID0gY2VudHJDb29yZFsxXVxuICAgICAgY29uc3Qgc2NhbGVBcmcgPSBnZXRTY2FsZUFyZygpXG5cbiAgICAgIGNvbnN0IGxvbmd0aXR1ZGUgPSBwb3NpdGlvbi54IC8gKDExMTEzNC44NjExMTEgKiBzY2FsZUFyZykgKyBzdGFydExvbmdcbiAgICAgIGNvbnN0IGxhdGl0dWRlID0gLXBvc2l0aW9uLnogLyAoTWF0aC5jb3MoKHN0YXJ0TGF0ICogUEkpIC8gMTgwKSAqIDExMTMyMS4zNzc3NzggKiBzY2FsZUFyZykgKyBzdGFydExhdFxuXG4gICAgICAvL2dldCBDdXJyZW50IFRpbGVcbiAgICAgIGNvbnN0IHN0YXJ0VGlsZSA9IGdldFRpbGUoKVxuICAgICAgY29uc3QgbW92ZVRpbGUgPSBnZXRDZW50ZXJUaWxlKFtsb25ndGl0dWRlLCBsYXRpdHVkZV0pXG5cbiAgICAgIGlmICh1cGRhdGVTdGF0dXMgPT0gZmFsc2UgJiYgbW92ZVRpbGVbMF0gJiYgc3RhcnRUaWxlWzBdKSB7XG4gICAgICAgIGlmIChzdGFydFRpbGVbMF0gPT0gbW92ZVRpbGVbMF0gJiYgc3RhcnRUaWxlWzFdID09IG1vdmVUaWxlWzFdKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2luIGNlbnRlcicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTk9URTogY29tbWVudGluZyB0aGlzIG91dCBmb3Igbm93IHNpbmNlIHRoaXMgd2FzIGRldHJpbWVudGluZyBwbGF5ZXIgZXhwZXJpZW5jZVxuICAgICAgICAgIC8vIHVwZGF0ZU1hcChcbiAgICAgICAgICAvLyAgIHtcbiAgICAgICAgICAvLyAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKHNjYWxlQXJnLCBzY2FsZUFyZywgc2NhbGVBcmcpXG4gICAgICAgICAgLy8gICB9LFxuICAgICAgICAgIC8vICAgbG9uZ3RpdHVkZSxcbiAgICAgICAgICAvLyAgIGxhdGl0dWRlLFxuICAgICAgICAgIC8vICAgcG9zaXRpb25cbiAgICAgICAgICAvLyApXG4gICAgICAgICAgdXBkYXRlU3RhdHVzID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhcnRUaWxlWzBdID09IG1vdmVUaWxlWzBdICYmIHN0YXJ0VGlsZVsxXSA9PSBtb3ZlVGlsZVsxXSkge1xuICAgICAgICAgIHVwZGF0ZVN0YXR1cyA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBsYWJlbHNRdWVyeSh3b3JsZCkpIHtcbiAgICAgIGNvbnN0IGxhYmVscyA9IGdldENvbXBvbmVudChlbnRpdHksIEdlb0xhYmVsU2V0Q29tcG9uZW50KS52YWx1ZVxuICAgICAgZm9yIChjb25zdCBsYWJlbCBvZiBsYWJlbHMpIHtcbiAgICAgICAgbGFiZWwub25VcGRhdGUoRW5naW5lLmNhbWVyYSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiK2ZBQWEsR0FBSywrQkNhNEIsRUFBK0IsTUFDckUsR0FBWSxFQUFZLENBQUMsRUFBbUIsSUFDNUMsRUFBYyxFQUFZLENBQUMsT0FDN0IsR0FBZSxTQUVaLElBQU0sVUFDQSxLQUFVLEdBQVUsTUFBTSxHQUNsQixFQUFhLEVBQVEsR0FBbUIsTUFBTSxrQkFHdEQsS0FBVSxHQUFVLEdBQVEsTUFDL0IsR0FBVyxFQUFhLEVBQVEsR0FBbUIsTUFBTSxTQUN6RCxFQUFhLElBRWIsRUFBWSxFQUFXLEdBQ3ZCLEVBQVcsRUFBVyxHQUN0QixFQUFXLElBRVgsRUFBYSxFQUFTLGlCQUFxQixHQUFZLEVBQ3ZELEVBQVcsQ0FBQyxFQUFTLFFBQVUsSUFBSyxFQUFXLEVBQU0sS0FBTyxjQUFnQixHQUFZLEVBR3hGLEVBQVksSUFDWixFQUFXLEVBQWMsQ0FBQyxFQUFZLElBRXhDLEdBQWdCLElBQVMsRUFBUyxJQUFNLEVBQVUsR0FDaEQsRUFBVSxJQUFNLEVBQVMsSUFBTSxFQUFVLElBQU0sRUFBUyxXQUNsRCxJQUFJLGVBV0csR0FHYixFQUFVLElBQU0sRUFBUyxJQUFNLEVBQVUsSUFBTSxFQUFTLE9BQzNDLGFBS1YsS0FBVSxHQUFZLEdBQVEsTUFDakMsR0FBUyxFQUFhLEVBQVEsR0FBc0IsZUFDL0MsS0FBUyxLQUNaLFNBQVMsRUFBTyJ9
