import{p as f}from"./mathUtils.88086a33.js";import{c as l,g as t,a,d as u}from"./avatarFunctions.c7a0e273.js";import{T as j}from"./SystemUpdateType.4e88f289.js";import{c as v,b as C}from"./AutoPilotOverrideComponent.0b4b0ae9.js";import{o as b}from"./three.module.0404e109.js";import{L as m}from"./[projectId].d5e44847.js";import"./AuthService.6db25508.js";import"./_app.009e96ac.js";import"./index.0040ebb6.js";import"./vendor.c8b8cc93.js";import"./upload.38e3baaf.js";import"./index.9af95596.js";import"./AlertService.bfed2141.js";import"./feathers.081246a7.js";const r=l("FollowComponent");function T(n,e){let o=t(e,m);o===void 0&&(o=a(e,m,{})),a(e,v,{overrideCoords:!0,overridePosition:n}),a(e,C,{coords:new b(0,0)})}const g=1,S=10;async function B(n){const e=u([r]);return()=>{for(const o of e(n)){let{targetEid:c,cStep:s,prevTarget:d}=t(o,r);if(s++,t(o,r).cStep=s,s<S)continue;t(o,r).cStep=0;const i=t(c,j);if(i!==void 0){const p=f(i.position,i.rotation,g);p!==d&&(T(p,o),t(o,r).prevTarget=p)}}}}export{B as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
