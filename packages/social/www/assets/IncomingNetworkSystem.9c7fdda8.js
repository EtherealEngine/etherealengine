import{a as k,N as P}from"./AuthService.e8999ddc.js";import{c as E,u as v,i as w,g as d,E as g,a as j,q as S,h as u}from"./avatarFunctions.6d66cf01.js";import{m as R,N as y,d as $,c as H,r as L,V as b,C,i as A,X as I}from"./[projectId].a008d20c.js";import{W as M}from"./networkSchema.bc1be026.js";import{T as O}from"./SystemUpdateType.772fc25d.js";import{X as N}from"./XRHandsInputComponent.3d76e9a2.js";import{V,Q as q,G as z}from"./three.module.493739a3.js";import"./AlertService.5d8abaff.js";import"./index.7b02be28.js";import"./vendor.475cb2ff.js";import"./_app.f0a72417.js";import"./feathers.32f4d4e8.js";import"./index.81138b53.js";import"./upload.bd537b46.js";const D=E("NetworkObjectOwnedTag");function Q(n){const t=v();R(n).when(y.createClient.matches,({userId:o,name:e,avatarDetail:f})=>{!w||t.clients.set(o,{userId:o,name:e,avatarDetail:f,subscribedChatUpdates:[]})}).when(y.destroyClient.matches,({userId:o})=>{for(const e of t.getOwnedNetworkObjects(o)){const{networkId:f}=d(e,k);$(t.hostId,()=>y.destroyObject({networkId:f}))}!w||o===g.userId||t.clients.delete(o)}).when(y.spawnObject.matches,o=>{const e=y.spawnAvatar.matches.test(o),f=o.userId===g.userId,i=e&&f?t.localClientEntity:t.getNetworkObject(o.networkId)??H();f&&j(i,D,{}),j(i,k,o)}).when(y.destroyObject.matches,o=>{const e=t.getNetworkObject(o.networkId);e!==t.localClientEntity&&e&&L(e)})}const U=n=>{const{delayedActions:t}=n;for(const o of t)if(o.$tick<=n.fixedTick){console.log(`DELAYED ACTION ${o.type}`,o),t.delete(o);for(const e of n.receptors)e(o)}return n},W=n=>{const{incomingActions:t,delayedActions:o}=n;t.size&&console.log(`Dispatching actions for simulation tick: ${n.fixedTick}`);for(const e of t){if(e.$tick>n.fixedTick){o.add(e);continue}e.$tick<n.fixedTick?console.warn(`LATE ACTION ${e.type}`,e):console.log(`ACTION ${e.type}`,e);for(const f of n.receptors)try{f(e)}catch(i){console.error(i),t.delete(e)}}return n},X=n=>t=>{const{incomingMessageQueueUnreliable:o,incomingMessageQueueUnreliableIDs:e}=n;for(;o.getBufferLength()>0;){const f=o.pop();e.pop();try{const i=M.fromBuffer(f);w&&(t.fixedTick=Math.max(i.tick,t.fixedTick));for(let p=0;p<i.pose.length;p++){const r=i.pose[p],c=t.getNetworkObject(r.networkId);if(!c){console.warn(`Rejecting update for non-existing network object: ${r.networkId}`);continue}if(d(c,k).userId!==g.userId){if(u(c,b)){const s=d(c,b);r.linearVelocity.length===1?s.velocity.setScalar(0):s.velocity.fromArray(r.linearVelocity)}if(u(c,C)){const s=d(c,C),a=new V().fromArray(r.position),l=new q().fromArray(r.rotation);s.body.setGlobalPose({translation:{x:a.x,y:a.y,z:a.z},rotation:{x:l.x,y:l.y,z:l.z,w:l.w}},!0)}if(u(c,O)){const s=d(c,O);s.position.fromArray(r.position),s.rotation.fromArray(r.rotation)}}}for(let p=0;p<i.ikPose.length;p++){const r=i.ikPose[p],c=t.getNetworkObject(r.networkId);if(A(c)||!u(c,I))continue;const m=d(c,I),{headPosePosition:h,headPoseRotation:s,leftPosePosition:a,leftPoseRotation:l,rightPosePosition:x,rightPoseRotation:T}=r;m.head.position.fromArray(h),m.head.quaternion.fromArray(s),m.controllerLeft.position.fromArray(a),m.controllerLeft.quaternion.fromArray(l),m.controllerRight.position.fromArray(x),m.controllerRight.quaternion.fromArray(T)}for(const p of i.handsPose){const r=t.getNetworkObject(p.networkId);if(A(r)||!u(r,N))continue;const c=d(r,N);p.hands.forEach((m,h)=>{const s=c.hands[h];s.joints||(s.joints={}),m.joints.forEach(a=>{s.joints[a.key]||(s.joints[a.key]=new z);const l=s.joints[a.key];l.position.fromArray(a.position),l.quaternion.fromArray(a.rotation)})})}}catch(i){console.log("could not process world state buffer, "+i+" "+i.stack)}}return t};async function it(n){const t=S(U,W,X(P.instance));return n.receptors.add(Q),()=>t(n)}export{U as applyDelayedActions,W as applyIncomingActions,X as applyUnreliableQueue,it as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5jb21pbmdOZXR3b3JrU3lzdGVtLjljN2ZkZGE4LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9lbmdpbmUvc3JjL25ldHdvcmtpbmcvY29tcG9uZW50cy9OZXR3b3JrT2JqZWN0T3duZWRUYWcudHMiLCIuLi8uLi8uLi9lbmdpbmUvc3JjL25ldHdvcmtpbmcvZnVuY3Rpb25zL2luY29taW5nTmV0d29ya1JlY2VwdG9yLnRzIiwiLi4vLi4vLi4vZW5naW5lL3NyYy9uZXR3b3JraW5nL3N5c3RlbXMvSW5jb21pbmdOZXR3b3JrU3lzdGVtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU1hcHBlZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Vjcy9mdW5jdGlvbnMvQ29tcG9uZW50RnVuY3Rpb25zJ1xuXG5leHBvcnQgY29uc3QgTmV0d29ya09iamVjdE93bmVkVGFnID0gY3JlYXRlTWFwcGVkQ29tcG9uZW50KCdOZXR3b3JrT2JqZWN0T3duZWRUYWcnKVxuIiwiaW1wb3J0IHsgTmV0d29ya09iamVjdENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvTmV0d29ya09iamVjdENvbXBvbmVudCdcbmltcG9ydCB7IGFkZENvbXBvbmVudCwgZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZWNzL2Z1bmN0aW9ucy9Db21wb25lbnRGdW5jdGlvbnMnXG5pbXBvcnQgeyBjcmVhdGVFbnRpdHksIHJlbW92ZUVudGl0eSB9IGZyb20gJy4uLy4uL2Vjcy9mdW5jdGlvbnMvRW50aXR5RnVuY3Rpb25zJ1xuaW1wb3J0IHsgaXNDbGllbnQgfSBmcm9tICcuLi8uLi9jb21tb24vZnVuY3Rpb25zL2lzQ2xpZW50J1xuaW1wb3J0IHsgTmV0d29ya1dvcmxkQWN0aW9uIH0gZnJvbSAnLi9OZXR3b3JrV29ybGRBY3Rpb24nXG5pbXBvcnQgeyB1c2VXb3JsZCB9IGZyb20gJy4uLy4uL2Vjcy9mdW5jdGlvbnMvU3lzdGVtSG9va3MnXG5pbXBvcnQgbWF0Y2hlcyBmcm9tICd0cy1tYXRjaGVzJ1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vLi4vZWNzL2NsYXNzZXMvRW5naW5lJ1xuaW1wb3J0IHsgTmV0d29ya09iamVjdE93bmVkVGFnIH0gZnJvbSAnLi4vY29tcG9uZW50cy9OZXR3b3JrT2JqZWN0T3duZWRUYWcnXG5pbXBvcnQgeyBkaXNwYXRjaEZyb20gfSBmcm9tICcuL2Rpc3BhdGNoRnJvbSdcblxuLyoqXG4gKiBAYXV0aG9yIEdoZXJpYyBTcGVpZ2luZXIgPGdpdGh1Yi5jb20vc3BlaWdnPlxuICogQGF1dGhvciBKb3NoIEZpZWxkIDxnaXRodWIuY29tL0hleGFGaWVsZD5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluY29taW5nTmV0d29ya1JlY2VwdG9yKGFjdGlvbikge1xuICBjb25zdCB3b3JsZCA9IHVzZVdvcmxkKClcblxuICBtYXRjaGVzKGFjdGlvbilcbiAgICAud2hlbihOZXR3b3JrV29ybGRBY3Rpb24uY3JlYXRlQ2xpZW50Lm1hdGNoZXMsICh7IHVzZXJJZCwgbmFtZSwgYXZhdGFyRGV0YWlsIH0pID0+IHtcbiAgICAgIGlmICghaXNDbGllbnQpIHJldHVyblxuICAgICAgd29ybGQuY2xpZW50cy5zZXQodXNlcklkLCB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYXZhdGFyRGV0YWlsLFxuICAgICAgICBzdWJzY3JpYmVkQ2hhdFVwZGF0ZXM6IFtdXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAud2hlbihOZXR3b3JrV29ybGRBY3Rpb24uZGVzdHJveUNsaWVudC5tYXRjaGVzLCAoeyB1c2VySWQgfSkgPT4ge1xuICAgICAgZm9yIChjb25zdCBlaWQgb2Ygd29ybGQuZ2V0T3duZWROZXR3b3JrT2JqZWN0cyh1c2VySWQpKSB7XG4gICAgICAgIGNvbnN0IHsgbmV0d29ya0lkIH0gPSBnZXRDb21wb25lbnQoZWlkLCBOZXR3b3JrT2JqZWN0Q29tcG9uZW50KVxuICAgICAgICBkaXNwYXRjaEZyb20od29ybGQuaG9zdElkLCAoKSA9PiBOZXR3b3JrV29ybGRBY3Rpb24uZGVzdHJveU9iamVjdCh7IG5ldHdvcmtJZCB9KSlcbiAgICAgIH1cbiAgICAgIGlmICghaXNDbGllbnQgfHwgdXNlcklkID09PSBFbmdpbmUudXNlcklkKSByZXR1cm5cbiAgICAgIHdvcmxkLmNsaWVudHMuZGVsZXRlKHVzZXJJZClcbiAgICB9KVxuXG4gICAgLndoZW4oTmV0d29ya1dvcmxkQWN0aW9uLnNwYXduT2JqZWN0Lm1hdGNoZXMsIChhKSA9PiB7XG4gICAgICBjb25zdCBpc1NwYXduaW5nQXZhdGFyID0gTmV0d29ya1dvcmxkQWN0aW9uLnNwYXduQXZhdGFyLm1hdGNoZXMudGVzdChhKVxuICAgICAgY29uc3QgaXNPd25lZEJ5TWUgPSBhLnVzZXJJZCA9PT0gRW5naW5lLnVzZXJJZFxuICAgICAgY29uc3QgZW50aXR5ID1cbiAgICAgICAgaXNTcGF3bmluZ0F2YXRhciAmJiBpc093bmVkQnlNZVxuICAgICAgICAgID8gd29ybGQubG9jYWxDbGllbnRFbnRpdHlcbiAgICAgICAgICA6IHdvcmxkLmdldE5ldHdvcmtPYmplY3QoYS5uZXR3b3JrSWQpID8/IGNyZWF0ZUVudGl0eSgpXG4gICAgICBpZiAoaXNPd25lZEJ5TWUpIGFkZENvbXBvbmVudChlbnRpdHksIE5ldHdvcmtPYmplY3RPd25lZFRhZywge30pXG4gICAgICBhZGRDb21wb25lbnQoZW50aXR5LCBOZXR3b3JrT2JqZWN0Q29tcG9uZW50LCBhKVxuICAgIH0pXG5cbiAgICAud2hlbihOZXR3b3JrV29ybGRBY3Rpb24uZGVzdHJveU9iamVjdC5tYXRjaGVzLCAoYSkgPT4ge1xuICAgICAgY29uc3QgZW50aXR5ID0gd29ybGQuZ2V0TmV0d29ya09iamVjdChhLm5ldHdvcmtJZClcbiAgICAgIGlmIChlbnRpdHkgPT09IHdvcmxkLmxvY2FsQ2xpZW50RW50aXR5KSByZXR1cm5cbiAgICAgIGlmIChlbnRpdHkpIHJlbW92ZUVudGl0eShlbnRpdHkpXG4gICAgfSlcbn1cbiIsImltcG9ydCB7IE5ldHdvcmtPYmplY3RDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL05ldHdvcmtPYmplY3RDb21wb25lbnQnXG5pbXBvcnQgeyBnZXRDb21wb25lbnQsIGhhc0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Vjcy9mdW5jdGlvbnMvQ29tcG9uZW50RnVuY3Rpb25zJ1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJy4uL2NsYXNzZXMvTmV0d29yaydcbmltcG9ydCB7IFhSSW5wdXRTb3VyY2VDb21wb25lbnQgfSBmcm9tICcuLi8uLi9hdmF0YXIvY29tcG9uZW50cy9YUklucHV0U291cmNlQ29tcG9uZW50J1xuaW1wb3J0IHsgV29ybGRTdGF0ZU1vZGVsIH0gZnJvbSAnLi4vc2NoZW1hL25ldHdvcmtTY2hlbWEnXG5pbXBvcnQgeyBpbmNvbWluZ05ldHdvcmtSZWNlcHRvciB9IGZyb20gJy4uL2Z1bmN0aW9ucy9pbmNvbWluZ05ldHdvcmtSZWNlcHRvcidcbmltcG9ydCB7IGlzRW50aXR5TG9jYWxDbGllbnQgfSBmcm9tICcuLi9mdW5jdGlvbnMvaXNFbnRpdHlMb2NhbENsaWVudCdcbmltcG9ydCB7IGlzQ2xpZW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL2Z1bmN0aW9ucy9pc0NsaWVudCdcbmltcG9ydCB7IFRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3RyYW5zZm9ybS9jb21wb25lbnRzL1RyYW5zZm9ybUNvbXBvbmVudCdcbmltcG9ydCB7IENvbGxpZGVyQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vcGh5c2ljcy9jb21wb25lbnRzL0NvbGxpZGVyQ29tcG9uZW50J1xuaW1wb3J0IHsgU3lzdGVtIH0gZnJvbSAnLi4vLi4vZWNzL2NsYXNzZXMvU3lzdGVtJ1xuaW1wb3J0IHsgV29ybGQgfSBmcm9tICcuLi8uLi9lY3MvY2xhc3Nlcy9Xb3JsZCdcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uLy4uL2Vjcy9jbGFzc2VzL0VuZ2luZSdcbmltcG9ydCB7IFZlbG9jaXR5Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vcGh5c2ljcy9jb21wb25lbnRzL1ZlbG9jaXR5Q29tcG9uZW50J1xuaW1wb3J0IHsgVXNlcklkIH0gZnJvbSAnQHhyZW5naW5lL2NvbW1vbi9zcmMvaW50ZXJmYWNlcy9Vc2VySWQnXG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnYml0ZWNzJ1xuaW1wb3J0IHsgWFJIYW5kc0lucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4veHIvY29tcG9uZW50cy9YUkhhbmRzSW5wdXRDb21wb25lbnQnXG5pbXBvcnQgeyBHcm91cCB9IGZyb20gJ3RocmVlJ1xuaW1wb3J0IHsgUXVhdGVybmlvbiwgVmVjdG9yMyB9IGZyb20gJ3RocmVlJ1xuXG5leHBvcnQgY29uc3QgYXBwbHlEZWxheWVkQWN0aW9ucyA9ICh3b3JsZDogV29ybGQpID0+IHtcbiAgY29uc3QgeyBkZWxheWVkQWN0aW9ucyB9ID0gd29ybGRcblxuICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBkZWxheWVkQWN0aW9ucykge1xuICAgIGlmIChhY3Rpb24uJHRpY2sgPD0gd29ybGQuZml4ZWRUaWNrKSB7XG4gICAgICBjb25zb2xlLmxvZyhgREVMQVlFRCBBQ1RJT04gJHthY3Rpb24udHlwZX1gLCBhY3Rpb24pXG4gICAgICBkZWxheWVkQWN0aW9ucy5kZWxldGUoYWN0aW9uKVxuICAgICAgZm9yIChjb25zdCByZWNlcHRvciBvZiB3b3JsZC5yZWNlcHRvcnMpIHtcbiAgICAgICAgcmVjZXB0b3IoYWN0aW9uKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3b3JsZFxufVxuXG5leHBvcnQgY29uc3QgYXBwbHlJbmNvbWluZ0FjdGlvbnMgPSAod29ybGQ6IFdvcmxkKSA9PiB7XG4gIGNvbnN0IHsgaW5jb21pbmdBY3Rpb25zLCBkZWxheWVkQWN0aW9ucyB9ID0gd29ybGRcblxuICBpZiAoaW5jb21pbmdBY3Rpb25zLnNpemUpIGNvbnNvbGUubG9nKGBEaXNwYXRjaGluZyBhY3Rpb25zIGZvciBzaW11bGF0aW9uIHRpY2s6ICR7d29ybGQuZml4ZWRUaWNrfWApXG5cbiAgZm9yIChjb25zdCBhY3Rpb24gb2YgaW5jb21pbmdBY3Rpb25zKSB7XG4gICAgaWYgKGFjdGlvbi4kdGljayA+IHdvcmxkLmZpeGVkVGljaykge1xuICAgICAgZGVsYXllZEFjdGlvbnMuYWRkKGFjdGlvbilcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChhY3Rpb24uJHRpY2sgPCB3b3JsZC5maXhlZFRpY2spIHtcbiAgICAgIGNvbnNvbGUud2FybihgTEFURSBBQ1RJT04gJHthY3Rpb24udHlwZX1gLCBhY3Rpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGBBQ1RJT04gJHthY3Rpb24udHlwZX1gLCBhY3Rpb24pXG4gICAgfVxuICAgIGZvciAoY29uc3QgcmVjZXB0b3Igb2Ygd29ybGQucmVjZXB0b3JzKVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVjZXB0b3IoYWN0aW9uKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICAgIGluY29taW5nQWN0aW9ucy5kZWxldGUoYWN0aW9uKVxuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIHdvcmxkXG59XG5cbmV4cG9ydCBjb25zdCBhcHBseVVucmVsaWFibGVRdWV1ZSA9IChuZXR3b3JrSW5zdGFuY2U6IE5ldHdvcmspID0+ICh3b3JsZDogV29ybGQpID0+IHtcbiAgY29uc3QgeyBpbmNvbWluZ01lc3NhZ2VRdWV1ZVVucmVsaWFibGUsIGluY29taW5nTWVzc2FnZVF1ZXVlVW5yZWxpYWJsZUlEcyB9ID0gbmV0d29ya0luc3RhbmNlXG5cbiAgd2hpbGUgKGluY29taW5nTWVzc2FnZVF1ZXVlVW5yZWxpYWJsZS5nZXRCdWZmZXJMZW5ndGgoKSA+IDApIHtcbiAgICBjb25zdCBidWZmZXIgPSBpbmNvbWluZ01lc3NhZ2VRdWV1ZVVucmVsaWFibGUucG9wKClcbiAgICBjb25zdCB1c2VySWQgPSBpbmNvbWluZ01lc3NhZ2VRdWV1ZVVucmVsaWFibGVJRHMucG9wKCkgYXMgVXNlcklkXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV3V29ybGRTdGF0ZSA9IFdvcmxkU3RhdGVNb2RlbC5mcm9tQnVmZmVyKGJ1ZmZlcilcbiAgICAgIC8vIGlmIChuZXdXb3JsZFN0YXRlLnBvc2UubGVuZ3RoKSBjb25zb2xlLmxvZygnbmV3IHdvcmxkIHN0YXRlOiAnICsgSlNPTi5zdHJpbmdpZnkobmV3V29ybGRTdGF0ZSkpXG5cbiAgICAgIC8vIHRvZG86IG1vdmUgdG8gY2xpZW50LXNwZWNpZmljIHN5c3RlbVxuICAgICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICAgIHdvcmxkLmZpeGVkVGljayA9IE1hdGgubWF4KG5ld1dvcmxkU3RhdGUudGljaywgd29ybGQuZml4ZWRUaWNrKVxuICAgICAgfVxuXG4gICAgICAvL2FkZCB2ZWxvY2l0eSB0byBwbGF5ZXIgdG8gY2hlY2sgaG93IGl0IHdvcmtzIGFuZCBhcHBseSBoZXJlIHRoZSByZWFkIG9mIHZlbG9jaXRpZXNcblxuICAgICAgLy8gIC8vIG9uIGNsaWVudCwgYWxsIGluY29taW5nIG9iamVjdCBwb3NlcyBoYW5kbGVkIGJ5IEludGVycG9sYXRpb25cbiAgICAgIC8vICAgaWYgKG5ld1dvcmxkU3RhdGUgJiYgbmV3V29ybGRTdGF0ZS5wb3NlLmxlbmd0aCkge1xuICAgICAgLy8gICAgIGxldCBwb3NcbiAgICAgIC8vICAgICBsZXQgcm90XG5cbiAgICAgIC8vICAgICBjb25zdCBuZXdTZXJ2ZXJTbmFwc2hvdCA9IGNyZWF0ZVNuYXBzaG90KFxuICAgICAgLy8gICAgICAgbmV3V29ybGRTdGF0ZS5wb3NlLm1hcCgocG9zZSkgPT4ge1xuICAgICAgLy8gICAgICAgICBwb3MgPSBkZWNvZGVWZWN0b3IzKHBvc2UucG9zaXRpb24pXG4gICAgICAvLyAgICAgICAgIHJvdCA9IGRlY29kZVF1YXRlcm5pb24ocG9zZS5yb3RhdGlvbilcbiAgICAgIC8vICAgICAgICAgcmV0dXJuIHtcbiAgICAgIC8vICAgICAgICAgICBuZXR3b3JrSWQ6IHBvc2UubmV0d29ya0lkLFxuICAgICAgLy8gICAgICAgICAgIHg6IHBvcy54LFxuICAgICAgLy8gICAgICAgICAgIHk6IHBvcy55LFxuICAgICAgLy8gICAgICAgICAgIHo6IHBvcy56LFxuICAgICAgLy8gICAgICAgICAgIHFYOiByb3QueCxcbiAgICAgIC8vICAgICAgICAgICBxWTogcm90LnksXG4gICAgICAvLyAgICAgICAgICAgcVo6IHJvdC56LFxuICAgICAgLy8gICAgICAgICAgIHFXOiByb3Qud1xuICAgICAgLy8gICAgICAgICB9XG4gICAgICAvLyAgICAgICB9KVxuICAgICAgLy8gICAgIClcbiAgICAgIC8vICAgICBuZXdTZXJ2ZXJTbmFwc2hvdC50aW1lID0gbmV3V29ybGRTdGF0ZS50aW1lXG4gICAgICAvLyAgICAgTmV0d29yay5pbnN0YW5jZS5zbmFwc2hvdCA9IG5ld1NlcnZlclNuYXBzaG90XG4gICAgICAvLyAgICAgYWRkU25hcHNob3QobmV3U2VydmVyU25hcHNob3QpXG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0gZWxzZSBpZiAobmV3V29ybGRTdGF0ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdXb3JsZFN0YXRlLnBvc2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcG9zZSA9IG5ld1dvcmxkU3RhdGUucG9zZVtpXVxuXG4gICAgICAgIGNvbnN0IG5ldHdvcmtPYmplY3RFbnRpdHkgPSB3b3JsZC5nZXROZXR3b3JrT2JqZWN0KHBvc2UubmV0d29ya0lkKVxuICAgICAgICBpZiAoIW5ldHdvcmtPYmplY3RFbnRpdHkpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFJlamVjdGluZyB1cGRhdGUgZm9yIG5vbi1leGlzdGluZyBuZXR3b3JrIG9iamVjdDogJHtwb3NlLm5ldHdvcmtJZH1gKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV0d29ya0NvbXBvbmVudCA9IGdldENvbXBvbmVudChuZXR3b3JrT2JqZWN0RW50aXR5LCBOZXR3b3JrT2JqZWN0Q29tcG9uZW50KVxuXG4gICAgICAgIC8vIGRvbid0IGFwcGx5IHN0YXRlIGlmIHRoaXMgY2xpZW50IGhhcyBvd25lcnNoaXBcbiAgICAgICAgY29uc3Qgd2VIYXZlT3duZXJzaGlwID0gbmV0d29ya0NvbXBvbmVudC51c2VySWQgPT09IEVuZ2luZS51c2VySWRcbiAgICAgICAgaWYgKHdlSGF2ZU93bmVyc2hpcCkge1xuICAgICAgICAgIC8vIGNvbnNvbGUud2FybihgUmVjZWl2ZWQgbmV0d29yayB1cGRhdGUgZm9yIGVudGl0eSB0aGF0IHRoaXMgY2xpZW50IG93bnM6ICR7cG9zZS5uZXR3b3JrSWR9YClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coYFJlY2lldmVkIHVwZGF0ZSBmb3IgbmV0d29yayBvYmplY3QgJHtwb3NlLm5ldHdvcmtJZH0sICR7SlNPTi5zdHJpbmdpZnkoZ2V0RW50aXR5Q29tcG9uZW50cyh3b3JsZCwgbmV0d29ya09iamVjdEVudGl0eSkpfWApXG5cbiAgICAgICAgaWYgKGhhc0NvbXBvbmVudChuZXR3b3JrT2JqZWN0RW50aXR5LCBWZWxvY2l0eUNvbXBvbmVudCkpIHtcbiAgICAgICAgICBjb25zdCB2ZWxDID0gZ2V0Q29tcG9uZW50KG5ldHdvcmtPYmplY3RFbnRpdHksIFZlbG9jaXR5Q29tcG9uZW50KVxuICAgICAgICAgIGlmIChwb3NlLmxpbmVhclZlbG9jaXR5Lmxlbmd0aCA9PT0gMSkgdmVsQy52ZWxvY2l0eS5zZXRTY2FsYXIoMClcbiAgICAgICAgICBlbHNlIHZlbEMudmVsb2NpdHkuZnJvbUFycmF5KHBvc2UubGluZWFyVmVsb2NpdHkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzQ29tcG9uZW50KG5ldHdvcmtPYmplY3RFbnRpdHksIENvbGxpZGVyQ29tcG9uZW50KSkge1xuICAgICAgICAgIGNvbnN0IGNvbGxpZGVyID0gZ2V0Q29tcG9uZW50KG5ldHdvcmtPYmplY3RFbnRpdHksIENvbGxpZGVyQ29tcG9uZW50KVxuICAgICAgICAgIGNvbnN0IHBvcyA9IG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KHBvc2UucG9zaXRpb24pXG4gICAgICAgICAgY29uc3Qgcm90ID0gbmV3IFF1YXRlcm5pb24oKS5mcm9tQXJyYXkocG9zZS5yb3RhdGlvbilcbiAgICAgICAgICBjb2xsaWRlci5ib2R5LnNldEdsb2JhbFBvc2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRyYW5zbGF0aW9uOiB7IHg6IHBvcy54LCB5OiBwb3MueSwgejogcG9zLnogfSxcbiAgICAgICAgICAgICAgcm90YXRpb246IHsgeDogcm90LngsIHk6IHJvdC55LCB6OiByb3Queiwgdzogcm90LncgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzQ29tcG9uZW50KG5ldHdvcmtPYmplY3RFbnRpdHksIFRyYW5zZm9ybUNvbXBvbmVudCkpIHtcbiAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1Db21wb25lbnQgPSBnZXRDb21wb25lbnQobmV0d29ya09iamVjdEVudGl0eSwgVHJhbnNmb3JtQ29tcG9uZW50KVxuICAgICAgICAgIHRyYW5zZm9ybUNvbXBvbmVudC5wb3NpdGlvbi5mcm9tQXJyYXkocG9zZS5wb3NpdGlvbilcbiAgICAgICAgICB0cmFuc2Zvcm1Db21wb25lbnQucm90YXRpb24uZnJvbUFycmF5KHBvc2Uucm90YXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgLy8gfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1dvcmxkU3RhdGUuaWtQb3NlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGlrUG9zZSA9IG5ld1dvcmxkU3RhdGUuaWtQb3NlW2ldXG5cbiAgICAgICAgY29uc3QgZW50aXR5ID0gd29ybGQuZ2V0TmV0d29ya09iamVjdChpa1Bvc2UubmV0d29ya0lkKVxuXG4gICAgICAgIGlmIChpc0VudGl0eUxvY2FsQ2xpZW50KGVudGl0eSkgfHwgIWhhc0NvbXBvbmVudChlbnRpdHksIFhSSW5wdXRTb3VyY2VDb21wb25lbnQpKSBjb250aW51ZVxuXG4gICAgICAgIGNvbnN0IHhySW5wdXRTb3VyY2VDb21wb25lbnQgPSBnZXRDb21wb25lbnQoZW50aXR5LCBYUklucHV0U291cmNlQ29tcG9uZW50KVxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgaGVhZFBvc2VQb3NpdGlvbixcbiAgICAgICAgICBoZWFkUG9zZVJvdGF0aW9uLFxuICAgICAgICAgIGxlZnRQb3NlUG9zaXRpb24sXG4gICAgICAgICAgbGVmdFBvc2VSb3RhdGlvbixcbiAgICAgICAgICByaWdodFBvc2VQb3NpdGlvbixcbiAgICAgICAgICByaWdodFBvc2VSb3RhdGlvblxuICAgICAgICB9ID0gaWtQb3NlXG4gICAgICAgIHhySW5wdXRTb3VyY2VDb21wb25lbnQuaGVhZC5wb3NpdGlvbi5mcm9tQXJyYXkoaGVhZFBvc2VQb3NpdGlvbilcbiAgICAgICAgeHJJbnB1dFNvdXJjZUNvbXBvbmVudC5oZWFkLnF1YXRlcm5pb24uZnJvbUFycmF5KGhlYWRQb3NlUm90YXRpb24pXG4gICAgICAgIHhySW5wdXRTb3VyY2VDb21wb25lbnQuY29udHJvbGxlckxlZnQucG9zaXRpb24uZnJvbUFycmF5KGxlZnRQb3NlUG9zaXRpb24pXG4gICAgICAgIHhySW5wdXRTb3VyY2VDb21wb25lbnQuY29udHJvbGxlckxlZnQucXVhdGVybmlvbi5mcm9tQXJyYXkobGVmdFBvc2VSb3RhdGlvbilcbiAgICAgICAgeHJJbnB1dFNvdXJjZUNvbXBvbmVudC5jb250cm9sbGVyUmlnaHQucG9zaXRpb24uZnJvbUFycmF5KHJpZ2h0UG9zZVBvc2l0aW9uKVxuICAgICAgICB4cklucHV0U291cmNlQ29tcG9uZW50LmNvbnRyb2xsZXJSaWdodC5xdWF0ZXJuaW9uLmZyb21BcnJheShyaWdodFBvc2VSb3RhdGlvbilcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBuZXRIYW5kcyBvZiBuZXdXb3JsZFN0YXRlLmhhbmRzUG9zZSkge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB3b3JsZC5nZXROZXR3b3JrT2JqZWN0KG5ldEhhbmRzLm5ldHdvcmtJZClcbiAgICAgICAgaWYgKGlzRW50aXR5TG9jYWxDbGllbnQoZW50aXR5KSB8fCAhaGFzQ29tcG9uZW50KGVudGl0eSwgWFJIYW5kc0lucHV0Q29tcG9uZW50KSkgY29udGludWVcblxuICAgICAgICBjb25zdCB4ckhhbmRzQ29tcG9uZW50ID0gZ2V0Q29tcG9uZW50KGVudGl0eSwgWFJIYW5kc0lucHV0Q29tcG9uZW50KVxuXG4gICAgICAgIG5ldEhhbmRzLmhhbmRzLmZvckVhY2goKGRhdGEsIGkpID0+IHtcbiAgICAgICAgICBjb25zdCBoYW5kID0geHJIYW5kc0NvbXBvbmVudC5oYW5kc1tpXSBhcyBhbnlcblxuICAgICAgICAgIGlmICghaGFuZC5qb2ludHMpIHtcbiAgICAgICAgICAgIGhhbmQuam9pbnRzID0ge31cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBQb3B1bGF0ZSBqb2ludHNcbiAgICAgICAgICBkYXRhLmpvaW50cy5mb3JFYWNoKChqKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWhhbmQuam9pbnRzW2oua2V5XSkge1xuICAgICAgICAgICAgICBoYW5kLmpvaW50c1tqLmtleV0gPSBuZXcgR3JvdXAoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBqb2ludCA9IGhhbmQuam9pbnRzW2oua2V5XSBhcyBHcm91cFxuICAgICAgICAgICAgam9pbnQucG9zaXRpb24uZnJvbUFycmF5KGoucG9zaXRpb24pXG4gICAgICAgICAgICBqb2ludC5xdWF0ZXJuaW9uLmZyb21BcnJheShqLnJvdGF0aW9uKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5sb2coJ2NvdWxkIG5vdCBwcm9jZXNzIHdvcmxkIHN0YXRlIGJ1ZmZlciwgJyArIGUgKyAnICcgKyBlLnN0YWNrKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3b3JsZFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBJbmNvbWluZ05ldHdvcmtTeXN0ZW0od29ybGQ6IFdvcmxkKTogUHJvbWlzZTxTeXN0ZW0+IHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIGNvbnN0IGFwcGx5SW5jb21pbmdOZXR3b3JrU3RhdGUgPSBwaXBlKFxuICAgIGFwcGx5RGVsYXllZEFjdGlvbnMsIFxuICAgIGFwcGx5SW5jb21pbmdBY3Rpb25zLFxuICAgIGFwcGx5VW5yZWxpYWJsZVF1ZXVlKE5ldHdvcmsuaW5zdGFuY2UpLFxuICApXG5cbiAgd29ybGQucmVjZXB0b3JzLmFkZChpbmNvbWluZ05ldHdvcmtSZWNlcHRvcilcblxuICByZXR1cm4gKCkgPT4gYXBwbHlJbmNvbWluZ05ldHdvcmtTdGF0ZSh3b3JsZClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZ3FCQUVhLEdBQXdCLEVBQXNCLG9DQ2FuQixFQUFRLE1BQ3hDLEdBQVEsTUFFTixHQUNMLEtBQUssRUFBbUIsYUFBYSxRQUFTLENBQUMsQ0FBRSxTQUFRLE9BQU0sa0JBQW1CLENBQzdFLENBQUMsS0FDQyxRQUFRLElBQUksRUFBUSxDQUN4QixTQUNBLE9BQ0EsZUFDQSxzQkFBdUIsT0FJMUIsS0FBSyxFQUFtQixjQUFjLFFBQVMsQ0FBQyxDQUFFLFlBQWEsVUFDbkQsS0FBTyxHQUFNLHVCQUF1QixHQUFTLE1BQ2hELENBQUUsYUFBYyxFQUFhLEVBQUssS0FDM0IsRUFBTSxPQUFRLElBQU0sRUFBbUIsY0FBYyxDQUFFLGVBRWxFLENBQUMsR0FBWSxJQUFXLEVBQU8sVUFDN0IsUUFBUSxPQUFPLEtBR3RCLEtBQUssRUFBbUIsWUFBWSxR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
