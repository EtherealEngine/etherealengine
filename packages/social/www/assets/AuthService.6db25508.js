import{A as v}from"./AlertService.bfed2141.js";import{k as L,r as re,A as l,l as et,m as tt,j as rt,n as ne,o as nt,S as Ae}from"./_app.009e96ac.js";import{c as d}from"./feathers.081246a7.js";import{C as S,v as Se,a as at}from"./index.0040ebb6.js";import{E as $,c as B,i as it,u as Pe,h as ae,a as ie,g as ot,s as Ie}from"./avatarFunctions.c7a0e273.js";class O{static fromArray(e,r=0){const n=new O(r);return n.fromArray(e,r===0),n}buffer=[];size;pos=0;copy(){const e=new O(this.getBufferLength());return e.buffer=this.buffer,e}clone(){const e=new O(this.getBufferLength());return e.buffer=this.buffer,e}constructor(e){if(e<0)throw new RangeError("The size does not allow negative values.");this.size=e}getSize(){return this.size}getPos(){return this.pos}getBufferLength(){return this.buffer.length}add(...e){e.forEach(r=>{this.buffer[this.pos]=r,this.pos=(this.pos+1)%this.size})}get(e){if(e<0&&(e+=this.buffer.length),!(e<0||e>this.buffer.length))return this.buffer.length<this.size?this.buffer[e]:this.buffer[(this.pos+e)%this.size]}getFirst(){return this.get(0)}getLast(){return this.get(-1)}remove(e,r=1){if(e<0&&(e+=this.buffer.length),e<0||e>this.buffer.length)return[];const n=this.toArray(),a=n.splice(e,r);return this.fromArray(n),a}pop(){return this.remove(0)[0]}popLast(){return this.remove(-1)[0]}toArray(){return this.buffer.slice(this.pos).concat(this.buffer.slice(0,this.pos))}fromArray(e,r=!1){if(!Array.isArray(e))throw new TypeError("Input value is not an array.");r&&this.resize(e.length),this.size!==0&&(this.buffer=e.slice(-this.size),this.pos=this.buffer.length%this.size)}clear(){this.buffer=[],this.pos=0}resize(e){if(e<0)throw new RangeError("The size does not allow negative values.");if(e===0)this.clear();else if(e!==this.size){const r=this.toArray();this.fromArray(r.slice(-e)),this.pos=this.buffer.length%e}this.size=e}full(){return this.buffer.length===this.size}empty(){return this.buffer.length===0}}class N{static instance=new N;isInitialized;packetCompression=!0;transport;transports=[];schema;dataProducers=new Map;dataConsumers=new Map;instanceSocketId;channelSocketId;accessToken;static _schemas=new Map;incomingMessageQueueUnreliableIDs=new O(100);incomingMessageQueueUnreliable=new O(100);incomingMessageQueueReliable=new O(100);mediasoupOperationQueue=new O(1e3);static availableNetworkId=0;static getNetworkId(){return++this.availableNetworkId}dispose(){this.transport&&typeof this.transport.close=="function"&&this.transport.close(),this.transport=null,N.instance=null}}var H;(function(t){t[t.Heartbeat=0]="Heartbeat",t[t.ClientConnected=1]="ClientConnected",t[t.ClientDisconnected=2]="ClientDisconnected",t[t.Initialization=3]="Initialization",t[t.JoinWorld=4]="JoinWorld",t[t.LeaveWorld=5]="LeaveWorld",t[t.WebRTCTransportCreate=6]="WebRTCTransportCreate",t[t.WebRTCTransportConnect=7]="WebRTCTransportConnect",t[t.WebRTCTransportClose=8]="WebRTCTransportClose",t[t.WebRTCSendTrack=9]="WebRTCSendTrack",t[t.WebRTCReceiveTrack=10]="WebRTCReceiveTrack",t[t.WebRTCPauseConsumer=11]="WebRTCPauseConsumer",t[t.WebRTCResumeConsumer=12]="WebRTCResumeConsumer",t[t.WebRTCCloseConsumer=13]="WebRTCCloseConsumer",t[t.WebRTCPauseProducer=14]="WebRTCPauseProducer",t[t.WebRTCResumeProducer=15]="WebRTCResumeProducer",t[t.WebRTCCloseProducer=16]="WebRTCCloseProducer",t[t.WebRTCMuteOtherProducer=17]="WebRTCMuteOtherProducer",t[t.WebRTCUnmuteOtherProducer=18]="WebRTCUnmuteOtherProducer",t[t.WebRTCConsumerSetLayers=19]="WebRTCConsumerSetLayers",t[t.WebRTCConsumeData=20]="WebRTCConsumeData",t[t.WebRTCProduceData=21]="WebRTCProduceData",t[t.ReliableMessage=22]="ReliableMessage",t[t.WebRTCCreateProducer=23]="WebRTCCreateProducer",t[t.Authorization=24]="Authorization",t[t.Kick=26]="Kick",t[t.Ban=27]="Ban",t[t.ConnectToWorld=28]="ConnectToWorld",t[t.WebRTCRequestCurrentProducers=29]="WebRTCRequestCurrentProducers",t[t.UpdateNetworkState=30]="UpdateNetworkState",t[t.InitializeRouter=31]="InitializeRouter",t[t.WebRTCRequestNearbyUsers=32]="WebRTCRequestNearbyUsers",t[t.ActionData=42]="ActionData",t[t.Synchronization=100]="Synchronization",t[t.ClientInput=101]="ClientInput",t[t.StateUpdate=102]="StateUpdate",t[t.Test=250]="Test",t[t.AvatarUpdated=254]="AvatarUpdated"})(H||(H={}));var oe={exports:{}},Le=function(e,r){return function(){for(var a=new Array(arguments.length),i=0;i<a.length;i++)a[i]=arguments[i];return e.apply(r,a)}},st=Le,D=Object.prototype.toString;function se(t){return D.call(t)==="[object Array]"}function ue(t){return typeof t=="undefined"}function ut(t){return t!==null&&!ue(t)&&t.constructor!==null&&!ue(t.constructor)&&typeof t.constructor.isBuffer=="function"&&t.constructor.isBuffer(t)}function lt(t){return D.call(t)==="[object ArrayBuffer]"}function ct(t){return typeof FormData!="undefined"&&t instanceof FormData}function dt(t){var e;return typeof ArrayBuffer!="undefined"&&ArrayBuffer.isView?e=ArrayBuffer.isView(t):e=t&&t.buffer&&t.buffer instanceof ArrayBuffer,e}function ft(t){return typeof t=="string"}function ht(t){return typeof t=="number"}function Oe(t){return t!==null&&typeof t=="object"}function V(t){if(D.call(t)!=="[object Object]")return!1;var e=Object.getPrototypeOf(t);return e===null||e===Object.prototype}function mt(t){return D.call(t)==="[object Date]"}function pt(t){return D.call(t)==="[object File]"}function vt(t){return D.call(t)==="[object Blob]"}function ke(t){return D.call(t)==="[object Function]"}function yt(t){return Oe(t)&&ke(t.pipe)}function gt(t){return typeof URLSearchParams!="undefined"&&t instanceof URLSearchParams}function wt(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function bt(){return typeof navigator!="undefined"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window!="undefined"&&typeof document!="undefined"}function le(t,e){if(!(t===null||typeof t=="undefined"))if(typeof t!="object"&&(t=[t]),se(t))for(var r=0,n=t.length;r<n;r++)e.call(null,t[r],r,t);else for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&e.call(null,t[a],a,t)}function ce(){var t={};function e(a,i){V(t[i])&&V(a)?t[i]=ce(t[i],a):V(a)?t[i]=ce({},a):se(a)?t[i]=a.slice():t[i]=a}for(var r=0,n=arguments.length;r<n;r++)le(arguments[r],e);return t}function Ct(t,e,r){return le(e,function(a,i){r&&typeof a=="function"?t[i]=st(a,r):t[i]=a}),t}function Rt(t){return t.charCodeAt(0)===65279&&(t=t.slice(1)),t}var C={isArray:se,isArrayBuffer:lt,isBuffer:ut,isFormData:ct,isArrayBufferView:dt,isString:ft,isNumber:ht,isObject:Oe,isPlainObject:V,isUndefined:ue,isDate:mt,isFile:pt,isBlob:vt,isFunction:ke,isStream:yt,isURLSearchParams:gt,isStandardBrowserEnv:bt,forEach:le,merge:ce,extend:Ct,trim:wt,stripBOM:Rt},T=C;function Ne(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var De=function(e,r,n){if(!r)return e;var a;if(n)a=n(r);else if(T.isURLSearchParams(r))a=r.toString();else{var i=[];T.forEach(r,function(c,h){c===null||typeof c=="undefined"||(T.isArray(c)?h=h+"[]":c=[c],T.forEach(c,function(f){T.isDate(f)?f=f.toISOString():T.isObject(f)&&(f=JSON.stringify(f)),i.push(Ne(h)+"="+Ne(f))}))}),a=i.join("&")}if(a){var o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+a}return e},Ut=C;function J(){this.handlers=[]}J.prototype.use=function(e,r,n){return this.handlers.push({fulfilled:e,rejected:r,synchronous:n?n.synchronous:!1,runWhen:n?n.runWhen:null}),this.handlers.length-1};J.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)};J.prototype.forEach=function(e){Ut.forEach(this.handlers,function(n){n!==null&&e(n)})};var Et=J,At=C,St=function(e,r){At.forEach(e,function(a,i){i!==r&&i.toUpperCase()===r.toUpperCase()&&(e[r]=a,delete e[i])})},xe=function(e,r,n,a,i){return e.config=r,n&&(e.code=n),e.request=a,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e},Pt=xe,$e=function(e,r,n,a,i){var o=new Error(e);return Pt(o,r,n,a,i)},It=$e,Lt=function(e,r,n){var a=n.config.validateStatus;!n.status||!a||a(n.status)?e(n):r(It("Request failed with status code "+n.status,n.config,null,n.request,n))},K=C,Ot=K.isStandardBrowserEnv()?function(){return{write:function(r,n,a,i,o,s){var c=[];c.push(r+"="+encodeURIComponent(n)),K.isNumber(a)&&c.push("expires="+new Date(a).toGMTString()),K.isString(i)&&c.push("path="+i),K.isString(o)&&c.push("domain="+o),s===!0&&c.push("secure"),document.cookie=c.join("; ")},read:function(r){var n=document.cookie.match(new RegExp("(^|;\\s*)("+r+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(r){this.write(r,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),kt=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)},Nt=function(e,r){return r?e.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):e},Dt=kt,xt=Nt,$t=function(e,r){return e&&!Dt(r)?xt(e,r):r},de=C,Tt=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],_t=function(e){var r={},n,a,i;return e&&de.forEach(e.split(`
`),function(s){if(i=s.indexOf(":"),n=de.trim(s.substr(0,i)).toLowerCase(),a=de.trim(s.substr(i+1)),n){if(r[n]&&Tt.indexOf(n)>=0)return;n==="set-cookie"?r[n]=(r[n]?r[n]:[]).concat([a]):r[n]=r[n]?r[n]+", "+a:a}}),r},Te=C,Wt=Te.isStandardBrowserEnv()?function(){var e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a"),n;function a(i){var o=i;return e&&(r.setAttribute("href",o),o=r.href),r.setAttribute("href",o),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:r.pathname.charAt(0)==="/"?r.pathname:"/"+r.pathname}}return n=a(window.location.href),function(o){var s=Te.isString(o)?a(o):o;return s.protocol===n.protocol&&s.host===n.host}}():function(){return function(){return!0}}();function fe(t){this.message=t}fe.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")};fe.prototype.__CANCEL__=!0;var X=fe,Y=C,Bt=Lt,jt=Ot,qt=De,zt=$t,Ft=_t,Ht=Wt,he=$e,Vt=G,Jt=X,_e=function(e){return new Promise(function(n,a){var i=e.data,o=e.headers,s=e.responseType,c;function h(){e.cancelToken&&e.cancelToken.unsubscribe(c),e.signal&&e.signal.removeEventListener("abort",c)}Y.isFormData(i)&&delete o["Content-Type"];var u=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.Authorization="Basic "+btoa(f+":"+m)}var p=zt(e.baseURL,e.url);u.open(e.method.toUpperCase(),qt(p,e.params,e.paramsSerializer),!0),u.timeout=e.timeout;function U(){if(!!u){var y="getAllResponseHeaders"in u?Ft(u.getAllResponseHeaders()):null,I=!s||s==="text"||s==="json"?u.responseText:u.response,A={data:I,status:u.status,statusText:u.statusText,headers:y,config:e,request:u};Bt(function(b){n(b),h()},function(b){a(b),h()},A),u=null}}if("onloadend"in u?u.onloadend=U:u.onreadystatechange=function(){!u||u.readyState!==4||u.status===0&&!(u.responseURL&&u.responseURL.indexOf("file:")===0)||setTimeout(U)},u.onabort=function(){!u||(a(he("Request aborted",e,"ECONNABORTED",u)),u=null)},u.onerror=function(){a(he("Network Error",e,null,u)),u=null},u.ontimeout=function(){var I="timeout of "+e.timeout+"ms exceeded",A=e.transitional||Vt.transitional;e.timeoutErrorMessage&&(I=e.timeoutErrorMessage),a(he(I,e,A.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",u)),u=null},Y.isStandardBrowserEnv()){var x=(e.withCredentials||Ht(p))&&e.xsrfCookieName?jt.read(e.xsrfCookieName):void 0;x&&(o[e.xsrfHeaderName]=x)}"setRequestHeader"in u&&Y.forEach(o,function(I,A){typeof i=="undefined"&&A.toLowerCase()==="content-type"?delete o[A]:u.setRequestHeader(A,I)}),Y.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),s&&s!=="json"&&(u.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&u.addEventListener("progress",e.onDownloadProgress),typeof e.onUploadProgress=="function"&&u.upload&&u.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(c=function(y){!u||(a(!y||y&&y.type?new Jt("canceled"):y),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(c),e.signal&&(e.signal.aborted?c():e.signal.addEventListener("abort",c))),i||(i=null),u.send(i)})},g=C,We=St,Kt=xe,Xt={"Content-Type":"application/x-www-form-urlencoded"};function Be(t,e){!g.isUndefined(t)&&g.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}function Yt(){var t;return(typeof XMLHttpRequest!="undefined"||typeof process!="undefined"&&Object.prototype.toString.call(process)==="[object process]")&&(t=_e),t}function Qt(t,e,r){if(g.isString(t))try{return(e||JSON.parse)(t),g.trim(t)}catch(n){if(n.name!=="SyntaxError")throw n}return(r||JSON.stringify)(t)}var Q={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:Yt(),transformRequest:[function(e,r){return We(r,"Accept"),We(r,"Content-Type"),g.isFormData(e)||g.isArrayBuffer(e)||g.isBuffer(e)||g.isStream(e)||g.isFile(e)||g.isBlob(e)?e:g.isArrayBufferView(e)?e.buffer:g.isURLSearchParams(e)?(Be(r,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):g.isObject(e)||r&&r["Content-Type"]==="application/json"?(Be(r,"application/json"),Qt(e)):e}],transformResponse:[function(e){var r=this.transitional||Q.transitional,n=r&&r.silentJSONParsing,a=r&&r.forcedJSONParsing,i=!n&&this.responseType==="json";if(i||a&&g.isString(e)&&e.length)try{return JSON.parse(e)}catch(o){if(i)throw o.name==="SyntaxError"?Kt(o,this,"E_JSON_PARSE"):o}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};g.forEach(["delete","get","head"],function(e){Q.headers[e]={}});g.forEach(["post","put","patch"],function(e){Q.headers[e]=g.merge(Xt)});var G=Q,Gt=C,Zt=G,Mt=function(e,r,n){var a=this||Zt;return Gt.forEach(n,function(o){e=o.call(a,e,r)}),e},je=function(e){return!!(e&&e.__CANCEL__)},qe=C,me=Mt,er=je,tr=G,rr=X;function pe(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new rr("canceled")}var nr=function(e){pe(e),e.headers=e.headers||{},e.data=me.call(e,e.data,e.headers,e.transformRequest),e.headers=qe.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),qe.forEach(["delete","get","head","post","put","patch","common"],function(a){delete e.headers[a]});var r=e.adapter||tr.adapter;return r(e).then(function(a){return pe(e),a.data=me.call(e,a.data,a.headers,e.transformResponse),a},function(a){return er(a)||(pe(e),a&&a.response&&(a.response.data=me.call(e,a.response.data,a.response.headers,e.transformResponse))),Promise.reject(a)})},R=C,ze=function(e,r){r=r||{};var n={};function a(u,f){return R.isPlainObject(u)&&R.isPlainObject(f)?R.merge(u,f):R.isPlainObject(f)?R.merge({},f):R.isArray(f)?f.slice():f}function i(u){if(R.isUndefined(r[u])){if(!R.isUndefined(e[u]))return a(void 0,e[u])}else return a(e[u],r[u])}function o(u){if(!R.isUndefined(r[u]))return a(void 0,r[u])}function s(u){if(R.isUndefined(r[u])){if(!R.isUndefined(e[u]))return a(void 0,e[u])}else return a(void 0,r[u])}function c(u){if(u in r)return a(e[u],r[u]);if(u in e)return a(void 0,e[u])}var h={url:o,method:o,data:o,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:c};return R.forEach(Object.keys(e).concat(Object.keys(r)),function(f){var m=h[f]||i,p=m(f);R.isUndefined(p)&&m!==c||(n[f]=p)}),n},Fe={version:"0.22.0"},ar=Fe.version,ve={};["object","boolean","number","function","string","symbol"].forEach(function(t,e){ve[t]=function(n){return typeof n===t||"a"+(e<1?"n ":" ")+t}});var He={};ve.transitional=function(e,r,n){function a(i,o){return"[Axios v"+ar+"] Transitional option '"+i+"'"+o+(n?". "+n:"")}return function(i,o,s){if(e===!1)throw new Error(a(o," has been removed"+(r?" in "+r:"")));return r&&!He[o]&&(He[o]=!0,console.warn(a(o," has been deprecated since v"+r+" and will be removed in the near future"))),e?e(i,o,s):!0}};function ir(t,e,r){if(typeof t!="object")throw new TypeError("options must be an object");for(var n=Object.keys(t),a=n.length;a-- >0;){var i=n[a],o=e[i];if(o){var s=t[i],c=s===void 0||o(s,i,t);if(c!==!0)throw new TypeError("option "+i+" must be "+c);continue}if(r!==!0)throw Error("Unknown option "+i)}}var or={assertOptions:ir,validators:ve},Ve=C,sr=De,Je=Et,Ke=nr,Z=ze,Xe=or,_=Xe.validators;function j(t){this.defaults=t,this.interceptors={request:new Je,response:new Je}}j.prototype.request=function(e){typeof e=="string"?(e=arguments[1]||{},e.url=arguments[0]):e=e||{},e=Z(this.defaults,e),e.method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var r=e.transitional;r!==void 0&&Xe.assertOptions(r,{silentJSONParsing:_.transitional(_.boolean),forcedJSONParsing:_.transitional(_.boolean),clarifyTimeoutError:_.transitional(_.boolean)},!1);var n=[],a=!0;this.interceptors.request.forEach(function(m){typeof m.runWhen=="function"&&m.runWhen(e)===!1||(a=a&&m.synchronous,n.unshift(m.fulfilled,m.rejected))});var i=[];this.interceptors.response.forEach(function(m){i.push(m.fulfilled,m.rejected)});var o;if(!a){var s=[Ke,void 0];for(Array.prototype.unshift.apply(s,n),s=s.concat(i),o=Promise.resolve(e);s.length;)o=o.then(s.shift(),s.shift());return o}for(var c=e;n.length;){var h=n.shift(),u=n.shift();try{c=h(c)}catch(f){u(f);break}}try{o=Ke(c)}catch(f){return Promise.reject(f)}for(;i.length;)o=o.then(i.shift(),i.shift());return o};j.prototype.getUri=function(e){return e=Z(this.defaults,e),sr(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")};Ve.forEach(["delete","get","head","options"],function(e){j.prototype[e]=function(r,n){return this.request(Z(n||{},{method:e,url:r,data:(n||{}).data}))}});Ve.forEach(["post","put","patch"],function(e){j.prototype[e]=function(r,n,a){return this.request(Z(a||{},{method:e,url:r,data:n}))}});var ur=j,lr=X;function W(t){if(typeof t!="function")throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(a){e=a});var r=this;this.promise.then(function(n){if(!!r._listeners){var a,i=r._listeners.length;for(a=0;a<i;a++)r._listeners[a](n);r._listeners=null}}),this.promise.then=function(n){var a,i=new Promise(function(o){r.subscribe(o),a=o}).then(n);return i.cancel=function(){r.unsubscribe(a)},i},t(function(a){r.reason||(r.reason=new lr(a),e(r.reason))})}W.prototype.throwIfRequested=function(){if(this.reason)throw this.reason};W.prototype.subscribe=function(e){if(this.reason){e(this.reason);return}this._listeners?this._listeners.push(e):this._listeners=[e]};W.prototype.unsubscribe=function(e){if(!!this._listeners){var r=this._listeners.indexOf(e);r!==-1&&this._listeners.splice(r,1)}};W.source=function(){var e,r=new W(function(a){e=a});return{token:r,cancel:e}};var cr=W,dr=function(e){return function(n){return e.apply(null,n)}},fr=function(e){return typeof e=="object"&&e.isAxiosError===!0},Ye=C,hr=Le,M=ur,mr=ze,pr=G;function Qe(t){var e=new M(t),r=hr(M.prototype.request,e);return Ye.extend(r,M.prototype,e),Ye.extend(r,e),r.create=function(a){return Qe(mr(t,a))},r}var P=Qe(pr);P.Axios=M;P.Cancel=X;P.CancelToken=cr;P.isCancel=je;P.VERSION=Fe.version;P.all=function(e){return Promise.all(e)};P.spread=dr;P.isAxiosError=fr;oe.exports=P;oe.exports.default=P;var q=oe.exports,z={};function vr(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var yr=function(t,e,r,n){e=e||"&",r=r||"=";var a={};if(typeof t!="string"||t.length===0)return a;var i=/\+/g;t=t.split(e);var o=1e3;n&&typeof n.maxKeys=="number"&&(o=n.maxKeys);var s=t.length;o>0&&s>o&&(s=o);for(var c=0;c<s;++c){var h=t[c].replace(i,"%20"),u=h.indexOf(r),f,m,p,U;u>=0?(f=h.substr(0,u),m=h.substr(u+1)):(f=h,m=""),p=decodeURIComponent(f),U=decodeURIComponent(m),vr(a,p)?Array.isArray(a[p])?a[p].push(U):a[p]=[a[p],U]:a[p]=U}return a},F=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}},gr=function(t,e,r,n){return e=e||"&",r=r||"=",t===null&&(t=void 0),typeof t=="object"?Object.keys(t).map(function(a){var i=encodeURIComponent(F(a))+r;return Array.isArray(t[a])?t[a].map(function(o){return i+encodeURIComponent(F(o))}).join(e):i+encodeURIComponent(F(t[a]))}).join(e):n?encodeURIComponent(F(n))+r+encodeURIComponent(F(t)):""};z.decode=z.parse=yr;z.encode=z.stringify=gr;var ee,wr=new Uint8Array(16);function br(){if(!ee&&(ee=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!ee))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return ee(wr)}var Cr=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function Rr(t){return typeof t=="string"&&Cr.test(t)}var w=[];for(var ye=0;ye<256;++ye)w.push((ye+256).toString(16).substr(1));function Ur(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,r=(w[t[e+0]]+w[t[e+1]]+w[t[e+2]]+w[t[e+3]]+"-"+w[t[e+4]]+w[t[e+5]]+"-"+w[t[e+6]]+w[t[e+7]]+"-"+w[t[e+8]]+w[t[e+9]]+"-"+w[t[e+10]]+w[t[e+11]]+w[t[e+12]]+w[t[e+13]]+w[t[e+14]]+w[t[e+15]]).toLowerCase();if(!Rr(r))throw TypeError("Stringified UUID is invalid");return r}var Ge,ge,we=0,be=0;function Ce(t,e,r){var n=e&&r||0,a=e||new Array(16);t=t||{};var i=t.node||Ge,o=t.clockseq!==void 0?t.clockseq:ge;if(i==null||o==null){var s=t.random||(t.rng||br)();i==null&&(i=Ge=[s[0]|1,s[1],s[2],s[3],s[4],s[5]]),o==null&&(o=ge=(s[6]<<8|s[7])&16383)}var c=t.msecs!==void 0?t.msecs:Date.now(),h=t.nsecs!==void 0?t.nsecs:be+1,u=c-we+(h-be)/1e4;if(u<0&&t.clockseq===void 0&&(o=o+1&16383),(u<0||c>we)&&t.nsecs===void 0&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");we=c,be=h,ge=o,c+=122192928e5;var f=((c&268435455)*1e4+h)%4294967296;a[n++]=f>>>24&255,a[n++]=f>>>16&255,a[n++]=f>>>8&255,a[n++]=f&255;var m=c/4294967296*1e4&268435455;a[n++]=m>>>8&255,a[n++]=m&255,a[n++]=m>>>24&15|16,a[n++]=m>>>16&255,a[n++]=o>>>8|128,a[n++]=o&255;for(var p=0;p<6;++p)a[n+p]=i[p];return e||Ur(a)}const k={userPatched:t=>({type:"USER_PATCHED",user:t}),loadedUserRelationship:t=>({type:"LOADED_RELATIONSHIP",relationship:t}),loadedUsers:t=>({type:"ADMIN_LOADED_USERS",users:t}),changedRelation:()=>({type:"CHANGED_RELATION"}),loadedLayerUsers:t=>({type:"LOADED_LAYER_USERS",users:t}),clearLayerUsers:()=>({type:"CLEAR_LAYER_USERS"}),addedLayerUser:t=>({type:"ADDED_LAYER_USER",user:t}),removedLayerUser:t=>({type:"REMOVED_LAYER_USER",user:t}),loadedChannelLayerUsers:t=>({type:"LOADED_CHANNEL_LAYER_USERS",users:t}),clearChannelLayerUsers:()=>({type:"CLEAR_CHANNEL_LAYER_USERS"}),addedChannelLayerUser:t=>({type:"ADDED_CHANNEL_LAYER_USER",user:t}),removedChannelLayerUser:t=>({type:"REMOVED_CHANNEL_LAYER_USER",user:t}),displayUserToast:(t,e)=>({type:"USER_TOAST",message:{user:t,args:e}})};async function Er(t,e){for(let[r,n]of $.defaultWorld.clients)if(n.userId===t){n.name=e;return}}const Ze=B("WebCamInputComponent");function Ar(t){if(!it)return!1;const e=t.location.search;return new URLSearchParams(e).get("bot")!==null}const Me=B("ProximityComponent"),Tr=B("AfkCheckComponent"),Re=B("UserNameComponent"),_r=B("NetworkObjectComponent");function Sr(t){for(let[e,r]of $.defaultWorld.clients)if(r.userId==t)return Pe().getUserAvatarEntity(r.userId)}const E={doLoginAuto:(t,e)=>async r=>{try{const n=rt();let a=e!==!0&&n&&n.authUser?n.authUser.accessToken:void 0;if(t!==!0&&a==null)return;e===!0&&await d.authentication.reset(),t===!0&&(a==null||a.length===0)&&(a=(await d.service("identity-provider").create({type:"guest",token:Ce()})).accessToken),await d.authentication.setAccessToken(a);let i;try{i=await d.reAuthenticate()}catch(o){if(o.className==="not-found"||o.className==="not-authenticated"&&o.message==="jwt expired")await r(l.didLogout()),await d.authentication.reset(),a=(await d.service("identity-provider").create({type:"guest",token:Ce()})).accessToken,await d.authentication.setAccessToken(a),i=await d.reAuthenticate();else throw o}if(i){i["identity-provider"]?.id==null&&(await r(l.didLogout()),await d.authentication.reset(),a=(await d.service("identity-provider").create({type:"guest",token:Ce()})).accessToken,await d.authentication.setAccessToken(a),i=await d.reAuthenticate());const o=ne(i);r(l.loginUserSuccess(o)),await E.loadUserData(r,o.identityProvider.userId)}else console.log("****************")}catch(n){console.error(n),r(l.didLogout())}},loadUserData:(t,e)=>d.service("user").get(e).then(r=>r.user_setting==null?d.service("user-settings").find({query:{userId:e}}).then(n=>n.total===0?d.service("user-settings").create({userId:e}).then(a=>(r.user_setting=a,Promise.resolve(r))):(r.user_setting=n.data[0],Promise.resolve(r))):Promise.resolve(r)).then(r=>{const n=re(r);t(l.loadedUserData(n))}).catch(r=>{console.log(r),v.dispatchAlertError(t,"Failed to load user data")}),loginUserByPassword:t=>e=>{if(!Se(t.email)){v.dispatchAlertError(e,"Please input valid email address");return}e(l.actionProcessing(!0)),d.authenticate({strategy:"local",email:t.email,password:t.password}).then(r=>{const n=ne(r);if(!n.identityProvider.isVerified){d.logout(),e(l.registerUserByEmailSuccess(n.identityProvider)),window.location.href="/auth/confirm";return}e(l.loginUserSuccess(n)),E.loadUserData(e,n.identityProvider.userId).then(()=>window.location.href="/")}).catch(r=>{console.log(r),e(l.loginUserError("Failed to login")),v.dispatchAlertError(e,r.message)}).finally(()=>e(l.actionProcessing(!1)))},loginUserByXRWallet:t=>(e,r)=>{try{e(l.actionProcessing(!0));const n=Pr(t);console.log(n);const a=nt(n),i=L().user.id.value;a.id=i,Lr(a),e(l.loadedUserData(a))}catch(n){console.log(n),e(l.loginUserError("Failed to login")),v.dispatchAlertError(e,n.message)}finally{e(l.actionProcessing(!1))}},loginUserByOAuth:t=>e=>{e(l.actionProcessing(!0));const r=L().authUser.accessToken.value,n=window.location.pathname,a=z.parse(window.location.search.slice(1)),i={path:n};a.instanceId&&a.instanceId.length>0&&(i.instanceId=a.instanceId);let o=`${S.publicRuntimeConfig.apiServer}/oauth/${t}?feathers_token=${r}&redirect=${JSON.stringify(i)}`;window.location.href=o},loginUserByJwt:(t,e,r)=>async n=>{try{n(l.actionProcessing(!0)),await d.authentication.setAccessToken(t);const a=await d.authenticate({strategy:"jwt",accessToken:t}),i=ne(a);n(l.loginUserSuccess(i)),await E.loadUserData(n,i.identityProvider.userId),n(l.actionProcessing(!1)),window.location.href=e}catch(a){console.log(a),n(l.loginUserError("Failed to login")),v.dispatchAlertError(n,a.message),window.location.href=`${r}?error=${a.message}`,n(l.actionProcessing(!1))}},logoutUser:()=>t=>{t(l.actionProcessing(!0)),d.logout().then(()=>t(l.didLogout())).catch(()=>t(l.didLogout())).finally(()=>{t(l.actionProcessing(!1)),E.doLoginAuto(!0,!0)(t)})},registerUserByEmail:t=>(console.log("1 registerUserByEmail"),e=>{console.log("2 dispatch",e),e(l.actionProcessing(!0)),d.service("identity-provider").create({token:t.email,password:t.password,type:"password"}).then(r=>{console.log("3 ",r),e(l.registerUserByEmailSuccess(r)),window.location.href="/auth/confirm"}).catch(r=>{console.log("error",r),e(l.registerUserByEmailError(r.message)),v.dispatchAlertError(e,r.message)}).finally(()=>{console.log("4 finally",e),e(l.actionProcessing(!1))})}),verifyEmail:t=>e=>{e(l.actionProcessing(!0)),d.service("authManagement").create({action:"verifySignupLong",value:t}).then(r=>{e(l.didVerifyEmail(!0)),E.loginUserByJwt(r.accessToken,"/","/")(e)}).catch(r=>{console.log(r),e(l.didVerifyEmail(!1)),v.dispatchAlertError(e,r.message)}).finally(()=>e(l.actionProcessing(!1)))},resendVerificationEmail:t=>e=>{e(l.actionProcessing(!0)),d.service("authManagement").create({action:"resendVerifySignup",value:{token:t,type:"password"}}).then(()=>e(l.didResendVerificationEmail(!0))).catch(()=>e(l.didResendVerificationEmail(!1))).finally(()=>e(l.actionProcessing(!1)))},forgotPassword:t=>e=>{e(l.actionProcessing(!0)),console.log("forgotPassword",t),d.service("authManagement").create({action:"sendResetPwd",value:{token:t,type:"password"}}).then(()=>e(l.didForgotPassword(!0))).catch(()=>e(l.didForgotPassword(!1))).finally(()=>e(l.actionProcessing(!1)))},resetPassword:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("authManagement").create({action:"resetPwdLong",value:{token:t,password:e}}).then(n=>{console.log(n),r(l.didResetPassword(!0)),window.location.href="/"}).catch(n=>{console.log(n),r(l.didResetPassword(!1)),window.location.href="/"}).finally(()=>r(l.actionProcessing(!1)))},createMagicLink:(t,e)=>r=>{r(l.actionProcessing(!0));let n="email",a="email";const i=(S.publicRuntimeConfig.auth&&S.publicRuntimeConfig.auth.enableEmailMagicLink)??!0,o=(S.publicRuntimeConfig.auth&&S.publicRuntimeConfig.auth.enableSmsMagicLink)??!1;if(e==="email")n="email",a="email";else if(e==="sms")n="sms",a="mobile";else{const s=t.replace(/-/g,"");if(at(s)){if(!o){v.dispatchAlertError(r,"Please input valid email address");return}n="sms",a="mobile",t="+1"+s}else if(Se(t)){if(!i){v.dispatchAlertError(r,"Please input valid phone number");return}n="email"}else{v.dispatchAlertError(r,"Please input valid email or phone number");return}}d.service("magic-link").create({type:n,[a]:t}).then(s=>{console.log(s),r(l.didCreateMagicLink(!0)),v.dispatchAlertSuccess(r,"Login Magic Link was sent. Please check your Email or SMS.")}).catch(s=>{console.log(s),r(l.didCreateMagicLink(!1)),v.dispatchAlertError(r,s.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionByPassword:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("identity-provider").create({token:t.email,password:t.password,type:"password",userId:e}).then(n=>{const a=n;return E.loadUserData(r,a.userId)}).catch(n=>{console.log(n),v.dispatchAlertError(r,n.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionByEmail:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("magic-link").create({email:t,type:"email",userId:e}).then(n=>{const a=n;if(a.userId!=null)return E.loadUserData(r,a.userId)}).catch(n=>{console.log(n),v.dispatchAlertError(r,n.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionBySms:(t,e)=>r=>{r(l.actionProcessing(!0));let n=t.replace(/-/g,"");n.length===10&&(n="1"+n),d.service("magic-link").create({mobile:n,type:"sms",userId:e}).then(a=>{const i=a;if(i.userId!=null)return E.loadUserData(r,i.userId)}).catch(a=>{console.log(a),v.dispatchAlertError(r,a.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionByOauth:(t,e)=>()=>{window.open(`${S.publicRuntimeConfig.apiServer}/auth/oauth/${t}?userId=${e}`,"_blank")},removeConnection:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("identity-provider").remove(t).then(()=>E.loadUserData(r,e)).catch(n=>{console.log(n),v.dispatchAlertError(r,n.message)}).finally(()=>r(l.actionProcessing(!1)))},refreshConnections:t=>{},updateUserSettings:(t,e)=>async r=>{const n=await d.service("user-settings").patch(t,e);r(l.updatedUserSettingsAction(n))},uploadAvatar:t=>async(e,r)=>{const n=L().authUser.accessToken.value,a=L().user,i=await q.post(`${S.publicRuntimeConfig.apiServer}/upload`,t,{headers:{"Content-Type":"multipart/form-data",Authorization:"Bearer "+n}});await d.service("user").patch(a.id.value,{name:a.name.value});const o=i.data;v.dispatchAlertSuccess(e,"Avatar updated"),e(l.avatarUpdated(o))},uploadAvatarModel:(t,e,r,n)=>async(a,i)=>{const o=L().authUser.accessToken.value,s=r||t.name.substring(0,t.name.lastIndexOf(".")),[c,h]=await Promise.all([d.service("upload-presigned").get("",{query:{type:"avatar",fileName:s+".glb",fileSize:t.size,isPublicAvatar:n}}),d.service("upload-presigned").get("",{query:{type:"user-thumbnail",fileName:s+".png",fileSize:e.size,mimeType:e.type,isPublicAvatar:n}})]),u=new FormData;if(Object.keys(c.fields).forEach(m=>u.append(m,c.fields[m])),u.append("acl","public-read"),u.append(c.local?"media":"file",t),c.local){let m="avatars";c.fields.Key&&(m=c.fields.Key,m=m.substring(0,m.lastIndexOf("/"))),u.append("uploadPath",m),u.append("id",`${s}.glb`),u.append("skipStaticResource","true")}return console.log("modelData",u),(c.local===!0?q.post(`${S.publicRuntimeConfig.apiServer}/media`,u,{headers:{"Content-Type":"multipart/form-data",Authorization:"Bearer "+o}}):q.post(c.url,u)).then(async m=>{const p=new FormData;if(Object.keys(h.fields).forEach(b=>p.append(b,h.fields[b])),p.append("acl","public-read"),p.append(h.local===!0?"media":"file",e),h.local){let b="avatars";h.fields.Key&&(b=h.fields.Key,b=b.substring(0,b.lastIndexOf("/"))),p.append("uploadPath",b),p.append("name",`${s}.png`),p.append("skipStaticResource","true")}const U=`https://${c.cacheDomain}/${c.fields.Key}`,x=`https://${h.cacheDomain}/${h.fields.Key}`,y=L().user,I=await d.service("static-resource").find({query:{name:s,staticResourceType:"avatar",userId:n?null:y.id.value}}),A=await d.service("static-resource").find({query:{name:s,staticResourceType:"user-thumbnail",userId:n?null:y.id.value}});await(h.local===!0?q.post(`${S.publicRuntimeConfig.apiServer}/media`,p,{headers:{"Content-Type":"multipart/form-data",Authorization:"Bearer "+o}}):q.post(h.url,p)).then(b=>{Promise.all([I.total>0?d.service("static-resource").patch(I.data[0].id,{url:U,key:c.fields.Key}):d.service("static-resource").create({name:s,staticResourceType:"avatar",url:U,key:c.fields.Key,userId:n?null:y.id.value}),A.total>0?d.service("static-resource").patch(A.data[0].id,{url:x,key:h.fields.Key}):d.service("static-resource").create({name:s,staticResourceType:"user-thumbnail",url:x,mimeType:"image/png",key:h.fields.Key,userId:n?null:y.id.value})]).then(Ee=>{n!==!0&&(a(l.userAvatarIdUpdated(b)),d.service("user").patch(y.id.value,{avatarId:s}).then(Or=>{v.dispatchAlertSuccess(a,"Avatar Uploaded Successfully."),N?.instance?.transport&&N.instance.transport.sendNetworkStatUpdateMessage({type:H.AvatarUpdated,userId:y.id.value,avatarId:s,avatarURL:U,thumbnailURL:x})}))}).catch(Ee=>{console.error("Error occurred while saving Avatar.",Ee),d.service("upload-presigned").remove("",{query:{keys:[c.fields.Key,h.fields.Key]}})})}).catch(b=>{console.error("Error occurred while uploading thumbnail.",b),d.service("upload-presigned").remove("",{query:{keys:[c.fields.Key]}})})}).catch(m=>{console.error("Error occurred while uploading model.",m)})},removeAvatar:t=>async(e,r)=>{await d.service("upload-presigned").remove("",{query:{keys:t}}).then(n=>{v.dispatchAlertSuccess(e,"Avatar Removed Successfully."),E.fetchAvatarList()(e)})},fetchAvatarList:()=>{const t=L().user;return async e=>{const r=await d.service("static-resource").find({query:{$select:["id","key","name","url","staticResourceType","userId"],staticResourceType:{$in:["avatar","user-thumbnail"]},$or:[{userId:t.id.value},{userId:null}],$limit:1e3}});e(l.updateAvatarList(r.data))}},updateUsername:(t,e)=>r=>{d.service("user").patch(t,{name:e}).then(n=>{v.dispatchAlertSuccess(r,"Username updated"),r(l.usernameUpdated(n))})},updateUserAvatarId:(t,e,r,n)=>a=>{d.service("user").patch(t,{avatarId:e}).then(i=>{a(l.userAvatarIdUpdated(i)),N?.instance?.transport&&N.instance.transport.sendNetworkStatUpdateMessage({type:H.AvatarUpdated,userId:t,avatarId:e,avatarURL:r,thumbnailURL:n})})},removeUser:t=>async e=>{await d.service("user").remove(t),await d.service("identity-provider").remove(null,{where:{userId:t}}),E.logoutUser()(e)}},Pr=t=>({user:{id:"did:web:example.com",displayName:"alice",icon:"https://material-ui.com/static/images/avatar/1.jpg"}}),Ir=t=>d.service("static-resource").find({query:{name:t.avatarId,staticResourceType:{$in:["user-thumbnail","avatar"]},$or:[{userId:null},{userId:t.id}],$sort:{userId:-1},$limit:2}}),te=async t=>{if(t.instanceId==null&&t.channelInstanceId==null)return Promise.resolve(!0);const e=Pe();return new Promise(async r=>{const n=e.clients.get(t.id);if(!n){setTimeout(async()=>{await te(t),r(!0)},200);return}if(n.avatarDetail.avatarId===t.avatarId){r(!0);return}const a=await Ir(t);if(a?.data&&a.data.length===2){const i=a?.data[0].staticResourceType==="avatar"?a?.data[0].url:a?.data[1].url,o=a?.data[0].staticResourceType==="user-thumbnail"?a?.data[0].url:a?.data[1].url;n.avatarDetail={avatarURL:i,thumbnailURL:o,avatarId:t.avatarId};const c=$.defaultWorld.getUserAvatarEntity(t.id);Ie(c,t.avatarId,i)}else await te(t);r(!0)})},Lr=async t=>((!t||!t.id)&&Promise.resolve(!0),new Promise(async e=>{const r=$.defaultWorld.clients.get(t.id);if(!r){setTimeout(async()=>{await te(t),e(!0)},200);return}const n=t.avatarUrl,a=t.avatarUrl;r.avatarDetail={avatarURL:n,thumbnailURL:a,avatarId:t.avatarId};const o=$.defaultWorld.getUserAvatarEntity(t.id);Ie(o,t.avatarId,n),e(!0)}));S.publicRuntimeConfig.offlineMode||(d.service("user").on("patched",async t=>{const e=Ae.store,r=L().user,n=re(t.userRelationship);console.log("User patched",n),await te(n),Er(n.id,n.name);const a=Sr(n.id);if(console.log("adding username component to user: "+n.name+" eid: "+a),a!==void 0&&(ae(a,Re)?ot(a,Re).username=n.name:ie(a,Re,{username:n.name})),r.id.value===n.id){if(e.dispatch(k.clearLayerUsers()),r.channelInstanceId.value!==n.channelInstanceId&&e.dispatch(k.clearChannelLayerUsers()),e.dispatch(l.userUpdated(n)),n.partyId,n.instanceId!==r.instanceId.value){const o=new URL(window.location.href);let s=o.searchParams;s.set("instanceId",n.instanceId),o.search=s.toString(),history.pushState&&window.history.replaceState({},"",o.toString())}const i=$.defaultWorld;typeof i.localClientEntity!="undefined"&&(!ae(i.localClientEntity,Me,i)&&Ar(window)&&ie(i.localClientEntity,Me,{usersInRange:[],usersInIntimateRange:[],usersInHarassmentRange:[],usersLookingTowards:[]},i),ae(i.localClientEntity,Ze,i)||ie(i.localClientEntity,Ze,{emotions:[]},i),console.log("added web cam input component to local client"))}else n.channelInstanceId!=null&&n.channelInstanceId===r.channelInstanceId.value&&e.dispatch(k.addedChannelLayerUser(n)),n.instanceId!=null&&n.instanceId===r.instanceId.value&&(e.dispatch(k.addedLayerUser(n)),e.dispatch(k.displayUserToast(n,{userAdded:!0}))),n.instanceId!==r.instanceId.value&&(e.dispatch(k.removedLayerUser(n)),e.dispatch(k.displayUserToast(n,{userRemoved:!0}))),n.channelInstanceId!==r.channelInstanceId.value&&e.dispatch(k.removedChannelLayerUser(n))}),d.service("location-ban").on("created",async t=>{const e=Ae.store;e.getState();const r=L().user,n=et().party.value,a=n&&n.partyUsers?n.partyUsers.find(s=>s.userId===r.id.value):{},i=tt().currentLocation.location,o=t.locationBan;if(r.id.value===o.userId&&i.id.value===o.locationId){a.id!=null&&await d.service("party-user").remove(a.id);const s=re(await d.service("user").get(r.id.value));e.dispatch(l.userUpdated(s))}}));export{E as A,H as M,N,_r as a,Tr as b};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aFNlcnZpY2UuNmRiMjU1MDguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VuZ2luZS9zcmMvY29tbW9uL2NsYXNzZXMvUmluZ0J1ZmZlci50cyIsIi4uLy4uLy4uL2VuZ2luZS9zcmMvbmV0d29ya2luZy9jbGFzc2VzL05ldHdvcmsudHMiLCIuLi8uLi8uLi9lbmdpbmUvc3JjL25ldHdvcmtpbmcvZW51bXMvTWVzc2FnZVR5cGVzLnRzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCIuLi8uLi8uLi9jbGllbnQtY29yZS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy9kZWNvZGUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZW5jb2RlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JlZ2V4LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MS5qcyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL3NyYy91c2VyL3N0b3JlL1VzZXJBY3Rpb24udHMiLCIuLi8uLi8uLi9lbmdpbmUvc3JjL25ldHdvcmtpbmcvdXRpbHMvY2hhdFN5c3RlbS50cyIsIi4uLy4uLy4uL2VuZ2luZS9zcmMvaW5wdXQvY29tcG9uZW50cy9XZWJDYW1JbnB1dENvbXBvbmVudC50cyIsIi4uLy4uLy4uL2VuZ2luZS9zcmMvY29tbW9uL2Z1bmN0aW9ucy9pc0JvdC50cyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL3NyYy9wcm94aW1pdHkvY29tcG9uZW50cy9Qcm94aW1pdHlDb21wb25lbnQudHMiLCIuLi8uLi8uLi9lbmdpbmUvc3JjL25hdmlnYXRpb24vY29tcG9uZW50L0Fma0NoZWNrQ29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZW5naW5lL3NyYy9zY2VuZS9jb21wb25lbnRzL1VzZXJOYW1lQ29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZW5naW5lL3NyYy9uZXR3b3JraW5nL2NvbXBvbmVudHMvTmV0d29ya09iamVjdENvbXBvbmVudC50cyIsIi4uLy4uLy4uL2VuZ2luZS9zcmMvbmV0d29ya2luZy91dGlscy9nZXRVc2VyLnRzIiwiLi4vLi4vLi4vY2xpZW50LWNvcmUvc3JjL3VzZXIvcmVkdWNlcnMvYXV0aC9BdXRoU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJpbmcgYnVmZmVyIGhvbGRzIGRhdGEgaW4gY2lyY3VsYXIgZm9ybS5cXFxuICogRGF0YSB3aWxsIGJlIGluc2VydGVkIGluIGxpbmVhciBmYXNoaW9uIGFuZCB3aGVuIHRoZSBidWZmZXIgcmVhY2hlcyBpdHMgbWF4aW11bSBzaXplIHRoZW5cbiAqIG5ld2x5IGVudGVyZWQgZGF0YSB3aWxsIGJlIG92ZXJ3cml0ZSBmaXJzdCBlbGVtZW50KHMpLlxuICpcbiAqIGBgYFxuICogLy8gQmVsb3cgd2lsbCBjcmVhdGUgcmluZyBidWZmZXIgd2l0aCA0IGVsZW1lbnRzIGFuZCBzZXRzIHNpemUgb2YgdGhlIGJ1ZmZlciB0byA0LlxuICogY29uc3QgYnVmZmVyID0gUmluZ0J1ZmZlci5mcm9tQXJyYXkoWzEsIDIsIDMsIDRdKTtcbiAqXG4gKiAvLyBBZGRpbmcgbmV3IGVsZW1lbnRzIHdpbGwgb3ZlcndlaWdodCBlbGVtZW50KHMpIGluIEZJRk8gbWFubmVyLlxuICogYnVmZmVyLmFkZCg1LCA2KTsgLy8gbm93IGJ1ZmZlciBjb250YWlucyBbNSwgNiwgMywgNF1cbiAqIGBgYFxuICpcbiAqIEB0eXBlcGFyYW0gVCBUeXBlIG9mIHRoZSBkYXRhLlxuICovXG5leHBvcnQgY2xhc3MgUmluZ0J1ZmZlcjxUPiB7XG4gIC8qKlxuICAgKiBDcmVhdGUgcmluZyBidWZmZXIgZnJvbSBhcnJheS5cbiAgICogQHBhcmFtIGRhdGEgQXJyYXkgb2YgZWxlbWVudChzKS5cbiAgICogQHBhcmFtIHNpemUgU2l6ZSBvZiByaW5nIGFycmF5LlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQXJyYXk8VD4oZGF0YTogVFtdLCBzaXplID0gMCk6IFJpbmdCdWZmZXI8VD4ge1xuICAgIGNvbnN0IGFjdGlvbkJ1ZmZlciA9IG5ldyBSaW5nQnVmZmVyPFQ+KHNpemUpXG4gICAgYWN0aW9uQnVmZmVyLmZyb21BcnJheShkYXRhLCBzaXplID09PSAwKVxuICAgIHJldHVybiBhY3Rpb25CdWZmZXJcbiAgfVxuXG4gIC8qKiBCdWZmZXIgdG8gaG9sZCBlbGVtZW50KHMpLiAqL1xuICBwcml2YXRlIGJ1ZmZlcjogVFtdID0gW11cbiAgLyoqIE1heGltdW0gbnVtYmVyIG9mIGVsZW1lbnRzIHRoaXMgYnVmZmVyIGNhbiBjb250YWluLiAqL1xuICBwcml2YXRlIHNpemU6IG51bWJlclxuICAvKiogQ3VycmVudCBwb3NpdGlvbiBvbiB0aGUgcmluZyBidWZmZXIuICovXG4gIHByaXZhdGUgcG9zID0gMFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgbmV3IHJpbmcgYnVmZmVyIGFuZCBjb3B5IGVsZW1lbnRzIGZyb20gdGhpcyByaW5nIGJ1ZmZlci5cbiAgICpcbiAgICogQHJldHVybnMgTmV3bHkgY3JlYXRlZCByaW5nIGJ1ZmZlci5cbiAgICovXG4gIHB1YmxpYyBjb3B5KCk6IFJpbmdCdWZmZXI8VD4ge1xuICAgIGNvbnN0IG5ld0F4aXNCdWZmZXIgPSBuZXcgUmluZ0J1ZmZlcjxUPih0aGlzLmdldEJ1ZmZlckxlbmd0aCgpKVxuICAgIG5ld0F4aXNCdWZmZXIuYnVmZmVyID0gdGhpcy5idWZmZXJcbiAgICByZXR1cm4gbmV3QXhpc0J1ZmZlclxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBuZXcgcmluZyBidWZmZXIgYW5kIGNvcHkgZWxlbWVudHMgZnJvbSB0aGlzIHJpbmcgYnVmZmVyLlxuICAgKlxuICAgKiBAcmV0dXJucyBOZXdseSBjcmVhdGVkIHJpbmcgYnVmZmVyLlxuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IFJpbmdCdWZmZXI8VD4ge1xuICAgIGNvbnN0IG5ld0F4aXNCdWZmZXIgPSBuZXcgUmluZ0J1ZmZlcjxUPih0aGlzLmdldEJ1ZmZlckxlbmd0aCgpKVxuICAgIG5ld0F4aXNCdWZmZXIuYnVmZmVyID0gdGhpcy5idWZmZXJcbiAgICByZXR1cm4gbmV3QXhpc0J1ZmZlclxuICB9XG5cbiAgLyoqIENvbnN0cnVjdHMgcmluZyBidWZmZXIgb2YgZ2l2ZW4gc2l6ZSAqL1xuICBjb25zdHJ1Y3RvcihzaXplOiBudW1iZXIpIHtcbiAgICBpZiAoc2l6ZSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgc2l6ZSBkb2VzIG5vdCBhbGxvdyBuZWdhdGl2ZSB2YWx1ZXMuJylcbiAgICB9XG4gICAgdGhpcy5zaXplID0gc2l6ZVxuICB9XG5cbiAgLyoqIEByZXR1cm5zIHNpemUgb2YgdGhlIHJpbmcgYnVmZmVyLiAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNpemVcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSByaW5nIGJ1ZmZlci4gKi9cbiAgcHVibGljIGdldFBvcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnBvc1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIGNvdW50IG9mIGVsZW1lbnRzIGluIHRoZSByaW5nIGJ1ZmZlci4gKi9cbiAgcHVibGljIGdldEJ1ZmZlckxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZWxlbWVudChzKSBpbnRvIHRoZSByaW5nIGJ1ZmZlci5cXFxuICAgKiBJZiBvdmVyZmxvdyBoYXBwZW5zIHRoZW4gZWxlbWVudChzKSB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IEZJRk8gbWFubmVyLlxuICAgKiBAcGFyYW0gaXRlbXMgbGlzdCBvZiBlbGVtZW50KHMpIHRvIGJlIGluc2VydGVkLlxuICAgKi9cbiAgcHVibGljIGFkZCguLi5pdGVtczogVFtdKTogdm9pZCB7XG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5idWZmZXJbdGhpcy5wb3NdID0gaXRlbVxuICAgICAgdGhpcy5wb3MgPSAodGhpcy5wb3MgKyAxKSAlIHRoaXMuc2l6ZVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0IGVsZW1lbnQgYXQgZ2l2ZW4gaW5kZXggZnJvbSByaW5nIGJ1ZmZlci5cbiAgICogQHBhcmFtIGluZGV4IEluZGV4IG9mIHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmV0cmlldmVkLlxuICAgKiBAcmV0dXJucyBFbGVtZW50IGluIHRoZSBnaXZlbiBpbmRleCBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kLlxuICAgKi9cbiAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgaW5kZXggKz0gdGhpcy5idWZmZXIubGVuZ3RoXG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPCB0aGlzLnNpemUpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcltpbmRleF1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5idWZmZXJbKHRoaXMucG9zICsgaW5kZXgpICUgdGhpcy5zaXplXVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmaXJzdCBlbGVtZW50IGZyb20gdGhlIHJpbmcgYnVmZmVyLlxuICAgKiBAcmV0dXJucyBGaXJzdCBlbGVtZW50IG9mIHJpbmcgYnVmZmVyLlxuICAgKi9cbiAgcHVibGljIGdldEZpcnN0KCk6IFQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmdldCgwKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBsYXN0IGVsZW1lbnQgZnJvbSB0aGUgcmluZyBidWZmZXIuXG4gICAqIEByZXR1cm5zIExhc3QgZWxlbWVudCBvZiByaW5nIGJ1ZmZlci5cbiAgICovXG4gIHB1YmxpYyBnZXRMYXN0KCk6IFQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmdldCgtMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZWxlbWVudChzKSBmcm9tIHRoZSByaW5nIGJ1ZmZlci5cbiAgICogQHBhcmFtIGluZGV4IEluZGV4IEZyb20gd2hpY2ggZWxlbWVudChzKSB3aWxsIGJlIHJlbW92ZWQuXG4gICAqIEBwYXJhbSBjb3VudCBOdW1iZXIgb2YgZWxlbWVudChzKSB0byBiZSByZW1vdmVkLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiByZW1vdmVkIGVsZW1lbnQocykuXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlKGluZGV4OiBudW1iZXIsIGNvdW50ID0gMSk6IFRbXSB7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgaW5kZXggKz0gdGhpcy5idWZmZXIubGVuZ3RoXG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgY29uc3QgYXJyID0gdGhpcy50b0FycmF5KClcbiAgICBjb25zdCByZW1vdmVkSXRlbXMgPSBhcnIuc3BsaWNlKGluZGV4LCBjb3VudClcbiAgICB0aGlzLmZyb21BcnJheShhcnIpXG4gICAgcmV0dXJuIHJlbW92ZWRJdGVtc1xuICB9XG5cbiAgLyoqIFJlbW92ZSBhbmQgcmV0dXJuIGVsZW1lbnQgZnJvbSBjdXJyZW50IHBvc2l0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyBSZW1vdmVkIGVsZW1lbnQgZnJvbSBjdXJyZW50IHBvc2l0aW9uLlxuICAgKi9cbiAgcHVibGljIHBvcCgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmUoMClbMF1cbiAgfVxuXG4gIC8qKiBSZW1vdmUgYW5kIHJldHVybiBsYXN0IGVsZW1lbnQgZnJvbSByaW5nIGJ1ZmZlci5cbiAgICpcbiAgICogQHJldHVybnMgbGFzdCBlbGVtZW50IGZyb20gcmluZyBidWZmZXIuXG4gICAqL1xuICBwdWJsaWMgcG9wTGFzdCgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmUoLTEpWzBdXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGFycmF5IGZyb20gcmluZyBidWZmZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIGdlbmVyYXRlZCBhcnJheSBjb250YWluaW5nIHJpbmcgYnVmZmVyIGVsZW1lbnRzLlxuICAgKi9cbiAgcHVibGljIHRvQXJyYXkoKTogVFtdIHtcbiAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5wb3MpLmNvbmNhdCh0aGlzLmJ1ZmZlci5zbGljZSgwLCB0aGlzLnBvcykpXG4gIH1cblxuICAvKipcbiAgICogRmlsbCB1cCB0aGUgcmluZyBidWZmZXIgd2l0aCBhcnJheSBlbGVtZW50cy5cXFxuICAgKiBJZiBhcnJheSBjb250YWlucyBtb3JlIGVsZW1lbnQgdGhhbiBzaXplIG9mIHJpbmcgYnVmZmVyIHRoZW4gZXhjZXNzIGVsZW1lbnRzIHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIGFycmF5LlxuICAgKiBUbyBpbmNsdWRlIGV2ZXJ5IGVsZW1lbnRzIHNldCAqKmBgYHJlc2l6ZWBgYCoqIHRvICoqYGBgdHJ1ZWBgYCoqLlxuICAgKiBAcGFyYW0gZGF0YSBBcnJheSBjb250YWluaW5nIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gcmVzaXplIFdoZXRoZXIgcmVzaXplIGN1cnJlbnQgcmluZyBidWZmZXIuXG4gICAqL1xuICBwdWJsaWMgZnJvbUFycmF5KGRhdGE6IFRbXSwgcmVzaXplID0gZmFsc2UpOiB2b2lkIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lucHV0IHZhbHVlIGlzIG5vdCBhbiBhcnJheS4nKVxuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHRoaXMucmVzaXplKGRhdGEubGVuZ3RoKVxuXG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkgcmV0dXJuXG5cbiAgICB0aGlzLmJ1ZmZlciA9IGRhdGEuc2xpY2UoLXRoaXMuc2l6ZSlcbiAgICB0aGlzLnBvcyA9IHRoaXMuYnVmZmVyLmxlbmd0aCAlIHRoaXMuc2l6ZVxuICB9XG5cbiAgLyoqIENsZWFyIHRoZSByaW5nIGJ1ZmZlci4gKi9cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuYnVmZmVyID0gW11cbiAgICB0aGlzLnBvcyA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemUgcmluZyBidWZmZXIgd2l0aCBnaXZlbiBzaXplLlxuICAgKiBAcGFyYW0gbmV3U2l6ZSBuZXcgc2l6ZSBvZiB0aGUgYnVmZmVyLlxuICAgKi9cbiAgcHVibGljIHJlc2l6ZShuZXdTaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAobmV3U2l6ZSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgc2l6ZSBkb2VzIG5vdCBhbGxvdyBuZWdhdGl2ZSB2YWx1ZXMuJylcbiAgICB9XG5cbiAgICBpZiAobmV3U2l6ZSA9PT0gMCkge1xuICAgICAgdGhpcy5jbGVhcigpXG4gICAgfSBlbHNlIGlmIChuZXdTaXplICE9PSB0aGlzLnNpemUpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRCdWZmZXIgPSB0aGlzLnRvQXJyYXkoKVxuICAgICAgdGhpcy5mcm9tQXJyYXkoY3VycmVudEJ1ZmZlci5zbGljZSgtbmV3U2l6ZSkpXG4gICAgICB0aGlzLnBvcyA9IHRoaXMuYnVmZmVyLmxlbmd0aCAlIG5ld1NpemVcbiAgICB9XG5cbiAgICB0aGlzLnNpemUgPSBuZXdTaXplXG4gIH1cblxuICAvKiogQHJldHVybnMgV2hldGhlciB0aGUgYnVmZmVyIGlzIGZ1bGwgb3Igbm90LiAqL1xuICBwdWJsaWMgZnVsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5idWZmZXIubGVuZ3RoID09PSB0aGlzLnNpemVcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBidWZmZXIgaXMgZW1wdHkgb3Igbm90LiAqL1xuICBwdWJsaWMgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMFxuICB9XG59XG4iLCJpbXBvcnQgeyBTY2hlbWEgfSBmcm9tICcuLi8uLi9hc3NldHMvc3VwZXJidWZmZXInXG5pbXBvcnQgeyBSaW5nQnVmZmVyIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NsYXNzZXMvUmluZ0J1ZmZlcidcbmltcG9ydCB7IE5ldHdvcmtTY2hlbWEgfSBmcm9tICcuLi9pbnRlcmZhY2VzL05ldHdvcmtTY2hlbWEnXG5pbXBvcnQgeyBOZXR3b3JrVHJhbnNwb3J0IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9OZXR3b3JrVHJhbnNwb3J0J1xuaW1wb3J0IHsgTmV0d29ya0lkIH0gZnJvbSAnQHhyZW5naW5lL2NvbW1vbi9zcmMvaW50ZXJmYWNlcy9OZXR3b3JrSWQnXG5cbi8qKiBDb21wb25lbnQgQ2xhc3MgZm9yIE5ldHdvcmsuICovXG5leHBvcnQgY2xhc3MgTmV0d29yayB7XG4gIC8qKiBTdGF0aWMgaW5zdGFuY2UgdG8gYWNjZXNzIGV2ZXJ5d2hlcmUuICovXG4gIHN0YXRpYyBpbnN0YW5jZTogTmV0d29yayA9IG5ldyBOZXR3b3JrKClcblxuICAvKiogSW5kaWNhdGlvbiBvZiB3aGV0aGVyIHRoZSBuZXR3b3JrIGlzIGluaXRpYWxpemVkIG9yIG5vdC4gKi9cbiAgaXNJbml0aWFsaXplZDogYm9vbGVhblxuICAvKiogV2hldGhlciB0byBhcHBseSBjb21wcmVzc2lvbiBvbiBwYWNrZXQgb3Igbm90LiAqL1xuICBwYWNrZXRDb21wcmVzc2lvbiA9IHRydWVcbiAgLyoqIE9iamVjdCBob2xkaW5nIHRyYW5zcG9ydCBkZXRhaWxzIG92ZXIgbmV0d29yay4gKi9cbiAgdHJhbnNwb3J0OiBOZXR3b3JrVHJhbnNwb3J0XG4gIC8qKiBOZXR3b3JrIHRyYW5zcG9ydHMuICovXG4gIHRyYW5zcG9ydHMgPSBbXSBhcyBhbnlbXVxuICAvKiogU2NoZW1hIG9mIHRoZSBjb21wb25lbnQuICovXG4gIHNjaGVtYTogTmV0d29ya1NjaGVtYVxuICAvKiogTGlzdCBvZiBkYXRhIHByb2R1Y2VyIG5vZGVzLiAqL1xuICBkYXRhUHJvZHVjZXJzID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKVxuICAvKiogTGlzdCBvZiBkYXRhIGNvbnN1bWVyIG5vZGVzLiAqL1xuICBkYXRhQ29uc3VtZXJzID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKVxuICAvKiogU29ja2V0IGlkIG9mIHRoZSBuZXR3b3JrIGluc3RhbmNlIGNvbm5lY3Rpb24uICovXG4gIGluc3RhbmNlU29ja2V0SWQ6IHN0cmluZ1xuICAvKiogU29ja2V0IGlkIG9mIHRoZSBuZXR3b3JrIGNoYW5uZWwgY29ubmVjdGlvbi4gKi9cbiAgY2hhbm5lbFNvY2tldElkOiBzdHJpbmdcbiAgLyoqIEFjY2VzcyB0b2NrZW4gb2YgdGhlIFVzZXIuICovXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmdcblxuICAvKiogU2NoZW1hIG9mIHRoZSBuZXR3b3JrLiAqL1xuICBzdGF0aWMgX3NjaGVtYXM6IE1hcDxzdHJpbmcsIFNjaGVtYT4gPSBuZXcgTWFwKClcblxuICAvKiogQnVmZmVyIGhvbGRpbmcgYWxsIGluY29taW5nIE1lc3NhZ2VzLiAqL1xuICBpbmNvbWluZ01lc3NhZ2VRdWV1ZVVucmVsaWFibGVJRHM6IFJpbmdCdWZmZXI8c3RyaW5nPiA9IG5ldyBSaW5nQnVmZmVyPHN0cmluZz4oMTAwKVxuXG4gIC8qKiBCdWZmZXIgaG9sZGluZyBhbGwgaW5jb21pbmcgTWVzc2FnZXMuICovXG4gIGluY29taW5nTWVzc2FnZVF1ZXVlVW5yZWxpYWJsZTogUmluZ0J1ZmZlcjxhbnk+ID0gbmV3IFJpbmdCdWZmZXI8YW55PigxMDApXG5cbiAgLyoqIEJ1ZmZlciBob2xkaW5nIGFsbCBpbmNvbWluZyBNZXNzYWdlcy4gKi9cbiAgaW5jb21pbmdNZXNzYWdlUXVldWVSZWxpYWJsZTogUmluZ0J1ZmZlcjxhbnk+ID0gbmV3IFJpbmdCdWZmZXI8YW55PigxMDApXG5cbiAgLyoqIEJ1ZmZlciBob2xkaW5nIE1lZGlhc291cCBvcGVyYXRpb25zICovXG4gIG1lZGlhc291cE9wZXJhdGlvblF1ZXVlOiBSaW5nQnVmZmVyPGFueT4gPSBuZXcgUmluZ0J1ZmZlcjxhbnk+KDEwMDApXG5cbiAgLyoqIElEIG9mIGxhc3QgbmV0d29yayBjcmVhdGVkLiAqL1xuICBwcml2YXRlIHN0YXRpYyBhdmFpbGFibGVOZXR3b3JrSWQgPSAwIGFzIE5ldHdvcmtJZFxuXG4gIC8qKiBHZXQgbmV4dCBuZXR3b3JrIGlkLiAqL1xuICBzdGF0aWMgZ2V0TmV0d29ya0lkKCk6IE5ldHdvcmtJZCB7XG4gICAgcmV0dXJuICsrdGhpcy5hdmFpbGFibGVOZXR3b3JrSWQgYXMgTmV0d29ya0lkXG4gIH1cblxuICAvKiogRGlzcG9zZXMgdGhlIG5ldHdvcmsuICovXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgLy8gVE9ETzogbmVlZHMgdGVzdHNcbiAgICBpZiAodGhpcy50cmFuc3BvcnQgJiYgdHlwZW9mIHRoaXMudHJhbnNwb3J0LmNsb3NlID09PSAnZnVuY3Rpb24nKSB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpXG4gICAgdGhpcy50cmFuc3BvcnQgPSBudWxsIVxuICAgIE5ldHdvcmsuaW5zdGFuY2UgPSBudWxsIVxuICB9XG59XG4iLCIvKiogTmV0d29yayBNZXNzYWdlIFR5cGVzLiAqL1xuZXhwb3J0IGVudW0gTWVzc2FnZVR5cGVzIHtcbiAgSGVhcnRiZWF0ID0gMCxcbiAgQ2xpZW50Q29ubmVjdGVkID0gMSxcbiAgQ2xpZW50RGlzY29ubmVjdGVkID0gMixcbiAgSW5pdGlhbGl6YXRpb24gPSAzLFxuICBKb2luV29ybGQgPSA0LFxuICBMZWF2ZVdvcmxkID0gNSxcbiAgV2ViUlRDVHJhbnNwb3J0Q3JlYXRlID0gNixcbiAgV2ViUlRDVHJhbnNwb3J0Q29ubmVjdCA9IDcsXG4gIFdlYlJUQ1RyYW5zcG9ydENsb3NlID0gOCxcbiAgV2ViUlRDU2VuZFRyYWNrID0gOSxcbiAgV2ViUlRDUmVjZWl2ZVRyYWNrID0gMTAsXG4gIFdlYlJUQ1BhdXNlQ29uc3VtZXIgPSAxMSxcbiAgV2ViUlRDUmVzdW1lQ29uc3VtZXIgPSAxMixcbiAgV2ViUlRDQ2xvc2VDb25zdW1lciA9IDEzLFxuICBXZWJSVENQYXVzZVByb2R1Y2VyID0gMTQsXG4gIFdlYlJUQ1Jlc3VtZVByb2R1Y2VyID0gMTUsXG4gIFdlYlJUQ0Nsb3NlUHJvZHVjZXIgPSAxNixcbiAgV2ViUlRDTXV0ZU90aGVyUHJvZHVjZXIgPSAxNyxcbiAgV2ViUlRDVW5tdXRlT3RoZXJQcm9kdWNlciA9IDE4LFxuICBXZWJSVENDb25zdW1lclNldExheWVycyA9IDE5LFxuICBXZWJSVENDb25zdW1lRGF0YSA9IDIwLFxuICBXZWJSVENQcm9kdWNlRGF0YSA9IDIxLFxuICBSZWxpYWJsZU1lc3NhZ2UgPSAyMixcbiAgV2ViUlRDQ3JlYXRlUHJvZHVjZXIgPSAyMyxcbiAgQXV0aG9yaXphdGlvbiA9IDI0LFxuICBLaWNrID0gMjYsXG4gIEJhbiA9IDI3LFxuICBDb25uZWN0VG9Xb3JsZCA9IDI4LFxuICBXZWJSVENSZXF1ZXN0Q3VycmVudFByb2R1Y2VycyA9IDI5LFxuICBVcGRhdGVOZXR3b3JrU3RhdGUgPSAzMCxcbiAgSW5pdGlhbGl6ZVJvdXRlciA9IDMxLFxuICBXZWJSVENSZXF1ZXN0TmVhcmJ5VXNlcnMgPSAzMixcbiAgQWN0aW9uRGF0YSA9IDQyLFxuICBTeW5jaHJvbml6YXRpb24gPSAxMDAsXG4gIENsaWVudElucHV0ID0gMTAxLFxuICBTdGF0ZVVwZGF0ZSA9IDEwMixcbiAgVGVzdCA9IDI1MCxcbiAgQXZhdGFyVXBkYXRlZCA9IDI1NFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyAnRVRJTUVET1VUJyA6ICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBmdW5jdGlvbihjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IChjYW5jZWwgJiYgY2FuY2VsLnR5cGUpID8gbmV3IENhbmNlbCgnY2FuY2VsZWQnKSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDoge1xuICAgIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG4gIH0sXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICB2YXIgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgIHZhciBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgdmFyIHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcgfHwgKGZvcmNlZEpTT05QYXJzaW5nICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGVuaGFuY2VFcnJvcihlLCB0aGlzLCAnRV9KU09OX1BBUlNFJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjIyLjBcIlxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSkpO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24odikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrXS5tYXAoZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbnZhciBnZXRSYW5kb21WYWx1ZXM7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbiAgICAvLyBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gKG1zQ3J5cHRvKSBvbiBJRTExLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykgfHwgdHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG52YXIgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIpIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHZhciB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7IC8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG5cbnZhciBfY2xvY2tzZXE7IC8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZVxuXG5cbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDsgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCBmb3IgQVBJIGRldGFpbHNcblxuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxOyAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3RcbiAgLy8gc3BlY2lmaWVkLiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50XG4gIC8vIHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcblxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICB2YXIgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbc2VlZEJ5dGVzWzBdIHwgMHgwMSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dO1xuICAgIH1cblxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfSAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cblxuXG4gIHZhciBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpOyAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG5cbiAgdmFyIG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxOyAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG5cbiAgdmFyIGR0ID0gbXNlY3MgLSBfbGFzdE1TZWNzICsgKG5zZWNzIC0gX2xhc3ROU2VjcykgLyAxMDAwMDsgLy8gUGVyIDQuMi4xLjIsIEJ1bXAgY2xvY2tzZXEgb24gY2xvY2sgcmVncmVzc2lvblxuXG4gIGlmIChkdCA8IDAgJiYgb3B0aW9ucy5jbG9ja3NlcSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2xvY2tzZXEgPSBjbG9ja3NlcSArIDEgJiAweDNmZmY7XG4gIH0gLy8gUmVzZXQgbnNlY3MgaWYgY2xvY2sgcmVncmVzc2VzIChuZXcgY2xvY2tzZXEpIG9yIHdlJ3ZlIG1vdmVkIG9udG8gYSBuZXdcbiAgLy8gdGltZSBpbnRlcnZhbFxuXG5cbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH0gLy8gUGVyIDQuMi4xLjIgVGhyb3cgZXJyb3IgaWYgdG9vIG1hbnkgdXVpZHMgYXJlIHJlcXVlc3RlZFxuXG5cbiAgaWYgKG5zZWNzID49IDEwMDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXVpZC52MSgpOiBDYW4ndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWNcIik7XG4gIH1cblxuICBfbGFzdE1TZWNzID0gbXNlY3M7XG4gIF9sYXN0TlNlY3MgPSBuc2VjcztcbiAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7IC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuXG4gIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwOyAvLyBgdGltZV9sb3dgXG5cbiAgdmFyIHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjsgLy8gYHRpbWVfbWlkYFxuXG4gIHZhciB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7IC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG5cbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmOyAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcblxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7IC8vIGBjbG9ja19zZXFfbG93YFxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjsgLy8gYG5vZGVgXG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IHN0cmluZ2lmeShiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjE7IiwiaW1wb3J0IHsgUmVsYXRpb25zaGlwIH0gZnJvbSAnQHhyZW5naW5lL2NvbW1vbi9zcmMvaW50ZXJmYWNlcy9SZWxhdGlvbnNoaXAnXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnQHhyZW5naW5lL2NvbW1vbi9zcmMvaW50ZXJmYWNlcy9Vc2VyJ1xuXG5leHBvcnQgY29uc3QgVXNlckFjdGlvbiA9IHtcbiAgdXNlclBhdGNoZWQ6ICh1c2VyOiBVc2VyKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdVU0VSX1BBVENIRUQnIGFzIGNvbnN0LFxuICAgICAgdXNlcjogdXNlclxuICAgIH1cbiAgfSxcblxuICBsb2FkZWRVc2VyUmVsYXRpb25zaGlwOiAocmVsYXRpb25zaGlwOiBSZWxhdGlvbnNoaXApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0xPQURFRF9SRUxBVElPTlNISVAnIGFzIGNvbnN0LFxuICAgICAgcmVsYXRpb25zaGlwXG4gICAgfVxuICB9LFxuXG4gIGxvYWRlZFVzZXJzOiAodXNlcnM6IFVzZXJbXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQURNSU5fTE9BREVEX1VTRVJTJyBhcyBjb25zdCxcbiAgICAgIHVzZXJzXG4gICAgfVxuICB9LFxuXG4gIGNoYW5nZWRSZWxhdGlvbjogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQ0hBTkdFRF9SRUxBVElPTicgYXMgY29uc3RcbiAgICB9XG4gIH0sXG5cbiAgbG9hZGVkTGF5ZXJVc2VyczogKHVzZXJzOiBVc2VyW10pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0xPQURFRF9MQVlFUl9VU0VSUycgYXMgY29uc3QsXG4gICAgICB1c2VyczogdXNlcnNcbiAgICB9XG4gIH0sXG5cbiAgY2xlYXJMYXllclVzZXJzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdDTEVBUl9MQVlFUl9VU0VSUycgYXMgY29uc3RcbiAgICB9XG4gIH0sXG5cbiAgYWRkZWRMYXllclVzZXI6ICh1c2VyOiBVc2VyKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdBRERFRF9MQVlFUl9VU0VSJyBhcyBjb25zdCxcbiAgICAgIHVzZXI6IHVzZXJcbiAgICB9XG4gIH0sXG5cbiAgcmVtb3ZlZExheWVyVXNlcjogKHVzZXI6IFVzZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ1JFTU9WRURfTEFZRVJfVVNFUicgYXMgY29uc3QsXG4gICAgICB1c2VyOiB1c2VyXG4gICAgfVxuICB9LFxuXG4gIGxvYWRlZENoYW5uZWxMYXllclVzZXJzOiAodXNlcnM6IFVzZXJbXSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnTE9BREVEX0NIQU5ORUxfTEFZRVJfVVNFUlMnIGFzIGNvbnN0LFxuICAgICAgdXNlcnM6IHVzZXJzXG4gICAgfVxuICB9LFxuXG4gIGNsZWFyQ2hhbm5lbExheWVyVXNlcnM6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0NMRUFSX0NIQU5ORUxfTEFZRVJfVVNFUlMnIGFzIGNvbnN0XG4gICAgfVxuICB9LFxuXG4gIGFkZGVkQ2hhbm5lbExheWVyVXNlcjogKHVzZXI6IFVzZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0FEREVEX0NIQU5ORUxfTEFZRVJfVVNFUicgYXMgY29uc3QsXG4gICAgICB1c2VyOiB1c2VyXG4gICAgfVxuICB9LFxuXG4gIHJlbW92ZWRDaGFubmVsTGF5ZXJVc2VyOiAodXNlcjogVXNlcikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnUkVNT1ZFRF9DSEFOTkVMX0xBWUVSX1VTRVInIGFzIGNvbnN0LFxuICAgICAgdXNlcjogdXNlclxuICAgIH1cbiAgfSxcblxuICBkaXNwbGF5VXNlclRvYXN0OiAodXNlcjogVXNlciwgYXJnczogYW55KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdVU0VSX1RPQVNUJyBhcyBjb25zdCxcbiAgICAgIG1lc3NhZ2U6IHsgdXNlciwgYXJncyB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIFVzZXJBY3Rpb25UeXBlID0gUmV0dXJuVHlwZTx0eXBlb2YgVXNlckFjdGlvbltrZXlvZiB0eXBlb2YgVXNlckFjdGlvbl0+XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi8uLi9lY3MvY2xhc3Nlcy9FbmdpbmUnXG5cbi8vdXBkYXRlcyB0aGUgY2xpZW50IGxpc3Qgd2l0aCB0aGUgcmlnaHQgdXNlcm5hbWUgZm9yIHRoZSB1c2VyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3VwZGF0ZVVzZXJuYW1lKHVzZXJJZCwgdXNlcm5hbWUpIHtcbiAgZm9yIChsZXQgW18sIGNsaWVudF0gb2YgRW5naW5lLmRlZmF1bHRXb3JsZC5jbGllbnRzKSB7XG4gICAgaWYgKGNsaWVudC51c2VySWQgPT09IHVzZXJJZCkge1xuICAgICAgY2xpZW50Lm5hbWUgPSB1c2VybmFtZVxuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG59XG5cbi8vY2hlY2tzIGlmIGEgcGxheWVyIGhhcyBzdWJzY3JpYmVkIHRvIGEgY2hhdCBzeXN0ZW1cbmV4cG9ydCBmdW5jdGlvbiBoYXNTdWJzY3JpYmVkVG9DaGF0U3lzdGVtKHVzZXJJZCwgc3lzdGVtOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHN5c3RlbSA9PT0gdW5kZWZpbmVkIHx8IHN5c3RlbSA9PT0gJycgfHwgdXNlcklkID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZVxuXG4gIGZvciAobGV0IFtfLCBjbGllbnRdIG9mIEVuZ2luZS5kZWZhdWx0V29ybGQuY2xpZW50cykge1xuICAgIGlmIChjbGllbnQudXNlcklkID09PSB1c2VySWQpIHtcbiAgICAgIHJldHVybiBjbGllbnQuc3Vic2NyaWJlZENoYXRVcGRhdGVzLmluY2x1ZGVzKHN5c3RlbSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cbi8vc3Vic2NyaWJlIGEgcGxheWVyIHRvIGEgY2hhdCBzeXN0ZW1cbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVUb0NoYXRTeXN0ZW0odXNlcklkLCBzeXN0ZW06IHN0cmluZykge1xuICBpZiAoc3lzdGVtID09PSB1bmRlZmluZWQgfHwgc3lzdGVtID09PSAnJyB8fCB1c2VySWQgPT09IHVuZGVmaW5lZCkgcmV0dXJuXG5cbiAgZm9yIChsZXQgW18sIGNsaWVudF0gb2YgRW5naW5lLmRlZmF1bHRXb3JsZC5jbGllbnRzKSB7XG4gICAgaWYgKGNsaWVudC51c2VySWQgPT09IHVzZXJJZCkge1xuICAgICAgaWYgKHN5c3RlbSAhPT0gJ2FsbCcgJiYgIWNsaWVudC5zdWJzY3JpYmVkQ2hhdFVwZGF0ZXMuaW5jbHVkZXMoc3lzdGVtKSkge1xuICAgICAgICBjbGllbnQuc3Vic2NyaWJlZENoYXRVcGRhdGVzLnB1c2goc3lzdGVtKVxuICAgICAgICByZXR1cm5cbiAgICAgIH0gZWxzZSBpZiAoc3lzdGVtID09PSAnYWxsJykge1xuICAgICAgICBjbGllbnQuc3Vic2NyaWJlZENoYXRVcGRhdGVzLnB1c2goJ2Vtb3Rpb25zX3N5c3RlbScpXG4gICAgICAgIGNsaWVudC5zdWJzY3JpYmVkQ2hhdFVwZGF0ZXMucHVzaCgnamxfc3lzdGVtJylcbiAgICAgICAgY2xpZW50LnN1YnNjcmliZWRDaGF0VXBkYXRlcy5wdXNoKCdwcm94aW1pdHlfc3lzdGVtJylcbiAgICAgICAgLy9hZGQgYWxsIGNoYXQgc3lzdGVtc1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8vdW5zdWJzY3JpYmUgYSBwbGF5ZXIgZnJvbSBhIGNoYXQgc3lzdGVtXG5leHBvcnQgZnVuY3Rpb24gdW5zdWJzY3JpYmVGcm9tQ2hhdFN5c3RlbSh1c2VySWQsIHN5c3RlbTogc3RyaW5nKSB7XG4gIGlmIChzeXN0ZW0gPT09IHVuZGVmaW5lZCB8fCBzeXN0ZW0gPT09ICcnIHx8IHVzZXJJZCA9PT0gdW5kZWZpbmVkKSByZXR1cm5cblxuICBmb3IgKGxldCBbXywgY2xpZW50XSBvZiBFbmdpbmUuZGVmYXVsdFdvcmxkLmNsaWVudHMpIHtcbiAgICBpZiAoY2xpZW50LnVzZXJJZCA9PT0gdXNlcklkKSB7XG4gICAgICBpZiAoc3lzdGVtICE9PSAnYWxsJyAmJiBjbGllbnQuc3Vic2NyaWJlZENoYXRVcGRhdGVzLmluY2x1ZGVzKHN5c3RlbSkpIHtcbiAgICAgICAgY2xpZW50LnN1YnNjcmliZWRDaGF0VXBkYXRlcy5zcGxpY2UoY2xpZW50LnN1YnNjcmliZWRDaGF0VXBkYXRlcy5pbmRleE9mKHN5c3RlbSksIDEpXG4gICAgICAgIHJldHVyblxuICAgICAgfSBlbHNlIGlmIChzeXN0ZW0gPT09ICdhbGwnKSB7XG4gICAgICAgIGNsaWVudC5zdWJzY3JpYmVkQ2hhdFVwZGF0ZXMgPSBbXVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8vZ2V0cyBhbGwgdGhlIHN5c3RlbXMgdGhhdCBhIHVzZXIgaGFzIHN1YnNjcmliZWQgdG9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdWJzY3JpYmVkQ2hhdFN5c3RlbXModXNlcklkKTogc3RyaW5nW10ge1xuICBpZiAodXNlcklkID09PSB1bmRlZmluZWQpIHJldHVybiBbXVxuXG4gIGZvciAobGV0IFtfLCBjbGllbnRdIG9mIEVuZ2luZS5kZWZhdWx0V29ybGQuY2xpZW50cykge1xuICAgIGlmIChjbGllbnQudXNlcklkID09PSB1c2VySWQpIHtcbiAgICAgIHJldHVybiBjbGllbnQuc3Vic2NyaWJlZENoYXRVcGRhdGVzXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtdXG59XG5cbi8vZ2V0cyB0aGUgY2hhdCBzeXN0ZW0gZnJvbSBhIGNoYXQgbWVzc2FnZVxuZXhwb3J0IGZ1bmN0aW9uIGdldENoYXRNZXNzYWdlU3lzdGVtKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICh0ZXh0LnN0YXJ0c1dpdGgoJ1tlbW90aW9uc10nKSkgcmV0dXJuICdlbW90aW9uc19zeXN0ZW0nXG4gIGVsc2UgaWYgKHRleHQuc3RhcnRzV2l0aCgnW2psX3N5c3RlbV0nKSB8fCB0ZXh0LmluY2x1ZGVzKCdqb2luZWQgdGhlIGxheWVyJykpIHJldHVybiAnamxfc3lzdGVtJ1xuICBlbHNlIGlmICh0ZXh0LnN0YXJ0c1dpdGgoJ1twcm94aW1pdHknKSkgcmV0dXJuICdwcm94aW1pdHlfc3lzdGVtJ1xuXG4gIHJldHVybiAnbm9uZSdcbn1cblxuLy9yZW1vdmVzIHRoZSBjaGF0IHN5c3RlbSBjb21tYW5kIGZyb20gYSBjaGF0IG1lc3NhZ2VcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVNZXNzYWdlU3lzdGVtKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB0ZXh0LnN1YnN0cmluZyh0ZXh0LmluZGV4T2YoJ10nLCAwKSArIDEpXG59XG4iLCJpbXBvcnQgeyBjcmVhdGVNYXBwZWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9lY3MvZnVuY3Rpb25zL0NvbXBvbmVudEZ1bmN0aW9ucydcblxuZXhwb3J0IHR5cGUgV2ViQ2FtSW5wdXRDb21wb25lbnRUeXBlID0ge1xuICBlbW90aW9uczogc3RyaW5nW11cbn1cblxuZXhwb3J0IGNvbnN0IFdlYkNhbUlucHV0Q29tcG9uZW50ID0gY3JlYXRlTWFwcGVkQ29tcG9uZW50PFdlYkNhbUlucHV0Q29tcG9uZW50VHlwZT4oJ1dlYkNhbUlucHV0Q29tcG9uZW50JylcbiIsImltcG9ydCB7IGlzQ2xpZW50IH0gZnJvbSAnLi9pc0NsaWVudCdcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm90KHdpbmRvdzogV2luZG93KSB7XG4gIGlmICghaXNDbGllbnQpIHJldHVybiBmYWxzZVxuXG4gIGNvbnN0IHF1ZXJ5ID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaFxuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHF1ZXJ5KVxuICBjb25zdCBpc0JvdCA9IHBhcmFtcy5nZXQoJ2JvdCcpXG4gIHJldHVybiBpc0JvdCA9PT0gbnVsbCA/IGZhbHNlIDogdHJ1ZVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlTWFwcGVkQ29tcG9uZW50IH0gZnJvbSAnQHhyZW5naW5lL2VuZ2luZS9zcmMvZWNzL2Z1bmN0aW9ucy9Db21wb25lbnRGdW5jdGlvbnMnXG5cbmV4cG9ydCB0eXBlIFByb3hpbWl0eUNvbXBvbmVudFR5cGUgPSB7XG4gIHVzZXJzSW5SYW5nZTogYW55W11cbiAgdXNlcnNJbkludGltYXRlUmFuZ2U6IGFueVtdXG4gIHVzZXJzSW5IYXJhc3NtZW50UmFuZ2U6IGFueVtdXG4gIHVzZXJzTG9va2luZ1Rvd2FyZHM6IGFueVtdXG59XG5cbmV4cG9ydCBjb25zdCBQcm94aW1pdHlDb21wb25lbnQgPSBjcmVhdGVNYXBwZWRDb21wb25lbnQ8UHJveGltaXR5Q29tcG9uZW50VHlwZT4oJ1Byb3hpbWl0eUNvbXBvbmVudCcpXG4iLCJpbXBvcnQgeyBWZWN0b3IyLCBWZWN0b3IzIH0gZnJvbSAndGhyZWUnXG5pbXBvcnQgeyBjcmVhdGVNYXBwZWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9lY3MvZnVuY3Rpb25zL0NvbXBvbmVudEZ1bmN0aW9ucydcblxuZXhwb3J0IHR5cGUgQWZrQ2hlY2tDb21wb25lbnRUeXBlID0ge1xuICBpc0FmazogYm9vbGVhblxuICBwcmV2UG9zaXRpb246IFZlY3RvcjNcbiAgY1N0ZXA6IG51bWJlclxuICBjU3RlcDI6IG51bWJlclxuICB0aW1lcjogbnVtYmVyXG59XG5cbmV4cG9ydCBjb25zdCBBZmtDaGVja0NvbXBvbmVudCA9IGNyZWF0ZU1hcHBlZENvbXBvbmVudDxBZmtDaGVja0NvbXBvbmVudFR5cGU+KCdBZmtDaGVja0NvbXBvbmVudCcpXG4iLCJpbXBvcnQgeyBjcmVhdGVNYXBwZWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9lY3MvZnVuY3Rpb25zL0NvbXBvbmVudEZ1bmN0aW9ucydcblxuZXhwb3J0IHR5cGUgVXNlck5hbWVDb21wb25lbnRUeXBlID0ge1xuICB1c2VybmFtZTogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBVc2VyTmFtZUNvbXBvbmVudCA9IGNyZWF0ZU1hcHBlZENvbXBvbmVudDxVc2VyTmFtZUNvbXBvbmVudFR5cGU+KCdVc2VyTmFtZUNvbXBvbmVudCcpXG4iLCJpbXBvcnQgeyBOZXR3b3JrSWQgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL05ldHdvcmtJZCdcbmltcG9ydCB7IFVzZXJJZCB9IGZyb20gJ0B4cmVuZ2luZS9jb21tb24vc3JjL2ludGVyZmFjZXMvVXNlcklkJ1xuaW1wb3J0IHsgY3JlYXRlTWFwcGVkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZWNzL2Z1bmN0aW9ucy9Db21wb25lbnRGdW5jdGlvbnMnXG5cbmV4cG9ydCB0eXBlIE5ldHdvcmtPYmplY3RDb21wb25lbnRUeXBlID0ge1xuICAvKiogVGhlIHVzZXIgd2hvIG93bnMgdGhpcyBvYmplY3QuICovXG4gIHVzZXJJZDogVXNlcklkXG4gIC8qKiBUaGUgbmV0d29yayBpZCBmb3IgdGhpcyBvYmplY3QgKi9cbiAgbmV0d29ya0lkOiBOZXR3b3JrSWRcbiAgLyoqIEFsbCBuZXR3b3JrIG9iamVjdHMgbmVlZCB0byBiZSBhIHJlZ2lzdGVyZWQgcHJlZmFiLiAqL1xuICBwcmVmYWI6IHN0cmluZ1xuICAvKiogVGhlIHBhcmFtZXRlcnMgYnkgd2hpY2ggdGhlIHByZWZhYiB3YXMgY3JlYXRlZCAqL1xuICBwYXJhbWV0ZXJzOiBhbnlcbn1cblxuZXhwb3J0IGNvbnN0IE5ldHdvcmtPYmplY3RDb21wb25lbnQgPSBjcmVhdGVNYXBwZWRDb21wb25lbnQ8TmV0d29ya09iamVjdENvbXBvbmVudFR5cGU+KCdOZXR3b3JrT2JqZWN0Q29tcG9uZW50JylcbiIsImltcG9ydCB7IFVzZXJJZCB9IGZyb20gJ0B4cmVuZ2luZS9jb21tb24vc3JjL2ludGVyZmFjZXMvVXNlcklkJ1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vLi4vZWNzL2NsYXNzZXMvRW5naW5lJ1xuaW1wb3J0IHsgZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZWNzL2Z1bmN0aW9ucy9Db21wb25lbnRGdW5jdGlvbnMnXG5pbXBvcnQgeyB1c2VXb3JsZCB9IGZyb20gJy4uLy4uL2Vjcy9mdW5jdGlvbnMvU3lzdGVtSG9va3MnXG5pbXBvcnQgeyBBZmtDaGVja0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL25hdmlnYXRpb24vY29tcG9uZW50L0Fma0NoZWNrQ29tcG9uZW50J1xuaW1wb3J0IHsgVXNlck5hbWVDb21wb25lbnQgfSBmcm9tICcuLi8uLi9zY2VuZS9jb21wb25lbnRzL1VzZXJOYW1lQ29tcG9uZW50J1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJy4uL2NsYXNzZXMvTmV0d29yaydcbmltcG9ydCB7IE5ldHdvcmtPYmplY3RDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL05ldHdvcmtPYmplY3RDb21wb25lbnQnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyRW50aXR5QnlOYW1lKG5hbWU6IHN0cmluZykge1xuICBjb25zdCBjbGllbnQgPSBBcnJheS5mcm9tKEVuZ2luZS5kZWZhdWx0V29ybGQuY2xpZW50cy52YWx1ZXMoKSkuZmluZCgoYykgPT4ge1xuICAgIHJldHVybiBjLm5hbWUgPT09IG5hbWVcbiAgfSlcbiAgcmV0dXJuIGNsaWVudCA/IHVzZVdvcmxkKCkuZ2V0VXNlckF2YXRhckVudGl0eShjbGllbnQudXNlcklkKSA6IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVtb3RlVXNlcnMobG9jYWxVc2VySWQsIG5vdEFmazogYm9vbGVhbik6IFVzZXJJZFtdIHtcbiAgY29uc3Qgd29ybGQgPSB1c2VXb3JsZCgpXG4gIGNvbnN0IHJlczogVXNlcklkW10gPSBbXVxuXG4gIGZvciAobGV0IFtfLCBjbGllbnRdIG9mIHdvcmxkLmNsaWVudHMpIHtcbiAgICBpZiAoY2xpZW50LnVzZXJJZCAhPT0gbG9jYWxVc2VySWQpIHtcbiAgICAgIGlmICghbm90QWZrKSByZXMucHVzaChjbGllbnQudXNlcklkKVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGVpZCA9IHdvcmxkLmdldFVzZXJBdmF0YXJFbnRpdHkoY2xpZW50LnVzZXJJZClcbiAgICAgICAgaWYgKGVpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc3QgYWNjID0gZ2V0Q29tcG9uZW50KGVpZCwgQWZrQ2hlY2tDb21wb25lbnQpXG4gICAgICAgICAgaWYgKGFjYyAhPT0gdW5kZWZpbmVkICYmICFhY2MuaXNBZmspIHJlcy5wdXNoKGNsaWVudC51c2VySWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGF5ZXJOYW1lKGVpZCk6IHN0cmluZyB7XG4gIGNvbnN0IHVpZCA9IGdldENvbXBvbmVudChlaWQsIE5ldHdvcmtPYmplY3RDb21wb25lbnQpPy51c2VySWRcbiAgaWYgKHVpZCA9PT0gdW5kZWZpbmVkIHx8IHVpZCA9PT0gJycpIHJldHVybiAnJ1xuXG4gIGZvciAobGV0IFtfLCBjbGllbnRdIG9mIEVuZ2luZS5kZWZhdWx0V29ybGQuY2xpZW50cykge1xuICAgIGlmIChjbGllbnQudXNlcklkID09PSB1aWQpIHtcbiAgICAgIGlmIChjbGllbnQubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjbGllbnQubmFtZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdW5jID0gZ2V0Q29tcG9uZW50KGVpZCwgVXNlck5hbWVDb21wb25lbnQpXG4gICAgICAgIGlmICh1bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB1bmMudXNlcm5hbWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWlkKHVzZXJJZCkge1xuICBmb3IgKGxldCBbXywgY2xpZW50XSBvZiBFbmdpbmUuZGVmYXVsdFdvcmxkLmNsaWVudHMpIHtcbiAgICBpZiAoY2xpZW50LnVzZXJJZCA9PSB1c2VySWQpIHtcbiAgICAgIHJldHVybiB1c2VXb3JsZCgpLmdldFVzZXJBdmF0YXJFbnRpdHkoY2xpZW50LnVzZXJJZClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG4iLCJpbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vcmVkdWNlcnMvYWxlcnQvQWxlcnRTZXJ2aWNlJ1xuaW1wb3J0IHsgcmVzb2x2ZUF1dGhVc2VyIH0gZnJvbSAnQHhyZW5naW5lL2NvbW1vbi9zcmMvaW50ZXJmYWNlcy9BdXRoVXNlcidcbmltcG9ydCB7IElkZW50aXR5UHJvdmlkZXIgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL0lkZW50aXR5UHJvdmlkZXInXG5pbXBvcnQgeyByZXNvbHZlVXNlciwgcmVzb2x2ZVdhbGxldFVzZXIgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL1VzZXInXG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSAnQHhyZW5naW5lL2VuZ2luZS9zcmMvbmV0d29ya2luZy9jbGFzc2VzL05ldHdvcmsnXG5pbXBvcnQgeyBNZXNzYWdlVHlwZXMgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9uZXR3b3JraW5nL2VudW1zL01lc3NhZ2VUeXBlcydcbi8vIFRPRE86IERlY291cGxlIHRoaXNcbi8vIGltcG9ydCB7IGVuZFZpZGVvQ2hhdCwgbGVhdmUgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9uZXR3b3JraW5nL2Z1bmN0aW9ucy9Tb2NrZXRXZWJSVENDbGllbnRGdW5jdGlvbnMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuXG5pbXBvcnQgcXVlcnlzdHJpbmcgZnJvbSAncXVlcnlzdHJpbmcnXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgdjEgfSBmcm9tICd1dWlkJ1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnLi4vLi4vLi4vZmVhdGhlcnMnXG5pbXBvcnQgeyB2YWxpZGF0ZUVtYWlsLCB2YWxpZGF0ZVBob25lTnVtYmVyLCBDb25maWcgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9jb25maWcnXG5pbXBvcnQgeyBnZXRTdG9yZWRBdXRoU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9wZXJzaXN0ZWQuc3RvcmUnXG5pbXBvcnQgU3RvcmUgZnJvbSAnLi4vLi4vLi4vc3RvcmUnXG5pbXBvcnQgeyBVc2VyQWN0aW9uIH0gZnJvbSAnLi4vLi4vc3RvcmUvVXNlckFjdGlvbidcbmltcG9ydCB7IEF1dGhBY3Rpb24sIEVtYWlsTG9naW5Gb3JtLCBFbWFpbFJlZ2lzdHJhdGlvbkZvcm0gfSBmcm9tICcuL0F1dGhBY3Rpb24nXG5pbXBvcnQgeyBzZXRBdmF0YXIgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9hdmF0YXIvZnVuY3Rpb25zL2F2YXRhckZ1bmN0aW9ucydcbmltcG9ydCB7IF91cGRhdGVVc2VybmFtZSB9IGZyb20gJ0B4cmVuZ2luZS9lbmdpbmUvc3JjL25ldHdvcmtpbmcvdXRpbHMvY2hhdFN5c3RlbSdcbmltcG9ydCB7IGFjY2Vzc0F1dGhTdGF0ZSB9IGZyb20gJy4vQXV0aFN0YXRlJ1xuaW1wb3J0IHsgaGFzQ29tcG9uZW50LCBhZGRDb21wb25lbnQsIGdldENvbXBvbmVudCB9IGZyb20gJ0B4cmVuZ2luZS9lbmdpbmUvc3JjL2Vjcy9mdW5jdGlvbnMvQ29tcG9uZW50RnVuY3Rpb25zJ1xuaW1wb3J0IHsgV2ViQ2FtSW5wdXRDb21wb25lbnQgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9pbnB1dC9jb21wb25lbnRzL1dlYkNhbUlucHV0Q29tcG9uZW50J1xuaW1wb3J0IHsgaXNCb3QgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9jb21tb24vZnVuY3Rpb25zL2lzQm90J1xuaW1wb3J0IHsgUHJveGltaXR5Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vcHJveGltaXR5L2NvbXBvbmVudHMvUHJveGltaXR5Q29tcG9uZW50J1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnQHhyZW5naW5lL2VuZ2luZS9zcmMvZWNzL2NsYXNzZXMvRW5naW5lJ1xuaW1wb3J0IHsgZ2V0RWlkIH0gZnJvbSAnQHhyZW5naW5lL2VuZ2luZS9zcmMvbmV0d29ya2luZy91dGlscy9nZXRVc2VyJ1xuaW1wb3J0IHsgVXNlck5hbWVDb21wb25lbnQgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9zY2VuZS9jb21wb25lbnRzL1VzZXJOYW1lQ29tcG9uZW50J1xuaW1wb3J0IHsgdXNlV29ybGQgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9lY3MvZnVuY3Rpb25zL1N5c3RlbUhvb2tzJ1xuaW1wb3J0IHsgYWNjZXNzTG9jYXRpb25TdGF0ZSB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvc29jaWFsL3JlZHVjZXJzL2xvY2F0aW9uL0xvY2F0aW9uU3RhdGUnXG5pbXBvcnQgeyBhY2Nlc3NQYXJ0eVN0YXRlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9zb2NpYWwvcmVkdWNlcnMvcGFydHkvUGFydHlTdGF0ZSdcblxuZXhwb3J0IGNvbnN0IEF1dGhTZXJ2aWNlID0ge1xuICBkb0xvZ2luQXV0bzogKGFsbG93R3Vlc3Q/OiBib29sZWFuLCBmb3JjZUNsaWVudEF1dGhSZXNldD86IGJvb2xlYW4pID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBhdXRoRGF0YSA9IGdldFN0b3JlZEF1dGhTdGF0ZSgpXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9XG4gICAgICAgICAgZm9yY2VDbGllbnRBdXRoUmVzZXQgIT09IHRydWUgJiYgYXV0aERhdGEgJiYgYXV0aERhdGEuYXV0aFVzZXIgPyBhdXRoRGF0YS5hdXRoVXNlci5hY2Nlc3NUb2tlbiA6IHVuZGVmaW5lZFxuXG4gICAgICAgIGlmIChhbGxvd0d1ZXN0ICE9PSB0cnVlICYmIGFjY2Vzc1Rva2VuID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JjZUNsaWVudEF1dGhSZXNldCA9PT0gdHJ1ZSkgYXdhaXQgKGNsaWVudCBhcyBhbnkpLmF1dGhlbnRpY2F0aW9uLnJlc2V0KClcbiAgICAgICAgaWYgKGFsbG93R3Vlc3QgPT09IHRydWUgJiYgKGFjY2Vzc1Rva2VuID09IG51bGwgfHwgYWNjZXNzVG9rZW4ubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgIGNvbnN0IG5ld1Byb3ZpZGVyID0gYXdhaXQgY2xpZW50LnNlcnZpY2UoJ2lkZW50aXR5LXByb3ZpZGVyJykuY3JlYXRlKHtcbiAgICAgICAgICAgIHR5cGU6ICdndWVzdCcsXG4gICAgICAgICAgICB0b2tlbjogdjEoKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgYWNjZXNzVG9rZW4gPSBuZXdQcm92aWRlci5hY2Nlc3NUb2tlblxuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgKGNsaWVudCBhcyBhbnkpLmF1dGhlbnRpY2F0aW9uLnNldEFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuIGFzIHN0cmluZylcbiAgICAgICAgbGV0IHJlc1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlcyA9IGF3YWl0IChjbGllbnQgYXMgYW55KS5yZUF1dGhlbnRpY2F0ZSgpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGVyci5jbGFzc05hbWUgPT09ICdub3QtZm91bmQnIHx8XG4gICAgICAgICAgICAoZXJyLmNsYXNzTmFtZSA9PT0gJ25vdC1hdXRoZW50aWNhdGVkJyAmJiBlcnIubWVzc2FnZSA9PT0gJ2p3dCBleHBpcmVkJylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGF3YWl0IGRpc3BhdGNoKEF1dGhBY3Rpb24uZGlkTG9nb3V0KCkpXG4gICAgICAgICAgICBhd2FpdCAoY2xpZW50IGFzIGFueSkuYXV0aGVudGljYXRpb24ucmVzZXQoKVxuICAgICAgICAgICAgY29uc3QgbmV3UHJvdmlkZXIgPSBhd2FpdCBjbGllbnQuc2VydmljZSgnaWRlbnRpdHktcHJvdmlkZXInKS5jcmVhdGUoe1xuICAgICAgICAgICAgICB0eXBlOiAnZ3Vlc3QnLFxuICAgICAgICAgICAgICB0b2tlbjogdjEoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gbmV3UHJvdmlkZXIuYWNjZXNzVG9rZW5cbiAgICAgICAgICAgIGF3YWl0IChjbGllbnQgYXMgYW55KS5hdXRoZW50aWNhdGlvbi5zZXRBY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbiBhcyBzdHJpbmcpXG4gICAgICAgICAgICByZXMgPSBhd2FpdCAoY2xpZW50IGFzIGFueSkucmVBdXRoZW50aWNhdGUoKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmIChyZXNbJ2lkZW50aXR5LXByb3ZpZGVyJ10/LmlkID09IG51bGwpIHtcbiAgICAgICAgICAgIGF3YWl0IGRpc3BhdGNoKEF1dGhBY3Rpb24uZGlkTG9nb3V0KCkpXG4gICAgICAgICAgICBhd2FpdCAoY2xpZW50IGFzIGFueSkuYXV0aGVudGljYXRpb24ucmVzZXQoKVxuICAgICAgICAgICAgY29uc3QgbmV3UHJvdmlkZXIgPSBhd2FpdCBjbGllbnQuc2VydmljZSgnaWRlbnRpdHktcHJvdmlkZXInKS5jcmVhdGUoe1xuICAgICAgICAgICAgICB0eXBlOiAnZ3Vlc3QnLFxuICAgICAgICAgICAgICB0b2tlbjogdjEoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gbmV3UHJvdmlkZXIuYWNjZXNzVG9rZW5cbiAgICAgICAgICAgIGF3YWl0IChjbGllbnQgYXMgYW55KS5hdXRoZW50aWNhdGlvbi5zZXRBY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbiBhcyBzdHJpbmcpXG4gICAgICAgICAgICByZXMgPSBhd2FpdCAoY2xpZW50IGFzIGFueSkucmVBdXRoZW50aWNhdGUoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBhdXRoVXNlciA9IHJlc29sdmVBdXRoVXNlcihyZXMpXG4gICAgICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5sb2dpblVzZXJTdWNjZXNzKGF1dGhVc2VyKSlcbiAgICAgICAgICBhd2FpdCBBdXRoU2VydmljZS5sb2FkVXNlckRhdGEoZGlzcGF0Y2gsIGF1dGhVc2VyLmlkZW50aXR5UHJvdmlkZXIudXNlcklkKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCcqKioqKioqKioqKioqKioqJylcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmRpZExvZ291dCgpKVxuXG4gICAgICAgIC8vIGlmICh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgIT09ICcvJykge1xuICAgICAgICAvLyAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy8nO1xuICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBsb2FkVXNlckRhdGE6IChkaXNwYXRjaDogRGlzcGF0Y2gsIHVzZXJJZDogc3RyaW5nKTogYW55ID0+IHtcbiAgICByZXR1cm4gY2xpZW50XG4gICAgICAuc2VydmljZSgndXNlcicpXG4gICAgICAuZ2V0KHVzZXJJZClcbiAgICAgIC50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICBpZiAocmVzLnVzZXJfc2V0dGluZyA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNsaWVudFxuICAgICAgICAgICAgLnNlcnZpY2UoJ3VzZXItc2V0dGluZ3MnKVxuICAgICAgICAgICAgLmZpbmQoe1xuICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoc2V0dGluZ3NSZXMpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHNldHRpbmdzUmVzLnRvdGFsID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudFxuICAgICAgICAgICAgICAgICAgLnNlcnZpY2UoJ3VzZXItc2V0dGluZ3MnKVxuICAgICAgICAgICAgICAgICAgLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgLnRoZW4oKG5ld1NldHRpbmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy51c2VyX3NldHRpbmcgPSBuZXdTZXR0aW5nc1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXMudXNlcl9zZXR0aW5nID0gc2V0dGluZ3NSZXMuZGF0YVswXVxuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXMpXG4gICAgICB9KVxuICAgICAgLnRoZW4oKHJlczogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSByZXNvbHZlVXNlcihyZXMpXG4gICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24ubG9hZGVkVXNlckRhdGEodXNlcikpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsICdGYWlsZWQgdG8gbG9hZCB1c2VyIGRhdGEnKVxuICAgICAgfSlcbiAgfSxcbiAgbG9naW5Vc2VyQnlQYXNzd29yZDogKGZvcm06IEVtYWlsTG9naW5Gb3JtKSA9PiB7XG4gICAgcmV0dXJuIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBhbnkgPT4ge1xuICAgICAgLy8gY2hlY2sgZW1haWwgdmFsaWRhdGlvbi5cbiAgICAgIGlmICghdmFsaWRhdGVFbWFpbChmb3JtLmVtYWlsKSkge1xuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCAnUGxlYXNlIGlucHV0IHZhbGlkIGVtYWlsIGFkZHJlc3MnKVxuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG4gICAgICA7KGNsaWVudCBhcyBhbnkpXG4gICAgICAgIC5hdXRoZW50aWNhdGUoe1xuICAgICAgICAgIHN0cmF0ZWd5OiAnbG9jYWwnLFxuICAgICAgICAgIGVtYWlsOiBmb3JtLmVtYWlsLFxuICAgICAgICAgIHBhc3N3b3JkOiBmb3JtLnBhc3N3b3JkXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1dGhVc2VyID0gcmVzb2x2ZUF1dGhVc2VyKHJlcylcblxuICAgICAgICAgIGlmICghYXV0aFVzZXIuaWRlbnRpdHlQcm92aWRlci5pc1ZlcmlmaWVkKSB7XG4gICAgICAgICAgICA7KGNsaWVudCBhcyBhbnkpLmxvZ291dCgpXG5cbiAgICAgICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24ucmVnaXN0ZXJVc2VyQnlFbWFpbFN1Y2Nlc3MoYXV0aFVzZXIuaWRlbnRpdHlQcm92aWRlcikpXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvYXV0aC9jb25maXJtJ1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5sb2dpblVzZXJTdWNjZXNzKGF1dGhVc2VyKSlcbiAgICAgICAgICBBdXRoU2VydmljZS5sb2FkVXNlckRhdGEoZGlzcGF0Y2gsIGF1dGhVc2VyLmlkZW50aXR5UHJvdmlkZXIudXNlcklkKS50aGVuKCgpID0+ICh3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvJykpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG5cbiAgICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmxvZ2luVXNlckVycm9yKCdGYWlsZWQgdG8gbG9naW4nKSlcbiAgICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKGZhbHNlKSkpXG4gICAgfVxuICB9LFxuICBsb2dpblVzZXJCeVhSV2FsbGV0OiAod2FsbGV0OiBhbnkpID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoOiBEaXNwYXRjaCwgZ2V0U3RhdGU6IGFueSk6IGFueSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG5cbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHM6IGFueSA9IHBhcnNlVXNlcldhbGxldENyZWRlbnRpYWxzKHdhbGxldClcbiAgICAgICAgY29uc29sZS5sb2coY3JlZGVudGlhbHMpXG5cbiAgICAgICAgY29uc3Qgd2FsbGV0VXNlciA9IHJlc29sdmVXYWxsZXRVc2VyKGNyZWRlbnRpYWxzKVxuXG4gICAgICAgIC8vVE9ETzogVGhpcyBpcyB0ZW1wIHVudGlsIHdlIG1vdmUgY29tcGxldGVseSB0byBYUiB3YWxsZXRcbiAgICAgICAgY29uc3Qgb2xkSWQgPSBhY2Nlc3NBdXRoU3RhdGUoKS51c2VyLmlkLnZhbHVlXG4gICAgICAgIHdhbGxldFVzZXIuaWQgPSBvbGRJZFxuXG4gICAgICAgIGxvYWRYUkF2YXRhckZvclVwZGF0ZWRVc2VyKHdhbGxldFVzZXIpXG4gICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24ubG9hZGVkVXNlckRhdGEod2FsbGV0VXNlcikpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmxvZ2luVXNlckVycm9yKCdGYWlsZWQgdG8gbG9naW4nKSlcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcoZmFsc2UpKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbG9naW5Vc2VyQnlPQXV0aDogKHNlcnZpY2U6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiAoZGlzcGF0Y2g6IERpc3BhdGNoKTogYW55ID0+IHtcbiAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24uYWN0aW9uUHJvY2Vzc2luZyh0cnVlKSlcbiAgICAgIGNvbnN0IHRva2VuID0gYWNjZXNzQXV0aFN0YXRlKCkuYXV0aFVzZXIuYWNjZXNzVG9rZW4udmFsdWVcbiAgICAgIGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlzdHJpbmcucGFyc2Uod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zbGljZSgxKSlcbiAgICAgIGNvbnN0IHJlZGlyZWN0T2JqZWN0ID0ge1xuICAgICAgICBwYXRoOiBwYXRoXG4gICAgICB9IGFzIGFueVxuICAgICAgaWYgKHF1ZXJ5U3RyaW5nLmluc3RhbmNlSWQgJiYgcXVlcnlTdHJpbmcuaW5zdGFuY2VJZC5sZW5ndGggPiAwKVxuICAgICAgICByZWRpcmVjdE9iamVjdC5pbnN0YW5jZUlkID0gcXVlcnlTdHJpbmcuaW5zdGFuY2VJZFxuICAgICAgbGV0IHJlZGlyZWN0VXJsID0gYCR7XG4gICAgICAgIENvbmZpZy5wdWJsaWNSdW50aW1lQ29uZmlnLmFwaVNlcnZlclxuICAgICAgfS9vYXV0aC8ke3NlcnZpY2V9P2ZlYXRoZXJzX3Rva2VuPSR7dG9rZW59JnJlZGlyZWN0PSR7SlNPTi5zdHJpbmdpZnkocmVkaXJlY3RPYmplY3QpfWBcblxuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSByZWRpcmVjdFVybFxuICAgIH1cbiAgfSxcbiAgbG9naW5Vc2VyQnlKd3Q6IChhY2Nlc3NUb2tlbjogc3RyaW5nLCByZWRpcmVjdFN1Y2Nlc3M6IHN0cmluZywgcmVkaXJlY3RFcnJvcjogc3RyaW5nKTogYW55ID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG4gICAgICAgIGF3YWl0IChjbGllbnQgYXMgYW55KS5hdXRoZW50aWNhdGlvbi5zZXRBY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbiBhcyBzdHJpbmcpXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IChjbGllbnQgYXMgYW55KS5hdXRoZW50aWNhdGUoe1xuICAgICAgICAgIHN0cmF0ZWd5OiAnand0JyxcbiAgICAgICAgICBhY2Nlc3NUb2tlblxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IGF1dGhVc2VyID0gcmVzb2x2ZUF1dGhVc2VyKHJlcylcblxuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmxvZ2luVXNlclN1Y2Nlc3MoYXV0aFVzZXIpKVxuICAgICAgICBhd2FpdCBBdXRoU2VydmljZS5sb2FkVXNlckRhdGEoZGlzcGF0Y2gsIGF1dGhVc2VyLmlkZW50aXR5UHJvdmlkZXIudXNlcklkKVxuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcoZmFsc2UpKVxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlZGlyZWN0U3VjY2Vzc1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5sb2dpblVzZXJFcnJvcignRmFpbGVkIHRvIGxvZ2luJykpXG4gICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke3JlZGlyZWN0RXJyb3J9P2Vycm9yPSR7ZXJyLm1lc3NhZ2V9YFxuICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcoZmFsc2UpKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbG9nb3V0VXNlcjogKCkgPT4ge1xuICAgIHJldHVybiAoZGlzcGF0Y2g6IERpc3BhdGNoKTogYW55ID0+IHtcbiAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24uYWN0aW9uUHJvY2Vzc2luZyh0cnVlKSlcbiAgICAgIDsoY2xpZW50IGFzIGFueSlcbiAgICAgICAgLmxvZ291dCgpXG4gICAgICAgIC50aGVuKCgpID0+IGRpc3BhdGNoKEF1dGhBY3Rpb24uZGlkTG9nb3V0KCkpKVxuICAgICAgICAuY2F0Y2goKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5kaWRMb2dvdXQoKSkpXG4gICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcoZmFsc2UpKVxuICAgICAgICAgIEF1dGhTZXJ2aWNlLmRvTG9naW5BdXRvKHRydWUsIHRydWUpKGRpc3BhdGNoKVxuICAgICAgICB9KVxuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJVc2VyQnlFbWFpbDogKGZvcm06IEVtYWlsUmVnaXN0cmF0aW9uRm9ybSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCcxIHJlZ2lzdGVyVXNlckJ5RW1haWwnKVxuICAgIHJldHVybiAoZGlzcGF0Y2g6IERpc3BhdGNoKTogYW55ID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCcyIGRpc3BhdGNoJywgZGlzcGF0Y2gpXG4gICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG4gICAgICBjbGllbnRcbiAgICAgICAgLnNlcnZpY2UoJ2lkZW50aXR5LXByb3ZpZGVyJylcbiAgICAgICAgLmNyZWF0ZSh7XG4gICAgICAgICAgdG9rZW46IGZvcm0uZW1haWwsXG4gICAgICAgICAgcGFzc3dvcmQ6IGZvcm0ucGFzc3dvcmQsXG4gICAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJ1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoaWRlbnRpdHlQcm92aWRlcjogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJzMgJywgaWRlbnRpdHlQcm92aWRlcilcbiAgICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLnJlZ2lzdGVyVXNlckJ5RW1haWxTdWNjZXNzKGlkZW50aXR5UHJvdmlkZXIpKVxuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9hdXRoL2NvbmZpcm0nXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InLCBlcnIpXG4gICAgICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5yZWdpc3RlclVzZXJCeUVtYWlsRXJyb3IoZXJyLm1lc3NhZ2UpKVxuICAgICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgICB9KVxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJzQgZmluYWxseScsIGRpc3BhdGNoKVxuICAgICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24uYWN0aW9uUHJvY2Vzc2luZyhmYWxzZSkpXG4gICAgICAgIH0pXG4gICAgfVxuICB9LFxuICB2ZXJpZnlFbWFpbDogKHRva2VuOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoOiBEaXNwYXRjaCk6IGFueSA9PiB7XG4gICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG5cbiAgICAgIGNsaWVudFxuICAgICAgICAuc2VydmljZSgnYXV0aE1hbmFnZW1lbnQnKVxuICAgICAgICAuY3JlYXRlKHtcbiAgICAgICAgICBhY3Rpb246ICd2ZXJpZnlTaWdudXBMb25nJyxcbiAgICAgICAgICB2YWx1ZTogdG9rZW5cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5kaWRWZXJpZnlFbWFpbCh0cnVlKSlcbiAgICAgICAgICBBdXRoU2VydmljZS5sb2dpblVzZXJCeUp3dChyZXMuYWNjZXNzVG9rZW4sICcvJywgJy8nKShkaXNwYXRjaClcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmRpZFZlcmlmeUVtYWlsKGZhbHNlKSlcbiAgICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKGZhbHNlKSkpXG4gICAgfVxuICB9LFxuICByZXNlbmRWZXJpZmljYXRpb25FbWFpbDogKGVtYWlsOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoOiBEaXNwYXRjaCk6IGFueSA9PiB7XG4gICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG5cbiAgICAgIGNsaWVudFxuICAgICAgICAuc2VydmljZSgnYXV0aE1hbmFnZW1lbnQnKVxuICAgICAgICAuY3JlYXRlKHtcbiAgICAgICAgICBhY3Rpb246ICdyZXNlbmRWZXJpZnlTaWdudXAnLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0b2tlbjogZW1haWwsXG4gICAgICAgICAgICB0eXBlOiAncGFzc3dvcmQnXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiBkaXNwYXRjaChBdXRoQWN0aW9uLmRpZFJlc2VuZFZlcmlmaWNhdGlvbkVtYWlsKHRydWUpKSlcbiAgICAgICAgLmNhdGNoKCgpID0+IGRpc3BhdGNoKEF1dGhBY3Rpb24uZGlkUmVzZW5kVmVyaWZpY2F0aW9uRW1haWwoZmFsc2UpKSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKGZhbHNlKSkpXG4gICAgfVxuICB9LFxuICBmb3Jnb3RQYXNzd29yZDogKGVtYWlsOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoOiBEaXNwYXRjaCk6IGFueSA9PiB7XG4gICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG4gICAgICBjb25zb2xlLmxvZygnZm9yZ290UGFzc3dvcmQnLCBlbWFpbClcbiAgICAgIGNsaWVudFxuICAgICAgICAuc2VydmljZSgnYXV0aE1hbmFnZW1lbnQnKVxuICAgICAgICAuY3JlYXRlKHtcbiAgICAgICAgICBhY3Rpb246ICdzZW5kUmVzZXRQd2QnLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0b2tlbjogZW1haWwsXG4gICAgICAgICAgICB0eXBlOiAncGFzc3dvcmQnXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiBkaXNwYXRjaChBdXRoQWN0aW9uLmRpZEZvcmdvdFBhc3N3b3JkKHRydWUpKSlcbiAgICAgICAgLmNhdGNoKCgpID0+IGRpc3BhdGNoKEF1dGhBY3Rpb24uZGlkRm9yZ290UGFzc3dvcmQoZmFsc2UpKSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKGZhbHNlKSkpXG4gICAgfVxuICB9LFxuICByZXNldFBhc3N3b3JkOiAodG9rZW46IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiAoZGlzcGF0Y2g6IERpc3BhdGNoKTogYW55ID0+IHtcbiAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24uYWN0aW9uUHJvY2Vzc2luZyh0cnVlKSlcblxuICAgICAgY2xpZW50XG4gICAgICAgIC5zZXJ2aWNlKCdhdXRoTWFuYWdlbWVudCcpXG4gICAgICAgIC5jcmVhdGUoe1xuICAgICAgICAgIGFjdGlvbjogJ3Jlc2V0UHdkTG9uZycsXG4gICAgICAgICAgdmFsdWU6IHsgdG9rZW4sIHBhc3N3b3JkIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24uZGlkUmVzZXRQYXNzd29yZCh0cnVlKSlcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvJ1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24uZGlkUmVzZXRQYXNzd29yZChmYWxzZSkpXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLydcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKGZhbHNlKSkpXG4gICAgfVxuICB9LFxuICBjcmVhdGVNYWdpY0xpbms6IChlbWFpbFBob25lOiBzdHJpbmcsIGxpbmtUeXBlPzogJ2VtYWlsJyB8ICdzbXMnKSA9PiB7XG4gICAgcmV0dXJuIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBhbnkgPT4ge1xuICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKHRydWUpKVxuXG4gICAgICBsZXQgdHlwZSA9ICdlbWFpbCdcbiAgICAgIGxldCBwYXJhbU5hbWUgPSAnZW1haWwnXG4gICAgICBjb25zdCBlbmFibGVFbWFpbE1hZ2ljTGluayA9XG4gICAgICAgIChDb25maWcucHVibGljUnVudGltZUNvbmZpZy5hdXRoICYmIENvbmZpZy5wdWJsaWNSdW50aW1lQ29uZmlnLmF1dGguZW5hYmxlRW1haWxNYWdpY0xpbmspID8/IHRydWVcbiAgICAgIGNvbnN0IGVuYWJsZVNtc01hZ2ljTGluayA9XG4gICAgICAgIChDb25maWcucHVibGljUnVudGltZUNvbmZpZy5hdXRoICYmIENvbmZpZy5wdWJsaWNSdW50aW1lQ29uZmlnLmF1dGguZW5hYmxlU21zTWFnaWNMaW5rKSA/PyBmYWxzZVxuXG4gICAgICBpZiAobGlua1R5cGUgPT09ICdlbWFpbCcpIHtcbiAgICAgICAgdHlwZSA9ICdlbWFpbCdcbiAgICAgICAgcGFyYW1OYW1lID0gJ2VtYWlsJ1xuICAgICAgfSBlbHNlIGlmIChsaW5rVHlwZSA9PT0gJ3NtcycpIHtcbiAgICAgICAgdHlwZSA9ICdzbXMnXG4gICAgICAgIHBhcmFtTmFtZSA9ICdtb2JpbGUnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzdHJpcHBlZCA9IGVtYWlsUGhvbmUucmVwbGFjZSgvLS9nLCAnJylcbiAgICAgICAgaWYgKHZhbGlkYXRlUGhvbmVOdW1iZXIoc3RyaXBwZWQpKSB7XG4gICAgICAgICAgaWYgKCFlbmFibGVTbXNNYWdpY0xpbmspIHtcbiAgICAgICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsICdQbGVhc2UgaW5wdXQgdmFsaWQgZW1haWwgYWRkcmVzcycpXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICB0eXBlID0gJ3NtcydcbiAgICAgICAgICBwYXJhbU5hbWUgPSAnbW9iaWxlJ1xuICAgICAgICAgIGVtYWlsUGhvbmUgPSAnKzEnICsgc3RyaXBwZWRcbiAgICAgICAgfSBlbHNlIGlmICh2YWxpZGF0ZUVtYWlsKGVtYWlsUGhvbmUpKSB7XG4gICAgICAgICAgaWYgKCFlbmFibGVFbWFpbE1hZ2ljTGluaykge1xuICAgICAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgJ1BsZWFzZSBpbnB1dCB2YWxpZCBwaG9uZSBudW1iZXInKVxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgdHlwZSA9ICdlbWFpbCdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCAnUGxlYXNlIGlucHV0IHZhbGlkIGVtYWlsIG9yIHBob25lIG51bWJlcicpXG5cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjbGllbnRcbiAgICAgICAgLnNlcnZpY2UoJ21hZ2ljLWxpbmsnKVxuICAgICAgICAuY3JlYXRlKHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIFtwYXJhbU5hbWVdOiBlbWFpbFBob25lXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlcylcbiAgICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmRpZENyZWF0ZU1hZ2ljTGluayh0cnVlKSlcbiAgICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydFN1Y2Nlc3MoZGlzcGF0Y2gsICdMb2dpbiBNYWdpYyBMaW5rIHdhcyBzZW50LiBQbGVhc2UgY2hlY2sgeW91ciBFbWFpbCBvciBTTVMuJylcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmRpZENyZWF0ZU1hZ2ljTGluayhmYWxzZSkpXG4gICAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICAgIH0pXG4gICAgICAgIC5maW5hbGx5KCgpID0+IGRpc3BhdGNoKEF1dGhBY3Rpb24uYWN0aW9uUHJvY2Vzc2luZyhmYWxzZSkpKVxuICAgIH1cbiAgfSxcbiAgYWRkQ29ubmVjdGlvbkJ5UGFzc3dvcmQ6IChmb3JtOiBFbWFpbExvZ2luRm9ybSwgdXNlcklkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoOiBEaXNwYXRjaCk6IGFueSA9PiB7XG4gICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcodHJ1ZSkpXG5cbiAgICAgIGNsaWVudFxuICAgICAgICAuc2VydmljZSgnaWRlbnRpdHktcHJvdmlkZXInKVxuICAgICAgICAuY3JlYXRlKHtcbiAgICAgICAgICB0b2tlbjogZm9ybS5lbWFpbCxcbiAgICAgICAgICBwYXNzd29yZDogZm9ybS5wYXNzd29yZCxcbiAgICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICAgIHVzZXJJZFxuICAgICAgICB9KVxuICAgICAgICAudGhlbigocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zdCBpZGVudGl0eVByb3ZpZGVyID0gcmVzIGFzIElkZW50aXR5UHJvdmlkZXJcbiAgICAgICAgICByZXR1cm4gQXV0aFNlcnZpY2UubG9hZFVzZXJEYXRhKGRpc3BhdGNoLCBpZGVudGl0eVByb3ZpZGVyLnVzZXJJZClcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKGZhbHNlKSkpXG4gICAgfVxuICB9LFxuICBhZGRDb25uZWN0aW9uQnlFbWFpbDogKGVtYWlsOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBhbnkgPT4ge1xuICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKHRydWUpKVxuICAgICAgY2xpZW50XG4gICAgICAgIC5zZXJ2aWNlKCdtYWdpYy1saW5rJylcbiAgICAgICAgLmNyZWF0ZSh7XG4gICAgICAgICAgZW1haWwsXG4gICAgICAgICAgdHlwZTogJ2VtYWlsJyxcbiAgICAgICAgICB1c2VySWRcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgY29uc3QgaWRlbnRpdHlQcm92aWRlciA9IHJlcyBhcyBJZGVudGl0eVByb3ZpZGVyXG4gICAgICAgICAgaWYgKGlkZW50aXR5UHJvdmlkZXIudXNlcklkICE9IG51bGwpIHJldHVybiBBdXRoU2VydmljZS5sb2FkVXNlckRhdGEoZGlzcGF0Y2gsIGlkZW50aXR5UHJvdmlkZXIudXNlcklkKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgICB9KVxuICAgICAgICAuZmluYWxseSgoKSA9PiBkaXNwYXRjaChBdXRoQWN0aW9uLmFjdGlvblByb2Nlc3NpbmcoZmFsc2UpKSlcbiAgICB9XG4gIH0sXG4gIGFkZENvbm5lY3Rpb25CeVNtczogKHBob25lOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBhbnkgPT4ge1xuICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKHRydWUpKVxuXG4gICAgICBsZXQgc2VuZFBob25lID0gcGhvbmUucmVwbGFjZSgvLS9nLCAnJylcbiAgICAgIGlmIChzZW5kUGhvbmUubGVuZ3RoID09PSAxMCkge1xuICAgICAgICBzZW5kUGhvbmUgPSAnMScgKyBzZW5kUGhvbmVcbiAgICAgIH1cblxuICAgICAgY2xpZW50XG4gICAgICAgIC5zZXJ2aWNlKCdtYWdpYy1saW5rJylcbiAgICAgICAgLmNyZWF0ZSh7XG4gICAgICAgICAgbW9iaWxlOiBzZW5kUGhvbmUsXG4gICAgICAgICAgdHlwZTogJ3NtcycsXG4gICAgICAgICAgdXNlcklkXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGlkZW50aXR5UHJvdmlkZXIgPSByZXMgYXMgSWRlbnRpdHlQcm92aWRlclxuICAgICAgICAgIGlmIChpZGVudGl0eVByb3ZpZGVyLnVzZXJJZCAhPSBudWxsKSByZXR1cm4gQXV0aFNlcnZpY2UubG9hZFVzZXJEYXRhKGRpc3BhdGNoLCBpZGVudGl0eVByb3ZpZGVyLnVzZXJJZClcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKGZhbHNlKSkpXG4gICAgfVxuICB9LFxuICBhZGRDb25uZWN0aW9uQnlPYXV0aDogKG9hdXRoOiAnZmFjZWJvb2snIHwgJ2dvb2dsZScgfCAnZ2l0aHViJyB8ICdsaW5rZWRpbicgfCAndHdpdHRlcicsIHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuICgvKiBkaXNwYXRjaDogRGlzcGF0Y2ggKi8pID0+IHtcbiAgICAgIHdpbmRvdy5vcGVuKGAke0NvbmZpZy5wdWJsaWNSdW50aW1lQ29uZmlnLmFwaVNlcnZlcn0vYXV0aC9vYXV0aC8ke29hdXRofT91c2VySWQ9JHt1c2VySWR9YCwgJ19ibGFuaycpXG4gICAgfVxuICB9LFxuICByZW1vdmVDb25uZWN0aW9uOiAoaWRlbnRpdHlQcm92aWRlcklkOiBudW1iZXIsIHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBhbnkgPT4ge1xuICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5hY3Rpb25Qcm9jZXNzaW5nKHRydWUpKVxuXG4gICAgICBjbGllbnRcbiAgICAgICAgLnNlcnZpY2UoJ2lkZW50aXR5LXByb3ZpZGVyJylcbiAgICAgICAgLnJlbW92ZShpZGVudGl0eVByb3ZpZGVySWQpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gQXV0aFNlcnZpY2UubG9hZFVzZXJEYXRhKGRpc3BhdGNoLCB1c2VySWQpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICAgIH0pXG4gICAgICAgIC5maW5hbGx5KCgpID0+IGRpc3BhdGNoKEF1dGhBY3Rpb24uYWN0aW9uUHJvY2Vzc2luZyhmYWxzZSkpKVxuICAgIH1cbiAgfSxcbiAgcmVmcmVzaENvbm5lY3Rpb25zOiAodXNlcklkOiBzdHJpbmcpID0+IHtcbiAgICA7KGRpc3BhdGNoOiBEaXNwYXRjaCk6IGFueSA9PiBBdXRoU2VydmljZS5sb2FkVXNlckRhdGEoZGlzcGF0Y2gsIHVzZXJJZClcbiAgfSxcbiAgdXBkYXRlVXNlclNldHRpbmdzOiAoaWQ6IGFueSwgZGF0YTogYW55KSA9PiBhc3luYyAoZGlzcGF0Y2g6IGFueSkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5zZXJ2aWNlKCd1c2VyLXNldHRpbmdzJykucGF0Y2goaWQsIGRhdGEpXG4gICAgZGlzcGF0Y2goQXV0aEFjdGlvbi51cGRhdGVkVXNlclNldHRpbmdzQWN0aW9uKHJlcykpXG4gIH0sXG4gIHVwbG9hZEF2YXRhcjogKGRhdGE6IGFueSkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoLCBnZXRTdGF0ZTogYW55KSA9PiB7XG4gICAgICBjb25zdCB0b2tlbiA9IGFjY2Vzc0F1dGhTdGF0ZSgpLmF1dGhVc2VyLmFjY2Vzc1Rva2VuLnZhbHVlXG4gICAgICBjb25zdCBzZWxmVXNlciA9IGFjY2Vzc0F1dGhTdGF0ZSgpLnVzZXJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoYCR7Q29uZmlnLnB1YmxpY1J1bnRpbWVDb25maWcuYXBpU2VydmVyfS91cGxvYWRgLCBkYXRhLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgJyArIHRva2VuXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBhd2FpdCBjbGllbnQuc2VydmljZSgndXNlcicpLnBhdGNoKHNlbGZVc2VyLmlkLnZhbHVlLCB7XG4gICAgICAgIG5hbWU6IHNlbGZVc2VyLm5hbWUudmFsdWVcbiAgICAgIH0pXG4gICAgICBjb25zdCByZXN1bHQgPSByZXMuZGF0YVxuICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRTdWNjZXNzKGRpc3BhdGNoLCAnQXZhdGFyIHVwZGF0ZWQnKVxuICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi5hdmF0YXJVcGRhdGVkKHJlc3VsdCkpXG4gICAgfVxuICB9LFxuICB1cGxvYWRBdmF0YXJNb2RlbDogKG1vZGVsOiBhbnksIHRodW1ibmFpbDogYW55LCBhdmF0YXJOYW1lPzogc3RyaW5nLCBpc1B1YmxpY0F2YXRhcj86IGJvb2xlYW4pID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCwgZ2V0U3RhdGU6IGFueSkgPT4ge1xuICAgICAgY29uc3QgdG9rZW4gPSBhY2Nlc3NBdXRoU3RhdGUoKS5hdXRoVXNlci5hY2Nlc3NUb2tlbi52YWx1ZVxuICAgICAgY29uc3QgbmFtZSA9IGF2YXRhck5hbWUgPyBhdmF0YXJOYW1lIDogbW9kZWwubmFtZS5zdWJzdHJpbmcoMCwgbW9kZWwubmFtZS5sYXN0SW5kZXhPZignLicpKVxuICAgICAgY29uc3QgW21vZGVsVVJMLCB0aHVtYm5haWxVUkxdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBjbGllbnQuc2VydmljZSgndXBsb2FkLXByZXNpZ25lZCcpLmdldCgnJywge1xuICAgICAgICAgIHF1ZXJ5OiB7IHR5cGU6ICdhdmF0YXInLCBmaWxlTmFtZTogbmFtZSArICcuZ2xiJywgZmlsZVNpemU6IG1vZGVsLnNpemUsIGlzUHVibGljQXZhdGFyOiBpc1B1YmxpY0F2YXRhciB9XG4gICAgICAgIH0pLFxuICAgICAgICBjbGllbnQuc2VydmljZSgndXBsb2FkLXByZXNpZ25lZCcpLmdldCgnJywge1xuICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICB0eXBlOiAndXNlci10aHVtYm5haWwnLFxuICAgICAgICAgICAgZmlsZU5hbWU6IG5hbWUgKyAnLnBuZycsXG4gICAgICAgICAgICBmaWxlU2l6ZTogdGh1bWJuYWlsLnNpemUsXG4gICAgICAgICAgICBtaW1lVHlwZTogdGh1bWJuYWlsLnR5cGUsXG4gICAgICAgICAgICBpc1B1YmxpY0F2YXRhcjogaXNQdWJsaWNBdmF0YXJcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKVxuXG4gICAgICBjb25zdCBtb2RlbERhdGEgPSBuZXcgRm9ybURhdGEoKVxuICAgICAgT2JqZWN0LmtleXMobW9kZWxVUkwuZmllbGRzKS5mb3JFYWNoKChrZXkpID0+IG1vZGVsRGF0YS5hcHBlbmQoa2V5LCBtb2RlbFVSTC5maWVsZHNba2V5XSkpXG4gICAgICBtb2RlbERhdGEuYXBwZW5kKCdhY2wnLCAncHVibGljLXJlYWQnKVxuICAgICAgbW9kZWxEYXRhLmFwcGVuZChtb2RlbFVSTC5sb2NhbCA/ICdtZWRpYScgOiAnZmlsZScsIG1vZGVsKVxuICAgICAgaWYgKG1vZGVsVVJMLmxvY2FsKSB7XG4gICAgICAgIGxldCB1cGxvYWRQYXRoID0gJ2F2YXRhcnMnXG5cbiAgICAgICAgaWYgKG1vZGVsVVJMLmZpZWxkcy5LZXkpIHtcbiAgICAgICAgICB1cGxvYWRQYXRoID0gbW9kZWxVUkwuZmllbGRzLktleVxuICAgICAgICAgIHVwbG9hZFBhdGggPSB1cGxvYWRQYXRoLnN1YnN0cmluZygwLCB1cGxvYWRQYXRoLmxhc3RJbmRleE9mKCcvJykpXG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbERhdGEuYXBwZW5kKCd1cGxvYWRQYXRoJywgdXBsb2FkUGF0aClcbiAgICAgICAgbW9kZWxEYXRhLmFwcGVuZCgnaWQnLCBgJHtuYW1lfS5nbGJgKVxuICAgICAgICBtb2RlbERhdGEuYXBwZW5kKCdza2lwU3RhdGljUmVzb3VyY2UnLCAndHJ1ZScpXG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKCdtb2RlbERhdGEnLCBtb2RlbERhdGEpXG4gICAgICAvLyBVcGxvYWQgTW9kZWwgZmlsZSB0byBTM1xuICAgICAgY29uc3QgbW9kZWxPcGVyYXRpb24gPVxuICAgICAgICBtb2RlbFVSTC5sb2NhbCA9PT0gdHJ1ZVxuICAgICAgICAgID8gYXhpb3MucG9zdChgJHtDb25maWcucHVibGljUnVudGltZUNvbmZpZy5hcGlTZXJ2ZXJ9L21lZGlhYCwgbW9kZWxEYXRhLCB7XG4gICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnLFxuICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgJyArIHRva2VuXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBheGlvcy5wb3N0KG1vZGVsVVJMLnVybCwgbW9kZWxEYXRhKVxuICAgICAgcmV0dXJuIG1vZGVsT3BlcmF0aW9uXG4gICAgICAgIC50aGVuKGFzeW5jIChyZXMpID0+IHtcbiAgICAgICAgICBjb25zdCB0aHVtYm5haWxEYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICAgICAgICBPYmplY3Qua2V5cyh0aHVtYm5haWxVUkwuZmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHRodW1ibmFpbERhdGEuYXBwZW5kKGtleSwgdGh1bWJuYWlsVVJMLmZpZWxkc1trZXldKSlcbiAgICAgICAgICB0aHVtYm5haWxEYXRhLmFwcGVuZCgnYWNsJywgJ3B1YmxpYy1yZWFkJylcbiAgICAgICAgICB0aHVtYm5haWxEYXRhLmFwcGVuZCh0aHVtYm5haWxVUkwubG9jYWwgPT09IHRydWUgPyAnbWVkaWEnIDogJ2ZpbGUnLCB0aHVtYm5haWwpXG4gICAgICAgICAgaWYgKHRodW1ibmFpbFVSTC5sb2NhbCkge1xuICAgICAgICAgICAgbGV0IHVwbG9hZFBhdGggPSAnYXZhdGFycydcblxuICAgICAgICAgICAgaWYgKHRodW1ibmFpbFVSTC5maWVsZHMuS2V5KSB7XG4gICAgICAgICAgICAgIHVwbG9hZFBhdGggPSB0aHVtYm5haWxVUkwuZmllbGRzLktleVxuICAgICAgICAgICAgICB1cGxvYWRQYXRoID0gdXBsb2FkUGF0aC5zdWJzdHJpbmcoMCwgdXBsb2FkUGF0aC5sYXN0SW5kZXhPZignLycpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGh1bWJuYWlsRGF0YS5hcHBlbmQoJ3VwbG9hZFBhdGgnLCB1cGxvYWRQYXRoKVxuICAgICAgICAgICAgdGh1bWJuYWlsRGF0YS5hcHBlbmQoJ25hbWUnLCBgJHtuYW1lfS5wbmdgKVxuICAgICAgICAgICAgdGh1bWJuYWlsRGF0YS5hcHBlbmQoJ3NraXBTdGF0aWNSZXNvdXJjZScsICd0cnVlJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBtb2RlbENsb3VkZnJvbnRVUkwgPSBgaHR0cHM6Ly8ke21vZGVsVVJMLmNhY2hlRG9tYWlufS8ke21vZGVsVVJMLmZpZWxkcy5LZXl9YFxuICAgICAgICAgIGNvbnN0IHRodW1ibmFpbENsb3VkZnJvbnRVUkwgPSBgaHR0cHM6Ly8ke3RodW1ibmFpbFVSTC5jYWNoZURvbWFpbn0vJHt0aHVtYm5haWxVUkwuZmllbGRzLktleX1gXG4gICAgICAgICAgY29uc3Qgc2VsZlVzZXIgPSBhY2Nlc3NBdXRoU3RhdGUoKS51c2VyXG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdNb2RlbCA9IGF3YWl0IGNsaWVudC5zZXJ2aWNlKCdzdGF0aWMtcmVzb3VyY2UnKS5maW5kKHtcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHN0YXRpY1Jlc291cmNlVHlwZTogJ2F2YXRhcicsXG4gICAgICAgICAgICAgIHVzZXJJZDogaXNQdWJsaWNBdmF0YXIgPyBudWxsIDogc2VsZlVzZXIuaWQudmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVGh1bWJuYWlsID0gYXdhaXQgY2xpZW50LnNlcnZpY2UoJ3N0YXRpYy1yZXNvdXJjZScpLmZpbmQoe1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgc3RhdGljUmVzb3VyY2VUeXBlOiAndXNlci10aHVtYm5haWwnLFxuICAgICAgICAgICAgICB1c2VySWQ6IGlzUHVibGljQXZhdGFyID8gbnVsbCA6IHNlbGZVc2VyLmlkLnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAvLyBVcGxvYWQgVGh1bWJuYWlsIGZpbGUgdG8gUzNcbiAgICAgICAgICBjb25zdCB0aHVtYm5haWxPcGVyYXRpb24gPVxuICAgICAgICAgICAgdGh1bWJuYWlsVVJMLmxvY2FsID09PSB0cnVlXG4gICAgICAgICAgICAgID8gYXhpb3MucG9zdChgJHtDb25maWcucHVibGljUnVudGltZUNvbmZpZy5hcGlTZXJ2ZXJ9L21lZGlhYCwgdGh1bWJuYWlsRGF0YSwge1xuICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnLFxuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyB0b2tlblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDogYXhpb3MucG9zdCh0aHVtYm5haWxVUkwudXJsLCB0aHVtYm5haWxEYXRhKVxuICAgICAgICAgIGF3YWl0IHRodW1ibmFpbE9wZXJhdGlvblxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAvLyBTYXZlIFVSTHMgdG8gYmFja2VuZFxuICAgICAgICAgICAgICBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdNb2RlbC50b3RhbCA+IDBcbiAgICAgICAgICAgICAgICAgID8gY2xpZW50LnNlcnZpY2UoJ3N0YXRpYy1yZXNvdXJjZScpLnBhdGNoKGV4aXN0aW5nTW9kZWwuZGF0YVswXS5pZCwge1xuICAgICAgICAgICAgICAgICAgICAgIHVybDogbW9kZWxDbG91ZGZyb250VVJMLFxuICAgICAgICAgICAgICAgICAgICAgIGtleTogbW9kZWxVUkwuZmllbGRzLktleVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgOiBjbGllbnQuc2VydmljZSgnc3RhdGljLXJlc291cmNlJykuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1Jlc291cmNlVHlwZTogJ2F2YXRhcicsXG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBtb2RlbENsb3VkZnJvbnRVUkwsXG4gICAgICAgICAgICAgICAgICAgICAga2V5OiBtb2RlbFVSTC5maWVsZHMuS2V5LFxuICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogaXNQdWJsaWNBdmF0YXIgPyBudWxsIDogc2VsZlVzZXIuaWQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdUaHVtYm5haWwudG90YWwgPiAwXG4gICAgICAgICAgICAgICAgICA/IGNsaWVudC5zZXJ2aWNlKCdzdGF0aWMtcmVzb3VyY2UnKS5wYXRjaChleGlzdGluZ1RodW1ibmFpbC5kYXRhWzBdLmlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiB0aHVtYm5haWxDbG91ZGZyb250VVJMLFxuICAgICAgICAgICAgICAgICAgICAgIGtleTogdGh1bWJuYWlsVVJMLmZpZWxkcy5LZXlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIDogY2xpZW50LnNlcnZpY2UoJ3N0YXRpYy1yZXNvdXJjZScpLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNSZXNvdXJjZVR5cGU6ICd1c2VyLXRodW1ibmFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiB0aHVtYm5haWxDbG91ZGZyb250VVJMLFxuICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgICAgICAgICAgICBrZXk6IHRodW1ibmFpbFVSTC5maWVsZHMuS2V5LFxuICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogaXNQdWJsaWNBdmF0YXIgPyBudWxsIDogc2VsZlVzZXIuaWQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAudGhlbigoXykgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzUHVibGljQXZhdGFyICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24udXNlckF2YXRhcklkVXBkYXRlZChyZXMpKVxuICAgICAgICAgICAgICAgICAgICBjbGllbnRcbiAgICAgICAgICAgICAgICAgICAgICAuc2VydmljZSgndXNlcicpXG4gICAgICAgICAgICAgICAgICAgICAgLnBhdGNoKHNlbGZVc2VyLmlkLnZhbHVlLCB7IGF2YXRhcklkOiBuYW1lIH0pXG4gICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKF8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0U3VjY2VzcyhkaXNwYXRjaCwgJ0F2YXRhciBVcGxvYWRlZCBTdWNjZXNzZnVsbHkuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOZXR3b3JrPy5pbnN0YW5jZT8udHJhbnNwb3J0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAoTmV0d29yay5pbnN0YW5jZS50cmFuc3BvcnQgYXMgYW55KS5zZW5kTmV0d29ya1N0YXRVcGRhdGVNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZXMuQXZhdGFyVXBkYXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHNlbGZVc2VyLmlkLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YXRhcklkOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YXRhclVSTDogbW9kZWxDbG91ZGZyb250VVJMLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbFVSTDogdGh1bWJuYWlsQ2xvdWRmcm9udFVSTFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb2NjdXJyZWQgd2hpbGUgc2F2aW5nIEF2YXRhci4nLCBlcnIpXG5cbiAgICAgICAgICAgICAgICAgIC8vIElGIGVycm9yIG9jY3VycyB0aGVuIHJlbW92ZWQgTW9kZWwgYW5kIHRodW1ibmFpbCBmcm9tIFMzXG4gICAgICAgICAgICAgICAgICBjbGllbnRcbiAgICAgICAgICAgICAgICAgICAgLnNlcnZpY2UoJ3VwbG9hZC1wcmVzaWduZWQnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCcnLCB7IHF1ZXJ5OiB7IGtleXM6IFttb2RlbFVSTC5maWVsZHMuS2V5LCB0aHVtYm5haWxVUkwuZmllbGRzLktleV0gfSB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb2NjdXJyZWQgd2hpbGUgdXBsb2FkaW5nIHRodW1ibmFpbC4nLCBlcnIpXG5cbiAgICAgICAgICAgICAgLy8gSUYgZXJyb3Igb2NjdXJzIHRoZW4gcmVtb3ZlZCBNb2RlbCBhbmQgdGh1bWJuYWlsIGZyb20gUzNcbiAgICAgICAgICAgICAgY2xpZW50LnNlcnZpY2UoJ3VwbG9hZC1wcmVzaWduZWQnKS5yZW1vdmUoJycsIHsgcXVlcnk6IHsga2V5czogW21vZGVsVVJMLmZpZWxkcy5LZXldIH0gfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb2NjdXJyZWQgd2hpbGUgdXBsb2FkaW5nIG1vZGVsLicsIGVycilcbiAgICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIHJlbW92ZUF2YXRhcjogKGtleXM6IFtzdHJpbmddKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaDogRGlzcGF0Y2gsIGdldFN0YXRlOiBhbnkpID0+IHtcbiAgICAgIGF3YWl0IGNsaWVudFxuICAgICAgICAuc2VydmljZSgndXBsb2FkLXByZXNpZ25lZCcpXG4gICAgICAgIC5yZW1vdmUoJycsIHtcbiAgICAgICAgICBxdWVyeTogeyBrZXlzIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKF8pID0+IHtcbiAgICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydFN1Y2Nlc3MoZGlzcGF0Y2gsICdBdmF0YXIgUmVtb3ZlZCBTdWNjZXNzZnVsbHkuJylcbiAgICAgICAgICBBdXRoU2VydmljZS5mZXRjaEF2YXRhckxpc3QoKShkaXNwYXRjaClcbiAgICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIGZldGNoQXZhdGFyTGlzdDogKCkgPT4ge1xuICAgIGNvbnN0IHNlbGZVc2VyID0gYWNjZXNzQXV0aFN0YXRlKCkudXNlclxuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQuc2VydmljZSgnc3RhdGljLXJlc291cmNlJykuZmluZCh7XG4gICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgJHNlbGVjdDogWydpZCcsICdrZXknLCAnbmFtZScsICd1cmwnLCAnc3RhdGljUmVzb3VyY2VUeXBlJywgJ3VzZXJJZCddLFxuICAgICAgICAgIHN0YXRpY1Jlc291cmNlVHlwZToge1xuICAgICAgICAgICAgJGluOiBbJ2F2YXRhcicsICd1c2VyLXRodW1ibmFpbCddXG4gICAgICAgICAgfSxcbiAgICAgICAgICAkb3I6IFt7IHVzZXJJZDogc2VsZlVzZXIuaWQudmFsdWUgfSwgeyB1c2VySWQ6IG51bGwgfV0sXG4gICAgICAgICAgJGxpbWl0OiAxMDAwXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBkaXNwYXRjaChBdXRoQWN0aW9uLnVwZGF0ZUF2YXRhckxpc3QocmVzdWx0LmRhdGEpKVxuICAgIH1cbiAgfSxcbiAgdXBkYXRlVXNlcm5hbWU6ICh1c2VySWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBhbnkgPT4ge1xuICAgICAgY2xpZW50XG4gICAgICAgIC5zZXJ2aWNlKCd1c2VyJylcbiAgICAgICAgLnBhdGNoKHVzZXJJZCwge1xuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRTdWNjZXNzKGRpc3BhdGNoLCAnVXNlcm5hbWUgdXBkYXRlZCcpXG4gICAgICAgICAgZGlzcGF0Y2goQXV0aEFjdGlvbi51c2VybmFtZVVwZGF0ZWQocmVzKSlcbiAgICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZVVzZXJBdmF0YXJJZDogKHVzZXJJZDogc3RyaW5nLCBhdmF0YXJJZDogc3RyaW5nLCBhdmF0YXJVUkw6IHN0cmluZywgdGh1bWJuYWlsVVJMOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gKGRpc3BhdGNoOiBEaXNwYXRjaCk6IGFueSA9PiB7XG4gICAgICBjbGllbnRcbiAgICAgICAgLnNlcnZpY2UoJ3VzZXInKVxuICAgICAgICAucGF0Y2godXNlcklkLCB7XG4gICAgICAgICAgYXZhdGFySWQ6IGF2YXRhcklkXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgIC8vIGRpc3BhdGNoQWxlcnRTdWNjZXNzKGRpc3BhdGNoLCAnVXNlciBBdmF0YXIgdXBkYXRlZCcpO1xuICAgICAgICAgIGRpc3BhdGNoKEF1dGhBY3Rpb24udXNlckF2YXRhcklkVXBkYXRlZChyZXMpKVxuICAgICAgICAgIGlmIChOZXR3b3JrPy5pbnN0YW5jZT8udHJhbnNwb3J0KVxuICAgICAgICAgICAgKE5ldHdvcmsuaW5zdGFuY2UudHJhbnNwb3J0IGFzIGFueSkuc2VuZE5ldHdvcmtTdGF0VXBkYXRlTWVzc2FnZSh7XG4gICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlcy5BdmF0YXJVcGRhdGVkLFxuICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgIGF2YXRhcklkLFxuICAgICAgICAgICAgICBhdmF0YXJVUkwsXG4gICAgICAgICAgICAgIHRodW1ibmFpbFVSTFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIHJlbW92ZVVzZXI6ICh1c2VySWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIGF3YWl0IGNsaWVudC5zZXJ2aWNlKCd1c2VyJykucmVtb3ZlKHVzZXJJZClcbiAgICAgIGF3YWl0IGNsaWVudC5zZXJ2aWNlKCdpZGVudGl0eS1wcm92aWRlcicpLnJlbW92ZShudWxsLCB7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgdXNlcklkOiB1c2VySWRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIEF1dGhTZXJ2aWNlLmxvZ291dFVzZXIoKShkaXNwYXRjaClcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgcGFyc2VVc2VyV2FsbGV0Q3JlZGVudGlhbHMgPSAod2FsbGV0KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdXNlcjoge1xuICAgICAgaWQ6ICdkaWQ6d2ViOmV4YW1wbGUuY29tJyxcbiAgICAgIGRpc3BsYXlOYW1lOiAnYWxpY2UnLFxuICAgICAgaWNvbjogJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3N0YXRpYy9pbWFnZXMvYXZhdGFyLzEuanBnJ1xuICAgICAgLy8gc2Vzc2lvbiAvLyB0aGlzIHdpbGwgY29udGFpbiB0aGUgYWNjZXNzIHRva2VuIGFuZCBoZWxwZXIgbWV0aG9kc1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBnZXRBdmF0YXJSZXNvdXJjZXMgPSAodXNlcikgPT4ge1xuICByZXR1cm4gY2xpZW50LnNlcnZpY2UoJ3N0YXRpYy1yZXNvdXJjZScpLmZpbmQoe1xuICAgIHF1ZXJ5OiB7XG4gICAgICBuYW1lOiB1c2VyLmF2YXRhcklkLFxuICAgICAgc3RhdGljUmVzb3VyY2VUeXBlOiB7ICRpbjogWyd1c2VyLXRodW1ibmFpbCcsICdhdmF0YXInXSB9LFxuICAgICAgJG9yOiBbeyB1c2VySWQ6IG51bGwgfSwgeyB1c2VySWQ6IHVzZXIuaWQgfV0sXG4gICAgICAkc29ydDoge1xuICAgICAgICB1c2VySWQ6IC0xXG4gICAgICB9LFxuICAgICAgJGxpbWl0OiAyXG4gICAgfVxuICB9KVxufVxuXG5jb25zdCBsb2FkQXZhdGFyRm9yVXBkYXRlZFVzZXIgPSBhc3luYyAodXNlcikgPT4ge1xuICBpZiAodXNlci5pbnN0YW5jZUlkID09IG51bGwgJiYgdXNlci5jaGFubmVsSW5zdGFuY2VJZCA9PSBudWxsKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpXG5cbiAgY29uc3Qgd29ybGQgPSB1c2VXb3JsZCgpXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3QgbmV0d29ya1VzZXIgPSB3b3JsZC5jbGllbnRzLmdldCh1c2VyLmlkKVxuXG4gICAgLy8gSWYgbmV0d29yayBpcyBub3QgaW5pdGlhbGl6ZWQgdGhlbiB3YWl0IHRvIGJlIGluaXRpYWxpemVkLlxuICAgIGlmICghbmV0d29ya1VzZXIpIHtcbiAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBsb2FkQXZhdGFyRm9yVXBkYXRlZFVzZXIodXNlcilcbiAgICAgICAgcmVzb2x2ZSh0cnVlKVxuICAgICAgfSwgMjAwKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKG5ldHdvcmtVc2VyLmF2YXRhckRldGFpbC5hdmF0YXJJZCA9PT0gdXNlci5hdmF0YXJJZCkge1xuICAgICAgcmVzb2x2ZSh0cnVlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gRmV0Y2ggQXZhdGFyIFJlc291cmNlcyBmb3IgdXBkYXRlZCB1c2VyLlxuICAgIGNvbnN0IGF2YXRhcnMgPSBhd2FpdCBnZXRBdmF0YXJSZXNvdXJjZXModXNlcilcblxuICAgIGlmIChhdmF0YXJzPy5kYXRhICYmIGF2YXRhcnMuZGF0YS5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IGF2YXRhclVSTCA9IGF2YXRhcnM/LmRhdGFbMF0uc3RhdGljUmVzb3VyY2VUeXBlID09PSAnYXZhdGFyJyA/IGF2YXRhcnM/LmRhdGFbMF0udXJsIDogYXZhdGFycz8uZGF0YVsxXS51cmxcbiAgICAgIGNvbnN0IHRodW1ibmFpbFVSTCA9XG4gICAgICAgIGF2YXRhcnM/LmRhdGFbMF0uc3RhdGljUmVzb3VyY2VUeXBlID09PSAndXNlci10aHVtYm5haWwnID8gYXZhdGFycz8uZGF0YVswXS51cmwgOiBhdmF0YXJzPy5kYXRhWzFdLnVybFxuXG4gICAgICBuZXR3b3JrVXNlci5hdmF0YXJEZXRhaWwgPSB7IGF2YXRhclVSTCwgdGh1bWJuYWlsVVJMLCBhdmF0YXJJZDogdXNlci5hdmF0YXJJZCB9XG5cbiAgICAgIC8vRmluZCBlbnRpdHlJZCBmcm9tIG5ldHdvcmsgb2JqZWN0cyBvZiB1cGRhdGVkIHVzZXIgYW5kIGRpc3BhdGNoIGF2YXRhciBsb2FkIGV2ZW50LlxuICAgICAgY29uc3Qgd29ybGQgPSBFbmdpbmUuZGVmYXVsdFdvcmxkXG4gICAgICBjb25zdCB1c2VyRW50aXR5ID0gd29ybGQuZ2V0VXNlckF2YXRhckVudGl0eSh1c2VyLmlkKVxuICAgICAgc2V0QXZhdGFyKHVzZXJFbnRpdHksIHVzZXIuYXZhdGFySWQsIGF2YXRhclVSTClcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgbG9hZEF2YXRhckZvclVwZGF0ZWRVc2VyKHVzZXIpXG4gICAgfVxuICAgIHJlc29sdmUodHJ1ZSlcbiAgfSlcbn1cblxuY29uc3QgbG9hZFhSQXZhdGFyRm9yVXBkYXRlZFVzZXIgPSBhc3luYyAodXNlcikgPT4ge1xuICBpZiAoIXVzZXIgfHwgIXVzZXIuaWQpIFByb21pc2UucmVzb2x2ZSh0cnVlKVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IG5ldHdvcmtVc2VyID0gRW5naW5lLmRlZmF1bHRXb3JsZC5jbGllbnRzLmdldCh1c2VyLmlkKVxuXG4gICAgLy8gSWYgbmV0d29yayBpcyBub3QgaW5pdGlhbGl6ZWQgdGhlbiB3YWl0IHRvIGJlIGluaXRpYWxpemVkLlxuICAgIGlmICghbmV0d29ya1VzZXIpIHtcbiAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBsb2FkQXZhdGFyRm9yVXBkYXRlZFVzZXIodXNlcilcbiAgICAgICAgcmVzb2x2ZSh0cnVlKVxuICAgICAgfSwgMjAwKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgYXZhdGFyVVJMID0gdXNlci5hdmF0YXJVcmxcbiAgICBjb25zdCB0aHVtYm5haWxVUkwgPSB1c2VyLmF2YXRhclVybFxuXG4gICAgbmV0d29ya1VzZXIuYXZhdGFyRGV0YWlsID0geyBhdmF0YXJVUkwsIHRodW1ibmFpbFVSTCwgYXZhdGFySWQ6IHVzZXIuYXZhdGFySWQgfVxuXG4gICAgLy9GaW5kIGVudGl0eUlkIGZyb20gbmV0d29yayBvYmplY3RzIG9mIHVwZGF0ZWQgdXNlciBhbmQgZGlzcGF0Y2ggYXZhdGFyIGxvYWQgZXZlbnQuXG4gICAgY29uc3Qgd29ybGQgPSBFbmdpbmUuZGVmYXVsdFdvcmxkXG4gICAgY29uc3QgdXNlckVudGl0eSA9IHdvcmxkLmdldFVzZXJBdmF0YXJFbnRpdHkodXNlci5pZClcbiAgICBzZXRBdmF0YXIodXNlckVudGl0eSwgdXNlci5hdmF0YXJJZCwgYXZhdGFyVVJMKVxuICAgIHJlc29sdmUodHJ1ZSlcbiAgfSlcbn1cblxuaWYgKCFDb25maWcucHVibGljUnVudGltZUNvbmZpZy5vZmZsaW5lTW9kZSkge1xuICBjbGllbnQuc2VydmljZSgndXNlcicpLm9uKCdwYXRjaGVkJywgYXN5bmMgKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gU3RvcmUuc3RvcmVcbiAgICBjb25zdCBzZWxmVXNlciA9IGFjY2Vzc0F1dGhTdGF0ZSgpLnVzZXJcbiAgICBjb25zdCB1c2VyID0gcmVzb2x2ZVVzZXIocGFyYW1zLnVzZXJSZWxhdGlvbnNoaXApXG5cbiAgICBjb25zb2xlLmxvZygnVXNlciBwYXRjaGVkJywgdXNlcilcbiAgICBhd2FpdCBsb2FkQXZhdGFyRm9yVXBkYXRlZFVzZXIodXNlcilcbiAgICBfdXBkYXRlVXNlcm5hbWUodXNlci5pZCwgdXNlci5uYW1lKVxuXG4gICAgY29uc3QgZWlkID0gZ2V0RWlkKHVzZXIuaWQpXG4gICAgY29uc29sZS5sb2coJ2FkZGluZyB1c2VybmFtZSBjb21wb25lbnQgdG8gdXNlcjogJyArIHVzZXIubmFtZSArICcgZWlkOiAnICsgZWlkKVxuICAgIGlmIChlaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFoYXNDb21wb25lbnQoZWlkLCBVc2VyTmFtZUNvbXBvbmVudCkpIHtcbiAgICAgICAgYWRkQ29tcG9uZW50KGVpZCwgVXNlck5hbWVDb21wb25lbnQsIHsgdXNlcm5hbWU6IHVzZXIubmFtZSB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0Q29tcG9uZW50KGVpZCwgVXNlck5hbWVDb21wb25lbnQpLnVzZXJuYW1lID0gdXNlci5uYW1lXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGZVc2VyLmlkLnZhbHVlID09PSB1c2VyLmlkKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChVc2VyQWN0aW9uLmNsZWFyTGF5ZXJVc2VycygpKVxuICAgICAgaWYgKHNlbGZVc2VyLmNoYW5uZWxJbnN0YW5jZUlkLnZhbHVlICE9PSB1c2VyLmNoYW5uZWxJbnN0YW5jZUlkKVxuICAgICAgICBzdG9yZS5kaXNwYXRjaChVc2VyQWN0aW9uLmNsZWFyQ2hhbm5lbExheWVyVXNlcnMoKSlcbiAgICAgIHN0b3JlLmRpc3BhdGNoKEF1dGhBY3Rpb24udXNlclVwZGF0ZWQodXNlcikpXG4gICAgICBpZiAodXNlci5wYXJ0eUlkKSB7XG4gICAgICAgIC8vIHNldFJlbGF0aW9uc2hpcCgncGFydHknLCB1c2VyLnBhcnR5SWQpO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXIuaW5zdGFuY2VJZCAhPT0gc2VsZlVzZXIuaW5zdGFuY2VJZC52YWx1ZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgICBsZXQgcXVlcnkgPSBwYXJzZWQuc2VhcmNoUGFyYW1zXG4gICAgICAgIHF1ZXJ5LnNldCgnaW5zdGFuY2VJZCcsIHVzZXIuaW5zdGFuY2VJZClcbiAgICAgICAgcGFyc2VkLnNlYXJjaCA9IHF1ZXJ5LnRvU3RyaW5nKClcbiAgICAgICAgaWYgKGhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgcGFyc2VkLnRvU3RyaW5nKCkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHdvcmxkID0gRW5naW5lLmRlZmF1bHRXb3JsZFxuICAgICAgaWYgKHR5cGVvZiB3b3JsZC5sb2NhbENsaWVudEVudGl0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFoYXNDb21wb25lbnQod29ybGQubG9jYWxDbGllbnRFbnRpdHksIFByb3hpbWl0eUNvbXBvbmVudCwgd29ybGQpICYmIGlzQm90KHdpbmRvdykpIHtcbiAgICAgICAgICBhZGRDb21wb25lbnQoXG4gICAgICAgICAgICB3b3JsZC5sb2NhbENsaWVudEVudGl0eSxcbiAgICAgICAgICAgIFByb3hpbWl0eUNvbXBvbmVudCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdXNlcnNJblJhbmdlOiBbXSxcbiAgICAgICAgICAgICAgdXNlcnNJbkludGltYXRlUmFuZ2U6IFtdLFxuICAgICAgICAgICAgICB1c2Vyc0luSGFyYXNzbWVudFJhbmdlOiBbXSxcbiAgICAgICAgICAgICAgdXNlcnNMb29raW5nVG93YXJkczogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3b3JsZFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0NvbXBvbmVudCh3b3JsZC5sb2NhbENsaWVudEVudGl0eSwgV2ViQ2FtSW5wdXRDb21wb25lbnQsIHdvcmxkKSkge1xuICAgICAgICAgIGFkZENvbXBvbmVudChcbiAgICAgICAgICAgIHdvcmxkLmxvY2FsQ2xpZW50RW50aXR5LFxuICAgICAgICAgICAgV2ViQ2FtSW5wdXRDb21wb25lbnQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVtb3Rpb25zOiBbXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdvcmxkXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCdhZGRlZCB3ZWIgY2FtIGlucHV0IGNvbXBvbmVudCB0byBsb2NhbCBjbGllbnQnKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodXNlci5jaGFubmVsSW5zdGFuY2VJZCAhPSBudWxsICYmIHVzZXIuY2hhbm5lbEluc3RhbmNlSWQgPT09IHNlbGZVc2VyLmNoYW5uZWxJbnN0YW5jZUlkLnZhbHVlKVxuICAgICAgICBzdG9yZS5kaXNwYXRjaChVc2VyQWN0aW9uLmFkZGVkQ2hhbm5lbExheWVyVXNlcih1c2VyKSlcbiAgICAgIGlmICh1c2VyLmluc3RhbmNlSWQgIT0gbnVsbCAmJiB1c2VyLmluc3RhbmNlSWQgPT09IHNlbGZVc2VyLmluc3RhbmNlSWQudmFsdWUpIHtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goVXNlckFjdGlvbi5hZGRlZExheWVyVXNlcih1c2VyKSlcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goVXNlckFjdGlvbi5kaXNwbGF5VXNlclRvYXN0KHVzZXIsIHsgdXNlckFkZGVkOiB0cnVlIH0pKVxuICAgICAgfVxuICAgICAgaWYgKHVzZXIuaW5zdGFuY2VJZCAhPT0gc2VsZlVzZXIuaW5zdGFuY2VJZC52YWx1ZSkge1xuICAgICAgICBzdG9yZS5kaXNwYXRjaChVc2VyQWN0aW9uLnJlbW92ZWRMYXllclVzZXIodXNlcikpXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKFVzZXJBY3Rpb24uZGlzcGxheVVzZXJUb2FzdCh1c2VyLCB7IHVzZXJSZW1vdmVkOiB0cnVlIH0pKVxuICAgICAgfVxuICAgICAgaWYgKHVzZXIuY2hhbm5lbEluc3RhbmNlSWQgIT09IHNlbGZVc2VyLmNoYW5uZWxJbnN0YW5jZUlkLnZhbHVlKVxuICAgICAgICBzdG9yZS5kaXNwYXRjaChVc2VyQWN0aW9uLnJlbW92ZWRDaGFubmVsTGF5ZXJVc2VyKHVzZXIpKVxuICAgIH1cbiAgfSlcbiAgY2xpZW50LnNlcnZpY2UoJ2xvY2F0aW9uLWJhbicpLm9uKCdjcmVhdGVkJywgYXN5bmMgKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gU3RvcmUuc3RvcmVcbiAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCkgYXMgYW55XG4gICAgY29uc3Qgc2VsZlVzZXIgPSBhY2Nlc3NBdXRoU3RhdGUoKS51c2VyXG4gICAgY29uc3QgcGFydHkgPSBhY2Nlc3NQYXJ0eVN0YXRlKCkucGFydHkudmFsdWVcbiAgICBjb25zdCBzZWxmUGFydHlVc2VyID1cbiAgICAgIHBhcnR5ICYmIHBhcnR5LnBhcnR5VXNlcnMgPyBwYXJ0eS5wYXJ0eVVzZXJzLmZpbmQoKHBhcnR5VXNlcikgPT4gcGFydHlVc2VyLnVzZXJJZCA9PT0gc2VsZlVzZXIuaWQudmFsdWUpIDoge31cbiAgICBjb25zdCBjdXJyZW50TG9jYXRpb24gPSBhY2Nlc3NMb2NhdGlvblN0YXRlKCkuY3VycmVudExvY2F0aW9uLmxvY2F0aW9uXG4gICAgY29uc3QgbG9jYXRpb25CYW4gPSBwYXJhbXMubG9jYXRpb25CYW5cbiAgICBpZiAoc2VsZlVzZXIuaWQudmFsdWUgPT09IGxvY2F0aW9uQmFuLnVzZXJJZCAmJiBjdXJyZW50TG9jYXRpb24uaWQudmFsdWUgPT09IGxvY2F0aW9uQmFuLmxvY2F0aW9uSWQpIHtcbiAgICAgIC8vIFRPRE86IERlY291cGxlIGFuZCByZWVuYWJsZSBtZSFcbiAgICAgIC8vIGVuZFZpZGVvQ2hhdCh7IGxlZnRQYXJ0eTogdHJ1ZSB9KTtcbiAgICAgIC8vIGxlYXZlKHRydWUpO1xuICAgICAgaWYgKHNlbGZQYXJ0eVVzZXIuaWQgIT0gbnVsbCkge1xuICAgICAgICBhd2FpdCBjbGllbnQuc2VydmljZSgncGFydHktdXNlcicpLnJlbW92ZShzZWxmUGFydHlVc2VyLmlkKVxuICAgICAgfVxuICAgICAgY29uc3QgdXNlciA9IHJlc29sdmVVc2VyKGF3YWl0IGNsaWVudC5zZXJ2aWNlKCd1c2VyJykuZ2V0KHNlbGZVc2VyLmlkLnZhbHVlKSlcbiAgICAgIHN0b3JlLmRpc3BhdGNoKEF1dGhBY3Rpb24udXNlclVwZGF0ZWQodXNlcikpXG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbImJpbmQiLCJyZXF1aXJlJCQwIiwidXRpbHMiLCJidWlsZFVSTCIsImVuY29kZSIsIkludGVyY2VwdG9yTWFuYWdlciIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJlbmhhbmNlRXJyb3IiLCJjcmVhdGVFcnJvciIsInNldHRsZSIsImNvb2tpZXMiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1aXJlJCQxIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsIkNhbmNlbCIsInJlcXVpcmUkJDIiLCJyZXF1aXJlJCQzIiwicmVxdWlyZSQkNCIsInJlcXVpcmUkJDUiLCJyZXF1aXJlJCQ2IiwicmVxdWlyZSQkNyIsImRlZmF1bHRzIiwicmVxdWlyZSQkOCIsInJlcXVpcmUkJDkiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJkaXNwYXRjaFJlcXVlc3QiLCJtZXJnZUNvbmZpZyIsInZhbGlkYXRvcnMiLCJ2YWxpZGF0b3IiLCJBeGlvcyIsImF4aW9zIiwicmVxdWlyZSQkMTAiLCJheGlvc01vZHVsZSJdLCJtYXBwaW5ncyI6IndXQWUyQixPQU1YLFdBQWEsRUFBVyxFQUFPLEVBQWtCLE1BQ3ZELEdBQWUsR0FBSSxHQUFjLFlBQzFCLFVBQVUsRUFBTSxJQUFTLEdB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
