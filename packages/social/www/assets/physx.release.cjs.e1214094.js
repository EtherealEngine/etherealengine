var Ei=(K,j)=>()=>(j||K((j={exports:{}}).exports,j),j.exports);var Ti=Ei((We,st)=>{var at=function(){var K=typeof document!="undefined"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename!="undefined"&&(K=K||__filename),function(j){j=j||{};var e=typeof j!="undefined"?j:{},ct,dt;e.ready=new Promise(function(t,r){ct=t,dt=r}),Object.getOwnPropertyDescriptor(e.ready,"_main")||(Object.defineProperty(e.ready,"_main",{configurable:!0,get:function(){i("You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_main",{configurable:!0,set:function(){i("You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_malloc")||(Object.defineProperty(e.ready,"_malloc",{configurable:!0,get:function(){i("You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_malloc",{configurable:!0,set:function(){i("You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_free")||(Object.defineProperty(e.ready,"_free",{configurable:!0,get:function(){i("You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_free",{configurable:!0,set:function(){i("You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_stackSave")||(Object.defineProperty(e.ready,"_stackSave",{configurable:!0,get:function(){i("You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_stackSave",{configurable:!0,set:function(){i("You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_stackRestore")||(Object.defineProperty(e.ready,"_stackRestore",{configurable:!0,get:function(){i("You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_stackRestore",{configurable:!0,set:function(){i("You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_stackAlloc")||(Object.defineProperty(e.ready,"_stackAlloc",{configurable:!0,get:function(){i("You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_stackAlloc",{configurable:!0,set:function(){i("You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"___data_end")||(Object.defineProperty(e.ready,"___data_end",{configurable:!0,get:function(){i("You are getting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"___data_end",{configurable:!0,set:function(){i("You are setting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"___wasm_call_ctors")||(Object.defineProperty(e.ready,"___wasm_call_ctors",{configurable:!0,get:function(){i("You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"___wasm_call_ctors",{configurable:!0,set:function(){i("You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_fflush")||(Object.defineProperty(e.ready,"_fflush",{configurable:!0,get:function(){i("You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_fflush",{configurable:!0,set:function(){i("You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"___errno_location")||(Object.defineProperty(e.ready,"___errno_location",{configurable:!0,get:function(){i("You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"___errno_location",{configurable:!0,set:function(){i("You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_htons")||(Object.defineProperty(e.ready,"_htons",{configurable:!0,get:function(){i("You are getting _htons on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_htons",{configurable:!0,set:function(){i("You are setting _htons on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_ntohs")||(Object.defineProperty(e.ready,"_ntohs",{configurable:!0,get:function(){i("You are getting _ntohs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_ntohs",{configurable:!0,set:function(){i("You are setting _ntohs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_memcpy")||(Object.defineProperty(e.ready,"_memcpy",{configurable:!0,get:function(){i("You are getting _memcpy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_memcpy",{configurable:!0,set:function(){i("You are setting _memcpy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_htonl")||(Object.defineProperty(e.ready,"_htonl",{configurable:!0,get:function(){i("You are getting _htonl on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_htonl",{configurable:!0,set:function(){i("You are setting _htonl on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_emscripten_main_thread_process_queued_calls")||(Object.defineProperty(e.ready,"_emscripten_main_thread_process_queued_calls",{configurable:!0,get:function(){i("You are getting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_emscripten_main_thread_process_queued_calls",{configurable:!0,set:function(){i("You are setting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"onRuntimeInitialized")||(Object.defineProperty(e.ready,"onRuntimeInitialized",{configurable:!0,get:function(){i("You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"onRuntimeInitialized",{configurable:!0,set:function(){i("You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}));var ae={},Q;for(Q in e)e.hasOwnProperty(Q)&&(ae[Q]=e[Q]);var Re=function(t,r){throw r},Pe=!1,$=!1,we=!1,ft=!1;if(Pe=typeof window=="object",$=typeof importScripts=="function",we=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",ft=!Pe&&!we&&!$,e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");var M="";function Gt(t){return e.locateFile?e.locateFile(t,M):M+t}var De,se,$e,Ye;if(we)$?M=require("path").dirname(M)+"/":M=__dirname+"/",De=function(r,n){return $e||($e=require("fs")),Ye||(Ye=require("path")),r=Ye.normalize(r),$e.readFileSync(r,n?null:"utf8")},se=function(r){var n=De(r,!0);return n.buffer||(n=new Uint8Array(n)),E(n.buffer),n},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),process.on("uncaughtException",function(t){if(!(t instanceof Wt))throw t}),process.on("unhandledRejection",i),Re=function(t){process.exit(t)},e.inspect=function(){return"[Emscripten Module object]"};else if(ft)typeof read!="undefined"&&(De=function(r){return read(r)}),se=function(r){var n;return typeof readbuffer=="function"?new Uint8Array(readbuffer(r)):(n=read(r,"binary"),E(typeof n=="object"),n)},typeof scriptArgs!="undefined"&&scriptArgs,typeof quit=="function"&&(Re=function(t){quit(t)}),typeof print!="undefined"&&(typeof console=="undefined"&&(console={}),console.log=print,console.warn=console.error=typeof printErr!="undefined"?printErr:print);else if(Pe||$)$?M=self.location.href:document.currentScript&&(M=document.currentScript.src),K&&(M=K),M.indexOf("blob:")!==0?M=M.substr(0,M.lastIndexOf("/")+1):M="",De=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.send(null),n.responseText},$&&(se=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)});else throw new Error("environment detection error");var ce=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);for(Q in ae)ae.hasOwnProperty(Q)&&(e[Q]=ae[Q]);ae=null,e.arguments,Object.getOwnPropertyDescriptor(e,"arguments")||Object.defineProperty(e,"arguments",{configurable:!0,get:function(){i("Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),e.thisProgram,Object.getOwnPropertyDescriptor(e,"thisProgram")||Object.defineProperty(e,"thisProgram",{configurable:!0,get:function(){i("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),e.quit&&(Re=e.quit),Object.getOwnPropertyDescriptor(e,"quit")||Object.defineProperty(e,"quit",{configurable:!0,get:function(){i("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),E(typeof e.memoryInitializerPrefixURL=="undefined","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),E(typeof e.pthreadMainPrefixURL=="undefined","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),E(typeof e.cdInitializerPrefixURL=="undefined","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),E(typeof e.filePackagePrefixURL=="undefined","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),E(typeof e.read=="undefined","Module.read option was removed (modify read_ in JS)"),E(typeof e.readAsync=="undefined","Module.readAsync option was removed (modify readAsync in JS)"),E(typeof e.readBinary=="undefined","Module.readBinary option was removed (modify readBinary in JS)"),E(typeof e.setWindowTitle=="undefined","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),E(typeof e.TOTAL_MEMORY=="undefined","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),Object.getOwnPropertyDescriptor(e,"read")||Object.defineProperty(e,"read",{configurable:!0,get:function(){i("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(e,"readAsync")||Object.defineProperty(e,"readAsync",{configurable:!0,get:function(){i("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(e,"readBinary")||Object.defineProperty(e,"readBinary",{configurable:!0,get:function(){i("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(e,"setWindowTitle")||Object.defineProperty(e,"setWindowTitle",{configurable:!0,get:function(){i("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}});function N(t){N.shown||(N.shown={}),N.shown[t]||(N.shown[t]=1,w(t))}var de;e.wasmBinary&&(de=e.wasmBinary),Object.getOwnPropertyDescriptor(e,"wasmBinary")||Object.defineProperty(e,"wasmBinary",{configurable:!0,get:function(){i("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}});var be;e.noExitRuntime&&(be=e.noExitRuntime),Object.getOwnPropertyDescriptor(e,"noExitRuntime")||Object.defineProperty(e,"noExitRuntime",{configurable:!0,get:function(){i("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),typeof WebAssembly!="object"&&i("No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.");var Y,Bt=new WebAssembly.Table({initial:4449,maximum:4449+0,element:"anyfunc"}),Ae=!1;function E(t,r){t||i("Assertion failed: "+r)}var lt=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):void 0;function ut(t,r,n){for(var o=r+n,a=r;t[a]&&!(a>=o);)++a;if(a-r>16&&t.subarray&&lt)return lt.decode(t.subarray(r,a));for(var d="";r<a;){var f=t[r++];if(!(f&128)){d+=String.fromCharCode(f);continue}var s=t[r++]&63;if((f&224)==192){d+=String.fromCharCode((f&31)<<6|s);continue}var c=t[r++]&63;if((f&240)==224?f=(f&15)<<12|s<<6|c:((f&248)!=240&&N("Invalid UTF-8 leading byte 0x"+f.toString(16)+" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!"),f=(f&7)<<18|s<<12|c<<6|t[r++]&63),f<65536)d+=String.fromCharCode(f);else{var u=f-65536;d+=String.fromCharCode(55296|u>>10,56320|u&1023)}}return d}function _t(t,r){return t?ut(D,t,r):""}function zt(t,r,n,o){if(!(o>0))return 0;for(var a=n,d=n+o-1,f=0;f<t.length;++f){var s=t.charCodeAt(f);if(s>=55296&&s<=57343){var c=t.charCodeAt(++f);s=65536+((s&1023)<<10)|c&1023}if(s<=127){if(n>=d)break;r[n++]=s}else if(s<=2047){if(n+1>=d)break;r[n++]=192|s>>6,r[n++]=128|s&63}else if(s<=65535){if(n+2>=d)break;r[n++]=224|s>>12,r[n++]=128|s>>6&63,r[n++]=128|s&63}else{if(n+3>=d)break;s>=2097152&&N("Invalid Unicode code point 0x"+s.toString(16)+" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF)."),r[n++]=240|s>>18,r[n++]=128|s>>12&63,r[n++]=128|s>>6&63,r[n++]=128|s&63}}return r[n]=0,n-a}function Zt(t,r,n){return E(typeof n=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),zt(t,D,r,n)}function qt(t){for(var r=0,n=0;n<t.length;++n){var o=t.charCodeAt(n);o>=55296&&o<=57343&&(o=65536+((o&1023)<<10)|t.charCodeAt(++n)&1023),o<=127?++r:o<=2047?r+=2:o<=65535?r+=3:r+=4}return r}var pt=typeof TextDecoder!="undefined"?new TextDecoder("utf-16le"):void 0;function Jt(t,r){E(t%2==0,"Pointer passed to UTF16ToString must be aligned to two bytes!");for(var n=t,o=n>>1,a=o+r/2;!(o>=a)&&fe[o];)++o;if(n=o<<1,n-t>32&&pt)return pt.decode(D.subarray(t,n));for(var d=0,f="";;){var s=G[t+d*2>>1];if(s==0||d==r/2)return f;++d,f+=String.fromCharCode(s)}}function Kt(t,r,n){if(E(r%2==0,"Pointer passed to stringToUTF16 must be aligned to two bytes!"),E(typeof n=="number","stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),n===void 0&&(n=2147483647),n<2)return 0;n-=2;for(var o=r,a=n<t.length*2?n/2:t.length,d=0;d<a;++d){var f=t.charCodeAt(d);G[r>>1]=f,r+=2}return G[r>>1]=0,r-o}function er(t){return t.length*2}function tr(t,r){E(t%4==0,"Pointer passed to UTF32ToString must be aligned to four bytes!");for(var n=0,o="";!(n>=r/4);){var a=g[t+n*4>>2];if(a==0)break;if(++n,a>=65536){var d=a-65536;o+=String.fromCharCode(55296|d>>10,56320|d&1023)}else o+=String.fromCharCode(a)}return o}function rr(t,r,n){if(E(r%4==0,"Pointer passed to stringToUTF32 must be aligned to four bytes!"),E(typeof n=="number","stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),n===void 0&&(n=2147483647),n<4)return 0;for(var o=r,a=o+n-4,d=0;d<t.length;++d){var f=t.charCodeAt(d);if(f>=55296&&f<=57343){var s=t.charCodeAt(++d);f=65536+((f&1023)<<10)|s&1023}if(g[r>>2]=f,r+=4,r+4>a)break}return g[r>>2]=0,r-o}function nr(t){for(var r=0,n=0;n<t.length;++n){var o=t.charCodeAt(n);o>=55296&&o<=57343&&++n,r+=4}return r}var ve=65536;function ir(t,r){return t%r>0&&(t+=r-t%r),t}var V,me,D,G,fe,g,b,Et,Tt;function Ot(t){V=t,e.HEAP8=me=new Int8Array(t),e.HEAP16=G=new Int16Array(t),e.HEAP32=g=new Int32Array(t),e.HEAPU8=D=new Uint8Array(t),e.HEAPU16=fe=new Uint16Array(t),e.HEAPU32=b=new Uint32Array(t),e.HEAPF32=Et=new Float32Array(t),e.HEAPF64=Tt=new Float64Array(t)}var or=5446832,le=203952,yt=5446832,ar=203792;E(or%16==0,"stack must start aligned"),E(yt%16==0,"heap must start aligned");var Ve=5242880;e.TOTAL_STACK&&E(Ve===e.TOTAL_STACK,"the stack size can no longer be determined at runtime");var ue=e.INITIAL_MEMORY||16777216;Object.getOwnPropertyDescriptor(e,"INITIAL_MEMORY")||Object.defineProperty(e,"INITIAL_MEMORY",{configurable:!0,get:function(){i("Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),E(ue>=Ve,"INITIAL_MEMORY should be larger than TOTAL_STACK, was "+ue+"! (TOTAL_STACK="+Ve+")"),E(typeof Int32Array!="undefined"&&typeof Float64Array!="undefined"&&Int32Array.prototype.subarray!==void 0&&Int32Array.prototype.set!==void 0,"JS engine does not provide full typed array support"),e.wasmMemory?Y=e.wasmMemory:Y=new WebAssembly.Memory({initial:ue/ve,maximum:2147483648/ve}),Y&&(V=Y.buffer),ue=V.byteLength,E(ue%ve==0),E(65536%ve==0),Ot(V),g[ar>>2]=yt;function gt(){E((le&3)==0),b[(le>>2)+1]=34821223,b[(le>>2)+2]=2310721022,g[0]=1668509029}function ee(){var t=b[(le>>2)+1],r=b[(le>>2)+2];(t!=34821223||r!=2310721022)&&i("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x"+r.toString(16)+" "+t.toString(16)),g[0]!==1668509029&&i("Runtime error: The application has corrupted its heap memory area (address zero)!")}(function(){var t=new Int16Array(1),r=new Int8Array(t.buffer);if(t[0]=25459,r[0]!==115||r[1]!==99)throw"Runtime error: expected the system to be little-endian!"})();function Me(t){for(;t.length>0;){var r=t.shift();if(typeof r=="function"){r(e);continue}var n=r.func;typeof n=="number"?r.arg===void 0?e.dynCall_v(n):e.dynCall_vi(n,r.arg):n(r.arg===void 0?null:r.arg)}}var ht=[],Rt=[],sr=[],Pt=[],Ge=!1,wt=!1;function cr(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)_r(e.preRun.shift());Me(ht)}function dr(){ee(),E(!Ge),Ge=!0,Me(Rt)}function fr(){ee(),Me(sr)}function lr(){ee(),wt=!0}function ur(){if(ee(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)pr(e.postRun.shift());Me(Pt)}function _r(t){ht.unshift(t)}function pr(t){Pt.unshift(t)}E(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),E(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),E(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),E(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var B=0,z=null,_e=null,pe={};function Er(t){B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),t?(E(!pe[t]),pe[t]=1,z===null&&typeof setInterval!="undefined"&&(z=setInterval(function(){if(Ae){clearInterval(z),z=null;return}var r=!1;for(var n in pe)r||(r=!0,w("still waiting on run dependencies:")),w("dependency: "+n);r&&w("(end of list)")},1e4))):w("warning: run dependency added without ID")}function Tr(t){if(B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),t?(E(pe[t]),delete pe[t]):w("warning: run dependency removed without ID"),B==0&&(z!==null&&(clearInterval(z),z=null),_e)){var r=_e;_e=null,r()}}e.preloadedImages={},e.preloadedAudios={};function i(t){e.onAbort&&e.onAbort(t),t+="",ce(t),w(t),Ae=!0;var r="abort("+t+") at "+Dr();throw t=r,new WebAssembly.RuntimeError(t)}var F={error:function(){i("Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1")},init:function(){F.error()},createDataFile:function(){F.error()},createPreloadedFile:function(){F.error()},createLazyFile:function(){F.error()},open:function(){F.error()},mkdev:function(){F.error()},registerDevice:function(){F.error()},analyzePath:function(){F.error()},loadFilesFromDB:function(){F.error()},ErrnoError:function(){F.error()}};e.FS_createDataFile=F.createDataFile,e.FS_createPreloadedFile=F.createPreloadedFile;function Dt(t,r){return String.prototype.startsWith?t.startsWith(r):t.indexOf(r)===0}var Or="data:application/octet-stream;base64,";function bt(t){return Dt(t,Or)}var yr="file://";function At(t){return Dt(t,yr)}function l(t,r){return function(){var n=t,o=r;return r||(o=e.asm),E(Ge,"native function `"+n+"` called before runtime initialization"),E(!wt,"native function `"+n+"` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)"),o[t]||E(o[t],"exported native function `"+n+"` not found"),o[t].apply(null,arguments)}}var X="physx.release.wasm";bt(X)||(X=Gt(X));function vt(){try{if(de)return new Uint8Array(de);if(se)return se(X);throw"both async and sync fetching of the wasm failed"}catch(t){i(t)}}function gr(){return!de&&(Pe||$)&&typeof fetch=="function"&&!At(X)?fetch(X,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+X+"'";return t.arrayBuffer()}).catch(function(){return vt()}):new Promise(function(t,r){t(vt())})}function hr(){var t={env:Qt,wasi_snapshot_preview1:Qt};function r(s,c){var u=s.exports;e.asm=u,Tr("wasm-instantiate")}Er("wasm-instantiate");var n=e;function o(s){E(e===n,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),n=null,r(s.instance)}function a(s){return gr().then(function(c){return WebAssembly.instantiate(c,t)}).then(s,function(c){w("failed to asynchronously prepare wasm: "+c),i(c)})}function d(){if(!de&&typeof WebAssembly.instantiateStreaming=="function"&&!bt(X)&&!At(X)&&typeof fetch=="function")fetch(X,{credentials:"same-origin"}).then(function(s){var c=WebAssembly.instantiateStreaming(s,t);return c.then(o,function(u){return w("wasm streaming compile failed: "+u),w("falling back to ArrayBuffer instantiation"),a(o)})});else return a(o)}if(e.instantiateWasm)try{var f=e.instantiateWasm(t,r);return f}catch(s){return w("Module.instantiateWasm callback failed with error: "+s),!1}return d(),{}}Rt.push({func:function(){di()}});function Rr(t){return N("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling"),t}function Pr(t){var r=/\b_Z[\w\d_]+/g;return t.replace(r,function(n){var o=Rr(n);return n===o?n:o+" ["+n+"]"})}function wr(){var t=new Error;if(!t.stack){try{throw new Error}catch(r){t=r}if(!t.stack)return"(no stack trace available)"}return t.stack.toString()}function Dr(){var t=wr();return e.extraStackTrace&&(t+=`
`+e.extraStackTrace()),Pr(t)}function br(){i("stack overflow")}var Ar=48,vr=57;function Se(t){if(t===void 0)return"_unknown";t=t.replace(/[^a-zA-Z0-9_]/g,"$");var r=t.charCodeAt(0);return r>=Ar&&r<=vr?"_"+t:t}function Ee(t,r){return t=Se(t),new Function("body","return function "+t+`() {
    "use strict";    return body.apply(this, arguments);
};
`)(r)}var Be=[],S=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function mr(){for(var t=0,r=5;r<S.length;++r)S[r]!==void 0&&++t;return t}function Mr(){for(var t=5;t<S.length;++t)if(S[t]!==void 0)return S[t];return null}function Sr(){e.count_emval_handles=mr,e.get_first_emval=Mr}function Te(t){switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:{var r=Be.length?Be.pop():S.length;return S[r]={refcount:1,value:t},r}}}function Fe(t,r){var n=Ee(r,function(o){this.name=r,this.message=o;var a=new Error(o).stack;a!==void 0&&(this.stack=this.toString()+`
`+a.replace(/^Error(:[^\n]*)?\n/,""))});return n.prototype=Object.create(t.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return this.message===void 0?this.name:this.name+": "+this.message},n}var mt=void 0;function Fr(){for(var t=new Array(256),r=0;r<256;++r)t[r]=String.fromCharCode(r);Mt=t}var Mt=void 0;function R(t){for(var r="",n=t;D[n];)r+=Mt[D[n++]];return r}function Ir(){return Object.keys(x).length}function Cr(){var t=[];for(var r in x)x.hasOwnProperty(r)&&t.push(x[r]);return t}var Oe=[];function ze(){for(;Oe.length;){var t=Oe.pop();t.$$.deleteScheduled=!1,t.delete()}}var ye=void 0;function jr(t){ye=t,Oe.length&&ye&&ye(ze)}function Xr(){e.getInheritedInstanceCount=Ir,e.getLiveInheritedInstances=Cr,e.flushPendingDeletes=ze,e.setDelayFunction=jr}var x={},te=void 0;function T(t){throw new te(t)}function Ze(t,r){for(r===void 0&&T("ptr should not be undefined");t.baseClass;)r=t.upcast(r),t=t.baseClass;return r}function Ur(t,r,n){r=Ze(t,r),x.hasOwnProperty(r)?T("Tried to register registered instance: "+r):x[r]=n}function qe(t){return t||T("Cannot use deleted val. handle = "+t),S[t].value}var Z={};function St(t){var r=fi(t),n=R(r);return W(r),n}function Ie(t,r){var n=Z[t];return n===void 0&&T(r+" has unknown type "+St(t)),n}function Nr(t,r){r=Ze(t,r),x.hasOwnProperty(r)?delete x[r]:T("Tried to unregister unregistered instance: "+r)}function Ce(t){}var Je=!1;function xr(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}function Ft(t){t.count.value-=1;var r=t.count.value===0;r&&xr(t)}function re(t){return typeof FinalizationGroup=="undefined"?(re=function(r){return r},t):(Je=new FinalizationGroup(function(r){for(var n=r.next();!n.done;n=r.next()){var o=n.value;o.ptr?Ft(o):console.warn("object already deleted: "+o.ptr)}}),re=function(r){return Je.register(r,r.$$,r.$$),r},Ce=function(r){Je.unregister(r.$$)},re(t))}function Hr(t,r,n){t=R(t),r=Ie(r,"wrapper"),n=qe(n);var o=[].slice,a=r.registeredClass,d=a.instancePrototype,f=a.baseClass,s=f.instancePrototype,c=a.baseClass.constructor,u=Ee(t,function(){a.baseClass.pureVirtualFunctions.forEach(function(p){if(this[p]===s[p])throw new mt("Pure virtual function "+p+" must be implemented in JavaScript")}.bind(this)),Object.defineProperty(this,"__parent",{value:d}),this.__construct.apply(this,o.call(arguments))});d.__construct=function(){this===d&&T("Pass correct 'this' to __construct");var O=c.implement.apply(void 0,[this].concat(o.call(arguments)));Ce(O);var y=O.$$;O.notifyOnDestruction(),y.preservePointerOnDelete=!0,Object.defineProperties(this,{$$:{value:y}}),re(this),Ur(a,y.ptr,this)},d.__destruct=function(){this===d&&T("Pass correct 'this' to __destruct"),Ce(this),Nr(a,this.$$.ptr)},u.prototype=Object.create(d);for(var _ in n)u.prototype[_]=n[_];return Te(u)}var je={};function ge(t){for(;t.length;){var r=t.pop(),n=t.pop();n(r)}}function he(t){return this.fromWireType(b[t>>2])}var ne={},Xe={},It=void 0;function Ue(t){throw new It(t)}function I(t,r,n){t.forEach(function(s){Xe[s]=r});function o(s){var c=n(s);c.length!==t.length&&Ue("Mismatched type converter count");for(var u=0;u<t.length;++u)U(t[u],c[u])}var a=new Array(r.length),d=[],f=0;r.forEach(function(s,c){Z.hasOwnProperty(s)?a[c]=Z[s]:(d.push(s),ne.hasOwnProperty(s)||(ne[s]=[]),ne[s].push(function(){a[c]=Z[s],++f,f===d.length&&o(a)}))}),d.length===0&&o(a)}function Qr(t){var r=je[t];delete je[t];var n=r.rawConstructor,o=r.rawDestructor,a=r.fields,d=a.map(function(f){return f.getterReturnType}).concat(a.map(function(f){return f.setterArgumentType}));I([t],d,function(f){var s={};return a.forEach(function(c,u){var _=c.fieldName,p=f[u],O=c.getter,y=c.getterContext,h=f[u+a.length],P=c.setter,v=c.setterContext;s[_]={read:function(m){return p.fromWireType(O(y,m))},write:function(m,J){var C=[];P(v,m,h.toWireType(C,J)),ge(C)}}}),[{name:r.name,fromWireType:function(c){var u={};for(var _ in s)u[_]=s[_].read(c);return o(c),u},toWireType:function(c,u){for(var _ in s)if(!(_ in u))throw new TypeError('Missing field:  "'+_+'"');var p=n();for(_ in s)s[_].write(p,u[_]);return c!==null&&c.push(o,p),p},argPackAdvance:8,readValueFromPointer:he,destructorFunction:o}]})}function Ne(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+t)}}function U(t,r,n){if(n=n||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var o=r.name;if(t||T('type "'+o+'" must have a positive integer typeid pointer'),Z.hasOwnProperty(t)){if(n.ignoreDuplicateRegistrations)return;T("Cannot register type '"+o+"' twice")}if(Z[t]=r,delete Xe[t],ne.hasOwnProperty(t)){var a=ne[t];delete ne[t],a.forEach(function(d){d()})}}function Lr(t,r,n,o,a){var d=Ne(n);r=R(r),U(t,{name:r,fromWireType:function(f){return!!f},toWireType:function(f,s){return s?o:a},argPackAdvance:8,readValueFromPointer:function(f){var s;if(n===1)s=me;else if(n===2)s=G;else if(n===4)s=g;else throw new TypeError("Unknown boolean type size: "+r);return this.fromWireType(s[f>>d])},destructorFunction:null})}function kr(t){if(!(this instanceof L)||!(t instanceof L))return!1;for(var r=this.$$.ptrType.registeredClass,n=this.$$.ptr,o=t.$$.ptrType.registeredClass,a=t.$$.ptr;r.baseClass;)n=r.upcast(n),r=r.baseClass;for(;o.baseClass;)a=o.upcast(a),o=o.baseClass;return r===o&&n===a}function Wr(t){return{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType}}function Ke(t){function r(n){return n.$$.ptrType.registeredClass.name}T(r(t)+" instance already deleted")}function $r(){if(this.$$.ptr||Ke(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t=re(Object.create(Object.getPrototypeOf(this),{$$:{value:Wr(this.$$)}}));return t.$$.count.value+=1,t.$$.deleteScheduled=!1,t}function Yr(){this.$$.ptr||Ke(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&T("Object already scheduled for deletion"),Ce(this),Ft(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function Vr(){return!this.$$.ptr}function Gr(){return this.$$.ptr||Ke(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&T("Object already scheduled for deletion"),Oe.push(this),Oe.length===1&&ye&&ye(ze),this.$$.deleteScheduled=!0,this}function Br(){L.prototype.isAliasOf=kr,L.prototype.clone=$r,L.prototype.delete=Yr,L.prototype.isDeleted=Vr,L.prototype.deleteLater=Gr}function L(){}var Ct={};function et(t,r,n){if(t[r].overloadTable===void 0){var o=t[r];t[r]=function(){return t[r].overloadTable.hasOwnProperty(arguments.length)||T("Function '"+n+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+t[r].overloadTable+")!"),t[r].overloadTable[arguments.length].apply(this,arguments)},t[r].overloadTable=[],t[r].overloadTable[o.argCount]=o}}function tt(t,r,n){e.hasOwnProperty(t)?((n===void 0||e[t].overloadTable!==void 0&&e[t].overloadTable[n]!==void 0)&&T("Cannot register public name '"+t+"' twice"),et(e,t,t),e.hasOwnProperty(n)&&T("Cannot register multiple overloads of a function with the same number of arguments ("+n+")!"),e[t].overloadTable[n]=r):(e[t]=r,n!==void 0&&(e[t].numArguments=n))}function zr(t,r,n,o,a,d,f,s){this.name=t,this.constructor=r,this.instancePrototype=n,this.rawDestructor=o,this.baseClass=a,this.getActualType=d,this.upcast=f,this.downcast=s,this.pureVirtualFunctions=[]}function xe(t,r,n){for(;r!==n;)r.upcast||T("Expected null or instance of "+n.name+", got an instance of "+r.name),t=r.upcast(t),r=r.baseClass;return t}function Zr(t,r){if(r===null)return this.isReference&&T("null is not a valid "+this.name),0;r.$$||T('Cannot pass "'+ie(r)+'" as a '+this.name),r.$$.ptr||T("Cannot pass deleted object as a pointer of type "+this.name);var n=r.$$.ptrType.registeredClass,o=xe(r.$$.ptr,n,this.registeredClass);return o}function qr(t,r){var n;if(r===null)return this.isReference&&T("null is not a valid "+this.name),this.isSmartPointer?(n=this.rawConstructor(),t!==null&&t.push(this.rawDestructor,n),n):0;r.$$||T('Cannot pass "'+ie(r)+'" as a '+this.name),r.$$.ptr||T("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&r.$$.ptrType.isConst&&T("Cannot convert argument of type "+(r.$$.smartPtrType?r.$$.smartPtrType.name:r.$$.ptrType.name)+" to parameter type "+this.name);var o=r.$$.ptrType.registeredClass;if(n=xe(r.$$.ptr,o,this.registeredClass),this.isSmartPointer)switch(r.$$.smartPtr===void 0&&T("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:r.$$.smartPtrType===this?n=r.$$.smartPtr:T("Cannot convert argument of type "+(r.$$.smartPtrType?r.$$.smartPtrType.name:r.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:n=r.$$.smartPtr;break;case 2:if(r.$$.smartPtrType===this)n=r.$$.smartPtr;else{var a=r.clone();n=this.rawShare(n,Te(function(){a.delete()})),t!==null&&t.push(this.rawDestructor,n)}break;default:T("Unsupporting sharing policy")}return n}function Jr(t,r){if(r===null)return this.isReference&&T("null is not a valid "+this.name),0;r.$$||T('Cannot pass "'+ie(r)+'" as a '+this.name),r.$$.ptr||T("Cannot pass deleted object as a pointer of type "+this.name),r.$$.ptrType.isConst&&T("Cannot convert argument of type "+r.$$.ptrType.name+" to parameter type "+this.name);var n=r.$$.ptrType.registeredClass,o=xe(r.$$.ptr,n,this.registeredClass);return o}function Kr(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t}function en(t){this.rawDestructor&&this.rawDestructor(t)}function tn(t){t!==null&&t.delete()}function jt(t,r,n){if(r===n)return t;if(n.baseClass===void 0)return null;var o=jt(t,r,n.baseClass);return o===null?null:n.downcast(o)}function rn(t,r){return r=Ze(t,r),x[r]}function He(t,r){(!r.ptrType||!r.ptr)&&Ue("makeClassHandle requires ptr and ptrType");var n=!!r.smartPtrType,o=!!r.smartPtr;return n!==o&&Ue("Both smartPtrType and smartPtr must be specified"),r.count={value:1},re(Object.create(t,{$$:{value:r}}))}function nn(t){var r=this.getPointee(t);if(!r)return this.destructor(t),null;var n=rn(this.registeredClass,r);if(n!==void 0){if(n.$$.count.value===0)return n.$$.ptr=r,n.$$.smartPtr=t,n.clone();var o=n.clone();return this.destructor(t),o}function a(){return this.isSmartPointer?He(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:r,smartPtrType:this,smartPtr:t}):He(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var d=this.registeredClass.getActualType(r),f=Ct[d];if(!f)return a.call(this);var s;this.isConst?s=f.constPointerType:s=f.pointerType;var c=jt(r,this.registeredClass,s.registeredClass);return c===null?a.call(this):this.isSmartPointer?He(s.registeredClass.instancePrototype,{ptrType:s,ptr:c,smartPtrType:this,smartPtr:t}):He(s.registeredClass.instancePrototype,{ptrType:s,ptr:c})}function on(){H.prototype.getPointee=Kr,H.prototype.destructor=en,H.prototype.argPackAdvance=8,H.prototype.readValueFromPointer=he,H.prototype.deleteObject=tn,H.prototype.fromWireType=nn}function H(t,r,n,o,a,d,f,s,c,u,_){this.name=t,this.registeredClass=r,this.isReference=n,this.isConst=o,this.isSmartPointer=a,this.pointeeType=d,this.sharingPolicy=f,this.rawGetPointee=s,this.rawConstructor=c,this.rawShare=u,this.rawDestructor=_,!a&&r.baseClass===void 0?o?(this.toWireType=Zr,this.destructorFunction=null):(this.toWireType=Jr,this.destructorFunction=null):this.toWireType=qr}function Xt(t,r,n){e.hasOwnProperty(t)||Ue("Replacing nonexistant public symbol"),e[t].overloadTable!==void 0&&n!==void 0?e[t].overloadTable[n]=r:(e[t]=r,e[t].argCount=n)}function A(t,r){t=R(t);function n(d){for(var f=[],s=1;s<t.length;++s)f.push("a"+s);var c="dynCall_"+t+"_"+r,u="return function "+c+"("+f.join(", ")+`) {
`;return u+="    return dynCall(rawFunction"+(f.length?", ":"")+f.join(", ")+`);
`,u+=`};
`,new Function("dynCall","rawFunction",u)(d,r)}var o=e["dynCall_"+t],a=n(o);return typeof a!="function"&&T("unknown function pointer with signature "+t+": "+r),a}var Ut=void 0;function q(t,r){var n=[],o={};function a(d){if(!o[d]&&!Z[d]){if(Xe[d]){Xe[d].forEach(a);return}n.push(d),o[d]=!0}}throw r.forEach(a),new Ut(t+": "+n.map(St).join([", "]))}function an(t,r,n,o,a,d,f,s,c,u,_,p,O){_=R(_),d=A(a,d),s&&(s=A(f,s)),u&&(u=A(c,u)),O=A(p,O);var y=Se(_);tt(y,function(){q("Cannot construct "+_+" due to unbound types",[o])}),I([t,r,n],o?[o]:[],function(h){h=h[0];var P,v;o?(P=h.registeredClass,v=P.instancePrototype):v=L.prototype;var m=Ee(y,function(){if(Object.getPrototypeOf(this)!==J)throw new te("Use 'new' to construct "+_);if(C.constructor_body===void 0)throw new te(_+" has no accessible constructor");var Vt=C.constructor_body[arguments.length];if(Vt===void 0)throw new te("Tried to invoke ctor of "+_+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(C.constructor_body).toString()+") parameters instead!");return Vt.apply(this,arguments)}),J=Object.create(v,{constructor:{value:m}});m.prototype=J;var C=new zr(_,m,J,O,P,d,s,u),pi=new H(_,C,!0,!1,!1),$t=new H(_+"*",C,!1,!1,!1),Yt=new H(_+" const*",C,!1,!0,!1);return Ct[t]={pointerType:$t,constPointerType:Yt},Xt(y,m),[pi,$t,Yt]})}function Nt(t,r){if(!(t instanceof Function))throw new TypeError("new_ called with constructor type "+typeof t+" which is not a function");var n=Ee(t.name||"unknownFunctionName",function(){});n.prototype=t.prototype;var o=new n,a=t.apply(o,r);return a instanceof Object?a:o}function rt(t,r,n,o,a){var d=r.length;d<2&&T("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var f=r[1]!==null&&n!==null,s=!1,c=1;c<r.length;++c)if(r[c]!==null&&r[c].destructorFunction===void 0){s=!0;break}for(var u=r[0].name!=="void",_="",p="",c=0;c<d-2;++c)_+=(c!==0?", ":"")+"arg"+c,p+=(c!==0?", ":"")+"arg"+c+"Wired";var O="return function "+Se(t)+"("+_+`) {
if (arguments.length !== `+(d-2)+`) {
throwBindingError('function `+t+" called with ' + arguments.length + ' arguments, expected "+(d-2)+` args!');
}
`;s&&(O+=`var destructors = [];
`);var y=s?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],P=[T,o,a,ge,r[0],r[1]];f&&(O+="var thisWired = classParam.toWireType("+y+`, this);
`);for(var c=0;c<d-2;++c)O+="var arg"+c+"Wired = argType"+c+".toWireType("+y+", arg"+c+"); // "+r[c+2].name+`
`,h.push("argType"+c),P.push(r[c+2]);if(f&&(p="thisWired"+(p.length>0?", ":"")+p),O+=(u?"var rv = ":"")+"invoker(fn"+(p.length>0?", ":"")+p+`);
`,s)O+=`runDestructors(destructors);
`;else for(var c=f?1:2;c<r.length;++c){var v=c===1?"thisWired":"arg"+(c-2)+"Wired";r[c].destructorFunction!==null&&(O+=v+"_dtor("+v+"); // "+r[c].name+`
`,h.push(v+"_dtor"),P.push(r[c].destructorFunction))}u&&(O+=`var ret = retType.fromWireType(rv);
return ret;
`),O+=`}
`,h.push(O);var m=Nt(Function,h).apply(null,P);return m}function Qe(t,r){for(var n=[],o=0;o<t;o++)n.push(g[(r>>2)+o]);return n}function sn(t,r,n,o,a,d,f){var s=Qe(n,o);r=R(r),d=A(a,d),I([],[t],function(c){c=c[0];var u=c.name+"."+r;function _(){q("Cannot call "+u+" due to unbound types",s)}var p=c.registeredClass.constructor;return p[r]===void 0?(_.argCount=n-1,p[r]=_):(et(p,r,u),p[r].overloadTable[n-1]=_),I([],s,function(O){var y=[O[0],null].concat(O.slice(1)),h=rt(u,y,null,d,f);return p[r].overloadTable===void 0?(h.argCount=n-1,p[r]=h):p[r].overloadTable[n-1]=h,[]}),[]})}function cn(t,r,n,o,a,d){E(r>0);var f=Qe(r,n);a=A(o,a);var s=[d],c=[];I([],[t],function(u){u=u[0];var _="constructor "+u.name;if(u.registeredClass.constructor_body===void 0&&(u.registeredClass.constructor_body=[]),u.registeredClass.constructor_body[r-1]!==void 0)throw new te("Cannot register multiple constructors with identical number of parameters ("+(r-1)+") for class '"+u.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return u.registeredClass.constructor_body[r-1]=function(){q("Cannot construct "+u.name+" due to unbound types",f)},I([],f,function(p){return u.registeredClass.constructor_body[r-1]=function(){arguments.length!==r-1&&T(_+" called with "+arguments.length+" arguments, expected "+(r-1)),c.length=0,s.length=r;for(var y=1;y<r;++y)s[y]=p[y].toWireType(c,arguments[y-1]);var h=a.apply(null,s);return ge(c),p[0].fromWireType(h)},[]}),[]})}function dn(t,r,n,o,a,d,f,s){var c=Qe(n,o);r=R(r),d=A(a,d),I([],[t],function(u){u=u[0];var _=u.name+"."+r;s&&u.registeredClass.pureVirtualFunctions.push(r);function p(){q("Cannot call "+_+" due to unbound types",c)}var O=u.registeredClass.instancePrototype,y=O[r];return y===void 0||y.overloadTable===void 0&&y.className!==u.name&&y.argCount===n-2?(p.argCount=n-2,p.className=u.name,O[r]=p):(et(O,r,_),O[r].overloadTable[n-2]=p),I([],c,function(h){var P=rt(_,h,u,d,f);return O[r].overloadTable===void 0?(P.argCount=n-2,O[r]=P):O[r].overloadTable[n-2]=P,[]}),[]})}function xt(t,r,n){return t instanceof Object||T(n+' with invalid "this": '+t),t instanceof r.registeredClass.constructor||T(n+' incompatible with "this" of type '+t.constructor.name),t.$$.ptr||T("cannot call emscripten binding method "+n+" on deleted object"),xe(t.$$.ptr,t.$$.ptrType.registeredClass,r.registeredClass)}function fn(t,r,n,o,a,d,f,s,c,u){r=R(r),a=A(o,a),I([],[t],function(_){_=_[0];var p=_.name+"."+r,O={get:function(){q("Cannot access "+p+" due to unbound types",[n,f])},enumerable:!0,configurable:!0};return c?O.set=function(){q("Cannot access "+p+" due to unbound types",[n,f])}:O.set=function(y){T(p+" is a read-only property")},Object.defineProperty(_.registeredClass.instancePrototype,r,O),I([],c?[n,f]:[n],function(y){var h=y[0],P={get:function(){var m=xt(this,_,p+" getter");return h.fromWireType(a(d,m))},enumerable:!0};if(c){c=A(s,c);var v=y[1];P.set=function(m){var J=xt(this,_,p+" setter"),C=[];c(u,J,v.toWireType(C,m)),ge(C)}}return Object.defineProperty(_.registeredClass.instancePrototype,r,P),[]}),[]})}function ln(t,r,n){t=R(t),I([],[r],function(o){return o=o[0],e[t]=o.fromWireType(n),[]})}function nt(t){t>4&&--S[t].refcount==0&&(S[t]=void 0,Be.push(t))}function un(t,r){r=R(r),U(t,{name:r,fromWireType:function(n){var o=S[n].value;return nt(n),o},toWireType:function(n,o){return Te(o)},argPackAdvance:8,readValueFromPointer:he,destructorFunction:null})}function _n(t,r,n){switch(r){case 0:return function(o){var a=n?me:D;return this.fromWireType(a[o])};case 1:return function(o){var a=n?G:fe;return this.fromWireType(a[o>>1])};case 2:return function(o){var a=n?g:b;return this.fromWireType(a[o>>2])};default:throw new TypeError("Unknown integer type: "+t)}}function pn(t,r,n,o){var a=Ne(n);r=R(r);function d(){}d.values={},U(t,{name:r,constructor:d,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,s){return s.value},argPackAdvance:8,readValueFromPointer:_n(r,a,o),destructorFunction:null}),tt(r,d)}function En(t,r,n){var o=Ie(t,"enum");r=R(r);var a=o.constructor,d=Object.create(o.constructor.prototype,{value:{value:n},constructor:{value:Ee(o.name+"_"+r,function(){})}});a.values[n]=d,a[r]=d}function ie(t){if(t===null)return"null";var r=typeof t;return r==="object"||r==="array"||r==="function"?t.toString():""+t}function Tn(t,r){switch(r){case 2:return function(n){return this.fromWireType(Et[n>>2])};case 3:return function(n){return this.fromWireType(Tt[n>>3])};default:throw new TypeError("Unknown float type: "+t)}}function On(t,r,n){var o=Ne(n);r=R(r),U(t,{name:r,fromWireType:function(a){return a},toWireType:function(a,d){if(typeof d!="number"&&typeof d!="boolean")throw new TypeError('Cannot convert "'+ie(d)+'" to '+this.name);return d},argPackAdvance:8,readValueFromPointer:Tn(r,o),destructorFunction:null})}function yn(t,r,n,o,a,d){var f=Qe(r,n);t=R(t),a=A(o,a),tt(t,function(){q("Cannot call "+t+" due to unbound types",f)},r-1),I([],f,function(s){var c=[s[0],null].concat(s.slice(1));return Xt(t,rt(t,c,null,a,d),r-1),[]})}function gn(t,r,n){switch(r){case 0:return n?function(a){return me[a]}:function(a){return D[a]};case 1:return n?function(a){return G[a>>1]}:function(a){return fe[a>>1]};case 2:return n?function(a){return g[a>>2]}:function(a){return b[a>>2]};default:throw new TypeError("Unknown integer type: "+t)}}function hn(t,r,n,o,a){r=R(r),a===-1&&(a=4294967295);var d=Ne(n),f=function(u){return u};if(o===0){var s=32-8*n;f=function(u){return u<<s>>>s}}var c=r.indexOf("unsigned")!=-1;U(t,{name:r,fromWireType:f,toWireType:function(u,_){if(typeof _!="number"&&typeof _!="boolean")throw new TypeError('Cannot convert "'+ie(_)+'" to '+this.name);if(_<o||_>a)throw new TypeError('Passing a number "'+ie(_)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+o+", "+a+"]!");return c?_>>>0:_|0},argPackAdvance:8,readValueFromPointer:gn(r,d,o!==0),destructorFunction:null})}function Rn(t,r,n){var o=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array],a=o[r];function d(f){f=f>>2;var s=b,c=s[f],u=s[f+1];return new a(V,u,c)}n=R(n),U(t,{name:n,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{ignoreDuplicateRegistrations:!0})}function Pn(t,r){r=R(r);var n=r==="std::string";U(t,{name:r,fromWireType:function(o){var a=b[o>>2],d;if(n)for(var f=o+4,s=0;s<=a;++s){var c=o+4+s;if(D[c]==0||s==a){var u=c-f,_=_t(f,u);d===void 0?d=_:(d+=String.fromCharCode(0),d+=_),f=c+1}}else{for(var p=new Array(a),s=0;s<a;++s)p[s]=String.fromCharCode(D[o+4+s]);d=p.join("")}return W(o),d},toWireType:function(o,a){a instanceof ArrayBuffer&&(a=new Uint8Array(a));var d,f=typeof a=="string";f||a instanceof Uint8Array||a instanceof Uint8ClampedArray||a instanceof Int8Array||T("Cannot pass non-string to std::string"),n&&f?d=function(){return qt(a)}:d=function(){return a.length};var s=d(),c=kt(4+s+1);if(b[c>>2]=s,n&&f)Zt(a,c+4,s+1);else if(f)for(var u=0;u<s;++u){var _=a.charCodeAt(u);_>255&&(W(c),T("String has UTF-16 code units that do not fit in 8 bits")),D[c+4+u]=_}else for(var u=0;u<s;++u)D[c+4+u]=a[u];return o!==null&&o.push(W,c),c},argPackAdvance:8,readValueFromPointer:he,destructorFunction:function(o){W(o)}})}function wn(t,r,n){n=R(n);var o,a,d,f,s;r===2?(o=Jt,a=Kt,f=er,d=function(){return fe},s=1):r===4&&(o=tr,a=rr,f=nr,d=function(){return b},s=2),U(t,{name:n,fromWireType:function(c){for(var u=b[c>>2],_=d(),p,O=c+4,y=0;y<=u;++y){var h=c+4+y*r;if(_[h>>s]==0||y==u){var P=h-O,v=o(O,P);p===void 0?p=v:(p+=String.fromCharCode(0),p+=v),O=h+r}}return W(c),p},toWireType:function(c,u){typeof u!="string"&&T("Cannot pass non-string to C++ string type "+n);var _=f(u),p=kt(4+_+r);return b[p>>2]=_>>s,a(u,p+4,_+r),c!==null&&c.push(W,p),p},argPackAdvance:8,readValueFromPointer:he,destructorFunction:function(c){W(c)}})}function Dn(t,r,n,o,a,d){je[t]={name:R(r),rawConstructor:A(n,o),rawDestructor:A(a,d),fields:[]}}function bn(t,r,n,o,a,d,f,s,c,u){je[t].fields.push({fieldName:R(r),getterReturnType:n,getter:A(o,a),getterContext:d,setterArgumentType:f,setter:A(s,c),setterContext:u})}function An(t,r){r=R(r),U(t,{isVoid:!0,name:r,argPackAdvance:0,fromWireType:function(){},toWireType:function(n,o){}})}function vn(t){var r=[];return g[t>>2]=Te(r),r}var mn={};function Ht(t){var r=mn[t];return r===void 0?R(t):r}var Le=[];function Mn(t,r,n,o,a){return t=Le[t],r=qe(r),n=Ht(n),t(r,n,vn(o),a)}function Sn(t,r,n,o){t=Le[t],r=qe(r),n=Ht(n),t(r,n,null,o)}function Fn(t){var r=Le.length;return Le.push(t),r}function In(t,r){for(var n=new Array(t),o=0;o<t;++o)n[o]=Ie(g[(r>>2)+o],"parameter "+o);return n}function Cn(t,r){for(var n=In(t,r),o=n[0],a=o.name+"_$"+n.slice(1).map(function(y){return y.name}).join("_")+"$",d=["retType"],f=[o],s="",c=0;c<t-1;++c)s+=(c!==0?", ":"")+"arg"+c,d.push("argType"+c),f.push(n[1+c]);for(var u=Se("methodCaller_"+a),_="return function "+u+`(handle, name, destructors, args) {
`,p=0,c=0;c<t-1;++c)_+="    var arg"+c+" = argType"+c+".readValueFromPointer(args"+(p?"+"+p:"")+`);
`,p+=n[c+1].argPackAdvance;_+="    var rv = handle[name]("+s+`);
`;for(var c=0;c<t-1;++c)n[c+1].deleteObject&&(_+="    argType"+c+".deleteObject(arg"+c+`);
`);o.isVoid||(_+=`    return retType.toWireType(destructors, rv);
`),_+=`};
`,d.push(_);var O=Nt(Function,d).apply(null,f);return Fn(O)}function jn(t){t>4&&(S[t].refcount+=1)}function Xn(t){var r=S[t].value;ge(r),nt(t)}function Un(t,r){t=Ie(t,"_emval_take_value");var n=t.readValueFromPointer(r);return Te(n)}function Nn(){i()}var oe;we?oe=function(){var t=process.hrtime();return t[0]*1e3+t[1]/1e6}:typeof dateNow!="undefined"?oe=dateNow:oe=function(){return performance.now()};var xn=!0;function it(t){return g[li()>>2]=t,t}function Hn(t,r){var n;if(t===0)n=Date.now();else if((t===1||t===4)&&xn)n=oe();else return it(28),-1;return g[r>>2]=n/1e3|0,g[r+4>>2]=n%1e3*1e3*1e3|0,0}function Qn(){return 203792}function Ln(t,r,n){D.copyWithin(t,r,r+n)}function kn(){return D.length}function Wn(t){try{return Y.grow(t-V.byteLength+65535>>>16),Ot(Y.buffer),1}catch(r){console.error("emscripten_realloc_buffer: Attempted to grow heap from "+V.byteLength+" bytes to "+t+" bytes, but got error: "+r)}}function $n(t){t=t>>>0;var r=kn();E(t>r);var n=65536,o=2147483648;if(t>o)return w("Cannot enlarge memory, asked to go up to "+t+" bytes, but the limit is "+o+" bytes!"),!1;for(var a=16777216,d=1;d<=4;d*=2){var f=r*(1+.2/d);f=Math.min(f,t+100663296);var s=Math.min(o,ir(Math.max(a,t,f),n)),c=Wn(s);if(c)return!0}return w("Failed to grow the heap from "+r+" bytes to "+s+" bytes, not enough memory!"),!1}function Yn(){typeof Lt!="undefined"&&Lt(0);var t=k.buffers;t[1].length&&k.printChar(1,10),t[2].length&&k.printChar(2,10)}var k={mappings:{},buffers:[null,[],[]],printChar:function(t,r){var n=k.buffers[t];E(n),r===0||r===10?((t===1?ce:w)(ut(n,0)),n.length=0):n.push(r)},varargs:void 0,get:function(){E(k.varargs!=null),k.varargs+=4;var t=g[k.varargs-4>>2];return t},getStr:function(t){var r=_t(t);return r},get64:function(t,r){return t>=0?E(r===0):E(r===-1),t}};function Vn(t,r,n,o){for(var a=0,d=0;d<n;d++){for(var f=g[r+d*8>>2],s=g[r+(d*8+4)>>2],c=0;c<s;c++)k.printChar(t,D[f+c]);a+=s}return g[o>>2]=a,0}function Gn(t){var r=Date.now();return g[t>>2]=r/1e3|0,g[t+4>>2]=r%1e3*1e3|0,0}function Bn(t){for(var r=oe();oe()-r<t/1e3;);}function zn(t,r){if(t===0)return it(28),-1;var n=g[t>>2],o=g[t+4>>2];return o<0||o>999999999||n<0?(it(28),-1):(r!==0&&(g[r>>2]=0,g[r+4>>2]=0),Bn(n*1e6+o/1e3))}function Zn(t){return 0}function qn(t){return 0}function Jn(){}function Kn(){}function ei(){return 6}function ti(t){_i(t)}function ri(t){ti(t)}function ni(){}function ii(){}function oi(){}function ai(){}function si(){}function ci(t){}Sr(),mt=e.PureVirtualError=Fe(Error,"PureVirtualError"),Fr(),Xr(),te=e.BindingError=Fe(Error,"BindingError"),It=e.InternalError=Fe(Error,"InternalError"),Br(),on(),Ut=e.UnboundTypeError=Fe(Error,"UnboundTypeError");var Qt={__handle_stack_overflow:br,_embind_create_inheriting_constructor:Hr,_embind_finalize_value_object:Qr,_embind_register_bool:Lr,_embind_register_class:an,_embind_register_class_class_function:sn,_embind_register_class_constructor:cn,_embind_register_class_function:dn,_embind_register_class_property:fn,_embind_register_constant:ln,_embind_register_emval:un,_embind_register_enum:pn,_embind_register_enum_value:En,_embind_register_float:On,_embind_register_function:yn,_embind_register_integer:hn,_embind_register_memory_view:Rn,_embind_register_std_string:Pn,_embind_register_std_wstring:wn,_embind_register_value_object:Dn,_embind_register_value_object_field:bn,_embind_register_void:An,_emval_call_method:Mn,_emval_call_void_method:Sn,_emval_decref:nt,_emval_get_method_caller:Cn,_emval_incref:jn,_emval_run_destructors:Xn,_emval_take_value:Un,abort:Nn,clock_gettime:Hn,emscripten_get_sbrk_ptr:Qn,emscripten_memcpy_big:Ln,emscripten_resize_heap:$n,fd_write:Vn,gettimeofday:Gn,memory:Y,nanosleep:zn,pthread_attr_destroy:Zn,pthread_attr_init:qn,pthread_attr_setstacksize:Jn,pthread_cancel:Kn,pthread_create:ei,pthread_exit:ri,pthread_join:ni,pthread_mutexattr_destroy:ii,pthread_mutexattr_init:oi,pthread_mutexattr_setprotocol:ai,pthread_mutexattr_settype:si,setTempRet0:ci,table:Bt};hr();var di=e.___wasm_call_ctors=l("__wasm_call_ctors"),W=e._free=l("free");e._memcpy=l("memcpy");var fi=e.___getTypeName=l("__getTypeName");e.___embind_register_native_and_builtin_types=l("__embind_register_native_and_builtin_types");var li=e.___errno_location=l("__errno_location");e._htonl=l("htonl"),e._htons=l("htons"),e._ntohs=l("ntohs");var Lt=e._fflush=l("fflush"),kt=e._malloc=l("malloc");e.stackSave=l("stackSave"),e.stackRestore=l("stackRestore"),e.stackAlloc=l("stackAlloc"),e._emscripten_main_thread_process_queued_calls=l("emscripten_main_thread_process_queued_calls"),e.___set_stack_limit=l("__set_stack_limit"),e.__growWasmMemory=l("__growWasmMemory"),e.dynCall_viiiiiiii=l("dynCall_viiiiiiii"),e.dynCall_iiiii=l("dynCall_iiiii"),e.dynCall_iiii=l("dynCall_iiii"),e.dynCall_iii=l("dynCall_iii"),e.dynCall_ii=l("dynCall_ii"),e.dynCall_iiiiiii=l("dynCall_iiiiiii"),e.dynCall_iiiiii=l("dynCall_iiiiii"),e.dynCall_vii=l("dynCall_vii"),e.dynCall_vi=l("dynCall_vi"),e.dynCall_i=l("dynCall_i"),e.dynCall_viii=l("dynCall_viii"),e.dynCall_fii=l("dynCall_fii"),e.dynCall_viif=l("dynCall_viif"),e.dynCall_iiff=l("dynCall_iiff"),e.dynCall_iifff=l("dynCall_iifff"),e.dynCall_iiiff=l("dynCall_iiiff"),e.dynCall_iiifff=l("dynCall_iiifff"),e.dynCall_viff=l("dynCall_viff"),e.dynCall_viiff=l("dynCall_viiff"),e.dynCall_viiii=l("dynCall_viiii"),e.dynCall_viifi=l("dynCall_viifi"),e.dynCall_iifffi=l("dynCall_iifffi"),e.dynCall_viiiii=l("dynCall_viiiii"),e.dynCall_dii=l("dynCall_dii"),e.dynCall_viid=l("dynCall_viid"),e.dynCall_vifi=l("dynCall_vifi"),e.dynCall_iiiifi=l("dynCall_iiiifi"),e.dynCall_iiiiifi=l("dynCall_iiiiifi"),e.dynCall_iiiifiii=l("dynCall_iiiifiii"),e.dynCall_iiiiifiii=l("dynCall_iiiiifiii"),e.dynCall_iiiifii=l("dynCall_iiiifii"),e.dynCall_iiiiifii=l("dynCall_iiiiifii"),e.dynCall_iiiifiiii=l("dynCall_iiiifiiii"),e.dynCall_iiiiifiiii=l("dynCall_iiiiifiiii"),e.dynCall_iiiiiifiiiiif=l("dynCall_iiiiiifiiiiif"),e.dynCall_viiif=l("dynCall_viiif"),e.dynCall_iiiif=l("dynCall_iiiif"),e.dynCall_iiiiiiii=l("dynCall_iiiiiiii"),e.dynCall_viiiiii=l("dynCall_viiiiii"),e.dynCall_iiiiiiiii=l("dynCall_iiiiiiiii"),e.dynCall_iif=l("dynCall_iif"),e.dynCall_iiif=l("dynCall_iiif"),e.dynCall_vif=l("dynCall_vif"),e.dynCall_iiiifff=l("dynCall_iiiifff"),e.dynCall_iiffff=l("dynCall_iiffff"),e.dynCall_iiiiffii=l("dynCall_iiiiffii"),e.dynCall_fi=l("dynCall_fi"),e.dynCall_fif=l("dynCall_fif"),e.dynCall_fiif=l("dynCall_fiif"),e.dynCall_v=l("dynCall_v"),e.dynCall_iifi=l("dynCall_iifi"),e.dynCall_viiiiiii=l("dynCall_viiiiiii"),e.dynCall_viiifi=l("dynCall_viiifi"),e.dynCall_viiffi=l("dynCall_viiffi"),e.dynCall_viifffi=l("dynCall_viifffi"),e.dynCall_viiifiiiii=l("dynCall_viiifiiiii"),e.dynCall_viiiifiiiiif=l("dynCall_viiiifiiiiif"),e.dynCall_iiiifiiiii=l("dynCall_iiiifiiiii"),e.dynCall_iiiiifiiiiif=l("dynCall_iiiiifiiiiif"),e.dynCall_vifiiii=l("dynCall_vifiiii"),e.dynCall_iiiifffiii=l("dynCall_iiiifffiii"),e.dynCall_iifiiiijii=l("dynCall_iifiiiijii"),e.dynCall_vifijii=l("dynCall_vifijii"),e.dynCall_viiiiiiiii=l("dynCall_viiiiiiiii"),e.dynCall_viffiiiif=l("dynCall_viffiiiif"),e.dynCall_viffiifffffiii=l("dynCall_viffiifffffiii"),e.dynCall_viffffiifffiiiiif=l("dynCall_viffffiifffiiiiif"),e.dynCall_iiiifffffii=l("dynCall_iiiifffffii"),e.dynCall_iiiifffffi=l("dynCall_iiiifffffi"),e.dynCall_viiiiiiiiiiifii=l("dynCall_viiiiiiiiiiifii"),e.dynCall_viiiiiiiiii=l("dynCall_viiiiiiiiii"),e.dynCall_viiiffi=l("dynCall_viiiffi"),e.dynCall_vifii=l("dynCall_vifii"),e.dynCall_viiiffii=l("dynCall_viiiffii"),e.dynCall_iiiiiifiii=l("dynCall_iiiiiifiii"),e.dynCall_iiiiiiifiif=l("dynCall_iiiiiiifiif"),e.dynCall_iiiiiifiif=l("dynCall_iiiiiifiif"),e.dynCall_fiiiiiifiifif=l("dynCall_fiiiiiifiifif"),e.dynCall_fiiiiiifiiiif=l("dynCall_fiiiiiifiiiif"),e.dynCall_fiff=l("dynCall_fiff"),e.dynCall_viiifii=l("dynCall_viiifii"),e.dynCall_iiiiiiiiii=l("dynCall_iiiiiiiiii"),e.dynCall_iiiiiiiiiii=l("dynCall_iiiiiiiiiii"),e.dynCall_viij=l("dynCall_viij"),e.dynCall_viiji=l("dynCall_viiji"),e.dynCall_viijijj=l("dynCall_viijijj"),e.dynCall_viijj=l("dynCall_viijj"),e.dynCall_iiiij=l("dynCall_iiiij"),e.dynCall_viiiij=l("dynCall_viiiij"),e.dynCall_ji=l("dynCall_ji"),e.dynCall_iidiiii=l("dynCall_iidiiii"),e.dynCall_jiji=l("dynCall_jiji"),Object.getOwnPropertyDescriptor(e,"intArrayFromString")||(e.intArrayFromString=function(){i("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"intArrayToString")||(e.intArrayToString=function(){i("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ccall")||(e.ccall=function(){i("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"cwrap")||(e.cwrap=function(){i("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setValue")||(e.setValue=function(){i("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getValue")||(e.getValue=function(){i("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"allocate")||(e.allocate=function(){i("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getMemory")||(e.getMemory=function(){i("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"UTF8ArrayToString")||(e.UTF8ArrayToString=function(){i("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UTF8ToString")||(e.UTF8ToString=function(){i("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF8Array")||(e.stringToUTF8Array=function(){i("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF8")||(e.stringToUTF8=function(){i("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"lengthBytesUTF8")||(e.lengthBytesUTF8=function(){i("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackTrace")||(e.stackTrace=function(){i("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnPreRun")||(e.addOnPreRun=function(){i("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnInit")||(e.addOnInit=function(){i("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnPreMain")||(e.addOnPreMain=function(){i("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnExit")||(e.addOnExit=function(){i("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnPostRun")||(e.addOnPostRun=function(){i("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeStringToMemory")||(e.writeStringToMemory=function(){i("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeArrayToMemory")||(e.writeArrayToMemory=function(){i("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeAsciiToMemory")||(e.writeAsciiToMemory=function(){i("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addRunDependency")||(e.addRunDependency=function(){i("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"removeRunDependency")||(e.removeRunDependency=function(){i("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createFolder")||(e.FS_createFolder=function(){i("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createPath")||(e.FS_createPath=function(){i("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createDataFile")||(e.FS_createDataFile=function(){i("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createPreloadedFile")||(e.FS_createPreloadedFile=function(){i("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createLazyFile")||(e.FS_createLazyFile=function(){i("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createLink")||(e.FS_createLink=function(){i("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createDevice")||(e.FS_createDevice=function(){i("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_unlink")||(e.FS_unlink=function(){i("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"dynamicAlloc")||(e.dynamicAlloc=function(){i("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"loadDynamicLibrary")||(e.loadDynamicLibrary=function(){i("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"loadWebAssemblyModule")||(e.loadWebAssemblyModule=function(){i("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getLEB")||(e.getLEB=function(){i("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getFunctionTables")||(e.getFunctionTables=function(){i("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"alignFunctionTables")||(e.alignFunctionTables=function(){i("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registerFunctions")||(e.registerFunctions=function(){i("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addFunction")||(e.addFunction=function(){i("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"removeFunction")||(e.removeFunction=function(){i("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getFuncWrapper")||(e.getFuncWrapper=function(){i("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"prettyPrint")||(e.prettyPrint=function(){i("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"makeBigInt")||(e.makeBigInt=function(){i("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"dynCall")||(e.dynCall=function(){i("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getCompilerSetting")||(e.getCompilerSetting=function(){i("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"print")||(e.print=function(){i("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"printErr")||(e.printErr=function(){i("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getTempRet0")||(e.getTempRet0=function(){i("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setTempRet0")||(e.setTempRet0=function(){i("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"callMain")||(e.callMain=function(){i("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"abort")||(e.abort=function(){i("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToNewUTF8")||(e.stringToNewUTF8=function(){i("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscripten_realloc_buffer")||(e.emscripten_realloc_buffer=function(){i("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ENV")||(e.ENV=function(){i("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ERRNO_CODES")||(e.ERRNO_CODES=function(){i("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ERRNO_MESSAGES")||(e.ERRNO_MESSAGES=function(){i("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setErrNo")||(e.setErrNo=function(){i("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"DNS")||(e.DNS=function(){i("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GAI_ERRNO_MESSAGES")||(e.GAI_ERRNO_MESSAGES=function(){i("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"Protocols")||(e.Protocols=function(){i("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"Sockets")||(e.Sockets=function(){i("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UNWIND_CACHE")||(e.UNWIND_CACHE=function(){i("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readAsmConstArgs")||(e.readAsmConstArgs=function(){i("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"jstoi_q")||(e.jstoi_q=function(){i("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"jstoi_s")||(e.jstoi_s=function(){i("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"abortStackOverflow")||(e.abortStackOverflow=function(){i("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"reallyNegative")||(e.reallyNegative=function(){i("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"formatString")||(e.formatString=function(){i("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PATH")||(e.PATH=function(){i("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PATH_FS")||(e.PATH_FS=function(){i("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SYSCALLS")||(e.SYSCALLS=function(){i("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"syscallMmap2")||(e.syscallMmap2=function(){i("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"syscallMunmap")||(e.syscallMunmap=function(){i("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"flush_NO_FILESYSTEM")||(e.flush_NO_FILESYSTEM=function(){i("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"JSEvents")||(e.JSEvents=function(){i("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"specialHTMLTargets")||(e.specialHTMLTargets=function(){i("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"demangle")||(e.demangle=function(){i("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"demangleAll")||(e.demangleAll=function(){i("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"jsStackTrace")||(e.jsStackTrace=function(){i("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackTrace")||(e.stackTrace=function(){i("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getEnvStrings")||(e.getEnvStrings=function(){i("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"checkWasiClock")||(e.checkWasiClock=function(){i("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToI64")||(e.writeI53ToI64=function(){i("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToI64Clamped")||(e.writeI53ToI64Clamped=function(){i("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToI64Signaling")||(e.writeI53ToI64Signaling=function(){i("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToU64Clamped")||(e.writeI53ToU64Clamped=function(){i("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToU64Signaling")||(e.writeI53ToU64Signaling=function(){i("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readI53FromI64")||(e.readI53FromI64=function(){i("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readI53FromU64")||(e.readI53FromU64=function(){i("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"convertI32PairToI53")||(e.convertI32PairToI53=function(){i("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"convertU32PairToI53")||(e.convertU32PairToI53=function(){i("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"Browser")||(e.Browser=function(){i("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"FS")||(e.FS=function(){i("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"MEMFS")||(e.MEMFS=function(){i("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"TTY")||(e.TTY=function(){i("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PIPEFS")||(e.PIPEFS=function(){i("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SOCKFS")||(e.SOCKFS=function(){i("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GL")||(e.GL=function(){i("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGet")||(e.emscriptenWebGLGet=function(){i("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGetTexPixelData")||(e.emscriptenWebGLGetTexPixelData=function(){i("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGetUniform")||(e.emscriptenWebGLGetUniform=function(){i("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGetVertexAttrib")||(e.emscriptenWebGLGetVertexAttrib=function(){i("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"AL")||(e.AL=function(){i("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_unicode")||(e.SDL_unicode=function(){i("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_ttfContext")||(e.SDL_ttfContext=function(){i("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_audio")||(e.SDL_audio=function(){i("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL")||(e.SDL=function(){i("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_gfx")||(e.SDL_gfx=function(){i("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLUT")||(e.GLUT=function(){i("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"EGL")||(e.EGL=function(){i("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLFW_Window")||(e.GLFW_Window=function(){i("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLFW")||(e.GLFW=function(){i("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLEW")||(e.GLEW=function(){i("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"IDBStore")||(e.IDBStore=function(){i("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"runAndAbortIfError")||(e.runAndAbortIfError=function(){i("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_handle_array")||(e.emval_handle_array=function(){i("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_free_list")||(e.emval_free_list=function(){i("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_symbols")||(e.emval_symbols=function(){i("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_emval")||(e.init_emval=function(){i("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"count_emval_handles")||(e.count_emval_handles=function(){i("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"get_first_emval")||(e.get_first_emval=function(){i("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getStringOrSymbol")||(e.getStringOrSymbol=function(){i("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"requireHandle")||(e.requireHandle=function(){i("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_newers")||(e.emval_newers=function(){i("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"craftEmvalAllocator")||(e.craftEmvalAllocator=function(){i("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_get_global")||(e.emval_get_global=function(){i("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_methodCallers")||(e.emval_methodCallers=function(){i("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"InternalError")||(e.InternalError=function(){i("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"BindingError")||(e.BindingError=function(){i("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UnboundTypeError")||(e.UnboundTypeError=function(){i("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PureVirtualError")||(e.PureVirtualError=function(){i("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_embind")||(e.init_embind=function(){i("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwInternalError")||(e.throwInternalError=function(){i("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwBindingError")||(e.throwBindingError=function(){i("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwUnboundTypeError")||(e.throwUnboundTypeError=function(){i("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ensureOverloadTable")||(e.ensureOverloadTable=function(){i("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"exposePublicSymbol")||(e.exposePublicSymbol=function(){i("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"replacePublicSymbol")||(e.replacePublicSymbol=function(){i("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"extendError")||(e.extendError=function(){i("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"createNamedFunction")||(e.createNamedFunction=function(){i("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registeredInstances")||(e.registeredInstances=function(){i("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getBasestPointer")||(e.getBasestPointer=function(){i("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registerInheritedInstance")||(e.registerInheritedInstance=function(){i("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"unregisterInheritedInstance")||(e.unregisterInheritedInstance=function(){i("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getInheritedInstance")||(e.getInheritedInstance=function(){i("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getInheritedInstanceCount")||(e.getInheritedInstanceCount=function(){i("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getLiveInheritedInstances")||(e.getLiveInheritedInstances=function(){i("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registeredTypes")||(e.registeredTypes=function(){i("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"awaitingDependencies")||(e.awaitingDependencies=function(){i("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"typeDependencies")||(e.typeDependencies=function(){i("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registeredPointers")||(e.registeredPointers=function(){i("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registerType")||(e.registerType=function(){i("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"whenDependentTypesAreResolved")||(e.whenDependentTypesAreResolved=function(){i("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"embind_charCodes")||(e.embind_charCodes=function(){i("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"embind_init_charCodes")||(e.embind_init_charCodes=function(){i("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readLatin1String")||(e.readLatin1String=function(){i("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getTypeName")||(e.getTypeName=function(){i("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"heap32VectorToArray")||(e.heap32VectorToArray=function(){i("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"requireRegisteredType")||(e.requireRegisteredType=function(){i("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getShiftFromSize")||(e.getShiftFromSize=function(){i("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"integerReadValueFromPointer")||(e.integerReadValueFromPointer=function(){i("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"enumReadValueFromPointer")||(e.enumReadValueFromPointer=function(){i("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"floatReadValueFromPointer")||(e.floatReadValueFromPointer=function(){i("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"simpleReadValueFromPointer")||(e.simpleReadValueFromPointer=function(){i("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"runDestructors")||(e.runDestructors=function(){i("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"new_")||(e.new_=function(){i("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"craftInvokerFunction")||(e.craftInvokerFunction=function(){i("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"embind__requireFunction")||(e.embind__requireFunction=function(){i("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"tupleRegistrations")||(e.tupleRegistrations=function(){i("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"structRegistrations")||(e.structRegistrations=function(){i("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"genericPointerToWireType")||(e.genericPointerToWireType=function(){i("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"constNoSmartPtrRawPointerToWireType")||(e.constNoSmartPtrRawPointerToWireType=function(){i("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"nonConstNoSmartPtrRawPointerToWireType")||(e.nonConstNoSmartPtrRawPointerToWireType=function(){i("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_RegisteredPointer")||(e.init_RegisteredPointer=function(){i("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer")||(e.RegisteredPointer=function(){i("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_getPointee")||(e.RegisteredPointer_getPointee=function(){i("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_destructor")||(e.RegisteredPointer_destructor=function(){i("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_deleteObject")||(e.RegisteredPointer_deleteObject=function(){i("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_fromWireType")||(e.RegisteredPointer_fromWireType=function(){i("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"runDestructor")||(e.runDestructor=function(){i("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"releaseClassHandle")||(e.releaseClassHandle=function(){i("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"finalizationGroup")||(e.finalizationGroup=function(){i("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"detachFinalizer_deps")||(e.detachFinalizer_deps=function(){i("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"detachFinalizer")||(e.detachFinalizer=function(){i("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"attachFinalizer")||(e.attachFinalizer=function(){i("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"makeClassHandle")||(e.makeClassHandle=function(){i("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_ClassHandle")||(e.init_ClassHandle=function(){i("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle")||(e.ClassHandle=function(){i("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_isAliasOf")||(e.ClassHandle_isAliasOf=function(){i("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwInstanceAlreadyDeleted")||(e.throwInstanceAlreadyDeleted=function(){i("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_clone")||(e.ClassHandle_clone=function(){i("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_delete")||(e.ClassHandle_delete=function(){i("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"deletionQueue")||(e.deletionQueue=function(){i("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_isDeleted")||(e.ClassHandle_isDeleted=function(){i("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_deleteLater")||(e.ClassHandle_deleteLater=function(){i("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"flushPendingDeletes")||(e.flushPendingDeletes=function(){i("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"delayFunction")||(e.delayFunction=function(){i("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setDelayFunction")||(e.setDelayFunction=function(){i("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredClass")||(e.RegisteredClass=function(){i("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"shallowCopyInternalPointer")||(e.shallowCopyInternalPointer=function(){i("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"downcastPointer")||(e.downcastPointer=function(){i("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"upcastPointer")||(e.upcastPointer=function(){i("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"validateThis")||(e.validateThis=function(){i("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"char_0")||(e.char_0=function(){i("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"char_9")||(e.char_9=function(){i("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"makeLegalFunctionName")||(e.makeLegalFunctionName=function(){i("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"warnOnce")||(e.warnOnce=function(){i("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackSave")||(e.stackSave=function(){i("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackRestore")||(e.stackRestore=function(){i("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackAlloc")||(e.stackAlloc=function(){i("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"AsciiToString")||(e.AsciiToString=function(){i("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToAscii")||(e.stringToAscii=function(){i("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UTF16ToString")||(e.UTF16ToString=function(){i("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF16")||(e.stringToUTF16=function(){i("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"lengthBytesUTF16")||(e.lengthBytesUTF16=function(){i("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UTF32ToString")||(e.UTF32ToString=function(){i("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF32")||(e.stringToUTF32=function(){i("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"lengthBytesUTF32")||(e.lengthBytesUTF32=function(){i("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"allocateUTF8")||(e.allocateUTF8=function(){i("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"allocateUTF8OnStack")||(e.allocateUTF8OnStack=function(){i("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),e.writeStackCookie=gt,e.checkStackCookie=ee,Object.getOwnPropertyDescriptor(e,"ALLOC_NORMAL")||Object.defineProperty(e,"ALLOC_NORMAL",{configurable:!0,get:function(){i("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),Object.getOwnPropertyDescriptor(e,"ALLOC_STACK")||Object.defineProperty(e,"ALLOC_STACK",{configurable:!0,get:function(){i("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),Object.getOwnPropertyDescriptor(e,"ALLOC_DYNAMIC")||Object.defineProperty(e,"ALLOC_DYNAMIC",{configurable:!0,get:function(){i("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),Object.getOwnPropertyDescriptor(e,"ALLOC_NONE")||Object.defineProperty(e,"ALLOC_NONE",{configurable:!0,get:function(){i("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});var ke;function Wt(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}_e=function t(){ke||ot(),ke||(_e=t)};function ot(t){if(B>0||(gt(),cr(),B>0))return;function r(){ke||(ke=!0,e.calledRun=!0,!Ae&&(dr(),fr(),ct(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),E(!e._main,'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]'),ur()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),r()},1)):r(),ee()}e.run=ot;function ui(){var t=ce,r=w,n=!1;ce=w=function(a){n=!0};try{var o=Yn;o&&o()}catch(a){}ce=t,w=r,n&&(N("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),N("(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)"))}function _i(t,r){if(ui(),!(r&&be&&t===0)){if(be){if(!r){var n="program exited (with status: "+t+"), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";dt(n)}}else Ae=!0,lr(),e.onExit&&e.onExit(t);Re(t,new Wt(t))}}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();return be=!0,ot(),j.ready}}();typeof We=="object"&&typeof st=="object"?st.exports=at:typeof define=="function"&&define.amd?define([],function(){return at}):typeof We=="object"&&(We.PHYSX=at)});export default Ti();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
