var ui=function(){var it=import.meta.url;return function(ie){ie=ie||{};var e=typeof ie!="undefined"?ie:{},ot,at;e.ready=new Promise(function(t,r){ot=t,at=r}),Object.getOwnPropertyDescriptor(e.ready,"_main")||(Object.defineProperty(e.ready,"_main",{configurable:!0,get:function(){i("You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_main",{configurable:!0,set:function(){i("You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_malloc")||(Object.defineProperty(e.ready,"_malloc",{configurable:!0,get:function(){i("You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_malloc",{configurable:!0,set:function(){i("You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_free")||(Object.defineProperty(e.ready,"_free",{configurable:!0,get:function(){i("You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_free",{configurable:!0,set:function(){i("You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_stackSave")||(Object.defineProperty(e.ready,"_stackSave",{configurable:!0,get:function(){i("You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_stackSave",{configurable:!0,set:function(){i("You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_stackRestore")||(Object.defineProperty(e.ready,"_stackRestore",{configurable:!0,get:function(){i("You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_stackRestore",{configurable:!0,set:function(){i("You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_stackAlloc")||(Object.defineProperty(e.ready,"_stackAlloc",{configurable:!0,get:function(){i("You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_stackAlloc",{configurable:!0,set:function(){i("You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"___data_end")||(Object.defineProperty(e.ready,"___data_end",{configurable:!0,get:function(){i("You are getting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"___data_end",{configurable:!0,set:function(){i("You are setting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"___wasm_call_ctors")||(Object.defineProperty(e.ready,"___wasm_call_ctors",{configurable:!0,get:function(){i("You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"___wasm_call_ctors",{configurable:!0,set:function(){i("You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_fflush")||(Object.defineProperty(e.ready,"_fflush",{configurable:!0,get:function(){i("You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_fflush",{configurable:!0,set:function(){i("You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"___errno_location")||(Object.defineProperty(e.ready,"___errno_location",{configurable:!0,get:function(){i("You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"___errno_location",{configurable:!0,set:function(){i("You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_htons")||(Object.defineProperty(e.ready,"_htons",{configurable:!0,get:function(){i("You are getting _htons on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_htons",{configurable:!0,set:function(){i("You are setting _htons on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_ntohs")||(Object.defineProperty(e.ready,"_ntohs",{configurable:!0,get:function(){i("You are getting _ntohs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_ntohs",{configurable:!0,set:function(){i("You are setting _ntohs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_memcpy")||(Object.defineProperty(e.ready,"_memcpy",{configurable:!0,get:function(){i("You are getting _memcpy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_memcpy",{configurable:!0,set:function(){i("You are setting _memcpy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_htonl")||(Object.defineProperty(e.ready,"_htonl",{configurable:!0,get:function(){i("You are getting _htonl on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_htonl",{configurable:!0,set:function(){i("You are setting _htonl on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"_emscripten_main_thread_process_queued_calls")||(Object.defineProperty(e.ready,"_emscripten_main_thread_process_queued_calls",{configurable:!0,get:function(){i("You are getting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"_emscripten_main_thread_process_queued_calls",{configurable:!0,set:function(){i("You are setting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}})),Object.getOwnPropertyDescriptor(e.ready,"onRuntimeInitialized")||(Object.defineProperty(e.ready,"onRuntimeInitialized",{configurable:!0,get:function(){i("You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}),Object.defineProperty(e.ready,"onRuntimeInitialized",{configurable:!0,set:function(){i("You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")}}));var oe={},H;for(H in e)e.hasOwnProperty(H)&&(oe[H]=e[H]);var he=function(t,r){throw r},Re=!1,W=!1,Pe=!1,st=!1;if(Re=typeof window=="object",W=typeof importScripts=="function",Pe=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",st=!Re&&!Pe&&!W,e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");var M="";function $t(t){return e.locateFile?e.locateFile(t,M):M+t}var we,ae,ke,We;if(Pe)W?M=require("path").dirname(M)+"/":M=__dirname+"/",we=function(r,n){return ke||(ke=require("fs")),We||(We=require("path")),r=We.normalize(r),ke.readFileSync(r,n?null:"utf8")},ae=function(r){var n=we(r,!0);return n.buffer||(n=new Uint8Array(n)),E(n.buffer),n},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),process.on("uncaughtException",function(t){if(!(t instanceof Qt))throw t}),process.on("unhandledRejection",i),he=function(t){process.exit(t)},e.inspect=function(){return"[Emscripten Module object]"};else if(st)typeof read!="undefined"&&(we=function(r){return read(r)}),ae=function(r){var n;return typeof readbuffer=="function"?new Uint8Array(readbuffer(r)):(n=read(r,"binary"),E(typeof n=="object"),n)},typeof scriptArgs!="undefined"&&scriptArgs,typeof quit=="function"&&(he=function(t){quit(t)}),typeof print!="undefined"&&(typeof console=="undefined"&&(console={}),console.log=print,console.warn=console.error=typeof printErr!="undefined"?printErr:print);else if(Re||W)W?M=self.location.href:document.currentScript&&(M=document.currentScript.src),it&&(M=it),M.indexOf("blob:")!==0?M=M.substr(0,M.lastIndexOf("/")+1):M="",we=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.send(null),n.responseText},W&&(ae=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)});else throw new Error("environment detection error");var se=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);for(H in oe)oe.hasOwnProperty(H)&&(e[H]=oe[H]);oe=null,e.arguments,Object.getOwnPropertyDescriptor(e,"arguments")||Object.defineProperty(e,"arguments",{configurable:!0,get:function(){i("Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),e.thisProgram,Object.getOwnPropertyDescriptor(e,"thisProgram")||Object.defineProperty(e,"thisProgram",{configurable:!0,get:function(){i("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),e.quit&&(he=e.quit),Object.getOwnPropertyDescriptor(e,"quit")||Object.defineProperty(e,"quit",{configurable:!0,get:function(){i("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),E(typeof e.memoryInitializerPrefixURL=="undefined","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),E(typeof e.pthreadMainPrefixURL=="undefined","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),E(typeof e.cdInitializerPrefixURL=="undefined","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),E(typeof e.filePackagePrefixURL=="undefined","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),E(typeof e.read=="undefined","Module.read option was removed (modify read_ in JS)"),E(typeof e.readAsync=="undefined","Module.readAsync option was removed (modify readAsync in JS)"),E(typeof e.readBinary=="undefined","Module.readBinary option was removed (modify readBinary in JS)"),E(typeof e.setWindowTitle=="undefined","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),E(typeof e.TOTAL_MEMORY=="undefined","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),Object.getOwnPropertyDescriptor(e,"read")||Object.defineProperty(e,"read",{configurable:!0,get:function(){i("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(e,"readAsync")||Object.defineProperty(e,"readAsync",{configurable:!0,get:function(){i("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(e,"readBinary")||Object.defineProperty(e,"readBinary",{configurable:!0,get:function(){i("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),Object.getOwnPropertyDescriptor(e,"setWindowTitle")||Object.defineProperty(e,"setWindowTitle",{configurable:!0,get:function(){i("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}});function U(t){U.shown||(U.shown={}),U.shown[t]||(U.shown[t]=1,w(t))}var ce;e.wasmBinary&&(ce=e.wasmBinary),Object.getOwnPropertyDescriptor(e,"wasmBinary")||Object.defineProperty(e,"wasmBinary",{configurable:!0,get:function(){i("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}});var De;e.noExitRuntime&&(De=e.noExitRuntime),Object.getOwnPropertyDescriptor(e,"noExitRuntime")||Object.defineProperty(e,"noExitRuntime",{configurable:!0,get:function(){i("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),typeof WebAssembly!="object"&&i("No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.");var $,Yt=new WebAssembly.Table({initial:4449,maximum:4449+0,element:"anyfunc"}),be=!1;function E(t,r){t||i("Assertion failed: "+r)}var ct=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):void 0;function dt(t,r,n){for(var o=r+n,a=r;t[a]&&!(a>=o);)++a;if(a-r>16&&t.subarray&&ct)return ct.decode(t.subarray(r,a));for(var d="";r<a;){var f=t[r++];if(!(f&128)){d+=String.fromCharCode(f);continue}var s=t[r++]&63;if((f&224)==192){d+=String.fromCharCode((f&31)<<6|s);continue}var c=t[r++]&63;if((f&240)==224?f=(f&15)<<12|s<<6|c:((f&248)!=240&&U("Invalid UTF-8 leading byte 0x"+f.toString(16)+" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!"),f=(f&7)<<18|s<<12|c<<6|t[r++]&63),f<65536)d+=String.fromCharCode(f);else{var u=f-65536;d+=String.fromCharCode(55296|u>>10,56320|u&1023)}}return d}function ft(t,r){return t?dt(D,t,r):""}function Vt(t,r,n,o){if(!(o>0))return 0;for(var a=n,d=n+o-1,f=0;f<t.length;++f){var s=t.charCodeAt(f);if(s>=55296&&s<=57343){var c=t.charCodeAt(++f);s=65536+((s&1023)<<10)|c&1023}if(s<=127){if(n>=d)break;r[n++]=s}else if(s<=2047){if(n+1>=d)break;r[n++]=192|s>>6,r[n++]=128|s&63}else if(s<=65535){if(n+2>=d)break;r[n++]=224|s>>12,r[n++]=128|s>>6&63,r[n++]=128|s&63}else{if(n+3>=d)break;s>=2097152&&U("Invalid Unicode code point 0x"+s.toString(16)+" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF)."),r[n++]=240|s>>18,r[n++]=128|s>>12&63,r[n++]=128|s>>6&63,r[n++]=128|s&63}}return r[n]=0,n-a}function Gt(t,r,n){return E(typeof n=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Vt(t,D,r,n)}function Bt(t){for(var r=0,n=0;n<t.length;++n){var o=t.charCodeAt(n);o>=55296&&o<=57343&&(o=65536+((o&1023)<<10)|t.charCodeAt(++n)&1023),o<=127?++r:o<=2047?r+=2:o<=65535?r+=3:r+=4}return r}var lt=typeof TextDecoder!="undefined"?new TextDecoder("utf-16le"):void 0;function zt(t,r){E(t%2==0,"Pointer passed to UTF16ToString must be aligned to two bytes!");for(var n=t,o=n>>1,a=o+r/2;!(o>=a)&&de[o];)++o;if(n=o<<1,n-t>32&&lt)return lt.decode(D.subarray(t,n));for(var d=0,f="";;){var s=V[t+d*2>>1];if(s==0||d==r/2)return f;++d,f+=String.fromCharCode(s)}}function Zt(t,r,n){if(E(r%2==0,"Pointer passed to stringToUTF16 must be aligned to two bytes!"),E(typeof n=="number","stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),n===void 0&&(n=2147483647),n<2)return 0;n-=2;for(var o=r,a=n<t.length*2?n/2:t.length,d=0;d<a;++d){var f=t.charCodeAt(d);V[r>>1]=f,r+=2}return V[r>>1]=0,r-o}function qt(t){return t.length*2}function Jt(t,r){E(t%4==0,"Pointer passed to UTF32ToString must be aligned to four bytes!");for(var n=0,o="";!(n>=r/4);){var a=g[t+n*4>>2];if(a==0)break;if(++n,a>=65536){var d=a-65536;o+=String.fromCharCode(55296|d>>10,56320|d&1023)}else o+=String.fromCharCode(a)}return o}function Kt(t,r,n){if(E(r%4==0,"Pointer passed to stringToUTF32 must be aligned to four bytes!"),E(typeof n=="number","stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),n===void 0&&(n=2147483647),n<4)return 0;for(var o=r,a=o+n-4,d=0;d<t.length;++d){var f=t.charCodeAt(d);if(f>=55296&&f<=57343){var s=t.charCodeAt(++d);f=65536+((f&1023)<<10)|s&1023}if(g[r>>2]=f,r+=4,r+4>a)break}return g[r>>2]=0,r-o}function er(t){for(var r=0,n=0;n<t.length;++n){var o=t.charCodeAt(n);o>=55296&&o<=57343&&++n,r+=4}return r}var Ae=65536;function tr(t,r){return t%r>0&&(t+=r-t%r),t}var Y,ve,D,V,de,g,b,ut,_t;function pt(t){Y=t,e.HEAP8=ve=new Int8Array(t),e.HEAP16=V=new Int16Array(t),e.HEAP32=g=new Int32Array(t),e.HEAPU8=D=new Uint8Array(t),e.HEAPU16=de=new Uint16Array(t),e.HEAPU32=b=new Uint32Array(t),e.HEAPF32=ut=new Float32Array(t),e.HEAPF64=_t=new Float64Array(t)}var rr=5446832,fe=203952,Et=5446832,nr=203792;E(rr%16==0,"stack must start aligned"),E(Et%16==0,"heap must start aligned");var $e=5242880;e.TOTAL_STACK&&E($e===e.TOTAL_STACK,"the stack size can no longer be determined at runtime");var le=e.INITIAL_MEMORY||16777216;Object.getOwnPropertyDescriptor(e,"INITIAL_MEMORY")||Object.defineProperty(e,"INITIAL_MEMORY",{configurable:!0,get:function(){i("Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}}),E(le>=$e,"INITIAL_MEMORY should be larger than TOTAL_STACK, was "+le+"! (TOTAL_STACK="+$e+")"),E(typeof Int32Array!="undefined"&&typeof Float64Array!="undefined"&&Int32Array.prototype.subarray!==void 0&&Int32Array.prototype.set!==void 0,"JS engine does not provide full typed array support"),e.wasmMemory?$=e.wasmMemory:$=new WebAssembly.Memory({initial:le/Ae,maximum:2147483648/Ae}),$&&(Y=$.buffer),le=Y.byteLength,E(le%Ae==0),E(65536%Ae==0),pt(Y),g[nr>>2]=Et;function Tt(){E((fe&3)==0),b[(fe>>2)+1]=34821223,b[(fe>>2)+2]=2310721022,g[0]=1668509029}function J(){var t=b[(fe>>2)+1],r=b[(fe>>2)+2];(t!=34821223||r!=2310721022)&&i("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x"+r.toString(16)+" "+t.toString(16)),g[0]!==1668509029&&i("Runtime error: The application has corrupted its heap memory area (address zero)!")}(function(){var t=new Int16Array(1),r=new Int8Array(t.buffer);if(t[0]=25459,r[0]!==115||r[1]!==99)throw"Runtime error: expected the system to be little-endian!"})();function me(t){for(;t.length>0;){var r=t.shift();if(typeof r=="function"){r(e);continue}var n=r.func;typeof n=="number"?r.arg===void 0?e.dynCall_v(n):e.dynCall_vi(n,r.arg):n(r.arg===void 0?null:r.arg)}}var Ot=[],yt=[],ir=[],gt=[],Ye=!1,ht=!1;function or(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)fr(e.preRun.shift());me(Ot)}function ar(){J(),E(!Ye),Ye=!0,me(yt)}function sr(){J(),me(ir)}function cr(){J(),ht=!0}function dr(){if(J(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)lr(e.postRun.shift());me(gt)}function fr(t){Ot.unshift(t)}function lr(t){gt.unshift(t)}E(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),E(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),E(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),E(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var G=0,B=null,ue=null,_e={};function ur(t){G++,e.monitorRunDependencies&&e.monitorRunDependencies(G),t?(E(!_e[t]),_e[t]=1,B===null&&typeof setInterval!="undefined"&&(B=setInterval(function(){if(be){clearInterval(B),B=null;return}var r=!1;for(var n in _e)r||(r=!0,w("still waiting on run dependencies:")),w("dependency: "+n);r&&w("(end of list)")},1e4))):w("warning: run dependency added without ID")}function _r(t){if(G--,e.monitorRunDependencies&&e.monitorRunDependencies(G),t?(E(_e[t]),delete _e[t]):w("warning: run dependency removed without ID"),G==0&&(B!==null&&(clearInterval(B),B=null),ue)){var r=ue;ue=null,r()}}e.preloadedImages={},e.preloadedAudios={};function i(t){e.onAbort&&e.onAbort(t),t+="",se(t),w(t),be=!0;var r="abort("+t+") at "+Rr();throw t=r,new WebAssembly.RuntimeError(t)}var S={error:function(){i("Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1")},init:function(){S.error()},createDataFile:function(){S.error()},createPreloadedFile:function(){S.error()},createLazyFile:function(){S.error()},open:function(){S.error()},mkdev:function(){S.error()},registerDevice:function(){S.error()},analyzePath:function(){S.error()},loadFilesFromDB:function(){S.error()},ErrnoError:function(){S.error()}};e.FS_createDataFile=S.createDataFile,e.FS_createPreloadedFile=S.createPreloadedFile;function Rt(t,r){return String.prototype.startsWith?t.startsWith(r):t.indexOf(r)===0}var pr="data:application/octet-stream;base64,";function Pt(t){return Rt(t,pr)}var Er="file://";function wt(t){return Rt(t,Er)}function l(t,r){return function(){var n=t,o=r;return r||(o=e.asm),E(Ye,"native function `"+n+"` called before runtime initialization"),E(!ht,"native function `"+n+"` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)"),o[t]||E(o[t],"exported native function `"+n+"` not found"),o[t].apply(null,arguments)}}var j="physx.release.wasm";Pt(j)||(j=$t(j));function Dt(){try{if(ce)return new Uint8Array(ce);if(ae)return ae(j);throw"both async and sync fetching of the wasm failed"}catch(t){i(t)}}function Tr(){return!ce&&(Re||W)&&typeof fetch=="function"&&!wt(j)?fetch(j,{credentials:"same-origin"}).then(function(t){if(!t.ok)throw"failed to load wasm binary file at '"+j+"'";return t.arrayBuffer()}).catch(function(){return Dt()}):new Promise(function(t,r){t(Dt())})}function Or(){var t={env:Nt,wasi_snapshot_preview1:Nt};function r(s,c){var u=s.exports;e.asm=u,_r("wasm-instantiate")}ur("wasm-instantiate");var n=e;function o(s){E(e===n,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),n=null,r(s.instance)}function a(s){return Tr().then(function(c){return WebAssembly.instantiate(c,t)}).then(s,function(c){w("failed to asynchronously prepare wasm: "+c),i(c)})}function d(){if(!ce&&typeof WebAssembly.instantiateStreaming=="function"&&!Pt(j)&&!wt(j)&&typeof fetch=="function")fetch(j,{credentials:"same-origin"}).then(function(s){var c=WebAssembly.instantiateStreaming(s,t);return c.then(o,function(u){return w("wasm streaming compile failed: "+u),w("falling back to ArrayBuffer instantiation"),a(o)})});else return a(o)}if(e.instantiateWasm)try{var f=e.instantiateWasm(t,r);return f}catch(s){return w("Module.instantiateWasm callback failed with error: "+s),!1}return d(),{}}yt.push({func:function(){ai()}});function yr(t){return U("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling"),t}function gr(t){var r=/\b_Z[\w\d_]+/g;return t.replace(r,function(n){var o=yr(n);return n===o?n:o+" ["+n+"]"})}function hr(){var t=new Error;if(!t.stack){try{throw new Error}catch(r){t=r}if(!t.stack)return"(no stack trace available)"}return t.stack.toString()}function Rr(){var t=hr();return e.extraStackTrace&&(t+=`
`+e.extraStackTrace()),gr(t)}function Pr(){i("stack overflow")}var wr=48,Dr=57;function Me(t){if(t===void 0)return"_unknown";t=t.replace(/[^a-zA-Z0-9_]/g,"$");var r=t.charCodeAt(0);return r>=wr&&r<=Dr?"_"+t:t}function pe(t,r){return t=Me(t),new Function("body","return function "+t+`() {
    "use strict";    return body.apply(this, arguments);
};
`)(r)}var Ve=[],F=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function br(){for(var t=0,r=5;r<F.length;++r)F[r]!==void 0&&++t;return t}function Ar(){for(var t=5;t<F.length;++t)if(F[t]!==void 0)return F[t];return null}function vr(){e.count_emval_handles=br,e.get_first_emval=Ar}function Ee(t){switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:{var r=Ve.length?Ve.pop():F.length;return F[r]={refcount:1,value:t},r}}}function Fe(t,r){var n=pe(r,function(o){this.name=r,this.message=o;var a=new Error(o).stack;a!==void 0&&(this.stack=this.toString()+`
`+a.replace(/^Error(:[^\n]*)?\n/,""))});return n.prototype=Object.create(t.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return this.message===void 0?this.name:this.name+": "+this.message},n}var bt=void 0;function mr(){for(var t=new Array(256),r=0;r<256;++r)t[r]=String.fromCharCode(r);At=t}var At=void 0;function R(t){for(var r="",n=t;D[n];)r+=At[D[n++]];return r}function Mr(){return Object.keys(N).length}function Fr(){var t=[];for(var r in N)N.hasOwnProperty(r)&&t.push(N[r]);return t}var Te=[];function Ge(){for(;Te.length;){var t=Te.pop();t.$$.deleteScheduled=!1,t.delete()}}var Oe=void 0;function Sr(t){Oe=t,Te.length&&Oe&&Oe(Ge)}function Ir(){e.getInheritedInstanceCount=Mr,e.getLiveInheritedInstances=Fr,e.flushPendingDeletes=Ge,e.setDelayFunction=Sr}var N={},K=void 0;function T(t){throw new K(t)}function Be(t,r){for(r===void 0&&T("ptr should not be undefined");t.baseClass;)r=t.upcast(r),t=t.baseClass;return r}function Cr(t,r,n){r=Be(t,r),N.hasOwnProperty(r)?T("Tried to register registered instance: "+r):N[r]=n}function ze(t){return t||T("Cannot use deleted val. handle = "+t),F[t].value}var z={};function vt(t){var r=si(t),n=R(r);return k(r),n}function Se(t,r){var n=z[t];return n===void 0&&T(r+" has unknown type "+vt(t)),n}function jr(t,r){r=Be(t,r),N.hasOwnProperty(r)?delete N[r]:T("Tried to unregister unregistered instance: "+r)}function Ie(t){}var Ze=!1;function Xr(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}function mt(t){t.count.value-=1;var r=t.count.value===0;r&&Xr(t)}function ee(t){return typeof FinalizationGroup=="undefined"?(ee=function(r){return r},t):(Ze=new FinalizationGroup(function(r){for(var n=r.next();!n.done;n=r.next()){var o=n.value;o.ptr?mt(o):console.warn("object already deleted: "+o.ptr)}}),ee=function(r){return Ze.register(r,r.$$,r.$$),r},Ie=function(r){Ze.unregister(r.$$)},ee(t))}function Ur(t,r,n){t=R(t),r=Se(r,"wrapper"),n=ze(n);var o=[].slice,a=r.registeredClass,d=a.instancePrototype,f=a.baseClass,s=f.instancePrototype,c=a.baseClass.constructor,u=pe(t,function(){a.baseClass.pureVirtualFunctions.forEach(function(p){if(this[p]===s[p])throw new bt("Pure virtual function "+p+" must be implemented in JavaScript")}.bind(this)),Object.defineProperty(this,"__parent",{value:d}),this.__construct.apply(this,o.call(arguments))});d.__construct=function(){this===d&&T("Pass correct 'this' to __construct");var O=c.implement.apply(void 0,[this].concat(o.call(arguments)));Ie(O);var y=O.$$;O.notifyOnDestruction(),y.preservePointerOnDelete=!0,Object.defineProperties(this,{$$:{value:y}}),ee(this),Cr(a,y.ptr,this)},d.__destruct=function(){this===d&&T("Pass correct 'this' to __destruct"),Ie(this),jr(a,this.$$.ptr)},u.prototype=Object.create(d);for(var _ in n)u.prototype[_]=n[_];return Ee(u)}var Ce={};function ye(t){for(;t.length;){var r=t.pop(),n=t.pop();n(r)}}function ge(t){return this.fromWireType(b[t>>2])}var te={},je={},Mt=void 0;function Xe(t){throw new Mt(t)}function I(t,r,n){t.forEach(function(s){je[s]=r});function o(s){var c=n(s);c.length!==t.length&&Xe("Mismatched type converter count");for(var u=0;u<t.length;++u)X(t[u],c[u])}var a=new Array(r.length),d=[],f=0;r.forEach(function(s,c){z.hasOwnProperty(s)?a[c]=z[s]:(d.push(s),te.hasOwnProperty(s)||(te[s]=[]),te[s].push(function(){a[c]=z[s],++f,f===d.length&&o(a)}))}),d.length===0&&o(a)}function Nr(t){var r=Ce[t];delete Ce[t];var n=r.rawConstructor,o=r.rawDestructor,a=r.fields,d=a.map(function(f){return f.getterReturnType}).concat(a.map(function(f){return f.setterArgumentType}));I([t],d,function(f){var s={};return a.forEach(function(c,u){var _=c.fieldName,p=f[u],O=c.getter,y=c.getterContext,h=f[u+a.length],P=c.setter,v=c.setterContext;s[_]={read:function(m){return p.fromWireType(O(y,m))},write:function(m,q){var C=[];P(v,m,h.toWireType(C,q)),ye(C)}}}),[{name:r.name,fromWireType:function(c){var u={};for(var _ in s)u[_]=s[_].read(c);return o(c),u},toWireType:function(c,u){for(var _ in s)if(!(_ in u))throw new TypeError('Missing field:  "'+_+'"');var p=n();for(_ in s)s[_].write(p,u[_]);return c!==null&&c.push(o,p),p},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:o}]})}function Ue(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+t)}}function X(t,r,n){if(n=n||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var o=r.name;if(t||T('type "'+o+'" must have a positive integer typeid pointer'),z.hasOwnProperty(t)){if(n.ignoreDuplicateRegistrations)return;T("Cannot register type '"+o+"' twice")}if(z[t]=r,delete je[t],te.hasOwnProperty(t)){var a=te[t];delete te[t],a.forEach(function(d){d()})}}function xr(t,r,n,o,a){var d=Ue(n);r=R(r),X(t,{name:r,fromWireType:function(f){return!!f},toWireType:function(f,s){return s?o:a},argPackAdvance:8,readValueFromPointer:function(f){var s;if(n===1)s=ve;else if(n===2)s=V;else if(n===4)s=g;else throw new TypeError("Unknown boolean type size: "+r);return this.fromWireType(s[f>>d])},destructorFunction:null})}function Hr(t){if(!(this instanceof Q)||!(t instanceof Q))return!1;for(var r=this.$$.ptrType.registeredClass,n=this.$$.ptr,o=t.$$.ptrType.registeredClass,a=t.$$.ptr;r.baseClass;)n=r.upcast(n),r=r.baseClass;for(;o.baseClass;)a=o.upcast(a),o=o.baseClass;return r===o&&n===a}function Qr(t){return{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType}}function qe(t){function r(n){return n.$$.ptrType.registeredClass.name}T(r(t)+" instance already deleted")}function Lr(){if(this.$$.ptr||qe(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t=ee(Object.create(Object.getPrototypeOf(this),{$$:{value:Qr(this.$$)}}));return t.$$.count.value+=1,t.$$.deleteScheduled=!1,t}function kr(){this.$$.ptr||qe(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&T("Object already scheduled for deletion"),Ie(this),mt(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function Wr(){return!this.$$.ptr}function $r(){return this.$$.ptr||qe(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&T("Object already scheduled for deletion"),Te.push(this),Te.length===1&&Oe&&Oe(Ge),this.$$.deleteScheduled=!0,this}function Yr(){Q.prototype.isAliasOf=Hr,Q.prototype.clone=Lr,Q.prototype.delete=kr,Q.prototype.isDeleted=Wr,Q.prototype.deleteLater=$r}function Q(){}var Ft={};function Je(t,r,n){if(t[r].overloadTable===void 0){var o=t[r];t[r]=function(){return t[r].overloadTable.hasOwnProperty(arguments.length)||T("Function '"+n+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+t[r].overloadTable+")!"),t[r].overloadTable[arguments.length].apply(this,arguments)},t[r].overloadTable=[],t[r].overloadTable[o.argCount]=o}}function Ke(t,r,n){e.hasOwnProperty(t)?((n===void 0||e[t].overloadTable!==void 0&&e[t].overloadTable[n]!==void 0)&&T("Cannot register public name '"+t+"' twice"),Je(e,t,t),e.hasOwnProperty(n)&&T("Cannot register multiple overloads of a function with the same number of arguments ("+n+")!"),e[t].overloadTable[n]=r):(e[t]=r,n!==void 0&&(e[t].numArguments=n))}function Vr(t,r,n,o,a,d,f,s){this.name=t,this.constructor=r,this.instancePrototype=n,this.rawDestructor=o,this.baseClass=a,this.getActualType=d,this.upcast=f,this.downcast=s,this.pureVirtualFunctions=[]}function Ne(t,r,n){for(;r!==n;)r.upcast||T("Expected null or instance of "+n.name+", got an instance of "+r.name),t=r.upcast(t),r=r.baseClass;return t}function Gr(t,r){if(r===null)return this.isReference&&T("null is not a valid "+this.name),0;r.$$||T('Cannot pass "'+re(r)+'" as a '+this.name),r.$$.ptr||T("Cannot pass deleted object as a pointer of type "+this.name);var n=r.$$.ptrType.registeredClass,o=Ne(r.$$.ptr,n,this.registeredClass);return o}function Br(t,r){var n;if(r===null)return this.isReference&&T("null is not a valid "+this.name),this.isSmartPointer?(n=this.rawConstructor(),t!==null&&t.push(this.rawDestructor,n),n):0;r.$$||T('Cannot pass "'+re(r)+'" as a '+this.name),r.$$.ptr||T("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&r.$$.ptrType.isConst&&T("Cannot convert argument of type "+(r.$$.smartPtrType?r.$$.smartPtrType.name:r.$$.ptrType.name)+" to parameter type "+this.name);var o=r.$$.ptrType.registeredClass;if(n=Ne(r.$$.ptr,o,this.registeredClass),this.isSmartPointer)switch(r.$$.smartPtr===void 0&&T("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:r.$$.smartPtrType===this?n=r.$$.smartPtr:T("Cannot convert argument of type "+(r.$$.smartPtrType?r.$$.smartPtrType.name:r.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:n=r.$$.smartPtr;break;case 2:if(r.$$.smartPtrType===this)n=r.$$.smartPtr;else{var a=r.clone();n=this.rawShare(n,Ee(function(){a.delete()})),t!==null&&t.push(this.rawDestructor,n)}break;default:T("Unsupporting sharing policy")}return n}function zr(t,r){if(r===null)return this.isReference&&T("null is not a valid "+this.name),0;r.$$||T('Cannot pass "'+re(r)+'" as a '+this.name),r.$$.ptr||T("Cannot pass deleted object as a pointer of type "+this.name),r.$$.ptrType.isConst&&T("Cannot convert argument of type "+r.$$.ptrType.name+" to parameter type "+this.name);var n=r.$$.ptrType.registeredClass,o=Ne(r.$$.ptr,n,this.registeredClass);return o}function Zr(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t}function qr(t){this.rawDestructor&&this.rawDestructor(t)}function Jr(t){t!==null&&t.delete()}function St(t,r,n){if(r===n)return t;if(n.baseClass===void 0)return null;var o=St(t,r,n.baseClass);return o===null?null:n.downcast(o)}function Kr(t,r){return r=Be(t,r),N[r]}function xe(t,r){(!r.ptrType||!r.ptr)&&Xe("makeClassHandle requires ptr and ptrType");var n=!!r.smartPtrType,o=!!r.smartPtr;return n!==o&&Xe("Both smartPtrType and smartPtr must be specified"),r.count={value:1},ee(Object.create(t,{$$:{value:r}}))}function en(t){var r=this.getPointee(t);if(!r)return this.destructor(t),null;var n=Kr(this.registeredClass,r);if(n!==void 0){if(n.$$.count.value===0)return n.$$.ptr=r,n.$$.smartPtr=t,n.clone();var o=n.clone();return this.destructor(t),o}function a(){return this.isSmartPointer?xe(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:r,smartPtrType:this,smartPtr:t}):xe(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var d=this.registeredClass.getActualType(r),f=Ft[d];if(!f)return a.call(this);var s;this.isConst?s=f.constPointerType:s=f.pointerType;var c=St(r,this.registeredClass,s.registeredClass);return c===null?a.call(this):this.isSmartPointer?xe(s.registeredClass.instancePrototype,{ptrType:s,ptr:c,smartPtrType:this,smartPtr:t}):xe(s.registeredClass.instancePrototype,{ptrType:s,ptr:c})}function tn(){x.prototype.getPointee=Zr,x.prototype.destructor=qr,x.prototype.argPackAdvance=8,x.prototype.readValueFromPointer=ge,x.prototype.deleteObject=Jr,x.prototype.fromWireType=en}function x(t,r,n,o,a,d,f,s,c,u,_){this.name=t,this.registeredClass=r,this.isReference=n,this.isConst=o,this.isSmartPointer=a,this.pointeeType=d,this.sharingPolicy=f,this.rawGetPointee=s,this.rawConstructor=c,this.rawShare=u,this.rawDestructor=_,!a&&r.baseClass===void 0?o?(this.toWireType=Gr,this.destructorFunction=null):(this.toWireType=zr,this.destructorFunction=null):this.toWireType=Br}function It(t,r,n){e.hasOwnProperty(t)||Xe("Replacing nonexistant public symbol"),e[t].overloadTable!==void 0&&n!==void 0?e[t].overloadTable[n]=r:(e[t]=r,e[t].argCount=n)}function A(t,r){t=R(t);function n(d){for(var f=[],s=1;s<t.length;++s)f.push("a"+s);var c="dynCall_"+t+"_"+r,u="return function "+c+"("+f.join(", ")+`) {
`;return u+="    return dynCall(rawFunction"+(f.length?", ":"")+f.join(", ")+`);
`,u+=`};
`,new Function("dynCall","rawFunction",u)(d,r)}var o=e["dynCall_"+t],a=n(o);return typeof a!="function"&&T("unknown function pointer with signature "+t+": "+r),a}var Ct=void 0;function Z(t,r){var n=[],o={};function a(d){if(!o[d]&&!z[d]){if(je[d]){je[d].forEach(a);return}n.push(d),o[d]=!0}}throw r.forEach(a),new Ct(t+": "+n.map(vt).join([", "]))}function rn(t,r,n,o,a,d,f,s,c,u,_,p,O){_=R(_),d=A(a,d),s&&(s=A(f,s)),u&&(u=A(c,u)),O=A(p,O);var y=Me(_);Ke(y,function(){Z("Cannot construct "+_+" due to unbound types",[o])}),I([t,r,n],o?[o]:[],function(h){h=h[0];var P,v;o?(P=h.registeredClass,v=P.instancePrototype):v=Q.prototype;var m=pe(y,function(){if(Object.getPrototypeOf(this)!==q)throw new K("Use 'new' to construct "+_);if(C.constructor_body===void 0)throw new K(_+" has no accessible constructor");var Wt=C.constructor_body[arguments.length];if(Wt===void 0)throw new K("Tried to invoke ctor of "+_+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(C.constructor_body).toString()+") parameters instead!");return Wt.apply(this,arguments)}),q=Object.create(v,{constructor:{value:m}});m.prototype=q;var C=new Vr(_,m,q,O,P,d,s,u),li=new x(_,C,!0,!1,!1),Lt=new x(_+"*",C,!1,!1,!1),kt=new x(_+" const*",C,!1,!0,!1);return Ft[t]={pointerType:Lt,constPointerType:kt},It(y,m),[li,Lt,kt]})}function jt(t,r){if(!(t instanceof Function))throw new TypeError("new_ called with constructor type "+typeof t+" which is not a function");var n=pe(t.name||"unknownFunctionName",function(){});n.prototype=t.prototype;var o=new n,a=t.apply(o,r);return a instanceof Object?a:o}function et(t,r,n,o,a){var d=r.length;d<2&&T("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var f=r[1]!==null&&n!==null,s=!1,c=1;c<r.length;++c)if(r[c]!==null&&r[c].destructorFunction===void 0){s=!0;break}for(var u=r[0].name!=="void",_="",p="",c=0;c<d-2;++c)_+=(c!==0?", ":"")+"arg"+c,p+=(c!==0?", ":"")+"arg"+c+"Wired";var O="return function "+Me(t)+"("+_+`) {
if (arguments.length !== `+(d-2)+`) {
throwBindingError('function `+t+" called with ' + arguments.length + ' arguments, expected "+(d-2)+` args!');
}
`;s&&(O+=`var destructors = [];
`);var y=s?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],P=[T,o,a,ye,r[0],r[1]];f&&(O+="var thisWired = classParam.toWireType("+y+`, this);
`);for(var c=0;c<d-2;++c)O+="var arg"+c+"Wired = argType"+c+".toWireType("+y+", arg"+c+"); // "+r[c+2].name+`
`,h.push("argType"+c),P.push(r[c+2]);if(f&&(p="thisWired"+(p.length>0?", ":"")+p),O+=(u?"var rv = ":"")+"invoker(fn"+(p.length>0?", ":"")+p+`);
`,s)O+=`runDestructors(destructors);
`;else for(var c=f?1:2;c<r.length;++c){var v=c===1?"thisWired":"arg"+(c-2)+"Wired";r[c].destructorFunction!==null&&(O+=v+"_dtor("+v+"); // "+r[c].name+`
`,h.push(v+"_dtor"),P.push(r[c].destructorFunction))}u&&(O+=`var ret = retType.fromWireType(rv);
return ret;
`),O+=`}
`,h.push(O);var m=jt(Function,h).apply(null,P);return m}function He(t,r){for(var n=[],o=0;o<t;o++)n.push(g[(r>>2)+o]);return n}function nn(t,r,n,o,a,d,f){var s=He(n,o);r=R(r),d=A(a,d),I([],[t],function(c){c=c[0];var u=c.name+"."+r;function _(){Z("Cannot call "+u+" due to unbound types",s)}var p=c.registeredClass.constructor;return p[r]===void 0?(_.argCount=n-1,p[r]=_):(Je(p,r,u),p[r].overloadTable[n-1]=_),I([],s,function(O){var y=[O[0],null].concat(O.slice(1)),h=et(u,y,null,d,f);return p[r].overloadTable===void 0?(h.argCount=n-1,p[r]=h):p[r].overloadTable[n-1]=h,[]}),[]})}function on(t,r,n,o,a,d){E(r>0);var f=He(r,n);a=A(o,a);var s=[d],c=[];I([],[t],function(u){u=u[0];var _="constructor "+u.name;if(u.registeredClass.constructor_body===void 0&&(u.registeredClass.constructor_body=[]),u.registeredClass.constructor_body[r-1]!==void 0)throw new K("Cannot register multiple constructors with identical number of parameters ("+(r-1)+") for class '"+u.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return u.registeredClass.constructor_body[r-1]=function(){Z("Cannot construct "+u.name+" due to unbound types",f)},I([],f,function(p){return u.registeredClass.constructor_body[r-1]=function(){arguments.length!==r-1&&T(_+" called with "+arguments.length+" arguments, expected "+(r-1)),c.length=0,s.length=r;for(var y=1;y<r;++y)s[y]=p[y].toWireType(c,arguments[y-1]);var h=a.apply(null,s);return ye(c),p[0].fromWireType(h)},[]}),[]})}function an(t,r,n,o,a,d,f,s){var c=He(n,o);r=R(r),d=A(a,d),I([],[t],function(u){u=u[0];var _=u.name+"."+r;s&&u.registeredClass.pureVirtualFunctions.push(r);function p(){Z("Cannot call "+_+" due to unbound types",c)}var O=u.registeredClass.instancePrototype,y=O[r];return y===void 0||y.overloadTable===void 0&&y.className!==u.name&&y.argCount===n-2?(p.argCount=n-2,p.className=u.name,O[r]=p):(Je(O,r,_),O[r].overloadTable[n-2]=p),I([],c,function(h){var P=et(_,h,u,d,f);return O[r].overloadTable===void 0?(P.argCount=n-2,O[r]=P):O[r].overloadTable[n-2]=P,[]}),[]})}function Xt(t,r,n){return t instanceof Object||T(n+' with invalid "this": '+t),t instanceof r.registeredClass.constructor||T(n+' incompatible with "this" of type '+t.constructor.name),t.$$.ptr||T("cannot call emscripten binding method "+n+" on deleted object"),Ne(t.$$.ptr,t.$$.ptrType.registeredClass,r.registeredClass)}function sn(t,r,n,o,a,d,f,s,c,u){r=R(r),a=A(o,a),I([],[t],function(_){_=_[0];var p=_.name+"."+r,O={get:function(){Z("Cannot access "+p+" due to unbound types",[n,f])},enumerable:!0,configurable:!0};return c?O.set=function(){Z("Cannot access "+p+" due to unbound types",[n,f])}:O.set=function(y){T(p+" is a read-only property")},Object.defineProperty(_.registeredClass.instancePrototype,r,O),I([],c?[n,f]:[n],function(y){var h=y[0],P={get:function(){var m=Xt(this,_,p+" getter");return h.fromWireType(a(d,m))},enumerable:!0};if(c){c=A(s,c);var v=y[1];P.set=function(m){var q=Xt(this,_,p+" setter"),C=[];c(u,q,v.toWireType(C,m)),ye(C)}}return Object.defineProperty(_.registeredClass.instancePrototype,r,P),[]}),[]})}function cn(t,r,n){t=R(t),I([],[r],function(o){return o=o[0],e[t]=o.fromWireType(n),[]})}function tt(t){t>4&&--F[t].refcount==0&&(F[t]=void 0,Ve.push(t))}function dn(t,r){r=R(r),X(t,{name:r,fromWireType:function(n){var o=F[n].value;return tt(n),o},toWireType:function(n,o){return Ee(o)},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:null})}function fn(t,r,n){switch(r){case 0:return function(o){var a=n?ve:D;return this.fromWireType(a[o])};case 1:return function(o){var a=n?V:de;return this.fromWireType(a[o>>1])};case 2:return function(o){var a=n?g:b;return this.fromWireType(a[o>>2])};default:throw new TypeError("Unknown integer type: "+t)}}function ln(t,r,n,o){var a=Ue(n);r=R(r);function d(){}d.values={},X(t,{name:r,constructor:d,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,s){return s.value},argPackAdvance:8,readValueFromPointer:fn(r,a,o),destructorFunction:null}),Ke(r,d)}function un(t,r,n){var o=Se(t,"enum");r=R(r);var a=o.constructor,d=Object.create(o.constructor.prototype,{value:{value:n},constructor:{value:pe(o.name+"_"+r,function(){})}});a.values[n]=d,a[r]=d}function re(t){if(t===null)return"null";var r=typeof t;return r==="object"||r==="array"||r==="function"?t.toString():""+t}function _n(t,r){switch(r){case 2:return function(n){return this.fromWireType(ut[n>>2])};case 3:return function(n){return this.fromWireType(_t[n>>3])};default:throw new TypeError("Unknown float type: "+t)}}function pn(t,r,n){var o=Ue(n);r=R(r),X(t,{name:r,fromWireType:function(a){return a},toWireType:function(a,d){if(typeof d!="number"&&typeof d!="boolean")throw new TypeError('Cannot convert "'+re(d)+'" to '+this.name);return d},argPackAdvance:8,readValueFromPointer:_n(r,o),destructorFunction:null})}function En(t,r,n,o,a,d){var f=He(r,n);t=R(t),a=A(o,a),Ke(t,function(){Z("Cannot call "+t+" due to unbound types",f)},r-1),I([],f,function(s){var c=[s[0],null].concat(s.slice(1));return It(t,et(t,c,null,a,d),r-1),[]})}function Tn(t,r,n){switch(r){case 0:return n?function(a){return ve[a]}:function(a){return D[a]};case 1:return n?function(a){return V[a>>1]}:function(a){return de[a>>1]};case 2:return n?function(a){return g[a>>2]}:function(a){return b[a>>2]};default:throw new TypeError("Unknown integer type: "+t)}}function On(t,r,n,o,a){r=R(r),a===-1&&(a=4294967295);var d=Ue(n),f=function(u){return u};if(o===0){var s=32-8*n;f=function(u){return u<<s>>>s}}var c=r.indexOf("unsigned")!=-1;X(t,{name:r,fromWireType:f,toWireType:function(u,_){if(typeof _!="number"&&typeof _!="boolean")throw new TypeError('Cannot convert "'+re(_)+'" to '+this.name);if(_<o||_>a)throw new TypeError('Passing a number "'+re(_)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+o+", "+a+"]!");return c?_>>>0:_|0},argPackAdvance:8,readValueFromPointer:Tn(r,d,o!==0),destructorFunction:null})}function yn(t,r,n){var o=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array],a=o[r];function d(f){f=f>>2;var s=b,c=s[f],u=s[f+1];return new a(Y,u,c)}n=R(n),X(t,{name:n,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{ignoreDuplicateRegistrations:!0})}function gn(t,r){r=R(r);var n=r==="std::string";X(t,{name:r,fromWireType:function(o){var a=b[o>>2],d;if(n)for(var f=o+4,s=0;s<=a;++s){var c=o+4+s;if(D[c]==0||s==a){var u=c-f,_=ft(f,u);d===void 0?d=_:(d+=String.fromCharCode(0),d+=_),f=c+1}}else{for(var p=new Array(a),s=0;s<a;++s)p[s]=String.fromCharCode(D[o+4+s]);d=p.join("")}return k(o),d},toWireType:function(o,a){a instanceof ArrayBuffer&&(a=new Uint8Array(a));var d,f=typeof a=="string";f||a instanceof Uint8Array||a instanceof Uint8ClampedArray||a instanceof Int8Array||T("Cannot pass non-string to std::string"),n&&f?d=function(){return Bt(a)}:d=function(){return a.length};var s=d(),c=Ht(4+s+1);if(b[c>>2]=s,n&&f)Gt(a,c+4,s+1);else if(f)for(var u=0;u<s;++u){var _=a.charCodeAt(u);_>255&&(k(c),T("String has UTF-16 code units that do not fit in 8 bits")),D[c+4+u]=_}else for(var u=0;u<s;++u)D[c+4+u]=a[u];return o!==null&&o.push(k,c),c},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:function(o){k(o)}})}function hn(t,r,n){n=R(n);var o,a,d,f,s;r===2?(o=zt,a=Zt,f=qt,d=function(){return de},s=1):r===4&&(o=Jt,a=Kt,f=er,d=function(){return b},s=2),X(t,{name:n,fromWireType:function(c){for(var u=b[c>>2],_=d(),p,O=c+4,y=0;y<=u;++y){var h=c+4+y*r;if(_[h>>s]==0||y==u){var P=h-O,v=o(O,P);p===void 0?p=v:(p+=String.fromCharCode(0),p+=v),O=h+r}}return k(c),p},toWireType:function(c,u){typeof u!="string"&&T("Cannot pass non-string to C++ string type "+n);var _=f(u),p=Ht(4+_+r);return b[p>>2]=_>>s,a(u,p+4,_+r),c!==null&&c.push(k,p),p},argPackAdvance:8,readValueFromPointer:ge,destructorFunction:function(c){k(c)}})}function Rn(t,r,n,o,a,d){Ce[t]={name:R(r),rawConstructor:A(n,o),rawDestructor:A(a,d),fields:[]}}function Pn(t,r,n,o,a,d,f,s,c,u){Ce[t].fields.push({fieldName:R(r),getterReturnType:n,getter:A(o,a),getterContext:d,setterArgumentType:f,setter:A(s,c),setterContext:u})}function wn(t,r){r=R(r),X(t,{isVoid:!0,name:r,argPackAdvance:0,fromWireType:function(){},toWireType:function(n,o){}})}function Dn(t){var r=[];return g[t>>2]=Ee(r),r}var bn={};function Ut(t){var r=bn[t];return r===void 0?R(t):r}var Qe=[];function An(t,r,n,o,a){return t=Qe[t],r=ze(r),n=Ut(n),t(r,n,Dn(o),a)}function vn(t,r,n,o){t=Qe[t],r=ze(r),n=Ut(n),t(r,n,null,o)}function mn(t){var r=Qe.length;return Qe.push(t),r}function Mn(t,r){for(var n=new Array(t),o=0;o<t;++o)n[o]=Se(g[(r>>2)+o],"parameter "+o);return n}function Fn(t,r){for(var n=Mn(t,r),o=n[0],a=o.name+"_$"+n.slice(1).map(function(y){return y.name}).join("_")+"$",d=["retType"],f=[o],s="",c=0;c<t-1;++c)s+=(c!==0?", ":"")+"arg"+c,d.push("argType"+c),f.push(n[1+c]);for(var u=Me("methodCaller_"+a),_="return function "+u+`(handle, name, destructors, args) {
`,p=0,c=0;c<t-1;++c)_+="    var arg"+c+" = argType"+c+".readValueFromPointer(args"+(p?"+"+p:"")+`);
`,p+=n[c+1].argPackAdvance;_+="    var rv = handle[name]("+s+`);
`;for(var c=0;c<t-1;++c)n[c+1].deleteObject&&(_+="    argType"+c+".deleteObject(arg"+c+`);
`);o.isVoid||(_+=`    return retType.toWireType(destructors, rv);
`),_+=`};
`,d.push(_);var O=jt(Function,d).apply(null,f);return mn(O)}function Sn(t){t>4&&(F[t].refcount+=1)}function In(t){var r=F[t].value;ye(r),tt(t)}function Cn(t,r){t=Se(t,"_emval_take_value");var n=t.readValueFromPointer(r);return Ee(n)}function jn(){i()}var ne;Pe?ne=function(){var t=process.hrtime();return t[0]*1e3+t[1]/1e6}:typeof dateNow!="undefined"?ne=dateNow:ne=function(){return performance.now()};var Xn=!0;function rt(t){return g[ci()>>2]=t,t}function Un(t,r){var n;if(t===0)n=Date.now();else if((t===1||t===4)&&Xn)n=ne();else return rt(28),-1;return g[r>>2]=n/1e3|0,g[r+4>>2]=n%1e3*1e3*1e3|0,0}function Nn(){return 203792}function xn(t,r,n){D.copyWithin(t,r,r+n)}function Hn(){return D.length}function Qn(t){try{return $.grow(t-Y.byteLength+65535>>>16),pt($.buffer),1}catch(r){console.error("emscripten_realloc_buffer: Attempted to grow heap from "+Y.byteLength+" bytes to "+t+" bytes, but got error: "+r)}}function Ln(t){t=t>>>0;var r=Hn();E(t>r);var n=65536,o=2147483648;if(t>o)return w("Cannot enlarge memory, asked to go up to "+t+" bytes, but the limit is "+o+" bytes!"),!1;for(var a=16777216,d=1;d<=4;d*=2){var f=r*(1+.2/d);f=Math.min(f,t+100663296);var s=Math.min(o,tr(Math.max(a,t,f),n)),c=Qn(s);if(c)return!0}return w("Failed to grow the heap from "+r+" bytes to "+s+" bytes, not enough memory!"),!1}function kn(){typeof xt!="undefined"&&xt(0);var t=L.buffers;t[1].length&&L.printChar(1,10),t[2].length&&L.printChar(2,10)}var L={mappings:{},buffers:[null,[],[]],printChar:function(t,r){var n=L.buffers[t];E(n),r===0||r===10?((t===1?se:w)(dt(n,0)),n.length=0):n.push(r)},varargs:void 0,get:function(){E(L.varargs!=null),L.varargs+=4;var t=g[L.varargs-4>>2];return t},getStr:function(t){var r=ft(t);return r},get64:function(t,r){return t>=0?E(r===0):E(r===-1),t}};function Wn(t,r,n,o){for(var a=0,d=0;d<n;d++){for(var f=g[r+d*8>>2],s=g[r+(d*8+4)>>2],c=0;c<s;c++)L.printChar(t,D[f+c]);a+=s}return g[o>>2]=a,0}function $n(t){var r=Date.now();return g[t>>2]=r/1e3|0,g[t+4>>2]=r%1e3*1e3|0,0}function Yn(t){for(var r=ne();ne()-r<t/1e3;);}function Vn(t,r){if(t===0)return rt(28),-1;var n=g[t>>2],o=g[t+4>>2];return o<0||o>999999999||n<0?(rt(28),-1):(r!==0&&(g[r>>2]=0,g[r+4>>2]=0),Yn(n*1e6+o/1e3))}function Gn(t){return 0}function Bn(t){return 0}function zn(){}function Zn(){}function qn(){return 6}function Jn(t){fi(t)}function Kn(t){Jn(t)}function ei(){}function ti(){}function ri(){}function ni(){}function ii(){}function oi(t){}vr(),bt=e.PureVirtualError=Fe(Error,"PureVirtualError"),mr(),Ir(),K=e.BindingError=Fe(Error,"BindingError"),Mt=e.InternalError=Fe(Error,"InternalError"),Yr(),tn(),Ct=e.UnboundTypeError=Fe(Error,"UnboundTypeError");var Nt={__handle_stack_overflow:Pr,_embind_create_inheriting_constructor:Ur,_embind_finalize_value_object:Nr,_embind_register_bool:xr,_embind_register_class:rn,_embind_register_class_class_function:nn,_embind_register_class_constructor:on,_embind_register_class_function:an,_embind_register_class_property:sn,_embind_register_constant:cn,_embind_register_emval:dn,_embind_register_enum:ln,_embind_register_enum_value:un,_embind_register_float:pn,_embind_register_function:En,_embind_register_integer:On,_embind_register_memory_view:yn,_embind_register_std_string:gn,_embind_register_std_wstring:hn,_embind_register_value_object:Rn,_embind_register_value_object_field:Pn,_embind_register_void:wn,_emval_call_method:An,_emval_call_void_method:vn,_emval_decref:tt,_emval_get_method_caller:Fn,_emval_incref:Sn,_emval_run_destructors:In,_emval_take_value:Cn,abort:jn,clock_gettime:Un,emscripten_get_sbrk_ptr:Nn,emscripten_memcpy_big:xn,emscripten_resize_heap:Ln,fd_write:Wn,gettimeofday:$n,memory:$,nanosleep:Vn,pthread_attr_destroy:Gn,pthread_attr_init:Bn,pthread_attr_setstacksize:zn,pthread_cancel:Zn,pthread_create:qn,pthread_exit:Kn,pthread_join:ei,pthread_mutexattr_destroy:ti,pthread_mutexattr_init:ri,pthread_mutexattr_setprotocol:ni,pthread_mutexattr_settype:ii,setTempRet0:oi,table:Yt};Or();var ai=e.___wasm_call_ctors=l("__wasm_call_ctors"),k=e._free=l("free");e._memcpy=l("memcpy");var si=e.___getTypeName=l("__getTypeName");e.___embind_register_native_and_builtin_types=l("__embind_register_native_and_builtin_types");var ci=e.___errno_location=l("__errno_location");e._htonl=l("htonl"),e._htons=l("htons"),e._ntohs=l("ntohs");var xt=e._fflush=l("fflush"),Ht=e._malloc=l("malloc");e.stackSave=l("stackSave"),e.stackRestore=l("stackRestore"),e.stackAlloc=l("stackAlloc"),e._emscripten_main_thread_process_queued_calls=l("emscripten_main_thread_process_queued_calls"),e.___set_stack_limit=l("__set_stack_limit"),e.__growWasmMemory=l("__growWasmMemory"),e.dynCall_viiiiiiii=l("dynCall_viiiiiiii"),e.dynCall_iiiii=l("dynCall_iiiii"),e.dynCall_iiii=l("dynCall_iiii"),e.dynCall_iii=l("dynCall_iii"),e.dynCall_ii=l("dynCall_ii"),e.dynCall_iiiiiii=l("dynCall_iiiiiii"),e.dynCall_iiiiii=l("dynCall_iiiiii"),e.dynCall_vii=l("dynCall_vii"),e.dynCall_vi=l("dynCall_vi"),e.dynCall_i=l("dynCall_i"),e.dynCall_viii=l("dynCall_viii"),e.dynCall_fii=l("dynCall_fii"),e.dynCall_viif=l("dynCall_viif"),e.dynCall_iiff=l("dynCall_iiff"),e.dynCall_iifff=l("dynCall_iifff"),e.dynCall_iiiff=l("dynCall_iiiff"),e.dynCall_iiifff=l("dynCall_iiifff"),e.dynCall_viff=l("dynCall_viff"),e.dynCall_viiff=l("dynCall_viiff"),e.dynCall_viiii=l("dynCall_viiii"),e.dynCall_viifi=l("dynCall_viifi"),e.dynCall_iifffi=l("dynCall_iifffi"),e.dynCall_viiiii=l("dynCall_viiiii"),e.dynCall_dii=l("dynCall_dii"),e.dynCall_viid=l("dynCall_viid"),e.dynCall_vifi=l("dynCall_vifi"),e.dynCall_iiiifi=l("dynCall_iiiifi"),e.dynCall_iiiiifi=l("dynCall_iiiiifi"),e.dynCall_iiiifiii=l("dynCall_iiiifiii"),e.dynCall_iiiiifiii=l("dynCall_iiiiifiii"),e.dynCall_iiiifii=l("dynCall_iiiifii"),e.dynCall_iiiiifii=l("dynCall_iiiiifii"),e.dynCall_iiiifiiii=l("dynCall_iiiifiiii"),e.dynCall_iiiiifiiii=l("dynCall_iiiiifiiii"),e.dynCall_iiiiiifiiiiif=l("dynCall_iiiiiifiiiiif"),e.dynCall_viiif=l("dynCall_viiif"),e.dynCall_iiiif=l("dynCall_iiiif"),e.dynCall_iiiiiiii=l("dynCall_iiiiiiii"),e.dynCall_viiiiii=l("dynCall_viiiiii"),e.dynCall_iiiiiiiii=l("dynCall_iiiiiiiii"),e.dynCall_iif=l("dynCall_iif"),e.dynCall_iiif=l("dynCall_iiif"),e.dynCall_vif=l("dynCall_vif"),e.dynCall_iiiifff=l("dynCall_iiiifff"),e.dynCall_iiffff=l("dynCall_iiffff"),e.dynCall_iiiiffii=l("dynCall_iiiiffii"),e.dynCall_fi=l("dynCall_fi"),e.dynCall_fif=l("dynCall_fif"),e.dynCall_fiif=l("dynCall_fiif"),e.dynCall_v=l("dynCall_v"),e.dynCall_iifi=l("dynCall_iifi"),e.dynCall_viiiiiii=l("dynCall_viiiiiii"),e.dynCall_viiifi=l("dynCall_viiifi"),e.dynCall_viiffi=l("dynCall_viiffi"),e.dynCall_viifffi=l("dynCall_viifffi"),e.dynCall_viiifiiiii=l("dynCall_viiifiiiii"),e.dynCall_viiiifiiiiif=l("dynCall_viiiifiiiiif"),e.dynCall_iiiifiiiii=l("dynCall_iiiifiiiii"),e.dynCall_iiiiifiiiiif=l("dynCall_iiiiifiiiiif"),e.dynCall_vifiiii=l("dynCall_vifiiii"),e.dynCall_iiiifffiii=l("dynCall_iiiifffiii"),e.dynCall_iifiiiijii=l("dynCall_iifiiiijii"),e.dynCall_vifijii=l("dynCall_vifijii"),e.dynCall_viiiiiiiii=l("dynCall_viiiiiiiii"),e.dynCall_viffiiiif=l("dynCall_viffiiiif"),e.dynCall_viffiifffffiii=l("dynCall_viffiifffffiii"),e.dynCall_viffffiifffiiiiif=l("dynCall_viffffiifffiiiiif"),e.dynCall_iiiifffffii=l("dynCall_iiiifffffii"),e.dynCall_iiiifffffi=l("dynCall_iiiifffffi"),e.dynCall_viiiiiiiiiiifii=l("dynCall_viiiiiiiiiiifii"),e.dynCall_viiiiiiiiii=l("dynCall_viiiiiiiiii"),e.dynCall_viiiffi=l("dynCall_viiiffi"),e.dynCall_vifii=l("dynCall_vifii"),e.dynCall_viiiffii=l("dynCall_viiiffii"),e.dynCall_iiiiiifiii=l("dynCall_iiiiiifiii"),e.dynCall_iiiiiiifiif=l("dynCall_iiiiiiifiif"),e.dynCall_iiiiiifiif=l("dynCall_iiiiiifiif"),e.dynCall_fiiiiiifiifif=l("dynCall_fiiiiiifiifif"),e.dynCall_fiiiiiifiiiif=l("dynCall_fiiiiiifiiiif"),e.dynCall_fiff=l("dynCall_fiff"),e.dynCall_viiifii=l("dynCall_viiifii"),e.dynCall_iiiiiiiiii=l("dynCall_iiiiiiiiii"),e.dynCall_iiiiiiiiiii=l("dynCall_iiiiiiiiiii"),e.dynCall_viij=l("dynCall_viij"),e.dynCall_viiji=l("dynCall_viiji"),e.dynCall_viijijj=l("dynCall_viijijj"),e.dynCall_viijj=l("dynCall_viijj"),e.dynCall_iiiij=l("dynCall_iiiij"),e.dynCall_viiiij=l("dynCall_viiiij"),e.dynCall_ji=l("dynCall_ji"),e.dynCall_iidiiii=l("dynCall_iidiiii"),e.dynCall_jiji=l("dynCall_jiji"),Object.getOwnPropertyDescriptor(e,"intArrayFromString")||(e.intArrayFromString=function(){i("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"intArrayToString")||(e.intArrayToString=function(){i("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ccall")||(e.ccall=function(){i("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"cwrap")||(e.cwrap=function(){i("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setValue")||(e.setValue=function(){i("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getValue")||(e.getValue=function(){i("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"allocate")||(e.allocate=function(){i("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getMemory")||(e.getMemory=function(){i("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"UTF8ArrayToString")||(e.UTF8ArrayToString=function(){i("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UTF8ToString")||(e.UTF8ToString=function(){i("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF8Array")||(e.stringToUTF8Array=function(){i("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF8")||(e.stringToUTF8=function(){i("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"lengthBytesUTF8")||(e.lengthBytesUTF8=function(){i("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackTrace")||(e.stackTrace=function(){i("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnPreRun")||(e.addOnPreRun=function(){i("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnInit")||(e.addOnInit=function(){i("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnPreMain")||(e.addOnPreMain=function(){i("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnExit")||(e.addOnExit=function(){i("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addOnPostRun")||(e.addOnPostRun=function(){i("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeStringToMemory")||(e.writeStringToMemory=function(){i("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeArrayToMemory")||(e.writeArrayToMemory=function(){i("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeAsciiToMemory")||(e.writeAsciiToMemory=function(){i("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addRunDependency")||(e.addRunDependency=function(){i("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"removeRunDependency")||(e.removeRunDependency=function(){i("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createFolder")||(e.FS_createFolder=function(){i("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createPath")||(e.FS_createPath=function(){i("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createDataFile")||(e.FS_createDataFile=function(){i("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createPreloadedFile")||(e.FS_createPreloadedFile=function(){i("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createLazyFile")||(e.FS_createLazyFile=function(){i("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createLink")||(e.FS_createLink=function(){i("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_createDevice")||(e.FS_createDevice=function(){i("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"FS_unlink")||(e.FS_unlink=function(){i("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you")}),Object.getOwnPropertyDescriptor(e,"dynamicAlloc")||(e.dynamicAlloc=function(){i("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"loadDynamicLibrary")||(e.loadDynamicLibrary=function(){i("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"loadWebAssemblyModule")||(e.loadWebAssemblyModule=function(){i("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getLEB")||(e.getLEB=function(){i("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getFunctionTables")||(e.getFunctionTables=function(){i("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"alignFunctionTables")||(e.alignFunctionTables=function(){i("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registerFunctions")||(e.registerFunctions=function(){i("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"addFunction")||(e.addFunction=function(){i("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"removeFunction")||(e.removeFunction=function(){i("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getFuncWrapper")||(e.getFuncWrapper=function(){i("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"prettyPrint")||(e.prettyPrint=function(){i("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"makeBigInt")||(e.makeBigInt=function(){i("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"dynCall")||(e.dynCall=function(){i("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getCompilerSetting")||(e.getCompilerSetting=function(){i("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"print")||(e.print=function(){i("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"printErr")||(e.printErr=function(){i("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getTempRet0")||(e.getTempRet0=function(){i("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setTempRet0")||(e.setTempRet0=function(){i("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"callMain")||(e.callMain=function(){i("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"abort")||(e.abort=function(){i("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToNewUTF8")||(e.stringToNewUTF8=function(){i("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscripten_realloc_buffer")||(e.emscripten_realloc_buffer=function(){i("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ENV")||(e.ENV=function(){i("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ERRNO_CODES")||(e.ERRNO_CODES=function(){i("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ERRNO_MESSAGES")||(e.ERRNO_MESSAGES=function(){i("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setErrNo")||(e.setErrNo=function(){i("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"DNS")||(e.DNS=function(){i("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GAI_ERRNO_MESSAGES")||(e.GAI_ERRNO_MESSAGES=function(){i("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"Protocols")||(e.Protocols=function(){i("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"Sockets")||(e.Sockets=function(){i("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UNWIND_CACHE")||(e.UNWIND_CACHE=function(){i("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readAsmConstArgs")||(e.readAsmConstArgs=function(){i("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"jstoi_q")||(e.jstoi_q=function(){i("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"jstoi_s")||(e.jstoi_s=function(){i("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"abortStackOverflow")||(e.abortStackOverflow=function(){i("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"reallyNegative")||(e.reallyNegative=function(){i("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"formatString")||(e.formatString=function(){i("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PATH")||(e.PATH=function(){i("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PATH_FS")||(e.PATH_FS=function(){i("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SYSCALLS")||(e.SYSCALLS=function(){i("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"syscallMmap2")||(e.syscallMmap2=function(){i("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"syscallMunmap")||(e.syscallMunmap=function(){i("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"flush_NO_FILESYSTEM")||(e.flush_NO_FILESYSTEM=function(){i("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"JSEvents")||(e.JSEvents=function(){i("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"specialHTMLTargets")||(e.specialHTMLTargets=function(){i("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"demangle")||(e.demangle=function(){i("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"demangleAll")||(e.demangleAll=function(){i("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"jsStackTrace")||(e.jsStackTrace=function(){i("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackTrace")||(e.stackTrace=function(){i("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getEnvStrings")||(e.getEnvStrings=function(){i("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"checkWasiClock")||(e.checkWasiClock=function(){i("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToI64")||(e.writeI53ToI64=function(){i("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToI64Clamped")||(e.writeI53ToI64Clamped=function(){i("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToI64Signaling")||(e.writeI53ToI64Signaling=function(){i("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToU64Clamped")||(e.writeI53ToU64Clamped=function(){i("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"writeI53ToU64Signaling")||(e.writeI53ToU64Signaling=function(){i("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readI53FromI64")||(e.readI53FromI64=function(){i("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readI53FromU64")||(e.readI53FromU64=function(){i("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"convertI32PairToI53")||(e.convertI32PairToI53=function(){i("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"convertU32PairToI53")||(e.convertU32PairToI53=function(){i("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"Browser")||(e.Browser=function(){i("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"FS")||(e.FS=function(){i("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"MEMFS")||(e.MEMFS=function(){i("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"TTY")||(e.TTY=function(){i("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PIPEFS")||(e.PIPEFS=function(){i("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SOCKFS")||(e.SOCKFS=function(){i("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GL")||(e.GL=function(){i("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGet")||(e.emscriptenWebGLGet=function(){i("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGetTexPixelData")||(e.emscriptenWebGLGetTexPixelData=function(){i("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGetUniform")||(e.emscriptenWebGLGetUniform=function(){i("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emscriptenWebGLGetVertexAttrib")||(e.emscriptenWebGLGetVertexAttrib=function(){i("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"AL")||(e.AL=function(){i("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_unicode")||(e.SDL_unicode=function(){i("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_ttfContext")||(e.SDL_ttfContext=function(){i("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_audio")||(e.SDL_audio=function(){i("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL")||(e.SDL=function(){i("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"SDL_gfx")||(e.SDL_gfx=function(){i("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLUT")||(e.GLUT=function(){i("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"EGL")||(e.EGL=function(){i("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLFW_Window")||(e.GLFW_Window=function(){i("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLFW")||(e.GLFW=function(){i("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"GLEW")||(e.GLEW=function(){i("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"IDBStore")||(e.IDBStore=function(){i("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"runAndAbortIfError")||(e.runAndAbortIfError=function(){i("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_handle_array")||(e.emval_handle_array=function(){i("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_free_list")||(e.emval_free_list=function(){i("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_symbols")||(e.emval_symbols=function(){i("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_emval")||(e.init_emval=function(){i("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"count_emval_handles")||(e.count_emval_handles=function(){i("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"get_first_emval")||(e.get_first_emval=function(){i("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getStringOrSymbol")||(e.getStringOrSymbol=function(){i("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"requireHandle")||(e.requireHandle=function(){i("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_newers")||(e.emval_newers=function(){i("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"craftEmvalAllocator")||(e.craftEmvalAllocator=function(){i("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_get_global")||(e.emval_get_global=function(){i("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"emval_methodCallers")||(e.emval_methodCallers=function(){i("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"InternalError")||(e.InternalError=function(){i("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"BindingError")||(e.BindingError=function(){i("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UnboundTypeError")||(e.UnboundTypeError=function(){i("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"PureVirtualError")||(e.PureVirtualError=function(){i("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_embind")||(e.init_embind=function(){i("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwInternalError")||(e.throwInternalError=function(){i("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwBindingError")||(e.throwBindingError=function(){i("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwUnboundTypeError")||(e.throwUnboundTypeError=function(){i("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ensureOverloadTable")||(e.ensureOverloadTable=function(){i("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"exposePublicSymbol")||(e.exposePublicSymbol=function(){i("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"replacePublicSymbol")||(e.replacePublicSymbol=function(){i("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"extendError")||(e.extendError=function(){i("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"createNamedFunction")||(e.createNamedFunction=function(){i("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registeredInstances")||(e.registeredInstances=function(){i("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getBasestPointer")||(e.getBasestPointer=function(){i("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registerInheritedInstance")||(e.registerInheritedInstance=function(){i("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"unregisterInheritedInstance")||(e.unregisterInheritedInstance=function(){i("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getInheritedInstance")||(e.getInheritedInstance=function(){i("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getInheritedInstanceCount")||(e.getInheritedInstanceCount=function(){i("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getLiveInheritedInstances")||(e.getLiveInheritedInstances=function(){i("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registeredTypes")||(e.registeredTypes=function(){i("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"awaitingDependencies")||(e.awaitingDependencies=function(){i("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"typeDependencies")||(e.typeDependencies=function(){i("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registeredPointers")||(e.registeredPointers=function(){i("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"registerType")||(e.registerType=function(){i("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"whenDependentTypesAreResolved")||(e.whenDependentTypesAreResolved=function(){i("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"embind_charCodes")||(e.embind_charCodes=function(){i("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"embind_init_charCodes")||(e.embind_init_charCodes=function(){i("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"readLatin1String")||(e.readLatin1String=function(){i("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getTypeName")||(e.getTypeName=function(){i("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"heap32VectorToArray")||(e.heap32VectorToArray=function(){i("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"requireRegisteredType")||(e.requireRegisteredType=function(){i("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"getShiftFromSize")||(e.getShiftFromSize=function(){i("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"integerReadValueFromPointer")||(e.integerReadValueFromPointer=function(){i("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"enumReadValueFromPointer")||(e.enumReadValueFromPointer=function(){i("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"floatReadValueFromPointer")||(e.floatReadValueFromPointer=function(){i("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"simpleReadValueFromPointer")||(e.simpleReadValueFromPointer=function(){i("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"runDestructors")||(e.runDestructors=function(){i("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"new_")||(e.new_=function(){i("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"craftInvokerFunction")||(e.craftInvokerFunction=function(){i("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"embind__requireFunction")||(e.embind__requireFunction=function(){i("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"tupleRegistrations")||(e.tupleRegistrations=function(){i("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"structRegistrations")||(e.structRegistrations=function(){i("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"genericPointerToWireType")||(e.genericPointerToWireType=function(){i("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"constNoSmartPtrRawPointerToWireType")||(e.constNoSmartPtrRawPointerToWireType=function(){i("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"nonConstNoSmartPtrRawPointerToWireType")||(e.nonConstNoSmartPtrRawPointerToWireType=function(){i("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_RegisteredPointer")||(e.init_RegisteredPointer=function(){i("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer")||(e.RegisteredPointer=function(){i("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_getPointee")||(e.RegisteredPointer_getPointee=function(){i("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_destructor")||(e.RegisteredPointer_destructor=function(){i("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_deleteObject")||(e.RegisteredPointer_deleteObject=function(){i("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredPointer_fromWireType")||(e.RegisteredPointer_fromWireType=function(){i("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"runDestructor")||(e.runDestructor=function(){i("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"releaseClassHandle")||(e.releaseClassHandle=function(){i("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"finalizationGroup")||(e.finalizationGroup=function(){i("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"detachFinalizer_deps")||(e.detachFinalizer_deps=function(){i("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"detachFinalizer")||(e.detachFinalizer=function(){i("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"attachFinalizer")||(e.attachFinalizer=function(){i("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"makeClassHandle")||(e.makeClassHandle=function(){i("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"init_ClassHandle")||(e.init_ClassHandle=function(){i("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle")||(e.ClassHandle=function(){i("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_isAliasOf")||(e.ClassHandle_isAliasOf=function(){i("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"throwInstanceAlreadyDeleted")||(e.throwInstanceAlreadyDeleted=function(){i("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_clone")||(e.ClassHandle_clone=function(){i("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_delete")||(e.ClassHandle_delete=function(){i("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"deletionQueue")||(e.deletionQueue=function(){i("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_isDeleted")||(e.ClassHandle_isDeleted=function(){i("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"ClassHandle_deleteLater")||(e.ClassHandle_deleteLater=function(){i("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"flushPendingDeletes")||(e.flushPendingDeletes=function(){i("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"delayFunction")||(e.delayFunction=function(){i("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"setDelayFunction")||(e.setDelayFunction=function(){i("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"RegisteredClass")||(e.RegisteredClass=function(){i("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"shallowCopyInternalPointer")||(e.shallowCopyInternalPointer=function(){i("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"downcastPointer")||(e.downcastPointer=function(){i("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"upcastPointer")||(e.upcastPointer=function(){i("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"validateThis")||(e.validateThis=function(){i("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"char_0")||(e.char_0=function(){i("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"char_9")||(e.char_9=function(){i("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"makeLegalFunctionName")||(e.makeLegalFunctionName=function(){i("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"warnOnce")||(e.warnOnce=function(){i("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackSave")||(e.stackSave=function(){i("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackRestore")||(e.stackRestore=function(){i("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stackAlloc")||(e.stackAlloc=function(){i("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"AsciiToString")||(e.AsciiToString=function(){i("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToAscii")||(e.stringToAscii=function(){i("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UTF16ToString")||(e.UTF16ToString=function(){i("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF16")||(e.stringToUTF16=function(){i("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"lengthBytesUTF16")||(e.lengthBytesUTF16=function(){i("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"UTF32ToString")||(e.UTF32ToString=function(){i("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"stringToUTF32")||(e.stringToUTF32=function(){i("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"lengthBytesUTF32")||(e.lengthBytesUTF32=function(){i("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"allocateUTF8")||(e.allocateUTF8=function(){i("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),Object.getOwnPropertyDescriptor(e,"allocateUTF8OnStack")||(e.allocateUTF8OnStack=function(){i("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}),e.writeStackCookie=Tt,e.checkStackCookie=J,Object.getOwnPropertyDescriptor(e,"ALLOC_NORMAL")||Object.defineProperty(e,"ALLOC_NORMAL",{configurable:!0,get:function(){i("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),Object.getOwnPropertyDescriptor(e,"ALLOC_STACK")||Object.defineProperty(e,"ALLOC_STACK",{configurable:!0,get:function(){i("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),Object.getOwnPropertyDescriptor(e,"ALLOC_DYNAMIC")||Object.defineProperty(e,"ALLOC_DYNAMIC",{configurable:!0,get:function(){i("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}}),Object.getOwnPropertyDescriptor(e,"ALLOC_NONE")||Object.defineProperty(e,"ALLOC_NONE",{configurable:!0,get:function(){i("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")}});var Le;function Qt(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}ue=function t(){Le||nt(),Le||(ue=t)};function nt(t){if(G>0||(Tt(),or(),G>0))return;function r(){Le||(Le=!0,e.calledRun=!0,!be&&(ar(),sr(),ot(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),E(!e._main,'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]'),dr()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),r()},1)):r(),J()}e.run=nt;function di(){var t=se,r=w,n=!1;se=w=function(a){n=!0};try{var o=kn;o&&o()}catch(a){}se=t,w=r,n&&(U("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),U("(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)"))}function fi(t,r){if(di(),!(r&&De&&t===0)){if(De){if(!r){var n="program exited (with status: "+t+"), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";at(n)}}else be=!0,cr(),e.onExit&&e.onExit(t);he(t,new Qt(t))}}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();return De=!0,nt(),ie.ready}}();export{ui as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
