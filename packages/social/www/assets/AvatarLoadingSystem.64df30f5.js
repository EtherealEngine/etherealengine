import{O as I,ak as Q}from"./three.module.493739a3.js";import{T as D,E as F}from"./tween.esm.78508545.js";import{c as L,t as O,d as C,B as h,D as _,A as B,g as l,a as x,r as v,F as k}from"./avatarFunctions.6d66cf01.js";import{O as p}from"./[projectId].a008d20c.js";import{T as y}from"./TweenComponent.b7ca1b88.js";import"./index.7b02be28.js";import"./vendor.475cb2ff.js";import"./_app.f0a72417.js";import"./AuthService.e8999ddc.js";import"./AlertService.5d8abaff.js";import"./feathers.32f4d4e8.js";import"./SystemUpdateType.772fc25d.js";import"./upload.bd537b46.js";import"./index.81138b53.js";const g=L("AvatarDissolveComponent"),z=(r,f)=>Math.min(1,Math.max(.001,r/f)),R=(r,f)=>Math.min(1,Math.max(0,1-(r-f)*.5));async function et(r){await O.loadAsync({url:"/itemLight.png"}),await O.loadAsync({url:"/itemPlate.png"});const f=C([h,p,_]),E=C([h,p]),T=C([B,p,g]);return()=>{const{delta:A}=r;for(const t of f.enter(r)){const b=l(t,p).value,d=l(t,h),a=new I;a.name="pillar_obj",b.add(a);const i=l(t,_),n=i.light,e=i.plate,c=.6*e.geometry.boundingSphere?.radius;for(let u=0,j=5+10*c*Math.random();u<j;u+=1){const m=n.clone();m.material=n.material.clone(),m.position.y-=2*m.geometry.boundingSphere?.radius*Math.random();var w=2*Math.PI*u/j,S=c*Math.random();m.position.x+=S*Math.cos(w),m.position.z+=S*Math.sin(w),m.rotation.y=Math.random()*2*Math.PI,a.add(m)}const o=e.clone();o.name="plate_obj",o.material=o.material.clone(),b.add(o),o.rotation.x=-.5*Math.PI,x(t,y,{tween:new D(d).to({opacityMultiplier:1},1e3).easing(F.Exponential.Out).start().onComplete(()=>{v(t,y);const u=l(t,p).value,j=new Q().setFromObject(u.children[0]);x(t,g,{effect:new k(u,j.min.y,j.max.y)})})})}for(const t of f.exit(r));for(const t of E(r)){const b=l(t,p).value,d=l(t,h).opacityMultiplier;let a=null,i=null;const n=b.children;for(let e=0;e<n.length;e++)n[e].name==="pillar_obj"&&(a=n[e]),n[e].name==="plate_obj"&&(i=n[e]);if(a!==null&&i!==null&&(i.material.opacity=d*(.7+.5*Math.sin(Date.now()%6283*.005)),a!==void 0&&i!==void 0))for(var M=0,P=a.children.length;M<P;M++){var s=a.children[M];s.position.y+=2*A,s.scale.y=z(s.position.y,s.geometry.boundingSphere.radius),s.material.opacity=R(s.position.y,s.geometry.boundingSphere.radius),s.material.opacity<.001&&(s.position.y=i.position.y),s.material.opacity*=d}}for(const t of T(r))if(l(t,g).effect.update(A)){v(t,g);const d=l(t,p).value,a=l(t,h);a.originMaterials.forEach(({id:i,material:n})=>{d.traverse(e=>{e.uuid===i&&(e.material=n)})}),x(t,y,{tween:new D(a).to({opacityMultiplier:0},2e3).start().onComplete(async()=>{v(t,y);const i=l(t,p).value;let n=null,e=null;const c=i.children;for(let o=0;o<c.length;o++)c[o].name==="pillar_obj"&&(n=c[o]),c[o].name==="plate_obj"&&(e=c[o]);n!==null&&(n.traverse(function(o){o.material&&o.material.dispose()}),n.parent.remove(n)),e!==null&&(e.traverse(function(o){o.material&&o.material.dispose()}),e.parent.remove(e)),v(t,h)})})}return r}}export{et as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
