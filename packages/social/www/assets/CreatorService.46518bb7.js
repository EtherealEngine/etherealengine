import{A as c}from"./AlertService.5d8abaff.js";import{c as s}from"./feathers.32f4d4e8.js";import{u}from"./upload.bd537b46.js";import{q as l}from"./_app.f0a72417.js";const o={setStateCreators:r=>({type:"SET_STATE_CREATORS",splashTimeout:r}),creatorLoggedRetrieved:r=>({type:"CURRENT_CREATOR_RETRIEVED",creator:r}),creatorRetrieved:r=>({type:"CREATOR_RETRIEVED",creator:r}),fetchingCreators:()=>({type:"CREATORS_FETCH"}),fetchingCurrentCreator:()=>({type:"CURRENT_CREATOR_FETCH"}),fetchingCreator:()=>({type:"CREATOR_FETCH"}),creatorsRetrieved:r=>({type:"CREATORS_RETRIEVED",creators:r}),creatorNotificationList:r=>({type:"CREATOR_NOTIFICATION_LIST_RETRIEVED",notifications:r}),updateCreatorAsFollowed:()=>({type:"SET_CREATOR_AS_FOLLOWED"}),updateCreatorNotFollowed:()=>({type:"SET_CREATOR_NOT_FOLLOWED"}),updateCreatorAsBlocked:r=>({type:"SET_CREATOR_AS_BLOCKED",creatorId:r}),updateCreatorAsUnBlocked:r=>({type:"SET_CREATOR_AS_UN_BLOCKED",blokedCreatorId:r}),creatorBlockedUsers:r=>({type:"CREATOR_BLOCKED_RETRIEVED",creators:r}),creatorFollowers:r=>({type:"CREATOR_FOLLOWERS_RETRIEVED",creators:r}),creatorFollowing:r=>({type:"CREATOR_FOLLOWING_RETRIEVED",creators:r})},i={createCreator:r=>async(e,t)=>{try{e(o.fetchingCurrentCreator());let a=Math.floor(Math.random()*1e3)+1,n=r??{name:r?.name||"User"+a,username:r?.username||"user_"+a};const E=await s.service("creator").create(n);e(o.creatorLoggedRetrieved(E))}catch(a){console.log(a),c.dispatchAlertError(e,a.message)}},getLoggedCreator:()=>async r=>{try{r(o.fetchingCurrentCreator());const e=await s.service("creator").find({query:{action:"current"}});r(o.creatorLoggedRetrieved(e))}catch(e){console.log(e),c.dispatchAlertError(r,e.message)}},getCreators:r=>async(e,t)=>{try{e(o.fetchingCreators());const a=await s.service("creator").find({query:{}});e(o.creatorsRetrieved(a))}catch(a){console.log(a),c.dispatchAlertError(e,a.message)}},getCreator:r=>async e=>{try{e(o.fetchingCreator());const t=await s.service("creator").get(r);e(o.creatorRetrieved(t))}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}},updateCreator:(r,e)=>async t=>{try{if(t(o.fetchingCurrentCreator()),r.newAvatar){const n=await u(r.newAvatar,null);r.avatarId=n.file_id,delete r.newAvatar}const a=await s.service("creator").patch(r.id,r);a&&(t(o.creatorLoggedRetrieved(a)),e&&e("succes"))}catch(a){console.log(a),c.dispatchAlertError(t,a.message),e&&e(a.message)}},getCreatorNotificationList:()=>async r=>{try{r(o.fetchingCreator());const e=await s.service("notifications").find({query:{action:"byCurrentCreator"}});r(o.creatorNotificationList(e))}catch(e){console.log(e),c.dispatchAlertError(r,e.message)}},followCreator:r=>async e=>{try{await s.service("follow-creator").create({creatorId:r})&&e(o.updateCreatorAsFollowed())}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}},unFollowCreator:r=>async e=>{try{await s.service("follow-creator").remove(r)&&e(o.updateCreatorNotFollowed())}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}},blockCreator:r=>async e=>{try{await s.service("block-creator").create({creatorId:r})&&e(o.updateCreatorAsBlocked(r))}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}},unBlockCreator:r=>async e=>{try{const t=await s.service("block-creator").remove({blokedCreatorId:r});t&&(l(i.getBlockedList,e)(t),l(i.getCreators,e)())}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}},getBlockedList:r=>async e=>{try{const t=await s.service("block-creator").find({query:{action:"blocked",creatorId:r}});e(o.creatorBlockedUsers(t.data))}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}},getFollowersList:r=>async e=>{try{const t=await s.service("follow-creator").find({query:{action:"followers",creatorId:r}});e(o.creatorFollowers(t.data))}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}},getFollowingList:r=>async e=>{try{const t=await s.service("follow-creator").find({query:{action:"following",creatorId:r}});e(o.creatorFollowing(t.data))}catch(t){console.log(t),c.dispatchAlertError(e,t.message)}}};export{i as C,o as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
