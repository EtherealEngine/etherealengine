import{E as d,g as u,i as P,b as l}from"./avatarFunctions.c7a0e273.js";import{N as h}from"./AuthService.6db25508.js";import{T as f}from"./SystemUpdateType.4e88f289.js";import"./three.module.0404e109.js";import"./index.0040ebb6.js";import"./vendor.c8b8cc93.js";import"./AlertService.bfed2141.js";import"./_app.009e96ac.js";import"./feathers.081246a7.js";import"./upload.38e3baaf.js";import"./index.9af95596.js";const g={qvga:{width:{ideal:320},height:{ideal:240}},vga:{width:{ideal:640},height:{ideal:480}},hd:{width:{ideal:1280},height:{ideal:720}},fhd:{width:{ideal:1920},height:{ideal:1080}}},m={audio:!0},v={video:{width:g.hd.width,height:g.hd.height,frameRate:{max:30}}},E=(o,e)=>o.distance-e.distance;function p(o,e=8){const a=d.defaultWorld.getUserAvatarEntity(o),t=[];for(const[i]of d.defaultWorld.clients)o!==i&&t.push(o);if(a!=null){const i=u(a,f).position;if(i){const s=[];for(const n of t){const S=d.defaultWorld.getUserAvatarEntity(n),c=u(S,f).position;c&&s.push({id:n,distance:c.distanceTo(i)})}return s.sort(E).slice(0,e)}else return[]}else return[]}class r{static EVENTS={TRIGGER_UPDATE_CONSUMERS:"NETWORK_TRANSPORT_EVENT_UPDATE_CONSUMERS",CLOSE_CONSUMER:"NETWORK_TRANSPORT_EVENT_CLOSE_CONSUMER",UPDATE_NEARBY_LAYER_USERS:"NETWORK_TRANSPORT_EVENT_UPDATE_NEARBY_LAYER_USERS"};static instance=new r;videoPaused=!1;audioPaused=!1;faceTracking=!1;videoStream=null;audioStream=null;audioGainNode=null;localScreen=null;camVideoProducer=null;camAudioProducer=null;screenVideoProducer=null;screenAudioProducer=null;producers=[];consumers=[];screenShareVideoPaused=!1;screenShareAudioPaused=!1;initialized=!1;channelType=null;channelId=null;nearbyLayerUsers=[];setFaceTracking(e){return this.faceTracking=e,this.faceTracking}setVideoPaused(e){return console.log("setVideoPaused"),this.videoPaused=e,this.videoPaused}setAudioPaused(e){return this.audioPaused=e,this.audioPaused}setScreenShareVideoPaused(e){return this.screenShareVideoPaused=e,this.screenShareVideoPaused}setScreenShareAudioPaused(e){return this.screenShareAudioPaused=e,this.screenShareAudioPaused}toggleVideoPaused(){return console.log("toggleVideoPaused"),console.log(this.videoPaused),this.videoPaused=!this.videoPaused,this.videoPaused}toggleAudioPaused(){return this.audioPaused=!this.audioPaused,this.audioPaused}toggleScreenShareVideoPaused(){return this.screenShareVideoPaused=!this.screenShareVideoPaused,this.screenShareVideoPaused}toggleScreenShareAudioPaused(){return this.screenShareAudioPaused=!this.screenShareAudioPaused,this.screenShareAudioPaused}async startCamera(){return console.log("start camera"),this.videoStream?!1:await this.getVideoStream()}async startMic(){return console.log("start Mic"),this.audioStream?!1:await this.getAudioStream()}async cycleCamera(){if(!(this.camVideoProducer&&this.camVideoProducer.track))return console.log("cannot cycle camera - no current camera track"),!1;console.log("cycle camera");const e=await this.getCurrentDeviceId("video"),t=(await navigator.mediaDevices.enumerateDevices()).filter(s=>s.kind==="videoinput");if(!(t.length>1))return console.log("cannot cycle camera - only one camera"),!1;let i=t.findIndex(s=>s.deviceId===e);return i===t.length-1?i=0:i+=1,console.log("getting a video stream from new device",t[i].label),this.videoStream=await navigator.mediaDevices.getUserMedia({video:{deviceId:{exact:t[i].deviceId}}}),await this.camVideoProducer.replaceTrack({track:this.videoStream.getVideoTracks()[0]}),!0}getScreenPausedState(){return this.screenShareVideoPaused}getScreenAudioPausedState(){return this.screenShareAudioPaused}static removeVideoAudio(e){document.querySelectorAll(e.id).forEach(a=>{a.consumer===e&&a?.parentNode.removeChild(a)})}async getCurrentDeviceId(e){if(e==="video"){if(!this.camVideoProducer)return null;const{deviceId:a}=this.camVideoProducer.track.getSettings();if(a)return a;const t=this.videoStream&&this.videoStream.getVideoTracks()[0];return t?(await navigator.mediaDevices.enumerateDevices()).find(n=>n.label.startsWith(t.label)).deviceId:null}if(e==="audio"){if(!this.camAudioProducer)return null;const{deviceId:a}=this.camAudioProducer.track.getSettings();if(a)return a;const t=this.audioStream&&this.audioStream.getAudioTracks()[0];return t?(await navigator.mediaDevices.enumerateDevices()).find(n=>n.label.startsWith(t.label)).deviceId:null}}async getVideoStream(){try{return console.log("Getting video stream"),console.log(v),this.videoStream=await navigator.mediaDevices.getUserMedia(v),console.log(this.videoStream),this.videoStream.active?(this.videoPaused=!1,!0):(this.videoPaused=!0,!1)}catch(e){console.log("failed to get video stream"),console.log(e)}return!1}async getAudioStream(){try{return console.log("Getting audio stream"),console.log(m),this.audioStream=await navigator.mediaDevices.getUserMedia(m),console.log(this.audioStream),this.audioStream.active?(this.audioPaused=!1,!0):(this.audioPaused=!0,!1)}catch(e){console.log("failed to get audio stream"),console.log(e)}return!1}}async function w(o){let e=0,a=!1;return()=>{if(e++,h.instance.mediasoupOperationQueue.getBufferLength()>0&&a===!1){a=!0;const t=h.instance.mediasoupOperationQueue.pop();if(t.object&&t.object.closed!==!0&&t.object._closed!==!0)try{t.action==="resume"?t.object.resume():t.action==="pause"&&t.object.pause(),a=!1}catch(i){a=!1,console.log("Pause or resume error"),console.log(i),console.log(t.object)}else a=!1}if(e>500&&(e=0,P&&r.instance.channelType==="instance")){r.instance.nearbyLayerUsers=p(d.userId);const t=r.instance.nearbyLayerUsers.map(i=>i.id);l.instance.dispatchEvent({type:r.EVENTS.UPDATE_NEARBY_LAYER_USERS}),r.instance.consumers.forEach(i=>{t.includes(i._appData.peerId)||l.instance.dispatchEvent({type:r.EVENTS.CLOSE_CONSUMER,consumer:i})})}}}export{r as MediaStreams,w as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
