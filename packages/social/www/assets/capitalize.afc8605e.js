import{_ as p,z as pe,B as Be,D as He,E as Ze,F as Qe,G as Xe}from"./_app.009e96ac.js";import{p as ge,d as Ye,q as ye,R as b,j as z}from"./vendor.c8b8cc93.js";var et=typeof Symbol=="function"&&Symbol.for,tt=et?Symbol.for("mui.nested"):"__THEME_NESTED__",rt=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];function nt(){var i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=i.disableGlobal,r=t===void 0?!1:t,e=i.productionPrefix,n=e===void 0?"jss":e,s=i.seed,a=s===void 0?"":s,o=a===""?"":"".concat(a,"-"),l=0,f=function(){return l+=1,l};return function(d,h){var v=h.options.name;if(v&&v.indexOf("Mui")===0&&!h.options.link&&!r){if(rt.indexOf(d.key)!==-1)return"Mui-".concat(d.key);var g="".concat(o).concat(v,"-").concat(d.key);return!h.options.theme[tt]||a!==""?g:"".concat(g,"-").concat(f())}return"".concat(o).concat(n).concat(f())}}function it(i){var t=i.theme,r=i.name,e=i.props;if(!t||!t.props||!t.props[r])return e;var n=t.props[r],s;for(s in n)e[s]===void 0&&(e[s]=n[s]);return e}var me=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(i){return typeof i}:function(i){return i&&typeof Symbol=="function"&&i.constructor===Symbol&&i!==Symbol.prototype?"symbol":typeof i},E=(typeof window=="undefined"?"undefined":me(window))==="object"&&(typeof document=="undefined"?"undefined":me(document))==="object"&&document.nodeType===9,st={}.constructor;function F(i){if(i==null||typeof i!="object")return i;if(Array.isArray(i))return i.map(F);if(i.constructor!==st)return i;var t={};for(var r in i)t[r]=F(i[r]);return t}function L(i,t,r){i===void 0&&(i="unnamed");var e=r.jss,n=F(t),s=e.plugins.onCreateRule(i,n,r);return s||(i[0]==="@",null)}var be=function(t,r){for(var e="",n=0;n<t.length&&t[n]!=="!important";n++)e&&(e+=r),e+=t[n];return e},w=function(t,r){if(r===void 0&&(r=!1),!Array.isArray(t))return t;var e="";if(Array.isArray(t[0]))for(var n=0;n<t.length&&t[n]!=="!important";n++)e&&(e+=", "),e+=be(t[n]," ");else e=be(t,", ");return!r&&t[t.length-1]==="!important"&&(e+=" !important"),e};function N(i,t){for(var r="",e=0;e<t;e++)r+="  ";return r+i}function A(i,t,r){r===void 0&&(r={});var e="";if(!t)return e;var n=r,s=n.indent,a=s===void 0?0:s,o=t.fallbacks;if(i&&a++,o)if(Array.isArray(o))for(var l=0;l<o.length;l++){var f=o[l];for(var d in f){var h=f[d];h!=null&&(e&&(e+=`
`),e+=N(d+": "+w(h)+";",a))}}else for(var v in o){var g=o[v];g!=null&&(e&&(e+=`
`),e+=N(v+": "+w(g)+";",a))}for(var y in t){var m=t[y];m!=null&&y!=="fallbacks"&&(e&&(e+=`
`),e+=N(y+": "+w(m)+";",a))}return!e&&!r.allowEmpty||!i?e:(a--,e&&(e=`
`+e+`
`),N(i+" {"+e,a)+N("}",a))}var at=/([[\].#*$><+~=|^:(),"'`\s])/g,Se=typeof CSS!="undefined"&&CSS.escape,D=function(i){return Se?Se(i):i.replace(at,"\\$1")},Re=function(){function i(r,e,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var s=n.sheet,a=n.Renderer;this.key=r,this.options=n,this.style=e,s?this.renderer=s.renderer:a&&(this.renderer=new a)}var t=i.prototype;return t.prop=function(e,n,s){if(n===void 0)return this.style[e];var a=s?s.force:!1;if(!a&&this.style[e]===n)return this;var o=n;(!s||s.process!==!1)&&(o=this.options.jss.plugins.onChangeValue(n,e,this));var l=o==null||o===!1,f=e in this.style;if(l&&!f&&!a)return this;var d=l&&f;if(d?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return d?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var h=this.options.sheet;return h&&h.attached,this},i}(),J=function(i){pe(t,i);function t(e,n,s){var a;a=i.call(this,e,n,s)||this,a.selectorText=void 0,a.id=void 0,a.renderable=void 0;var o=s.selector,l=s.scoped,f=s.sheet,d=s.generateId;return o?a.selectorText=o:l!==!1&&(a.id=d(ye(ye(a)),f),a.selectorText="."+D(a.id)),a}var r=t.prototype;return r.applyTo=function(n){var s=this.renderer;if(s){var a=this.toJSON();for(var o in a)s.setProperty(n,o,a[o])}return this},r.toJSON=function(){var n={};for(var s in this.style){var a=this.style[s];typeof a!="object"?n[s]=a:Array.isArray(a)&&(n[s]=w(a))}return n},r.toString=function(n){var s=this.options.sheet,a=s?s.options.link:!1,o=a?p({},n,{allowEmpty:!0}):n;return A(this.selectorText,this.style,o)},ge(t,[{key:"selector",set:function(n){if(n!==this.selectorText){this.selectorText=n;var s=this.renderer,a=this.renderable;if(!(!a||!s)){var o=s.setSelector(a,n);o||s.replaceRule(a,this)}}},get:function(){return this.selectorText}}]),t}(Re),ot={onCreateRule:function(t,r,e){return t[0]==="@"||e.parent&&e.parent.type==="keyframes"?null:new J(t,r,e)}},B={indent:1,children:!0},ut=/@([\w-]+)/,lt=function(){function i(r,e,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=r;var s=r.match(ut);this.at=s?s[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new q(p({},n,{parent:this}));for(var a in e)this.rules.add(a,e[a]);this.rules.process()}var t=i.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,n,s){var a=this.rules.add(e,n,s);return a?(this.options.jss.plugins.onProcessRule(a),a):null},t.toString=function(e){if(e===void 0&&(e=B),e.indent==null&&(e.indent=B.indent),e.children==null&&(e.children=B.children),e.children===!1)return this.query+" {}";var n=this.rules.toString(e);return n?this.query+` {
`+n+`
}`:""},i}(),ft=/@media|@supports\s+/,dt={onCreateRule:function(t,r,e){return ft.test(t)?new lt(t,r,e):null}},H={indent:1,children:!0},ct=/@keyframes\s+([\w-]+)/,Z=function(){function i(r,e,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var s=r.match(ct);s&&s[1]?this.name=s[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var a=n.scoped,o=n.sheet,l=n.generateId;this.id=a===!1?this.name:D(l(this,o)),this.rules=new q(p({},n,{parent:this}));for(var f in e)this.rules.add(f,e[f],p({},n,{parent:this}));this.rules.process()}var t=i.prototype;return t.toString=function(e){if(e===void 0&&(e=H),e.indent==null&&(e.indent=H.indent),e.children==null&&(e.children=H.children),e.children===!1)return this.at+" "+this.id+" {}";var n=this.rules.toString(e);return n&&(n=`
`+n+`
`),this.at+" "+this.id+" {"+n+"}"},i}(),ht=/@keyframes\s+/,vt=/\$([\w-]+)/g,Q=function(t,r){return typeof t=="string"?t.replace(vt,function(e,n){return n in r?r[n]:e}):t},xe=function(t,r,e){var n=t[r],s=Q(n,e);s!==n&&(t[r]=s)},pt={onCreateRule:function(t,r,e){return typeof t=="string"&&ht.test(t)?new Z(t,r,e):null},onProcessStyle:function(t,r,e){return r.type!=="style"||!e||("animation-name"in t&&xe(t,"animation-name",e.keyframes),"animation"in t&&xe(t,"animation",e.keyframes)),t},onChangeValue:function(t,r,e){var n=e.options.sheet;if(!n)return t;switch(r){case"animation":return Q(t,n.keyframes);case"animation-name":return Q(t,n.keyframes);default:return t}}},gt=function(i){pe(t,i);function t(){for(var e,n=arguments.length,s=new Array(n),a=0;a<n;a++)s[a]=arguments[a];return e=i.call.apply(i,[this].concat(s))||this,e.renderable=void 0,e}var r=t.prototype;return r.toString=function(n){var s=this.options.sheet,a=s?s.options.link:!1,o=a?p({},n,{allowEmpty:!0}):n;return A(this.key,this.style,o)},t}(Re),yt={onCreateRule:function(t,r,e){return e.parent&&e.parent.type==="keyframes"?new gt(t,r,e):null}},mt=function(){function i(r,e,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=r,this.style=e,this.options=n}var t=i.prototype;return t.toString=function(e){if(Array.isArray(this.style)){for(var n="",s=0;s<this.style.length;s++)n+=A(this.at,this.style[s]),this.style[s+1]&&(n+=`
`);return n}return A(this.at,this.style,e)},i}(),bt=/@font-face/,St={onCreateRule:function(t,r,e){return bt.test(t)?new mt(t,r,e):null}},Rt=function(){function i(r,e,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=r,this.style=e,this.options=n}var t=i.prototype;return t.toString=function(e){return A(this.key,this.style,e)},i}(),xt={onCreateRule:function(t,r,e){return t==="@viewport"||t==="@-ms-viewport"?new Rt(t,r,e):null}},Pt=function(){function i(r,e,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=r,this.value=e,this.options=n}var t=i.prototype;return t.toString=function(e){if(Array.isArray(this.value)){for(var n="",s=0;s<this.value.length;s++)n+=this.key+" "+this.value[s]+";",this.value[s+1]&&(n+=`
`);return n}return this.key+" "+this.value+";"},i}(),Ct={"@charset":!0,"@import":!0,"@namespace":!0},wt={onCreateRule:function(t,r,e){return t in Ct?new Pt(t,r,e):null}},Pe=[ot,dt,pt,yt,St,xt,wt],kt={process:!0},Ce={force:!0,process:!0},q=function(){function i(r){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=r,this.classes=r.classes,this.keyframes=r.keyframes}var t=i.prototype;return t.add=function(e,n,s){var a=this.options,o=a.parent,l=a.sheet,f=a.jss,d=a.Renderer,h=a.generateId,v=a.scoped,g=p({classes:this.classes,parent:o,sheet:l,jss:f,Renderer:d,generateId:h,scoped:v,name:e,keyframes:this.keyframes,selector:void 0},s),y=e;e in this.raw&&(y=e+"-d"+this.counter++),this.raw[y]=n,y in this.classes&&(g.selector="."+D(this.classes[y]));var m=L(y,n,g);if(!m)return null;this.register(m);var S=g.index===void 0?this.index.length:g.index;return this.index.splice(S,0,m),m},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof J?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof Z&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof J?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof Z&&delete this.keyframes[e.name]},t.update=function(){var e,n,s;if(typeof(arguments.length<=0?void 0:arguments[0])=="string"?(e=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],s=arguments.length<=2?void 0:arguments[2]):(n=arguments.length<=0?void 0:arguments[0],s=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],n,s);else for(var a=0;a<this.index.length;a++)this.updateOne(this.index[a],n,s)},t.updateOne=function(e,n,s){s===void 0&&(s=kt);var a=this.options,o=a.jss.plugins,l=a.sheet;if(e.rules instanceof i){e.rules.update(n,s);return}var f=e,d=f.style;if(o.onUpdate(n,e,l,s),s.process&&d&&d!==f.style){o.onProcessStyle(f.style,f,l);for(var h in f.style){var v=f.style[h],g=d[h];v!==g&&f.prop(h,v,Ce)}for(var y in d){var m=f.style[y],S=d[y];m==null&&m!==S&&f.prop(y,null,Ce)}}},t.toString=function(e){for(var n="",s=this.options.sheet,a=s?s.options.link:!1,o=0;o<this.index.length;o++){var l=this.index[o],f=l.toString(e);!f&&!a||(n&&(n+=`
`),n+=f)}return n},i}(),we=function(){function i(r,e){this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=p({},e,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),e.Renderer&&(this.renderer=new e.Renderer(this)),this.rules=new q(this.options);for(var n in r)this.rules.add(n,r[n]);this.rules.process()}var t=i.prototype;return t.attach=function(){return this.attached?this:(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy(),this)},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,n,s){var a=this.queue;this.attached&&!a&&(this.queue=[]);var o=this.rules.add(e,n,s);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?(this.deployed&&(a?a.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0))),o):(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,n){var s=[];for(var a in e){var o=this.addRule(a,e[a],n);o&&s.push(o)}return s},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var n=typeof e=="object"?e:this.rules.get(e);return!n||this.attached&&!n.renderable?!1:(this.rules.remove(n),this.attached&&n.renderable&&this.renderer?this.renderer.deleteRule(n.renderable):!0)},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,n,s){return this.rules.updateOne(e,n,s),this},t.toString=function(e){return this.rules.toString(e)},i}(),jt=function(){function i(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=i.prototype;return t.onCreateRule=function(e,n,s){for(var a=0;a<this.registry.onCreateRule.length;a++){var o=this.registry.onCreateRule[a](e,n,s);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var n=e.options.sheet,s=0;s<this.registry.onProcessRule.length;s++)this.registry.onProcessRule[s](e,n);e.style&&this.onProcessStyle(e.style,e,n),e.isProcessed=!0}},t.onProcessStyle=function(e,n,s){for(var a=0;a<this.registry.onProcessStyle.length;a++)n.style=this.registry.onProcessStyle[a](n.style,n,s)},t.onProcessSheet=function(e){for(var n=0;n<this.registry.onProcessSheet.length;n++)this.registry.onProcessSheet[n](e)},t.onUpdate=function(e,n,s,a){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,n,s,a)},t.onChangeValue=function(e,n,s){for(var a=e,o=0;o<this.registry.onChangeValue.length;o++)a=this.registry.onChangeValue[o](a,n,s);return a},t.use=function(e,n){n===void 0&&(n={queue:"external"});var s=this.plugins[n.queue];s.indexOf(e)===-1&&(s.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce(function(a,o){for(var l in o)l in a&&a[l].push(o[l]);return a},{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},i}(),Ot=function(){function i(){this.registry=[]}var t=i.prototype;return t.add=function(e){var n=this.registry,s=e.options.index;if(n.indexOf(e)===-1){if(n.length===0||s>=this.index){n.push(e);return}for(var a=0;a<n.length;a++)if(n[a].options.index>s){n.splice(a,0,e);return}}},t.reset=function(){this.registry=[]},t.remove=function(e){var n=this.registry.indexOf(e);this.registry.splice(n,1)},t.toString=function(e){for(var n=e===void 0?{}:e,s=n.attached,a=Ye(n,["attached"]),o="",l=0;l<this.registry.length;l++){var f=this.registry[l];s!=null&&f.attached!==s||(o&&(o+=`
`),o+=f.toString(a))}return o},ge(i,[{key:"index",get:function(){return this.registry.length===0?0:this.registry[this.registry.length-1].options.index}}]),i}(),I=new Ot,X=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"&&window.Math===Math?window:typeof self!="undefined"&&self.Math===Math?self:Function("return this")(),Y="2f1acc6c3a606b082e5eef5e54414ffb";X[Y]==null&&(X[Y]=0);var ke=X[Y]++,je=function(t){t===void 0&&(t={});var r=0,e=function(s,a){r+=1;var o="",l="";return a&&(a.options.classNamePrefix&&(l=a.options.classNamePrefix),a.options.jss.id!=null&&(o=String(a.options.jss.id))),t.minify?""+(l||"c")+ke+o+r:l+s.key+"-"+ke+(o?"-"+o:"")+"-"+r};return e},Oe=function(t){var r;return function(){return r||(r=t()),r}},Tt=function(t,r){try{return t.attributeStyleMap?t.attributeStyleMap.get(r):t.style.getPropertyValue(r)}catch(e){return""}},Et=function(t,r,e){try{var n=e;if(Array.isArray(e)&&(n=w(e,!0),e[e.length-1]==="!important"))return t.style.setProperty(r,n,"important"),!0;t.attributeStyleMap?t.attributeStyleMap.set(r,n):t.style.setProperty(r,n)}catch(s){return!1}return!0},Nt=function(t,r){try{t.attributeStyleMap?t.attributeStyleMap.delete(r):t.style.removeProperty(r)}catch(e){}},At=function(t,r){return t.selectorText=r,t.selectorText===r},Te=Oe(function(){return document.querySelector("head")});function It(i,t){for(var r=0;r<i.length;r++){var e=i[r];if(e.attached&&e.options.index>t.index&&e.options.insertionPoint===t.insertionPoint)return e}return null}function Mt(i,t){for(var r=i.length-1;r>=0;r--){var e=i[r];if(e.attached&&e.options.insertionPoint===t.insertionPoint)return e}return null}function Vt(i){for(var t=Te(),r=0;r<t.childNodes.length;r++){var e=t.childNodes[r];if(e.nodeType===8&&e.nodeValue.trim()===i)return e}return null}function Gt(i){var t=I.registry;if(t.length>0){var r=It(t,i);if(r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element};if(r=Mt(t,i),r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element.nextSibling}}var e=i.insertionPoint;if(e&&typeof e=="string"){var n=Vt(e);if(n)return{parent:n.parentNode,node:n.nextSibling}}return!1}function $t(i,t){var r=t.insertionPoint,e=Gt(t);if(e!==!1&&e.parent){e.parent.insertBefore(i,e.node);return}if(r&&typeof r.nodeType=="number"){var n=r,s=n.parentNode;s&&s.insertBefore(i,n.nextSibling);return}Te().appendChild(i)}var zt=Oe(function(){var i=document.querySelector('meta[property="csp-nonce"]');return i?i.getAttribute("content"):null}),Ee=function(t,r,e){try{if("insertRule"in t){var n=t;n.insertRule(r,e)}else if("appendRule"in t){var s=t;s.appendRule(r)}}catch(a){return!1}return t.cssRules[e]},Ne=function(t,r){var e=t.cssRules.length;return r===void 0||r>e?e:r},qt=function(){var t=document.createElement("style");return t.textContent=`
`,t},Ut=function(){function i(r){this.getPropertyValue=Tt,this.setProperty=Et,this.removeProperty=Nt,this.setSelector=At,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],r&&I.add(r),this.sheet=r;var e=this.sheet?this.sheet.options:{},n=e.media,s=e.meta,a=e.element;this.element=a||qt(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),s&&this.element.setAttribute("data-meta",s);var o=zt();o&&this.element.setAttribute("nonce",o)}var t=i.prototype;return t.attach=function(){if(!(this.element.parentNode||!this.sheet)){$t(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(!!this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent=`
`)}},t.deploy=function(){var e=this.sheet;if(!!e){if(e.options.link){this.insertRules(e.rules);return}this.element.textContent=`
`+e.toString()+`
`}},t.insertRules=function(e,n){for(var s=0;s<e.index.length;s++)this.insertRule(e.index[s],s,n)},t.insertRule=function(e,n,s){if(s===void 0&&(s=this.element.sheet),e.rules){var a=e,o=s;if(e.type==="conditional"||e.type==="keyframes"){var l=Ne(s,n);if(o=Ee(s,a.toString({children:!1}),l),o===!1)return!1;this.refCssRule(e,l,o)}return this.insertRules(a.rules,o),o}var f=e.toString();if(!f)return!1;var d=Ne(s,n),h=Ee(s,f,d);return h===!1?!1:(this.hasInsertedRules=!0,this.refCssRule(e,d,h),h)},t.refCssRule=function(e,n,s){e.renderable=s,e.options.parent instanceof we&&(this.cssRules[n]=s)},t.deleteRule=function(e){var n=this.element.sheet,s=this.indexOf(e);return s===-1?!1:(n.deleteRule(s),this.cssRules.splice(s,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,n){var s=this.indexOf(e);return s===-1?!1:(this.element.sheet.deleteRule(s),this.cssRules.splice(s,1),this.insertRule(n,s))},t.getRules=function(){return this.element.sheet.cssRules},i}(),_t=0,Wt=function(){function i(r){this.id=_t++,this.version="10.7.1",this.plugins=new jt,this.options={id:{minify:!1},createGenerateId:je,Renderer:E?Ut:null,plugins:[]},this.generateId=je({minify:!1});for(var e=0;e<Pe.length;e++)this.plugins.use(Pe[e],{queue:"internal"});this.setup(r)}var t=i.prototype;return t.setup=function(e){return e===void 0&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=p({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),e.insertionPoint!=null&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,n){n===void 0&&(n={});var s=n,a=s.index;typeof a!="number"&&(a=I.index===0?0:I.index+1);var o=new we(e,p({},n,{jss:this,generateId:n.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:a}));return this.plugins.onProcessSheet(o),o},t.removeStyleSheet=function(e){return e.detach(),I.remove(e),this},t.createRule=function(e,n,s){if(n===void 0&&(n={}),s===void 0&&(s={}),typeof e=="object")return this.createRule(void 0,e,n);var a=p({},s,{name:e,jss:this,Renderer:this.options.Renderer});a.generateId||(a.generateId=this.generateId),a.classes||(a.classes={}),a.keyframes||(a.keyframes={});var o=L(e,n,a);return o&&this.plugins.onProcessRule(o),o},t.use=function(){for(var e=this,n=arguments.length,s=new Array(n),a=0;a<n;a++)s[a]=arguments[a];return s.forEach(function(o){e.plugins.use(o)}),this},i}();function Ae(i){var t=null;for(var r in i){var e=i[r],n=typeof e;if(n==="function")t||(t={}),t[r]=e;else if(n==="object"&&e!==null&&!Array.isArray(e)){var s=Ae(e);s&&(t||(t={}),t[r]=s)}}return t}/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */var ee=typeof CSS=="object"&&CSS!=null&&"number"in CSS,te=function(t){return new Wt(t)};te();var Ie=Date.now(),re="fnValues"+Ie,ne="fnStyle"+ ++Ie,Kt=function(){return{onCreateRule:function(r,e,n){if(typeof e!="function")return null;var s=L(r,{},n);return s[ne]=e,s},onProcessStyle:function(r,e){if(re in e||ne in e)return r;var n={};for(var s in r){var a=r[s];typeof a=="function"&&(delete r[s],n[s]=a)}return e[re]=n,r},onUpdate:function(r,e,n,s){var a=e,o=a[ne];o&&(a.style=o(r)||{});var l=a[re];if(l)for(var f in l)a.prop(f,l[f](r),s)}}},Ft=Kt,R="@global",ie="@global ",Lt=function(){function i(r,e,n){this.type="global",this.at=R,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=r,this.options=n,this.rules=new q(p({},n,{parent:this}));for(var s in e)this.rules.add(s,e[s]);this.rules.process()}var t=i.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,n,s){var a=this.rules.add(e,n,s);return a&&this.options.jss.plugins.onProcessRule(a),a},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},i}(),Dt=function(){function i(r,e,n){this.type="global",this.at=R,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=r,this.options=n;var s=r.substr(ie.length);this.rule=n.jss.createRule(s,e,p({},n,{parent:this}))}var t=i.prototype;return t.toString=function(e){return this.rule?this.rule.toString(e):""},i}(),Jt=/\s*,\s*/g;function Me(i,t){for(var r=i.split(Jt),e="",n=0;n<r.length;n++)e+=t+" "+r[n].trim(),r[n+1]&&(e+=", ");return e}function Bt(i,t){var r=i.options,e=i.style,n=e?e[R]:null;if(!!n){for(var s in n)t.addRule(s,n[s],p({},r,{selector:Me(s,i.selector)}));delete e[R]}}function Ht(i,t){var r=i.options,e=i.style;for(var n in e)if(!(n[0]!=="@"||n.substr(0,R.length)!==R)){var s=Me(n.substr(R.length),i.selector);t.addRule(s,e[n],p({},r,{selector:s})),delete e[n]}}function Zt(){function i(r,e,n){if(!r)return null;if(r===R)return new Lt(r,e,n);if(r[0]==="@"&&r.substr(0,ie.length)===ie)return new Dt(r,e,n);var s=n.parent;return s&&(s.type==="global"||s.options.parent&&s.options.parent.type==="global")&&(n.scoped=!1),n.scoped===!1&&(n.selector=r),null}function t(r,e){r.type!=="style"||!e||(Bt(r,e),Ht(r,e))}return{onCreateRule:i,onProcessRule:t}}var Ve=/\s*,\s*/g,Qt=/&/g,Xt=/\$([\w-]+)/g;function Yt(){function i(n,s){return function(a,o){var l=n.getRule(o)||s&&s.getRule(o);return l?(l=l,l.selector):o}}function t(n,s){for(var a=s.split(Ve),o=n.split(Ve),l="",f=0;f<a.length;f++)for(var d=a[f],h=0;h<o.length;h++){var v=o[h];l&&(l+=", "),l+=v.indexOf("&")!==-1?v.replace(Qt,d):d+" "+v}return l}function r(n,s,a){if(a)return p({},a,{index:a.index+1});var o=n.options.nestingLevel;o=o===void 0?1:o+1;var l=p({},n.options,{nestingLevel:o,index:s.indexOf(n)+1});return delete l.name,l}function e(n,s,a){if(s.type!=="style")return n;var o=s,l=o.options.parent,f,d;for(var h in n){var v=h.indexOf("&")!==-1,g=h[0]==="@";if(!(!v&&!g)){if(f=r(o,l,f),v){var y=t(h,o.selector);d||(d=i(l,a)),y=y.replace(Xt,d),l.addRule(y,n[h],p({},f,{selector:y}))}else g&&l.addRule(h,{},f).addRule(o.key,n[h],{selector:o.selector});delete n[h]}}return n}return{onProcessStyle:e}}var er=/[A-Z]/g,tr=/^ms-/,se={};function rr(i){return"-"+i.toLowerCase()}function Ge(i){if(se.hasOwnProperty(i))return se[i];var t=i.replace(er,rr);return se[i]=tr.test(t)?"-"+t:t}function U(i){var t={};for(var r in i){var e=r.indexOf("--")===0?r:Ge(r);t[e]=i[r]}return i.fallbacks&&(Array.isArray(i.fallbacks)?t.fallbacks=i.fallbacks.map(U):t.fallbacks=U(i.fallbacks)),t}function nr(){function i(r){if(Array.isArray(r)){for(var e=0;e<r.length;e++)r[e]=U(r[e]);return r}return U(r)}function t(r,e,n){if(e.indexOf("--")===0)return r;var s=Ge(e);return e===s?r:(n.prop(s,r),null)}return{onProcessStyle:i,onChangeValue:t}}var u=ee&&CSS?CSS.px:"px",_=ee&&CSS?CSS.ms:"ms",j=ee&&CSS?CSS.percent:"%",ir={"animation-delay":_,"animation-duration":_,"background-position":u,"background-position-x":u,"background-position-y":u,"background-size":u,border:u,"border-bottom":u,"border-bottom-left-radius":u,"border-bottom-right-radius":u,"border-bottom-width":u,"border-left":u,"border-left-width":u,"border-radius":u,"border-right":u,"border-right-width":u,"border-top":u,"border-top-left-radius":u,"border-top-right-radius":u,"border-top-width":u,"border-width":u,"border-block":u,"border-block-end":u,"border-block-end-width":u,"border-block-start":u,"border-block-start-width":u,"border-block-width":u,"border-inline":u,"border-inline-end":u,"border-inline-end-width":u,"border-inline-start":u,"border-inline-start-width":u,"border-inline-width":u,"border-start-start-radius":u,"border-start-end-radius":u,"border-end-start-radius":u,"border-end-end-radius":u,margin:u,"margin-bottom":u,"margin-left":u,"margin-right":u,"margin-top":u,"margin-block":u,"margin-block-end":u,"margin-block-start":u,"margin-inline":u,"margin-inline-end":u,"margin-inline-start":u,padding:u,"padding-bottom":u,"padding-left":u,"padding-right":u,"padding-top":u,"padding-block":u,"padding-block-end":u,"padding-block-start":u,"padding-inline":u,"padding-inline-end":u,"padding-inline-start":u,"mask-position-x":u,"mask-position-y":u,"mask-size":u,height:u,width:u,"min-height":u,"max-height":u,"min-width":u,"max-width":u,bottom:u,left:u,top:u,right:u,inset:u,"inset-block":u,"inset-block-end":u,"inset-block-start":u,"inset-inline":u,"inset-inline-end":u,"inset-inline-start":u,"box-shadow":u,"text-shadow":u,"column-gap":u,"column-rule":u,"column-rule-width":u,"column-width":u,"font-size":u,"font-size-delta":u,"letter-spacing":u,"text-decoration-thickness":u,"text-indent":u,"text-stroke":u,"text-stroke-width":u,"word-spacing":u,motion:u,"motion-offset":u,outline:u,"outline-offset":u,"outline-width":u,perspective:u,"perspective-origin-x":j,"perspective-origin-y":j,"transform-origin":j,"transform-origin-x":j,"transform-origin-y":j,"transform-origin-z":j,"transition-delay":_,"transition-duration":_,"vertical-align":u,"flex-basis":u,"shape-margin":u,size:u,gap:u,grid:u,"grid-gap":u,"row-gap":u,"grid-row-gap":u,"grid-column-gap":u,"grid-template-rows":u,"grid-template-columns":u,"grid-auto-rows":u,"grid-auto-columns":u,"box-shadow-x":u,"box-shadow-y":u,"box-shadow-blur":u,"box-shadow-spread":u,"font-line-height":u,"text-shadow-x":u,"text-shadow-y":u,"text-shadow-blur":u};function $e(i){var t=/(-[a-z])/g,r=function(a){return a[1].toUpperCase()},e={};for(var n in i)e[n]=i[n],e[n.replace(t,r)]=i[n];return e}var sr=$e(ir);function M(i,t,r){if(t==null)return t;if(Array.isArray(t))for(var e=0;e<t.length;e++)t[e]=M(i,t[e],r);else if(typeof t=="object")if(i==="fallbacks")for(var n in t)t[n]=M(n,t[n],r);else for(var s in t)t[s]=M(i+"-"+s,t[s],r);else if(typeof t=="number"&&isNaN(t)===!1){var a=r[i]||sr[i];return a&&!(t===0&&a===u)?typeof a=="function"?a(t).toString():""+t+a:t.toString()}return t}function ar(i){i===void 0&&(i={});var t=$e(i);function r(n,s){if(s.type!=="style")return n;for(var a in n)n[a]=M(a,n[a],t);return n}function e(n,s){return M(s,n,t)}return{onProcessStyle:r,onChangeValue:e}}var V="",ae="",ze="",qe="",or=E&&"ontouchstart"in document.documentElement;if(E){var oe={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},ur=document.createElement("p"),ue=ur.style,lr="Transform";for(var le in oe)if(le+lr in ue){V=le,ae=oe[le];break}V==="Webkit"&&"msHyphens"in ue&&(V="ms",ae=oe.ms,qe="edge"),V==="Webkit"&&"-apple-trailing-word"in ue&&(ze="apple")}var c={js:V,css:ae,vendor:ze,browser:qe,isTouch:or};function fr(i){return i[1]==="-"||c.js==="ms"?i:"@"+c.css+"keyframes"+i.substr(10)}var dr={noPrefill:["appearance"],supportedProperty:function(t){return t!=="appearance"?!1:c.js==="ms"?"-webkit-"+t:c.css+t}},cr={noPrefill:["color-adjust"],supportedProperty:function(t){return t!=="color-adjust"?!1:c.js==="Webkit"?c.css+"print-"+t:t}},hr=/[-\s]+(.)?/g;function vr(i,t){return t?t.toUpperCase():""}function fe(i){return i.replace(hr,vr)}function x(i){return fe("-"+i)}var pr={noPrefill:["mask"],supportedProperty:function(t,r){if(!/^mask/.test(t))return!1;if(c.js==="Webkit"){var e="mask-image";if(fe(e)in r)return t;if(c.js+x(e)in r)return c.css+t}return t}},gr={noPrefill:["text-orientation"],supportedProperty:function(t){return t!=="text-orientation"?!1:c.vendor==="apple"&&!c.isTouch?c.css+t:t}},yr={noPrefill:["transform"],supportedProperty:function(t,r,e){return t!=="transform"?!1:e.transform?t:c.css+t}},mr={noPrefill:["transition"],supportedProperty:function(t,r,e){return t!=="transition"?!1:e.transition?t:c.css+t}},br={noPrefill:["writing-mode"],supportedProperty:function(t){return t!=="writing-mode"?!1:c.js==="Webkit"||c.js==="ms"&&c.browser!=="edge"?c.css+t:t}},Sr={noPrefill:["user-select"],supportedProperty:function(t){return t!=="user-select"?!1:c.js==="Moz"||c.js==="ms"||c.vendor==="apple"?c.css+t:t}},Rr={supportedProperty:function(t,r){if(!/^break-/.test(t))return!1;if(c.js==="Webkit"){var e="WebkitColumn"+x(t);return e in r?c.css+"column-"+t:!1}if(c.js==="Moz"){var n="page"+x(t);return n in r?"page-"+t:!1}return!1}},xr={supportedProperty:function(t,r){if(!/^(border|margin|padding)-inline/.test(t))return!1;if(c.js==="Moz")return t;var e=t.replace("-inline","");return c.js+x(e)in r?c.css+e:!1}},Pr={supportedProperty:function(t,r){return fe(t)in r?t:!1}},Cr={supportedProperty:function(t,r){var e=x(t);return t[0]==="-"||t[0]==="-"&&t[1]==="-"?t:c.js+e in r?c.css+t:c.js!=="Webkit"&&"Webkit"+e in r?"-webkit-"+t:!1}},wr={supportedProperty:function(t){return t.substring(0,11)!=="scroll-snap"?!1:c.js==="ms"?""+c.css+t:t}},kr={supportedProperty:function(t){return t!=="overscroll-behavior"?!1:c.js==="ms"?c.css+"scroll-chaining":t}},jr={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Or={supportedProperty:function(t,r){var e=jr[t];return e&&c.js+x(e)in r?c.css+e:!1}},Ue={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Tr=Object.keys(Ue),Er=function(t){return c.css+t},Nr={supportedProperty:function(t,r,e){var n=e.multiple;if(Tr.indexOf(t)>-1){var s=Ue[t];if(!Array.isArray(s))return c.js+x(s)in r?c.css+s:!1;if(!n)return!1;for(var a=0;a<s.length;a++)if(!(c.js+x(s[0])in r))return!1;return s.map(Er)}return!1}},_e=[dr,cr,pr,gr,yr,mr,br,Sr,Rr,xr,Pr,Cr,wr,kr,Or,Nr],We=_e.filter(function(i){return i.supportedProperty}).map(function(i){return i.supportedProperty}),Ar=_e.filter(function(i){return i.noPrefill}).reduce(function(i,t){return i.push.apply(i,Be(t.noPrefill)),i},[]),G,k={};if(E){G=document.createElement("p");var de=window.getComputedStyle(document.documentElement,"");for(var ce in de)isNaN(ce)||(k[de[ce]]=de[ce]);Ar.forEach(function(i){return delete k[i]})}function he(i,t){if(t===void 0&&(t={}),!G)return i;if(k[i]!=null)return k[i];(i==="transition"||i==="transform")&&(t[i]=i in G.style);for(var r=0;r<We.length&&(k[i]=We[r](i,G.style,t),!k[i]);r++);try{G.style[i]=""}catch(e){return!1}return k[i]}var O={},Ir={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Mr=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g,P;function Vr(i,t,r){if(t==="var")return"var";if(t==="all")return"all";if(r==="all")return", all";var e=t?he(t):", "+he(r);return e||t||r}E&&(P=document.createElement("p"));function Ke(i,t){var r=t;if(!P||i==="content")return t;if(typeof r!="string"||!isNaN(parseInt(r,10)))return r;var e=i+r;if(O[e]!=null)return O[e];try{P.style[i]=r}catch(n){return O[e]=!1,!1}if(Ir[i])r=r.replace(Mr,Vr);else if(P.style[i]===""&&(r=c.css+r,r==="-ms-flex"&&(P.style[i]="-ms-flexbox"),P.style[i]=r,P.style[i]===""))return O[e]=!1,!1;return P.style[i]="",O[e]=r,O[e]}function Gr(){function i(n){if(n.type==="keyframes"){var s=n;s.at=fr(s.at)}}function t(n){for(var s in n){var a=n[s];if(s==="fallbacks"&&Array.isArray(a)){n[s]=a.map(t);continue}var o=!1,l=he(s);l&&l!==s&&(o=!0);var f=!1,d=Ke(l,w(a));d&&d!==a&&(f=!0),(o||f)&&(o&&delete n[s],n[l||s]=d||a)}return n}function r(n,s){return s.type!=="style"?n:t(n)}function e(n,s){return Ke(s,w(n))||n}return{onProcessRule:i,onProcessStyle:r,onChangeValue:e}}function $r(){var i=function(r,e){return r.length===e.length?r>e?1:-1:r.length-e.length};return{onProcessStyle:function(r,e){if(e.type!=="style")return r;for(var n={},s=Object.keys(r).sort(i),a=0;a<s.length;a++)n[s[a]]=r[s[a]];return n}}}function Fe(){return{plugins:[Ft(),Zt(),Yt(),nr(),ar(),typeof window=="undefined"?null:Gr(),$r()]}}function Le(){var i=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=i.baseClasses,r=i.newClasses;if(i.Component,!r)return t;var e=p({},t);return Object.keys(r).forEach(function(n){r[n]&&(e[n]="".concat(t[n]," ").concat(r[n]))}),e}var zr={set:function(t,r,e,n){var s=t.get(r);s||(s=new Map,t.set(r,s)),s.set(e,n)},get:function(t,r,e){var n=t.get(r);return n?n.get(e):void 0},delete:function(t,r,e){var n=t.get(r);n.delete(e)}},T=zr,qr=b.createContext(null),Ur=qr;function De(){var i=b.useContext(Ur);return i}var _r=te(Fe()),Wr=nt(),Kr=new Map,Fr={disableGeneration:!1,generateClassName:Wr,jss:_r,sheetsCache:null,sheetsManager:Kr,sheetsRegistry:null},ve=b.createContext(Fr),W;function un(i){var t=i.children,r=i.injectFirst,e=r===void 0?!1:r,n=i.disableGeneration,s=n===void 0?!1:n,a=z(i,["children","injectFirst","disableGeneration"]),o=b.useContext(ve),l=p({},o,{disableGeneration:s},a);if(!l.jss.options.insertionPoint&&e&&typeof window!="undefined"){if(!W){var f=document.head;W=document.createComment("mui-inject-first"),f.insertBefore(W,f.firstChild)}l.jss=te({plugins:Fe().plugins,insertionPoint:W})}return b.createElement(ve.Provider,{value:l},t)}var Je=-1e9;function Lr(){return Je+=1,Je}var Dr={},Jr=Dr;function Br(i){var t=typeof i=="function";return{create:function(e,n){var s;try{s=t?i(e):i}catch(l){throw l}if(!n||!e.overrides||!e.overrides[n])return s;var a=e.overrides[n],o=p({},s);return Object.keys(a).forEach(function(l){o[l]=He(o[l],a[l])}),o},options:{}}}function Hr(i,t,r){var e=i.state,n=i.stylesOptions;if(n.disableGeneration)return t||{};e.cacheClasses||(e.cacheClasses={value:null,lastProp:null,lastJSS:{}});var s=!1;return e.classes!==e.cacheClasses.lastJSS&&(e.cacheClasses.lastJSS=e.classes,s=!0),t!==e.cacheClasses.lastProp&&(e.cacheClasses.lastProp=t,s=!0),s&&(e.cacheClasses.value=Le({baseClasses:e.cacheClasses.lastJSS,newClasses:t,Component:r})),e.cacheClasses.value}function Zr(i,t){var r=i.state,e=i.theme,n=i.stylesOptions,s=i.stylesCreator,a=i.name;if(!n.disableGeneration){var o=T.get(n.sheetsManager,s,e);o||(o={refs:0,staticSheet:null,dynamicStyles:null},T.set(n.sheetsManager,s,e,o));var l=p({},s.options,n,{theme:e,flip:typeof n.flip=="boolean"?n.flip:e.direction==="rtl"});l.generateId=l.serverGenerateClassName||l.generateClassName;var f=n.sheetsRegistry;if(o.refs===0){var d;n.sheetsCache&&(d=T.get(n.sheetsCache,s,e));var h=s.create(e,a);d||(d=n.jss.createStyleSheet(h,p({link:!1},l)),d.attach(),n.sheetsCache&&T.set(n.sheetsCache,s,e,d)),f&&f.add(d),o.staticSheet=d,o.dynamicStyles=Ae(h)}if(o.dynamicStyles){var v=n.jss.createStyleSheet(o.dynamicStyles,p({link:!0},l));v.update(t),v.attach(),r.dynamicSheet=v,r.classes=Le({baseClasses:o.staticSheet.classes,newClasses:v.classes}),f&&f.add(v)}else r.classes=o.staticSheet.classes;o.refs+=1}}function Qr(i,t){var r=i.state;r.dynamicSheet&&r.dynamicSheet.update(t)}function Xr(i){var t=i.state,r=i.theme,e=i.stylesOptions,n=i.stylesCreator;if(!e.disableGeneration){var s=T.get(e.sheetsManager,n,r);s.refs-=1;var a=e.sheetsRegistry;s.refs===0&&(T.delete(e.sheetsManager,n,r),e.jss.removeStyleSheet(s.staticSheet),a&&a.remove(s.staticSheet)),t.dynamicSheet&&(e.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function Yr(i,t){var r=b.useRef([]),e,n=b.useMemo(function(){return{}},t);r.current!==n&&(r.current=n,e=i()),b.useEffect(function(){return function(){e&&e()}},[n])}function en(i){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=t.name,e=t.classNamePrefix,n=t.Component,s=t.defaultTheme,a=s===void 0?Jr:s,o=z(t,["name","classNamePrefix","Component","defaultTheme"]),l=Br(i),f=r||e||"makeStyles";l.options={index:Lr(),name:r,meta:f,classNamePrefix:f};var d=function(){var v=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},g=De()||a,y=p({},b.useContext(ve),o),m=b.useRef(),S=b.useRef();Yr(function(){var C={name:r,state:{},stylesCreator:l,stylesOptions:y,theme:g};return Zr(C,v),S.current=!1,m.current=C,function(){Xr(C)}},[g,l]),b.useEffect(function(){S.current&&Qr(m.current,v),S.current=!0});var K=Hr(m.current,v.classes,n);return K};return d}var tn=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return function(e){var n=r.defaultTheme,s=r.withTheme,a=s===void 0?!1:s,o=r.name,l=z(r,["defaultTheme","withTheme","name"]),f=o,d=en(t,p({defaultTheme:n,Component:e,name:o||e.displayName,classNamePrefix:f},l)),h=b.forwardRef(function(g,y){g.classes;var m=g.innerRef,S=z(g,["classes","innerRef"]),K=d(p({},e.defaultProps,g)),C,$=S;return(typeof o=="string"||a)&&(C=De()||n,o&&($=it({theme:C,name:o,props:S})),a&&!$.theme&&($.theme=C)),b.createElement(e,p({ref:m||y,classes:K},$))});return Ze(h,e),h}},rn=tn,nn=Qe(),sn=nn;function ln(i,t){return rn(i,p({defaultTheme:sn},t))}function fn(i){if(typeof i!="string")throw new Error(Xe(7));return i.charAt(0).toUpperCase()+i.slice(1)}export{Ot as S,Ur as T,Le as a,nt as b,fn as c,sn as d,un as e,rn as f,it as g,ve as h,Fe as j,en as m,tt as n,Kr as s,De as u,ln as w};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwaXRhbGl6ZS5hZmM4NjA1ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1RoZW1lUHJvdmlkZXIvbmVzdGVkLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9pcy1pbi1icm93c2VyL2Rpc3QvbW9kdWxlLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pzcy9kaXN0L2pzcy5lc20uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWdsb2JhbC9kaXN0L2pzcy1wbHVnaW4tZ2xvYmFsLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWNhbWVsLWNhc2UvZGlzdC9qc3MtcGx1Z2luLWNhbWVsLWNhc2UuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZGVmYXVsdC11bml0L2Rpc3QvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXByb3BzLXNvcnQvZGlzdC9qc3MtcGx1Z2luLXByb3BzLXNvcnQuZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2pzc1ByZXNldC9qc3NQcmVzZXQuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWVyZ2VDbGFzc2VzL21lcmdlQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvaW5kZXhDb3VudGVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3IvZ2V0U3R5bGVzQ3JlYXRvci5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL21ha2VTdHlsZXMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvZGVmYXVsdFRoZW1lLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY2FwaXRhbGl6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuZXhwb3J0IGRlZmF1bHQgaGFzU3ltYm9sID8gU3ltYm9sLmZvcignbXVpLm5lc3RlZCcpIDogJ19fVEhFTUVfTkVTVEVEX18nOyIsImltcG9ydCBuZXN0ZWQgZnJvbSAnLi4vVGhlbWVQcm92aWRlci9uZXN0ZWQnO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBsaXN0IG9mIHRoZSBzdHlsZSBydWxlIG5hbWUgd2UgdXNlIGFzIGRyb3AgaW4gcmVwbGFjZW1lbnQgZm9yIHRoZSBidWlsdC1pblxuICogcHNldWRvIGNsYXNzZXMgKDpjaGVja2VkLCA6ZGlzYWJsZWQsIDpmb2N1c2VkLCBldGMuKS5cbiAqXG4gKiBXaHkgZG8gdGhleSBleGlzdCBpbiB0aGUgZmlyc3QgcGxhY2U/XG4gKiBUaGVzZSBjbGFzc2VzIGFyZSB1c2VkIGF0IGEgc3BlY2lmaWNpdHkgb2YgMi5cbiAqIEl0IGFsbG93cyB0aGVtIHRvIG92ZXJyaWRlIHByZXZpb3VzbHkgZGVmaW5pZWQgc3R5bGVzIGFzIHdlbGwgYXNcbiAqIGJlaW5nIHVudG91Y2hlZCBieSBzaW1wbGUgdXNlciBvdmVycmlkZXMuXG4gKi9cblxudmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTsgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4vLyBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0LlxuLy8gV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbi8vXG4vLyBJdCdzIGluc3BpcmVkIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvYmxvYi80ZTZhMDVkZDNmN2I2NTcyZmRkM2FiMjE2ODYxZDllNDQ2YzIwMzMxL3NyYy91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkZGlzYWJsZUdsb2JhID0gb3B0aW9ucy5kaXNhYmxlR2xvYmFsLFxuICAgICAgZGlzYWJsZUdsb2JhbCA9IF9vcHRpb25zJGRpc2FibGVHbG9iYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRkaXNhYmxlR2xvYmEsXG4gICAgICBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPSBvcHRpb25zLnByb2R1Y3Rpb25QcmVmaXgsXG4gICAgICBwcm9kdWN0aW9uUHJlZml4ID0gX29wdGlvbnMkcHJvZHVjdGlvblByID09PSB2b2lkIDAgPyAnanNzJyA6IF9vcHRpb25zJHByb2R1Y3Rpb25QcixcbiAgICAgIF9vcHRpb25zJHNlZWQgPSBvcHRpb25zLnNlZWQsXG4gICAgICBzZWVkID0gX29wdGlvbnMkc2VlZCA9PT0gdm9pZCAwID8gJycgOiBfb3B0aW9ucyRzZWVkO1xuICB2YXIgc2VlZFByZWZpeCA9IHNlZWQgPT09ICcnID8gJycgOiBcIlwiLmNvbmNhdChzZWVkLCBcIi1cIik7XG4gIHZhciBydWxlQ291bnRlciA9IDA7XG5cbiAgdmFyIGdldE5leHRDb3VudGVySWQgPSBmdW5jdGlvbiBnZXROZXh0Q291bnRlcklkKCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJ1bGVDb3VudGVyID49IDFlMTApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBydWxlQ291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBydWxlQ291bnRlcjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgbmFtZSA9IHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lOyAvLyBJcyBhIGdsb2JhbCBzdGF0aWMgTVVJIHN0eWxlP1xuXG4gICAgaWYgKG5hbWUgJiYgbmFtZS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiAhc3R5bGVTaGVldC5vcHRpb25zLmxpbmsgJiYgIWRpc2FibGVHbG9iYWwpIHtcbiAgICAgIC8vIFdlIGNhbiB1c2UgYSBzaG9ydGhhbmQgY2xhc3MgbmFtZSwgd2UgbmV2ZXIgdXNlIHRoZSBrZXlzIHRvIHN0eWxlIHRoZSBjb21wb25lbnRzLlxuICAgICAgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihydWxlLmtleSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBcIk11aS1cIi5jb25jYXQocnVsZS5rZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlZml4ID0gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KG5hbWUsIFwiLVwiKS5jb25jYXQocnVsZS5rZXkpO1xuXG4gICAgICBpZiAoIXN0eWxlU2hlZXQub3B0aW9ucy50aGVtZVtuZXN0ZWRdIHx8IHNlZWQgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICB2YXIgc3VmZml4ID0gXCJcIi5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTsgLy8gSGVscCB3aXRoIGRlYnVnZ2FiaWxpdHkuXG5cbiAgICBpZiAoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LCBcIi1cIikuY29uY2F0KHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdWZmaXgpO1xuICB9O1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICB2YXIgdGhlbWUgPSBwYXJhbXMudGhlbWUsXG4gICAgICBuYW1lID0gcGFyYW1zLm5hbWUsXG4gICAgICBwcm9wcyA9IHBhcmFtcy5wcm9wcztcblxuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5wcm9wcyB8fCAhdGhlbWUucHJvcHNbbmFtZV0pIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0gLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzLCBjb2RlIGJvcnJvdyBmcm9tIFJlYWN0IHNvdXJjZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMTVhOGYwMzE4MzhhNTUzZTQxYzBiNjZlYjFiY2YxZGE4NDQ4MTA0ZC9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RFbGVtZW50LmpzI0wyMjFcblxuXG4gIHZhciBkZWZhdWx0UHJvcHMgPSB0aGVtZS5wcm9wc1tuYW1lXTtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn0iLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydCB2YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gXCJvYmplY3RcIiAmJiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZG9jdW1lbnQpKSA9PT0gJ29iamVjdCcgJiYgZG9jdW1lbnQubm9kZVR5cGUgPT09IDk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnJvd3NlcjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xudmFyIHRvQ3NzVmFsdWUgPSBmdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlLCBpZ25vcmVJbXBvcnRhbnQpIHtcbiAgaWYgKGlnbm9yZUltcG9ydGFudCA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlSW1wb3J0YW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIHZhciBjc3NWYWx1ZSA9ICcnOyAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpOyAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cblxuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufTtcblxuLyoqXG4gKiBJbmRlbnQgYSBzdHJpbmcuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9hcnJheS1qb2luLXZzLWZvclxuICovXG5mdW5jdGlvbiBpbmRlbnRTdHIoc3RyLCBpbmRlbnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzdHI7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgUnVsZSB0byBDU1Mgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICghc3R5bGUpIHJldHVybiByZXN1bHQ7XG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpbmRlbnQgPSBfb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG4gIGlmIChzZWxlY3RvcikgaW5kZW50Kys7IC8vIEFwcGx5IGZhbGxiYWNrcyBmaXJzdC5cblxuICBpZiAoZmFsbGJhY2tzKSB7XG4gICAgLy8gQXJyYXkgc3ludGF4IHtmYWxsYmFja3M6IFt7cHJvcDogdmFsdWV9XX1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShmYWxsYmFja3MpKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZmFsbGJhY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgZmFsbGJhY2sgPSBmYWxsYmFja3NbaW5kZXhdO1xuXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICByZXN1bHQgKz0gaW5kZW50U3RyKHByb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKHZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3Qgc3ludGF4IHtmYWxsYmFja3M6IHtwcm9wOiB2YWx1ZX19XG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBmYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IGZhbGxiYWNrc1tfcHJvcF07XG5cbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgIHJlc3VsdCArPSBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IGluZGVudFN0cihfcHJvcDIgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZTIpICsgXCI7XCIsIGluZGVudCk7XG4gICAgfVxuICB9IC8vIEFsbG93IGVtcHR5IHN0eWxlIGluIHRoaXMgY2FzZSwgYmVjYXVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgZHluYW1pY2FsbHkuXG5cblxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0OyAvLyBXaGVuIHJ1bGUgaXMgYmVpbmcgc3RyaW5naWZpZWQgYmVmb3JlIHNlbGVjdG9yIHdhcyBkZWZpbmVkLlxuXG4gIGlmICghc2VsZWN0b3IpIHJldHVybiByZXN1bHQ7XG4gIGluZGVudC0tO1xuICBpZiAocmVzdWx0KSByZXN1bHQgPSBcIlxcblwiICsgcmVzdWx0ICsgXCJcXG5cIjtcbiAgcmV0dXJuIGluZGVudFN0cihzZWxlY3RvciArIFwiIHtcIiArIHJlc3VsdCwgaW5kZW50KSArIGluZGVudFN0cignfScsIGluZGVudCk7XG59XG5cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXFxzXSkvZztcbnZhciBuYXRpdmVFc2NhcGUgPSB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiBDU1MuZXNjYXBlO1xudmFyIGVzY2FwZSA9IChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBuYXRpdmVFc2NhcGUgPyBuYXRpdmVFc2NhcGUoc3RyKSA6IHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnXFxcXCQxJyk7XG59KTtcblxudmFyIEJhc2VTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc3R5bGUnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB2YXIgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBSZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgaWYgKHNoZWV0KSB0aGlzLnJlbmRlcmVyID0gc2hlZXQucmVuZGVyZXI7ZWxzZSBpZiAoUmVuZGVyZXIpIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCBhIHN0eWxlIHByb3BlcnR5LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBCYXNlU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHJvcCA9IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAvLyBJdCdzIGEgZ2V0dGVyLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5zdHlsZVtuYW1lXTsgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZC5cblxuICAgIHZhciBmb3JjZSA9IG9wdGlvbnMgPyBvcHRpb25zLmZvcmNlIDogZmFsc2U7XG4gICAgaWYgKCFmb3JjZSAmJiB0aGlzLnN0eWxlW25hbWVdID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5wcm9jZXNzICE9PSBmYWxzZSkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25DaGFuZ2VWYWx1ZSh2YWx1ZSwgbmFtZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGlzRW1wdHkgPSBuZXdWYWx1ZSA9PSBudWxsIHx8IG5ld1ZhbHVlID09PSBmYWxzZTtcbiAgICB2YXIgaXNEZWZpbmVkID0gbmFtZSBpbiB0aGlzLnN0eWxlOyAvLyBWYWx1ZSBpcyBlbXB0eSBhbmQgd2Fzbid0IGRlZmluZWQgYmVmb3JlLlxuXG4gICAgaWYgKGlzRW1wdHkgJiYgIWlzRGVmaW5lZCAmJiAhZm9yY2UpIHJldHVybiB0aGlzOyAvLyBXZSBhcmUgZ29pbmcgdG8gcmVtb3ZlIHRoaXMgdmFsdWUuXG5cbiAgICB2YXIgcmVtb3ZlID0gaXNFbXB0eSAmJiBpc0RlZmluZWQ7XG4gICAgaWYgKHJlbW92ZSkgZGVsZXRlIHRoaXMuc3R5bGVbbmFtZV07ZWxzZSB0aGlzLnN0eWxlW25hbWVdID0gbmV3VmFsdWU7IC8vIFJlbmRlcmFibGUgaXMgZGVmaW5lZCBpZiBTdHlsZVNoZWV0IG9wdGlvbiBgbGlua2AgaXMgdHJ1ZS5cblxuICAgIGlmICh0aGlzLnJlbmRlcmFibGUgJiYgdGhpcy5yZW5kZXJlcikge1xuICAgICAgaWYgKHJlbW92ZSkgdGhpcy5yZW5kZXJlci5yZW1vdmVQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUpO2Vsc2UgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5hdHRhY2hlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIFJ1bGUgaXMgbm90IGxpbmtlZC4gTWlzc2luZyBzaGVldCBvcHRpb24gXCJsaW5rOiB0cnVlXCIuJykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEJhc2VTdHlsZVJ1bGU7XG59KCk7XG52YXIgU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShTdHlsZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbCh0aGlzLCBrZXksIHN0eWxlLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHZvaWQgMDtcbiAgICBfdGhpcy5pZCA9IHZvaWQgMDtcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3IsXG4gICAgICAgIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgIH0gZWxzZSBpZiAoc2NvcGVkICE9PSBmYWxzZSkge1xuICAgICAgX3RoaXMuaWQgPSBnZW5lcmF0ZUlkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBzaGVldCk7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBcIi5cIiArIGVzY2FwZShfdGhpcy5pZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgKiBBdHRlbnRpb246IHVzZSB0aGlzIHdpdGggY2F1dGlvbi4gTW9zdCBicm93c2VycyBkaWRuJ3QgaW1wbGVtZW50XG4gICAqIHNlbGVjdG9yVGV4dCBzZXR0ZXIsIHNvIHRoaXMgbWF5IHJlc3VsdCBpbiByZXJlbmRlcmluZyBvZiBlbnRpcmUgU3R5bGUgU2hlZXQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90bzIgPSBTdHlsZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBBcHBseSBydWxlIHRvIGFuIGVsZW1lbnQgaW5saW5lLlxuICAgKi9cbiAgX3Byb3RvMi5hcHBseVRvID0gZnVuY3Rpb24gYXBwbHlUbyhyZW5kZXJhYmxlKSB7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgdmFyIGpzb24gPSB0aGlzLnRvSlNPTigpO1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIGpzb24pIHtcbiAgICAgICAgcmVuZGVyZXIuc2V0UHJvcGVydHkocmVuZGVyYWJsZSwgcHJvcCwganNvbltwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVsZS5cbiAgICogRmFsbGJhY2tzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgKiBVc2VmdWwgZm9yIGlubGluZSBzdHlsZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIGpzb24gPSB7fTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5zdHlsZVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSBqc29uW3Byb3BdID0gdmFsdWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIGpzb25bcHJvcF0gPSB0b0Nzc1ZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuc2VsZWN0b3JUZXh0LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVSdWxlLCBbe1xuICAgIGtleTogXCJzZWxlY3RvclwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IgPT09IHRoaXMuc2VsZWN0b3JUZXh0KSByZXR1cm47XG4gICAgICB0aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcixcbiAgICAgICAgICByZW5kZXJhYmxlID0gdGhpcy5yZW5kZXJhYmxlO1xuICAgICAgaWYgKCFyZW5kZXJhYmxlIHx8ICFyZW5kZXJlcikgcmV0dXJuO1xuICAgICAgdmFyIGhhc0NoYW5nZWQgPSByZW5kZXJlci5zZXRTZWxlY3RvcihyZW5kZXJhYmxlLCBzZWxlY3Rvcik7IC8vIElmIHNlbGVjdG9yIHNldHRlciBpcyBub3QgaW1wbGVtZW50ZWQsIHJlcmVuZGVyIHRoZSBydWxlLlxuXG4gICAgICBpZiAoIWhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmVuZGVyZXIucmVwbGFjZVJ1bGUocmVuZGVyYWJsZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBzZWxlY3RvciBzdHJpbmcuXG4gICAgICovXG4gICAgLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3JUZXh0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHlsZVJ1bGU7XG59KEJhc2VTdHlsZVJ1bGUpO1xudmFyIHBsdWdpblN0eWxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnIHx8IG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0eWxlUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIGF0UmVnRXhwID0gL0AoW1xcdy1dKykvO1xuLyoqXG4gKiBDb25kaXRpb25hbCBydWxlIGZvciBAbWVkaWEsIEBzdXBwb3J0c1xuICovXG5cbnZhciBDb25kaXRpb25hbFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb25kaXRpb25hbFJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnY29uZGl0aW9uYWwnO1xuICAgIHRoaXMuYXQgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWVyeSA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHZhciBhdE1hdGNoID0ga2V5Lm1hdGNoKGF0UmVnRXhwKTtcbiAgICB0aGlzLmF0ID0gYXRNYXRjaCA/IGF0TWF0Y2hbMV0gOiAndW5rbm93bic7IC8vIEtleSBtaWdodCBjb250YWluIGEgdW5pcXVlIHN1ZmZpeCBpbiBjYXNlIHRoZSBgbmFtZWAgcGFzc2VkIGJ5IHVzZXIgd2FzIGR1cGxpY2F0ZS5cblxuICAgIHRoaXMucXVlcnkgPSBvcHRpb25zLm5hbWUgfHwgXCJAXCIgKyB0aGlzLmF0O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5hdCwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDIgPSAvQGZvbnQtZmFjZS87XG52YXIgcGx1Z2luRm9udEZhY2VSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cCQyLnRlc3Qoa2V5KSA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBvcHRpb25zLmtleWZyYW1lcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSdWxlTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzLFxuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2hlbiB1c2VyIHVzZXMgLmNyZWF0ZVN0eWxlU2hlZXQoKSwgZHVwbGljYXRlIG5hbWVzIGFyZSBub3QgcG9zc2libGUsIGJ1dFxuICAgIC8vIGBzaGVldC5hZGRSdWxlKClgIG9wZW5zIHRoZSBkb29yIGZvciBhbnkgZHVwbGljYXRlIHJ1bGUgbmFtZS4gV2hlbiB0aGlzIGhhcHBlbnNcbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGtleSB1bmlxdWUgd2l0aGluIHRoaXMgUnVsZUxpc3QgaW5zdGFuY2Ugc2NvcGUuXG5cblxuICAgIHZhciBrZXkgPSBuYW1lO1xuXG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yYXcpIHtcbiAgICAgIGtleSA9IG5hbWUgKyBcIi1kXCIgKyB0aGlzLmNvdW50ZXIrKztcbiAgICB9IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXguaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgLCBgLmNsYXNzZXNgIGFuZCBgLmtleWZyYW1lc2AgbWFwcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihydWxlKSB7XG4gICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZS5pZCkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IHJ1bGUuaWQ7XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSAmJiB0aGlzLmtleWZyYW1lcykge1xuICAgICAgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXSA9IHJ1bGUuaWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgICAgbmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMubWFwW25hbWVdLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuaW5kZXhbaW5kZXhdLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyA/IG5hbWUgOiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcblxuICAgIGlmICghcnVsZSB8fCAvLyBTdHlsZSBzaGVldCB3YXMgY3JlYXRlZCB3aXRob3V0IGxpbms6IHRydWUgYW5kIGF0dGFjaGVkLCBpbiB0aGlzIGNhc2Ugd2VcbiAgICAvLyB3b24ndCBiZSBhYmxlIHRvIHJlbW92ZSB0aGUgQ1NTIHJ1bGUgZnJvbSB0aGUgRE9NLlxuICAgIHRoaXMuYXR0YWNoZWQgJiYgIXJ1bGUucmVuZGVyYWJsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBfdGhpcyRydWxlcztcblxuICAgIChfdGhpcyRydWxlcyA9IHRoaXMucnVsZXMpLnVwZGF0ZS5hcHBseShfdGhpcyRydWxlcywgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgc2luZ2xlIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdGhpcy5ydWxlcy51cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIFBsdWdpbnNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB7XG4gICAgICBpbnRlcm5hbDogW10sXG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIHRoaXMucmVnaXN0cnkgPSB2b2lkIDA7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luc1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAqL1xuICBfcHJvdG8ub25DcmVhdGVSdWxlID0gZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzUnVsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLmlzUHJvY2Vzc2VkKSByZXR1cm47XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZVtpXShydWxlLCBzaGVldCk7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIHJ1bGUuaXNQcm9jZXNzZWQgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1N0eWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgcmVnaXN0cnkgPSBuZXcgU2hlZXRzUmVnaXN0cnkoKTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuLyoqXG4gKiBOb3cgdGhhdCBgZ2xvYmFsVGhpc2AgaXMgYXZhaWxhYmxlIG9uIG1vc3QgcGxhdGZvcm1zXG4gKiAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvZ2xvYmFsVGhpcyNicm93c2VyX2NvbXBhdGliaWxpdHkpXG4gKiB3ZSBjaGVjayBmb3IgYGdsb2JhbFRoaXNgIGZpcnN0LiBgZ2xvYmFsVGhpc2AgaXMgbmVjZXNzYXJ5IGZvciBqc3NcbiAqIHRvIHJ1biBpbiBBZ29yaWMncyBzZWN1cmUgdmVyc2lvbiBvZiBKYXZhU2NyaXB0IChTRVMpLiBVbmRlciBTRVMsXG4gKiBgZ2xvYmFsVGhpc2AgZXhpc3RzLCBidXQgYHdpbmRvd2AsIGBzZWxmYCwgYW5kIGBGdW5jdGlvbigncmV0dXJuXG4gKiB0aGlzJykoKWAgYXJlIGFsbCB1bmRlZmluZWQgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbiAqL1xudmFyIGdsb2JhbFRoaXMkMSA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxudmFyIG5zID0gJzJmMWFjYzZjM2E2MDZiMDgyZTVlZWY1ZTU0NDE0ZmZiJztcbmlmIChnbG9iYWxUaGlzJDFbbnNdID09IG51bGwpIGdsb2JhbFRoaXMkMVtuc10gPSAwOyAvLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5cbnZhciBtb2R1bGVJZCA9IGdsb2JhbFRoaXMkMVtuc10rKztcblxudmFyIG1heFJ1bGVzID0gMWUxMDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbiAqIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXRlZC5cbiAqIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4gKi9cbnZhciBjcmVhdGVHZW5lcmF0ZUlkID0gZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVJZChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuXG4gIHZhciBnZW5lcmF0ZUlkID0gZnVuY3Rpb24gZ2VuZXJhdGVJZChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLiBSdWxlIGNvdW50ZXIgaXMgYXQgXCIgKyBydWxlQ291bnRlciArIFwiLlwiKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIganNzSWQgPSAnJztcbiAgICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIHtcbiAgICAgICAganNzSWQgPSBTdHJpbmcoc2hlZXQub3B0aW9ucy5qc3MuaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1pbmlmeSkge1xuICAgICAgLy8gVXNpbmcgXCJjXCIgYmVjYXVzZSBhIG51bWJlciBjYW4ndCBiZSB0aGUgZmlyc3QgY2hhciBpbiBhIGNsYXNzIG5hbWUuXG4gICAgICByZXR1cm4gXCJcIiArIChwcmVmaXggfHwgJ2MnKSArIG1vZHVsZUlkICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyBcIi1cIiArIG1vZHVsZUlkICsgKGpzc0lkID8gXCItXCIgKyBqc3NJZCA6ICcnKSArIFwiLVwiICsgcnVsZUNvdW50ZXI7XG4gIH07XG5cbiAgcmV0dXJuIGdlbmVyYXRlSWQ7XG59O1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG52YXIgZ2V0UHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9IHRvQ3NzVmFsdWUodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gU3VwcG9ydCBDU1NUT00uXG5cblxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLnNldChwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cbnZhciBzZXRTZWxlY3RvciA9IGZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn07XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkkMSA9IHJlZ2lzdHJ5LnJlZ2lzdHJ5O1xuXG4gIGlmIChyZWdpc3RyeSQxLmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5JDEsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIFRyeSB0byBmaW5kIGEgY29tbWVudCBwbGFjZWhvbGRlciBpZiByZWdpc3RyeSBpcyBlbXB0eS5cblxuXG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29tbWVudCA9IGZpbmRDb21tZW50Tm9kZShpbnNlcnRpb25Qb2ludCk7XG5cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBjb21tZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IGNvbW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfSAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuXG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEluc2VydGlvbiBwb2ludCBcXFwiXCIgKyBpbnNlcnRpb25Qb2ludCArIFwiXFxcIiBub3QgZm91bmQuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHRoZSBET00uXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICB2YXIgbmV4dE5vZGUgPSBmaW5kUHJldk5vZGUob3B0aW9ucyk7XG5cbiAgaWYgKG5leHROb2RlICE9PSBmYWxzZSAmJiBuZXh0Tm9kZS5wYXJlbnQpIHtcbiAgICBuZXh0Tm9kZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0Tm9kZS5ub2RlKTtcbiAgICByZXR1cm47XG4gIH0gLy8gV29ya3Mgd2l0aCBpZnJhbWVzIGFuZCBhbnkgbm9kZSB0eXBlcy5cblxuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQubm9kZVR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgdmFyIGluc2VydGlvblBvaW50RWxlbWVudCA9IGluc2VydGlvblBvaW50O1xuICAgIHZhciBwYXJlbnROb2RlID0gaW5zZXJ0aW9uUG9pbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xuXG5cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgX2luc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGNvbnRhaW5lciwgcnVsZSwgaW5kZXgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBcIiArIGVyci5tZXNzYWdlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLmNzc1J1bGVzW2luZGV4XTtcbn07XG5cbnZhciBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleCA9IGZ1bmN0aW9uIGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KGNvbnRhaW5lciwgaW5kZXgpIHtcbiAgdmFyIG1heEluZGV4ID0gY29udGFpbmVyLmNzc1J1bGVzLmxlbmd0aDsgLy8gSW4gY2FzZSBwcmV2aW91cyBpbnNlcnRpb24gZmFpbHMsIHBhc3NlZCBpbmRleCBtaWdodCBiZSB3cm9uZ1xuXG4gIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICByZXR1cm4gbWF4SW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIC8vIFdpbGwgYmUgZW1wdHkgaWYgbGluazogdHJ1ZSBvcHRpb24gaXMgbm90IHNldCwgYmVjYXVzZVxuICAvLyBpdCBpcyBvbmx5IGZvciB1c2UgdG9nZXRoZXIgd2l0aCBpbnNlcnRSdWxlIEFQSS5cbiAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoc2hlZXQpIHtcbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBnZXRQcm9wZXJ0eVZhbHVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnJlbW92ZVByb3BlcnR5ID0gcmVtb3ZlUHJvcGVydHk7XG4gICAgdGhpcy5zZXRTZWxlY3RvciA9IHNldFNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbWVudCA9IHZvaWQgMDtcbiAgICB0aGlzLnNoZWV0ID0gdm9pZCAwO1xuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgIHRoaXMuY3NzUnVsZXMgPSBbXTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHJlZ2lzdHJ5LmFkZChzaGVldCk7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgY3JlYXRlU3R5bGUoKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERvbVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7IC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAvLyBtb3N0IGJyb3dzZXJzIGNyZWF0ZSBhIG5ldyBDU1NTdHlsZVNoZWV0LCBleGNlcHQgb2YgYWxsIElFcy5cblxuICAgIHZhciBkZXBsb3llZCA9IEJvb2xlYW4odGhpcy5zaGVldCAmJiB0aGlzLnNoZWV0LmRlcGxveWVkKTtcblxuICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMgJiYgZGVwbG95ZWQpIHtcbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7IC8vIEluIHRoZSBtb3N0IGJyb3dzZXJzLCBydWxlcyBpbnNlcnRlZCB1c2luZyBpbnNlcnRSdWxlKCkgQVBJIHdpbGwgYmUgbG9zdCB3aGVuIHN0eWxlIGVsZW1lbnQgaXMgcmVtb3ZlZC5cbiAgICAvLyBUaG91Z2ggSUUgd2lsbCBrZWVwIHRoZW0gYW5kIHdlIG5lZWQgYSBjb25zaXN0ZW50IGJlaGF2aW9yLlxuXG4gICAgaWYgKHRoaXMuc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICB2YXIgX2luc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7IC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cblxuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIF9pbnNlcnRpb25JbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgX2luc2VydGlvbkluZGV4LCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGluc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgaW5zZXJ0aW9uSW5kZXgsIG5hdGl2ZVJ1bGUpO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9O1xuXG4gIF9wcm90by5yZWZDc3NSdWxlID0gZnVuY3Rpb24gcmVmQ3NzUnVsZShydWxlLCBpbmRleCwgY3NzUnVsZSkge1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IGNzc1J1bGU7IC8vIFdlIG9ubHkgd2FudCB0byByZWZlcmVuY2UgdGhlIHRvcCBsZXZlbCBydWxlcywgZGVsZXRlUnVsZSBBUEkgZG9lc24ndCBzdXBwb3J0IHJlbW92aW5nIG5lc3RlZCBydWxlc1xuICAgIC8vIGxpa2UgcnVsZXMgaW5zaWRlIG1lZGlhIHF1ZXJpZXMgb3Iga2V5ZnJhbWVzXG5cbiAgICBpZiAocnVsZS5vcHRpb25zLnBhcmVudCBpbnN0YW5jZW9mIFN0eWxlU2hlZXQpIHtcbiAgICAgIHRoaXMuY3NzUnVsZXNbaW5kZXhdID0gY3NzUnVsZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzUnVsZXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICB9O1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjcuMVwiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpZDoge1xuICAgICAgICBtaW5pZnk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY3JlYXRlR2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCxcbiAgICAgIFJlbmRlcmVyOiBpc0luQnJvd3NlciA/IERvbVJlbmRlcmVyIDogbnVsbCxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKHtcbiAgICAgIG1pbmlmeTogZmFsc2VcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wbHVnaW5zLnVzZShwbHVnaW5zW2ldLCB7XG4gICAgICAgIHF1ZXVlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB2YXJpb3VzIG9wdGlvbnMsIGFwcGxpZXMgcGx1Z2lucy5cbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIHR3aWNlIG9uIHRoZSBzYW1lIGluc3RhbmNlLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHBsdWdpbnNcbiAgICogZGVkdXBsaWNhdGlvbiBsb2dpYy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSnNzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmlkLCBvcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkIHx8IG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVJZCA9IHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKHRoaXMub3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIGluZGV4ID0gX29wdGlvbnMuaW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSByZWdpc3RyeS5pbmRleCA9PT0gMCA/IDAgOiByZWdpc3RyeS5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgcmVnaXN0cnkucmVtb3ZlKHNoZWV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAqIFtEZXByZWNhdGVkXSB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuXG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyA9PT0gJ29iamVjdCcgJiYgQ1NTICE9IG51bGwgJiYgJ251bWJlcicgaW4gQ1NTO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEpzcy5cbiAqL1xuXG52YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBKc3Mob3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIGdsb2JhbCBKc3MgaW5zdGFuY2UuXG4gKi9cblxudmFyIGpzcyA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBqc3M7XG5leHBvcnQgeyBSdWxlTGlzdCwgU2hlZXRzTWFuYWdlciwgU2hlZXRzUmVnaXN0cnksIGNyZWF0ZSwgY3JlYXRlR2VuZXJhdGVJZCwgY3JlYXRlUnVsZSwgZ2V0RHluYW1pY1N0eWxlcywgaGFzQ1NTVE9NU3VwcG9ydCwgcmVnaXN0cnkgYXMgc2hlZXRzLCB0b0Nzc1ZhbHVlIH07XG4iLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuXG52YXIgZnVuY3Rpb25QbHVnaW4gPSBmdW5jdGlvbiBmdW5jdGlvblBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGRlY2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICAgIHJ1bGVbZm5SdWxlTnNdID0gZGVjbDtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb24gdmFsdWVzIGZyb20gdGhlIGRlY2xhcmF0aW9uLCBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvcmUgdW5hd2FyZSBvZiB0aGVtLlxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGF0IG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbnMgb24gZWFjaCBzdHlsZSB1cGRhdGUsIHNpbmNlIHRoaXMgY2FuIGhhcHBlbiBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IGZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgb2YgZnVuY3Rpb24gcnVsZXMuXG4gICAgICBpZiAoZm5WYWx1ZXNOcyBpbiBydWxlIHx8IGZuUnVsZU5zIGluIHJ1bGUpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBmblZhbHVlcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBmblZhbHVlc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm5WYWx1ZXM7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgdmFyIGZuUnVsZSA9IHN0eWxlUnVsZVtmblJ1bGVOc107IC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG5cbiAgICAgIGlmIChmblJ1bGUpIHtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IHdpbGwgcmVtb3ZlIGFsbCBjdXJyZW50bHkgZGVmaW5lZCBwcm9wc1xuICAgICAgICAvLyBpbiBjYXNlIGZ1bmN0aW9uIHJ1bGUgcmV0dXJucyBhIGZhbHN5IHZhbHVlLlxuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSkgfHwge307XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZVJ1bGUuc3R5bGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVSdWxlLnN0eWxlW3Byb3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBGdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIGZ1bmN0aW9uIHJ1bGVzIGFyZSBub3Qgc3VwcG9ydGVkLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgdmFyIGZuVmFsdWVzID0gc3R5bGVSdWxlW2ZuVmFsdWVzTnNdOyAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuXG4gICAgICBpZiAoZm5WYWx1ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZm5WYWx1ZXMpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgZm5WYWx1ZXNbX3Byb3BdKGRhdGEpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uUGx1Z2luO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgUnVsZUxpc3QgfSBmcm9tICdqc3MnO1xuXG52YXIgYXQgPSAnQGdsb2JhbCc7XG52YXIgYXRQcmVmaXggPSAnQGdsb2JhbCAnO1xuXG52YXIgR2xvYmFsQ29udGFpbmVyUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbENvbnRhaW5lclJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgc2VsZWN0b3IgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChzZWxlY3Rvciwgc3R5bGVzW3NlbGVjdG9yXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEdsb2JhbENvbnRhaW5lclJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmIChydWxlKSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcoKTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsQ29udGFpbmVyUnVsZTtcbn0oKTtcblxudmFyIEdsb2JhbFByZWZpeGVkUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGVjdG9yID0ga2V5LnN1YnN0cihhdFByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBHbG9iYWxQcmVmaXhlZFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZSA/IHRoaXMucnVsZS50b1N0cmluZyhvcHRpb25zKSA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxQcmVmaXhlZFJ1bGU7XG59KCk7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG5cbmZ1bmN0aW9uIGFkZFNjb3BlKHNlbGVjdG9yLCBzY29wZSkge1xuICB2YXIgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICB2YXIgc2NvcGVkID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArIFwiIFwiICsgcGFydHNbaV0udHJpbSgpO1xuICAgIGlmIChwYXJ0c1tpICsgMV0pIHNjb3BlZCArPSAnLCAnO1xuICB9XG5cbiAgcmV0dXJuIHNjb3BlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlLCBzaGVldCkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcbiAgdmFyIHJ1bGVzID0gc3R5bGUgPyBzdHlsZVthdF0gOiBudWxsO1xuICBpZiAoIXJ1bGVzKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBydWxlcykge1xuICAgIHNoZWV0LmFkZFJ1bGUobmFtZSwgcnVsZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3RvcjogYWRkU2NvcGUobmFtZSwgcnVsZS5zZWxlY3RvcilcbiAgICB9KSk7XG4gIH1cblxuICBkZWxldGUgc3R5bGVbYXRdO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSwgc2hlZXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wWzBdICE9PSAnQCcgfHwgcHJvcC5zdWJzdHIoMCwgYXQubGVuZ3RoKSAhPT0gYXQpIGNvbnRpbnVlO1xuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKGF0Lmxlbmd0aCksIHJ1bGUuc2VsZWN0b3IpO1xuICAgIHNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24ganNzR2xvYmFsKCkge1xuICBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChuYW1lID09PSBhdCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBhdFByZWZpeC5sZW5ndGgpID09PSBhdFByZWZpeCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdnbG9iYWwnIHx8IHBhcmVudC5vcHRpb25zLnBhcmVudCAmJiBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5zY29wZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY29wZWQgPT09IGZhbHNlKSB7XG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gbmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuO1xuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSwgc2hlZXQpO1xuICAgIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlLCBzaGVldCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogb25DcmVhdGVSdWxlLFxuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzR2xvYmFsO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcbnZhciBwYXJlbnRSZWdFeHAgPSAvJi9nO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NOZXN0ZWQoKSB7XG4gIC8vIEdldCBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yICRyZWYgcmVwbGFjZW1lbnQuXG4gIGZ1bmN0aW9uIGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpIHx8IHNoZWV0ICYmIHNoZWV0LmdldFJ1bGUoa2V5KTtcblxuICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgcnVsZSA9IHJ1bGU7XG4gICAgICAgIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgXFxcIlwiICsga2V5ICsgXCJcXFwiIGluIFxcXCJcIiArIChjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lci50b1N0cmluZygpKSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyZW50U2VsZWN0b3JzW2ldO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5lc3RlZFNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbmVzdGVkID0gbmVzdGVkU2VsZWN0b3JzW2pdO1xuICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJywgJzsgLy8gUmVwbGFjZSBhbGwgJiBieSB0aGUgcGFyZW50IG9yIHByZWZpeCAmIHdpdGggdGhlIHBhcmVudC5cblxuICAgICAgICByZXN1bHQgKz0gbmVzdGVkLmluZGV4T2YoJyYnKSAhPT0gLTEgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyBcIiBcIiArIG5lc3RlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIHByZXZPcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChwcmV2T3B0aW9ucykgcmV0dXJuIF9leHRlbmRzKHt9LCBwcmV2T3B0aW9ucywge1xuICAgICAgaW5kZXg6IHByZXZPcHRpb25zLmluZGV4ICsgMSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgIH0pO1xuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuICAgIG5lc3RpbmdMZXZlbCA9IG5lc3RpbmdMZXZlbCA9PT0gdW5kZWZpbmVkID8gMSA6IG5lc3RpbmdMZXZlbCArIDE7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMSAvLyBXZSBkb24ndCBuZWVkIHRoZSBwYXJlbnQgbmFtZSB0byBiZSBzZXQgb3B0aW9ucyBmb3IgY2hsaWQuXG5cbiAgICB9KTtcblxuICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHN0eWxlUnVsZS5vcHRpb25zLnBhcmVudDtcbiAgICB2YXIgb3B0aW9ucztcbiAgICB2YXIgcmVwbGFjZVJlZjtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9IHByb3AuaW5kZXhPZignJicpICE9PSAtMTtcbiAgICAgIHZhciBpc05lc3RlZENvbmRpdGlvbmFsID0gcHJvcFswXSA9PT0gJ0AnO1xuICAgICAgaWYgKCFpc05lc3RlZCAmJiAhaXNOZXN0ZWRDb25kaXRpb25hbCkgY29udGludWU7XG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhzdHlsZVJ1bGUsIGNvbnRhaW5lciwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSByZXBsYWNlUGFyZW50UmVmcyhwcm9wLCBzdHlsZVJ1bGUuc2VsZWN0b3IpOyAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG5cbiAgICAgICAgaWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KTsgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG5cbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIC8vIFBsYWNlIGNvbmRpdGlvbmFsIHJpZ2h0IGFmdGVyIHRoZSBwYXJlbnQgcnVsZSB0byBlbnN1cmUgcmlnaHQgb3JkZXJpbmcuXG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHByb3AsIHt9LCBvcHRpb25zKSAvLyBGbG93IGV4cGVjdHMgbW9yZSBvcHRpb25zIGJ1dCB0aGV5IGFyZW4ndCByZXF1aXJlZFxuICAgICAgICAvLyBBbmQgZmxvdyBkb2Vzbid0IGtub3cgdGhpcyB3aWxsIGFsd2F5cyBiZSBhIFN0eWxlUnVsZSB3aGljaCBoYXMgdGhlIGFkZFJ1bGUgbWV0aG9kXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgIC5hZGRSdWxlKHN0eWxlUnVsZS5rZXksIHN0eWxlW3Byb3BdLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHN0eWxlUnVsZS5zZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc05lc3RlZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vXG52YXIgY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpXG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBoeXBoZW5hdGVTdHlsZU5hbWVcbiIsImltcG9ydCBoeXBoZW5hdGUgZnJvbSAnaHlwaGVuYXRlLXN0eWxlLW5hbWUnO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCB9IGZyb20gJ2pzcyc7XG5cbnZhciBweCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnB4IDogJ3B4JztcbnZhciBtcyA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucGVyY2VudCA6ICclJztcbi8qKlxuICogR2VuZXJhdGVkIGpzcy1wbHVnaW4tZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5cbnZhciBkZWZhdWx0VW5pdHMgPSB7XG4gIC8vIEFuaW1hdGlvbiBwcm9wZXJ0aWVzXG4gICdhbmltYXRpb24tZGVsYXknOiBtcyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBCYWNrZ3JvdW5kIHByb3BlcnRpZXNcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi15JzogcHgsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiBweCxcbiAgLy8gQm9yZGVyIFByb3BlcnRpZXNcbiAgYm9yZGVyOiBweCxcbiAgJ2JvcmRlci1ib3R0b20nOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXdpZHRoJzogcHgsXG4gICdib3JkZXItbGVmdCc6IHB4LFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1yaWdodCc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogcHgsXG4gICdib3JkZXItdG9wJzogcHgsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2snOiBweCxcbiAgJ2JvcmRlci1ibG9jay1lbmQnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1lbmQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1zdGFydCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2std2lkdGgnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtZW5kJzogcHgsXG4gICdib3JkZXItaW5saW5lLWVuZC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1zdGFydCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1zdGFydC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXN0YXJ0LXN0YXJ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1lbmQtc3RhcnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItZW5kLWVuZC1yYWRpdXMnOiBweCxcbiAgLy8gTWFyZ2luIHByb3BlcnRpZXNcbiAgbWFyZ2luOiBweCxcbiAgJ21hcmdpbi1ib3R0b20nOiBweCxcbiAgJ21hcmdpbi1sZWZ0JzogcHgsXG4gICdtYXJnaW4tcmlnaHQnOiBweCxcbiAgJ21hcmdpbi10b3AnOiBweCxcbiAgJ21hcmdpbi1ibG9jayc6IHB4LFxuICAnbWFyZ2luLWJsb2NrLWVuZCc6IHB4LFxuICAnbWFyZ2luLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdtYXJnaW4taW5saW5lJzogcHgsXG4gICdtYXJnaW4taW5saW5lLWVuZCc6IHB4LFxuICAnbWFyZ2luLWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBQYWRkaW5nIHByb3BlcnRpZXNcbiAgcGFkZGluZzogcHgsXG4gICdwYWRkaW5nLWJvdHRvbSc6IHB4LFxuICAncGFkZGluZy1sZWZ0JzogcHgsXG4gICdwYWRkaW5nLXJpZ2h0JzogcHgsXG4gICdwYWRkaW5nLXRvcCc6IHB4LFxuICAncGFkZGluZy1ibG9jayc6IHB4LFxuICAncGFkZGluZy1ibG9jay1lbmQnOiBweCxcbiAgJ3BhZGRpbmctYmxvY2stc3RhcnQnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lJzogcHgsXG4gICdwYWRkaW5nLWlubGluZS1lbmQnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIE1hc2sgcHJvcGVydGllc1xuICAnbWFzay1wb3NpdGlvbi14JzogcHgsXG4gICdtYXNrLXBvc2l0aW9uLXknOiBweCxcbiAgJ21hc2stc2l6ZSc6IHB4LFxuICAvLyBXaWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAgaGVpZ2h0OiBweCxcbiAgd2lkdGg6IHB4LFxuICAnbWluLWhlaWdodCc6IHB4LFxuICAnbWF4LWhlaWdodCc6IHB4LFxuICAnbWluLXdpZHRoJzogcHgsXG4gICdtYXgtd2lkdGgnOiBweCxcbiAgLy8gUG9zaXRpb24gcHJvcGVydGllc1xuICBib3R0b206IHB4LFxuICBsZWZ0OiBweCxcbiAgdG9wOiBweCxcbiAgcmlnaHQ6IHB4LFxuICBpbnNldDogcHgsXG4gICdpbnNldC1ibG9jayc6IHB4LFxuICAnaW5zZXQtYmxvY2stZW5kJzogcHgsXG4gICdpbnNldC1ibG9jay1zdGFydCc6IHB4LFxuICAnaW5zZXQtaW5saW5lJzogcHgsXG4gICdpbnNldC1pbmxpbmUtZW5kJzogcHgsXG4gICdpbnNldC1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gU2hhZG93IHByb3BlcnRpZXNcbiAgJ2JveC1zaGFkb3cnOiBweCxcbiAgJ3RleHQtc2hhZG93JzogcHgsXG4gIC8vIENvbHVtbiBwcm9wZXJ0aWVzXG4gICdjb2x1bW4tZ2FwJzogcHgsXG4gICdjb2x1bW4tcnVsZSc6IHB4LFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiBweCxcbiAgJ2NvbHVtbi13aWR0aCc6IHB4LFxuICAvLyBGb250IGFuZCB0ZXh0IHByb3BlcnRpZXNcbiAgJ2ZvbnQtc2l6ZSc6IHB4LFxuICAnZm9udC1zaXplLWRlbHRhJzogcHgsXG4gICdsZXR0ZXItc3BhY2luZyc6IHB4LFxuICAndGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzcyc6IHB4LFxuICAndGV4dC1pbmRlbnQnOiBweCxcbiAgJ3RleHQtc3Ryb2tlJzogcHgsXG4gICd0ZXh0LXN0cm9rZS13aWR0aCc6IHB4LFxuICAnd29yZC1zcGFjaW5nJzogcHgsXG4gIC8vIE1vdGlvbiBwcm9wZXJ0aWVzXG4gIG1vdGlvbjogcHgsXG4gICdtb3Rpb24tb2Zmc2V0JzogcHgsXG4gIC8vIE91dGxpbmUgcHJvcGVydGllc1xuICBvdXRsaW5lOiBweCxcbiAgJ291dGxpbmUtb2Zmc2V0JzogcHgsXG4gICdvdXRsaW5lLXdpZHRoJzogcHgsXG4gIC8vIFBlcnNwZWN0aXZlIHByb3BlcnRpZXNcbiAgcGVyc3BlY3RpdmU6IHB4LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXgnOiBwZXJjZW50LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXknOiBwZXJjZW50LFxuICAvLyBUcmFuc2Zvcm0gcHJvcGVydGllc1xuICAndHJhbnNmb3JtLW9yaWdpbic6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXgnOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teic6IHBlcmNlbnQsXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydGllc1xuICAndHJhbnNpdGlvbi1kZWxheSc6IG1zLFxuICAndHJhbnNpdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBBbGlnbm1lbnQgcHJvcGVydGllc1xuICAndmVydGljYWwtYWxpZ24nOiBweCxcbiAgJ2ZsZXgtYmFzaXMnOiBweCxcbiAgLy8gU29tZSByYW5kb20gcHJvcGVydGllc1xuICAnc2hhcGUtbWFyZ2luJzogcHgsXG4gIHNpemU6IHB4LFxuICBnYXA6IHB4LFxuICAvLyBHcmlkIHByb3BlcnRpZXNcbiAgZ3JpZDogcHgsXG4gICdncmlkLWdhcCc6IHB4LFxuICAncm93LWdhcCc6IHB4LFxuICAnZ3JpZC1yb3ctZ2FwJzogcHgsXG4gICdncmlkLWNvbHVtbi1nYXAnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtcm93cyc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJzogcHgsXG4gICdncmlkLWF1dG8tcm93cyc6IHB4LFxuICAnZ3JpZC1hdXRvLWNvbHVtbnMnOiBweCxcbiAgLy8gTm90IGV4aXN0aW5nIHByb3BlcnRpZXMuXG4gIC8vIFVzZWQgdG8gYXZvaWQgaXNzdWVzIHdpdGgganNzLXBsdWdpbi1leHBhbmQgaW50ZWdyYXRpb24uXG4gICdib3gtc2hhZG93LXgnOiBweCxcbiAgJ2JveC1zaGFkb3cteSc6IHB4LFxuICAnYm94LXNoYWRvdy1ibHVyJzogcHgsXG4gICdib3gtc2hhZG93LXNwcmVhZCc6IHB4LFxuICAnZm9udC1saW5lLWhlaWdodCc6IHB4LFxuICAndGV4dC1zaGFkb3cteCc6IHB4LFxuICAndGV4dC1zaGFkb3cteSc6IHB4LFxuICAndGV4dC1zaGFkb3ctYmx1cic6IHB4XG59O1xuXG4vKipcbiAqIENsb25lcyB0aGUgb2JqZWN0IGFuZCBhZGRzIGEgY2FtZWwgY2FzZWQgcHJvcGVydHkgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBuZXdPYmogPSB7fTtcblxuICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgIG5ld09ialtfa2V5XSA9IG9ialtfa2V5XTtcbiAgICBuZXdPYmpbX2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oZGVmYXVsdFVuaXRzKTtcbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB2YWx1ZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZVtpXSA9IGl0ZXJhdGUocHJvcCwgdmFsdWVbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBmb3IgKHZhciBpbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbaW5uZXJQcm9wXSA9IGl0ZXJhdGUoaW5uZXJQcm9wLCB2YWx1ZVtpbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2lubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtfaW5uZXJQcm9wXSA9IGl0ZXJhdGUocHJvcCArIFwiLVwiICsgX2lubmVyUHJvcCwgdmFsdWVbX2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWx1ZSkgPT09IGZhbHNlKSB7XG4gICAgdmFyIHVuaXQgPSBvcHRpb25zW3Byb3BdIHx8IHVuaXRzW3Byb3BdOyAvLyBBZGQgdGhlIHVuaXQgaWYgYXZhaWxhYmxlLCBleGNlcHQgZm9yIHRoZSBzcGVjaWFsIGNhc2Ugb2YgMHB4LlxuXG4gICAgaWYgKHVuaXQgJiYgISh2YWx1ZSA9PT0gMCAmJiB1bml0ID09PSBweCkpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdW5pdCA9PT0gJ2Z1bmN0aW9uJyA/IHVuaXQodmFsdWUpLnRvU3RyaW5nKCkgOiBcIlwiICsgdmFsdWUgKyB1bml0O1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBBZGQgdW5pdCB0byBudW1lcmljIHZhbHVlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRVbml0KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBjYW1lbENhc2VkT3B0aW9ucyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgc3R5bGVbcHJvcF0gPSBpdGVyYXRlKHByb3AsIHN0eWxlW3Byb3BdLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBpdGVyYXRlKHByb3AsIHZhbHVlLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRVbml0O1xuIiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycgJiYgcHJlZml4LmJyb3dzZXIgIT09ICdlZGdlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dXNlci1zZWxlY3RcblxudmFyIHVzZXJTZWxlY3QgPSB7XG4gIG5vUHJlZmlsbDogWyd1c2VyLXNlbGVjdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndXNlci1zZWxlY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JyB8fCBwcmVmaXguanMgPT09ICdtcycgfHwgcHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bXVsdGljb2x1bW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvNDkxXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzE3N1xuXG52YXIgYnJlYWtQcm9wc09sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXmJyZWFrLS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBqc1Byb3AgPSBcIldlYmtpdENvbHVtblwiICsgcGFzY2FsaXplKHByb3ApO1xuICAgICAgcmV0dXJuIGpzUHJvcCBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBcImNvbHVtbi1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96Jykge1xuICAgICAgdmFyIF9qc1Byb3AgPSBcInBhZ2VcIiArIHBhc2NhbGl6ZShwcm9wKTtcblxuICAgICAgcmV0dXJuIF9qc1Byb3AgaW4gc3R5bGUgPyBcInBhZ2UtXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgcGFzY2FsaXplZCA9IHBhc2NhbGl6ZShwcm9wKTsgLy8gUmV0dXJuIGN1c3RvbSBDU1MgdmFyaWFibGUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nKSByZXR1cm4gcHJvcDsgLy8gUmV0dXJuIGFscmVhZHkgcHJlZml4ZWQgdmFsdWUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nICYmIHByb3BbMV0gPT09ICctJykgcmV0dXJuIHByb3A7XG4gICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDsgLy8gVHJ5IHdlYmtpdCBmYWxsYmFjay5cblxuICAgIGlmIChwcmVmaXguanMgIT09ICdXZWJraXQnICYmIFwiV2Via2l0XCIgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zY3JvbGwtc25hcFxuXG52YXIgc2Nyb2xsU25hcCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcC5zdWJzdHJpbmcoMCwgMTEpICE9PSAnc2Nyb2xsLXNuYXAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9b3ZlcnNjcm9sbC1iZWhhdmlvclxuXG52YXIgb3ZlcnNjcm9sbEJlaGF2aW9yID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnb3ZlcnNjcm9sbC1iZWhhdmlvcicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgXCJzY3JvbGwtY2hhaW5pbmdcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cblxufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxudmFyIGZsZXgyMDEyID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXAkMSk7XG5cbnZhciBwcmVmaXhDc3MgPSBmdW5jdGlvbiBwcmVmaXhDc3MocCkge1xuICByZXR1cm4gcHJlZml4LmNzcyArIHA7XG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDA5LlxuXG5cbnZhciBmbGV4MjAwOSA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBfcmVmKSB7XG4gICAgdmFyIG11bHRpcGxlID0gX3JlZi5tdWx0aXBsZTtcblxuICAgIGlmIChwcm9wS2V5cy5pbmRleE9mKHByb3ApID4gLTEpIHtcbiAgICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIGNvbG9yQWRqdXN0LCBtYXNrLCB0ZXh0T3JpZW50YXRpb24sIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgd3JpdGluZ01vZGUsIHVzZXJTZWxlY3QsIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGVbcHJvcF0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgfSAvLyBDaGVjayBpZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zZm9ybScgbmF0aXZlbHkgc3VwcG9ydGVkIGluIGJyb3dzZXIuXG5cblxuICBpZiAocHJvcCA9PT0gJ3RyYW5zaXRpb24nIHx8IHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgb3B0aW9uc1twcm9wXSA9IHByb3AgaW4gZWwuc3R5bGU7XG4gIH0gLy8gRmluZCBhIHBsdWdpbiBmb3IgY3VycmVudCBwcmVmaXggcHJvcGVydHkuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5RGV0ZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wZXJ0eURldGVjdG9yc1tpXShwcm9wLCBlbC5zdHlsZSwgb3B0aW9ucyk7IC8vIEJyZWFrIGxvb3AsIGlmIHZhbHVlIGZvdW5kLlxuXG4gICAgaWYgKGNhY2hlW3Byb3BdKSBicmVhaztcbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG4gIC8vIEZpcmVmb3ggY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgcHJvcGVydGllcywgZS5nLiwgXCIwXCIuXG5cblxuICB0cnkge1xuICAgIGVsLnN0eWxlW3Byb3BdID0gJyc7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciB0cmFuc2l0aW9uUHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogMSxcbiAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uJzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDFcbn07XG52YXIgdHJhbnNQcm9wc1JlZ0V4cCA9IC8oXlxccypbXFx3LV0rKXwsIChcXHMqW1xcdy1dKykoPyFbXigpXSpcXCkpL2c7XG52YXIgZWwkMTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSB0cmFuc2l0aW9uL3RyYW5zZm9ybSBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gcDFcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKG1hdGNoLCBwMSwgcDIpIHtcbiAgaWYgKHAxID09PSAndmFyJykgcmV0dXJuICd2YXInO1xuICBpZiAocDEgPT09ICdhbGwnKSByZXR1cm4gJ2FsbCc7XG4gIGlmIChwMiA9PT0gJ2FsbCcpIHJldHVybiAnLCBhbGwnO1xuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHAxID8gc3VwcG9ydGVkUHJvcGVydHkocDEpIDogXCIsIFwiICsgc3VwcG9ydGVkUHJvcGVydHkocDIpO1xuICBpZiAoIXByZWZpeGVkVmFsdWUpIHJldHVybiBwMSB8fCBwMjtcbiAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG59XG5cbmlmIChpc0luQnJvd3NlcikgZWwkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIHZhciBwcmVmaXhlZFZhbHVlID0gdmFsdWU7XG4gIGlmICghZWwkMSB8fCBwcm9wZXJ0eSA9PT0gJ2NvbnRlbnQnKSByZXR1cm4gdmFsdWU7IC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIGlmICh0eXBlb2YgcHJlZml4ZWRWYWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHByZWZpeGVkVmFsdWUsIDEwKSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbiAgfSAvLyBDcmVhdGUgY2FjaGUga2V5IGZvciBjdXJyZW50IHZhbHVlLlxuXG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyBwcmVmaXhlZFZhbHVlOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gdmFsdWUgZnJvbSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlJDFbY2FjaGVLZXldICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG4gIH0gLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInLlxuXG5cbiAgdHJ5IHtcbiAgICAvLyBUZXN0IHZhbHVlIGFzIGl0IGlzLlxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2l0aW9uLXByb3BlcnR5JyBwcm9wZXJ0eS5cblxuXG4gIGlmICh0cmFuc2l0aW9uUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4ZWRWYWx1ZS5yZXBsYWNlKHRyYW5zUHJvcHNSZWdFeHAsIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgLy8gVmFsdWUgd2l0aCBhIHZlbmRvciBwcmVmaXguXG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeC5jc3MgKyBwcmVmaXhlZFZhbHVlOyAvLyBIYXJkY29kZSB0ZXN0IHRvIGNvbnZlcnQgXCJmbGV4XCIgdG8gXCItbXMtZmxleGJveFwiIGZvciBJRTEwLlxuXG4gICAgaWYgKHByZWZpeGVkVmFsdWUgPT09ICctbXMtZmxleCcpIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJy1tcy1mbGV4Ym94JzsgLy8gVGVzdCBwcmVmaXhlZCB2YWx1ZS5cblxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTsgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG5cbiAgICBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG5cblxuICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICcnOyAvLyBXcml0ZSBjdXJyZW50IHZhbHVlIHRvIGNhY2hlLlxuXG4gIGNhY2hlJDFbY2FjaGVLZXldID0gcHJlZml4ZWRWYWx1ZTtcbiAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xufVxuXG5leHBvcnQgeyBwcmVmaXgsIHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkUHJvcGVydHksIHN1cHBvcnRlZFZhbHVlIH07XG4iLCJpbXBvcnQgeyBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFZhbHVlLCBzdXBwb3J0ZWRQcm9wZXJ0eSB9IGZyb20gJ2Nzcy12ZW5kb3InO1xuaW1wb3J0IHsgdG9Dc3NWYWx1ZSB9IGZyb20gJ2pzcyc7XG5cbi8qKlxuICogQWRkIHZlbmRvciBwcmVmaXggdG8gYSBwcm9wZXJ0eSBuYW1lIHdoZW4gbmVlZGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzVmVuZG9yUHJlZml4ZXIoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICB2YXIgYXRSdWxlID0gcnVsZTtcbiAgICAgIGF0UnVsZS5hdCA9IHN1cHBvcnRlZEtleWZyYW1lcyhhdFJ1bGUuYXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZpeFN0eWxlKHN0eWxlKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBzdHlsZVtwcm9wXSA9IHZhbHVlLm1hcChwcmVmaXhTdHlsZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlUHJvcCA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFByb3AgPSBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3ApIGNoYW5nZVByb3AgPSB0cnVlO1xuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUkMSA9IHN1cHBvcnRlZFZhbHVlKHN1cHBvcnRlZFByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRWYWx1ZSQxICYmIHN1cHBvcnRlZFZhbHVlJDEgIT09IHZhbHVlKSBjaGFuZ2VWYWx1ZSA9IHRydWU7XG5cbiAgICAgIGlmIChjaGFuZ2VQcm9wIHx8IGNoYW5nZVZhbHVlKSB7XG4gICAgICAgIGlmIChjaGFuZ2VQcm9wKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIHN0eWxlW3N1cHBvcnRlZFByb3AgfHwgcHJvcF0gPSBzdXBwb3J0ZWRWYWx1ZSQxIHx8IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHJldHVybiBwcmVmaXhTdHlsZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRlZFZhbHVlKHByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKSB8fCB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSxcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NWZW5kb3JQcmVmaXhlcjtcbiIsIi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIGlmIChwcm9wMC5sZW5ndGggPT09IHByb3AxLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHByb3AwID4gcHJvcDEgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3AwLmxlbmd0aCAtIHByb3AxLmxlbmd0aDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIG5ld1N0eWxlID0ge307XG4gICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdTdHlsZVtwcm9wc1tpXV0gPSBzdHlsZVtwcm9wc1tpXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdHlsZTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1Byb3BzU29ydDtcbiIsImltcG9ydCBmdW5jdGlvbnMgZnJvbSAnanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uJztcbmltcG9ydCBnbG9iYWwgZnJvbSAnanNzLXBsdWdpbi1nbG9iYWwnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICdqc3MtcGx1Z2luLW5lc3RlZCc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2pzcy1wbHVnaW4tY2FtZWwtY2FzZSc7XG5pbXBvcnQgZGVmYXVsdFVuaXQgZnJvbSAnanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQnO1xuaW1wb3J0IHZlbmRvclByZWZpeGVyIGZyb20gJ2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyJztcbmltcG9ydCBwcm9wc1NvcnQgZnJvbSAnanNzLXBsdWdpbi1wcm9wcy1zb3J0JzsgLy8gU3Vic2V0IG9mIGpzcy1wcmVzZXQtZGVmYXVsdCB3aXRoIG9ubHkgdGhlIHBsdWdpbnMgdGhlIE1hdGVyaWFsLVVJIGNvbXBvbmVudHMgYXJlIHVzaW5nLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBqc3NQcmVzZXQoKSB7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW2Z1bmN0aW9ucygpLCBnbG9iYWwoKSwgbmVzdGVkKCksIGNhbWVsQ2FzZSgpLCBkZWZhdWx0VW5pdCgpLCAvLyBEaXNhYmxlIHRoZSB2ZW5kb3IgcHJlZml4ZXIgc2VydmVyLXNpZGUsIGl0IGRvZXMgbm90aGluZy5cbiAgICAvLyBUaGlzIHdheSwgd2UgY2FuIGdldCBhIHBlcmZvcm1hbmNlIGJvb3N0LlxuICAgIC8vIEluIHRoZSBkb2N1bWVudGF0aW9uLCB3ZSBhcmUgdXNpbmcgYGF1dG9wcmVmaXhlcmAgdG8gc29sdmUgdGhpcyBwcm9ibGVtLlxuICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHZlbmRvclByZWZpeGVyKCksIHByb3BzU29ydCgpXVxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBiYXNlQ2xhc3NlcyA9IG9wdGlvbnMuYmFzZUNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzID0gb3B0aW9ucy5uZXdDbGFzc2VzLFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQ7XG5cbiAgaWYgKCFuZXdDbGFzc2VzKSB7XG4gICAgcmV0dXJuIGJhc2VDbGFzc2VzO1xuICB9XG5cbiAgdmFyIG5leHRDbGFzc2VzID0gX2V4dGVuZHMoe30sIGJhc2VDbGFzc2VzKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgbmV3Q2xhc3NlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBgXCIuY29uY2F0KG5ld0NsYXNzZXMsIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3Agb2YgXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiIGlzIGluY29ycmVjdC5cIiksICdZb3UgbWlnaHQgd2FudCB0byB1c2UgdGhlIGNsYXNzTmFtZSBwcm9wIGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgcmV0dXJuIGJhc2VDbGFzc2VzO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKG5ld0NsYXNzZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWJhc2VDbGFzc2VzW2tleV0gJiYgbmV3Q2xhc3Nlc1trZXldKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IGltcGxlbWVudGVkIGluIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IGNhbiBvbmx5IG92ZXJyaWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBcIi5jb25jYXQoT2JqZWN0LmtleXMoYmFzZUNsYXNzZXMpLmpvaW4oJywnKSwgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdDbGFzc2VzW2tleV0gJiYgdHlwZW9mIG5ld0NsYXNzZXNba2V5XSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcCBpcyBub3QgdmFsaWQgZm9yIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IG5lZWQgdG8gcHJvdmlkZSBhIG5vbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZjogXCIuY29uY2F0KG5ld0NsYXNzZXNba2V5XSwgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgbmV4dENsYXNzZXNba2V5XSA9IFwiXCIuY29uY2F0KGJhc2VDbGFzc2VzW2tleV0sIFwiIFwiKS5jb25jYXQobmV3Q2xhc3Nlc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV4dENsYXNzZXM7XG59IiwiLy8gVXNlZCBodHRwczovL2dpdGh1Yi5jb20vdGhpbmtsb29wL211bHRpLWtleS1jYWNoZSBhcyBpbnNwaXJhdGlvblxudmFyIG11bHRpS2V5U3RvcmUgPSB7XG4gIHNldDogZnVuY3Rpb24gc2V0KGNhY2hlLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcblxuICAgIGlmICghc3ViQ2FjaGUpIHtcbiAgICAgIHN1YkNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgY2FjaGUuc2V0KGtleTEsIHN1YkNhY2hlKTtcbiAgICB9XG5cbiAgICBzdWJDYWNoZS5zZXQoa2V5MiwgdmFsdWUpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldChjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICByZXR1cm4gc3ViQ2FjaGUgPyBzdWJDYWNoZS5nZXQoa2V5MikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICBzdWJDYWNoZS5kZWxldGUoa2V5Mik7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBtdWx0aUtleVN0b3JlOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgVGhlbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIGZyb20gJy4uL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ2pzcyc7XG5pbXBvcnQganNzUHJlc2V0IGZyb20gJy4uL2pzc1ByZXNldCc7IC8vIERlZmF1bHQgSlNTIGluc3RhbmNlLlxuXG52YXIganNzID0gY3JlYXRlKGpzc1ByZXNldCgpKTsgLy8gVXNlIGEgc2luZ2xldG9uIG9yIHRoZSBwcm92aWRlZCBvbmUgYnkgdGhlIGNvbnRleHQuXG4vL1xuLy8gVGhlIGNvdW50ZXItYmFzZWQgYXBwcm9hY2ggZG9lc24ndCB0b2xlcmF0ZSBhbnkgbWlzdGFrZS5cbi8vIEl0J3MgbXVjaCBzYWZlciB0byB1c2UgdGhlIHNhbWUgY291bnRlciBldmVyeXdoZXJlLlxuXG52YXIgZ2VuZXJhdGVDbGFzc05hbWUgPSBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlc1xuXG5leHBvcnQgdmFyIHNoZWV0c01hbmFnZXIgPSBuZXcgTWFwKCk7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGRpc2FibGVHZW5lcmF0aW9uOiBmYWxzZSxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lLFxuICBqc3M6IGpzcyxcbiAgc2hlZXRzQ2FjaGU6IG51bGwsXG4gIHNoZWV0c01hbmFnZXI6IHNoZWV0c01hbmFnZXIsXG4gIHNoZWV0c1JlZ2lzdHJ5OiBudWxsXG59O1xuZXhwb3J0IHZhciBTdHlsZXNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChkZWZhdWx0T3B0aW9ucyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFN0eWxlc0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU3R5bGVzQ29udGV4dCc7XG59XG5cbnZhciBpbmplY3RGaXJzdE5vZGU7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZXNQcm92aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRpbmplY3RGaXJzdCA9IHByb3BzLmluamVjdEZpcnN0LFxuICAgICAgaW5qZWN0Rmlyc3QgPSBfcHJvcHMkaW5qZWN0Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGluamVjdEZpcnN0LFxuICAgICAgX3Byb3BzJGRpc2FibGVHZW5lcmF0ID0gcHJvcHMuZGlzYWJsZUdlbmVyYXRpb24sXG4gICAgICBkaXNhYmxlR2VuZXJhdGlvbiA9IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUdlbmVyYXQsXG4gICAgICBsb2NhbE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5qZWN0Rmlyc3RcIiwgXCJkaXNhYmxlR2VuZXJhdGlvblwiXSk7XG5cbiAgdmFyIG91dGVyT3B0aW9ucyA9IFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCk7XG5cbiAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgb3V0ZXJPcHRpb25zLCB7XG4gICAgZGlzYWJsZUdlbmVyYXRpb246IGRpc2FibGVHZW5lcmF0aW9uXG4gIH0sIGxvY2FsT3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgIWNvbnRleHQuc2hlZXRzTWFuYWdlcikge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgU2VydmVyU3R5bGVTaGVldHMgQVBJIHdoZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXIuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCkge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIGEgY3VzdG9tIGluc2VydGlvblBvaW50IGFuZCA8U3R5bGVzQ29udGV4dCBpbmplY3RGaXJzdD4gYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmplY3RGaXJzdCAmJiBsb2NhbE9wdGlvbnMuanNzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGNhbm5vdCB1c2UgdGhlIGpzcyBhbmQgaW5qZWN0Rmlyc3QgcHJvcHMgYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIWluamVjdEZpcnN0Tm9kZSkge1xuICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgICAgaW5qZWN0Rmlyc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnbXVpLWluamVjdC1maXJzdCcpO1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoaW5qZWN0Rmlyc3ROb2RlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGNvbnRleHQuanNzID0gY3JlYXRlKHtcbiAgICAgIHBsdWdpbnM6IGpzc1ByZXNldCgpLnBsdWdpbnMsXG4gICAgICBpbnNlcnRpb25Qb2ludDogaW5qZWN0Rmlyc3ROb2RlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlIC0geW91IGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHRoZSB0cmF2ZXJzYWwgd2l0aCB0aGlzIHByb3AuXG4gICAqL1xuICBkaXNhYmxlR2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLlxuICAgKi9cbiAgZ2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNYXRlcmlhbC1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgaW5zdGFuY2UuXG4gICAqL1xuICBqc3M6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBCZXRhIGZlYXR1cmUuXG4gICAqXG4gICAqIENhY2hlIGZvciB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVGhlIHNoZWV0c01hbmFnZXIgaXMgdXNlZCB0byBkZWR1cGxpY2F0ZSBzdHlsZSBzaGVldCBpbmplY3Rpb24gaW4gdGhlIHBhZ2UuXG4gICAqIEl0J3MgZGVkdXBsaWNhdGluZyB1c2luZyB0aGUgKHRoZW1lLCBzdHlsZXMpIGNvdXBsZS5cbiAgICogT24gdGhlIHNlcnZlciwgeW91IHNob3VsZCBwcm92aWRlIGEgbmV3IGluc3RhbmNlIGZvciBlYWNoIHJlcXVlc3QuXG4gICAqL1xuICBzaGVldHNNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIENvbGxlY3QgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c1JlZ2lzdHJ5OiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG4vLyBHbG9iYWwgaW5kZXggY291bnRlciB0byBwcmVzZXJ2ZSBzb3VyY2Ugb3JkZXIuXG4vLyBXZSBjcmVhdGUgdGhlIHN0eWxlIHNoZWV0IGR1cmluZyB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbXBvbmVudCxcbi8vIGNoaWxkcmVuIGFyZSBoYW5kbGVkIGFmdGVyIHRoZSBwYXJlbnRzLCBzbyB0aGUgb3JkZXIgb2Ygc3R5bGUgZWxlbWVudHMgd291bGQgYmUgcGFyZW50LT5jaGlsZC5cbi8vIEl0IGlzIGEgcHJvYmxlbSB0aG91Z2ggd2hlbiBhIHBhcmVudCBwYXNzZXMgYSBjbGFzc05hbWVcbi8vIHdoaWNoIG5lZWRzIHRvIG92ZXJyaWRlIGFueSBjaGlsZCdzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG52YXIgaW5kZXhDb3VudGVyID0gLTFlOTtcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIGluZGV4Q291bnRlciArPSAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluZGV4Q291bnRlciA+PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleENvdW50ZXI7XG59IiwiLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG52YXIgbm9vcFRoZW1lID0ge307XG5leHBvcnQgZGVmYXVsdCBub29wVGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuL25vb3BUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgdGhlbWluZ0VuYWJsZWQgPSB0eXBlb2Ygc3R5bGVzT3JDcmVhdG9yID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKF90eXBlb2Yoc3R5bGVzT3JDcmVhdG9yKSAhPT0gJ29iamVjdCcgJiYgIXRoZW1pbmdFbmFibGVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0aGVtZSwgbmFtZSkge1xuICAgICAgdmFyIHN0eWxlcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoZW1pbmdFbmFibGVkID09PSB0cnVlICYmIHRoZW1lID09PSBub29wVGhlbWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHByZXBlbmQgZXJyb3IgbWVzc2FnZS9uYW1lIGluc3RlYWRcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBhcmUgcHJvdmlkaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIGluIHRoZSBjb250ZXh0LicsICdPbmUgb2YgdGhlIHBhcmVudCBlbGVtZW50cyBuZWVkcyB0byB1c2UgYSBUaGVtZVByb3ZpZGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcblxuICAgICAgdmFyIHN0eWxlc1dpdGhPdmVycmlkZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzKTtcblxuICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIXN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0gPSBkZWVwbWVyZ2Uoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHlsZXNXaXRoT3ZlcnJpZGVzO1xuICAgIH0sXG4gICAgb3B0aW9uczoge31cbiAgfTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1N0eWxlcyB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc2VzIGZyb20gJy4uL21lcmdlQ2xhc3Nlcyc7XG5pbXBvcnQgbXVsdGlLZXlTdG9yZSBmcm9tICcuL211bHRpS2V5U3RvcmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IFN0eWxlc0NvbnRleHQgfSBmcm9tICcuLi9TdHlsZXNQcm92aWRlcic7XG5pbXBvcnQgeyBpbmNyZW1lbnQgfSBmcm9tICcuL2luZGV4Q291bnRlcic7XG5pbXBvcnQgZ2V0U3R5bGVzQ3JlYXRvciBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUnO1xuXG5mdW5jdGlvbiBnZXRDbGFzc2VzKF9yZWYsIGNsYXNzZXMsIENvbXBvbmVudCkge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYuc3R5bGVzT3B0aW9ucztcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybiBjbGFzc2VzIHx8IHt9O1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5jYWNoZUNsYXNzZXMpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgbGFzdEpTUzoge31cbiAgICB9O1xuICB9IC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzdGF0ZS5jbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSBjbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChnZW5lcmF0ZSkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICBuZXdDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYyLnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjIuc3R5bGVzQ3JlYXRvcixcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuXG4gIGlmICghc2hlZXRNYW5hZ2VyKSB7XG4gICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgcmVmczogMCxcbiAgICAgIHN0YXRpY1NoZWV0OiBudWxsLFxuICAgICAgZHluYW1pY1N0eWxlczogbnVsbFxuICAgIH07XG4gICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHN0eWxlc0NyZWF0b3Iub3B0aW9ucywgc3R5bGVzT3B0aW9ucywge1xuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBmbGlwOiB0eXBlb2Ygc3R5bGVzT3B0aW9ucy5mbGlwID09PSAnYm9vbGVhbicgPyBzdHlsZXNPcHRpb25zLmZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnXG4gIH0pO1xuXG4gIG9wdGlvbnMuZ2VuZXJhdGVJZCA9IG9wdGlvbnMuc2VydmVyR2VuZXJhdGVDbGFzc05hbWUgfHwgb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICB2YXIgc3RhdGljU2hlZXQ7XG5cbiAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgc3RhdGljU2hlZXQgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHN0eWxlc0NyZWF0b3IuY3JlYXRlKHRoZW1lLCBuYW1lKTtcblxuICAgIGlmICghc3RhdGljU2hlZXQpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgICAgbGluazogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgIHN0YXRpY1NoZWV0LmF0dGFjaCgpO1xuXG4gICAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc3RhdGljU2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHN0YXRpY1NoZWV0KTtcbiAgICB9XG5cbiAgICBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQgPSBzdGF0aWNTaGVldDtcbiAgICBzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcyA9IGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKTtcbiAgfVxuXG4gIGlmIChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcykge1xuICAgIHZhciBkeW5hbWljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICBsaW5rOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICAgIGR5bmFtaWNTaGVldC5hdHRhY2goKTtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQgPSBkeW5hbWljU2hlZXQ7XG4gICAgc3RhdGUuY2xhc3NlcyA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzOiBkeW5hbWljU2hlZXQuY2xhc3Nlc1xuICAgIH0pO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY2xhc3NlcyA9IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzO1xuICB9XG5cbiAgc2hlZXRNYW5hZ2VyLnJlZnMgKz0gMTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZTtcblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmNC5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWY0LnN0eWxlc0NyZWF0b3I7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgbXVsdGlLZXlTdG9yZS5kZWxldGUoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzdGF0ZS5keW5hbWljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc3RhdGUuZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuYywgdmFsdWVzKSB7XG4gIHZhciBrZXkgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb3V0cHV0OyAvLyBTdG9yZSBcImdlbmVyYXRpb25cIiBrZXkuIEp1c3QgcmV0dXJucyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZVxuXG4gIHZhciBjdXJyZW50S2V5ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LCB2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAvLyBcInRoZSBmaXJzdCByZW5kZXJcIiwgb3IgXCJtZW1vIGRyb3BwZWQgdGhlIHZhbHVlXCJcblxuICBpZiAoa2V5LmN1cnJlbnQgIT09IGN1cnJlbnRLZXkpIHtcbiAgICBrZXkuY3VycmVudCA9IGN1cnJlbnRLZXk7XG4gICAgb3V0cHV0ID0gZnVuYygpO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICBvdXRwdXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY3VycmVudEtleV0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4T3B0aW9uID0gb3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudCxcbiAgICAgIF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgZGVmYXVsdFRoZW1lID0gX29wdGlvbnMkZGVmYXVsdFRoZW1lID09PSB2b2lkIDAgPyBub29wVGhlbWUgOiBfb3B0aW9ucyRkZWZhdWx0VGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zMiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJuYW1lXCIsIFwiY2xhc3NOYW1lUHJlZml4XCIsIFwiQ29tcG9uZW50XCIsIFwiZGVmYXVsdFRoZW1lXCJdKTtcblxuICB2YXIgc3R5bGVzQ3JlYXRvciA9IGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKTtcbiAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWUgfHwgY2xhc3NOYW1lUHJlZml4T3B0aW9uIHx8ICdtYWtlU3R5bGVzJztcbiAgc3R5bGVzQ3JlYXRvci5vcHRpb25zID0ge1xuICAgIGluZGV4OiBpbmNyZW1lbnQoKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1ldGE6IGNsYXNzTmFtZVByZWZpeCxcbiAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICB9O1xuXG4gIHZhciB1c2VTdHlsZXMgPSBmdW5jdGlvbiB1c2VTdHlsZXMoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCksIHN0eWxlc09wdGlvbnMyKTtcblxuICAgIHZhciBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICBzdHlsZXNDcmVhdG9yOiBzdHlsZXNDcmVhdG9yLFxuICAgICAgICBzdHlsZXNPcHRpb25zOiBzdHlsZXNPcHRpb25zLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH07XG4gICAgICBhdHRhY2goY3VycmVudCwgcHJvcHMpO1xuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoKGN1cnJlbnQpO1xuICAgICAgfTtcbiAgICB9LCBbdGhlbWUsIHN0eWxlc0NyZWF0b3JdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHVwZGF0ZShpbnN0YW5jZS5jdXJyZW50LCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzZXMoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMuY2xhc3NlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH07XG5cbiAgcmV0dXJuIHVzZVN0eWxlcztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnLi4vbWFrZVN0eWxlcyc7XG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7IC8vIExpbmsgYSBzdHlsZSBzaGVldCB3aXRoIGEgY29tcG9uZW50LlxuLy8gSXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjb21wb25lbnQgcGFzc2VkIHRvIGl0O1xuLy8gaW5zdGVhZCwgaXQgcmV0dXJucyBhIG5ldyBjb21wb25lbnQsIHdpdGggYSBgY2xhc3Nlc2AgcHJvcGVydHkuXG5cbnZhciB3aXRoU3R5bGVzID0gZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZSA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZGVmYXVsdFRoZW1lXCIsIFwid2l0aFRoZW1lXCIsIFwibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoU3R5bGVzKHN0eWxlcykoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIFdpdGhTdHlsZXMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjbGFzc2VzUHJvcCA9IHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTsgLy8gVGhlIHdyYXBwZXIgcmVjZWl2ZXMgb25seSB1c2VyIHN1cHBsaWVkIHByb3BzLCB3aGljaCBjb3VsZCBiZSBhIHN1YnNldCBvZlxuICAgICAgLy8gdGhlIGFjdHVhbCBwcm9wcyBDb21wb25lbnQgbWlnaHQgcmVjZWl2ZSBkdWUgdG8gbWVyZ2luZyB3aXRoIGRlZmF1bHRQcm9wcy5cbiAgICAgIC8vIFNvIGNvcHlpbmcgaXQgaGVyZSB3b3VsZCBnaXZlIHVzIHRoZSBzYW1lIHJlc3VsdCBpbiB0aGUgd3JhcHBlciBhcyB3ZWxsLlxuXG5cbiAgICAgIHZhciBjbGFzc2VzID0gdXNlU3R5bGVzKF9leHRlbmRzKHt9LCBDb21wb25lbnQuZGVmYXVsdFByb3BzLCBwcm9wcykpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZixcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfSwgbW9yZSkpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhTdHlsZXMucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIC8vICAgJ01hdGVyaWFsLVVJOiBUaGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArXG4gICAgICAgIC8vICAgICAnUmVmcyBhcmUgbm93IGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIHRvIHRoZSBpbm5lciBjb21wb25lbnQuJyxcbiAgICAgICAgLy8gKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xudmFyIGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIGFzIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IGNhcGl0YWxpemUoc3RyaW5nKSBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSJdLCJuYW1lcyI6WyJyZWZSZWdFeHAiLCJwbHVnaW5zIiwiaXNJbkJyb3dzZXIiLCJzZXBhcmF0b3JSZWdFeHAiLCJjYWNoZSIsImh5cGhlbmF0ZSIsImdsb2JhbCIsIm5lc3RlZCIsInZlbmRvclByZWZpeGVyIiwicHJvcHNTb3J0IiwiVGhlbWVDb250ZXh0IiwibXVsdGlLZXlTdG9yZSIsIm5vb3BUaGVtZSIsIndpdGhTdHlsZXMiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsImRlZmF1bHRUaGVtZSIsIl9mb3JtYXRNdWlFcnJvck1lc3NhZ2UiXSwibWFwcGluZ3MiOiIr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
