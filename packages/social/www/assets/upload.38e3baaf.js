import{i as p}from"./vendor.c8b8cc93.js";import{C as b}from"./index.0040ebb6.js";function A(r){if(!r)return"";if(r.message)return r.message;const t=r.target;return t?r.target.error&&r.target.error.message?t.error.message:r.target.src?`Failed to load "${t.src}"`:t instanceof XMLHttpRequest?`Network Error: ${t.status||"Unknown Status."} ${t.statusText||"Unknown Error. Possibly a CORS error."}`:`Unknown error on ${t}.`:`Unknown error: "${JSON.stringify(r)}"`}class h extends Error{constructor(t){super(t);this.name=this.constructor.name,this.message=t,typeof Error.captureStackTrace=="function"?Error.captureStackTrace(this,this.constructor):this.stack=new Error(t).stack}}class F extends h{originalError;constructor(t,e){super(`${t}:
  Cause:
    ${A(e).replace(/\n/g,`
    `)}`);this.originalError=e,this.stack+=`
`+e.stack}}class U extends h{constructor(t,e){let a=`${t}:

${e.length} Error${e.length>1?"s":""}:`;for(const o of e){const i=o.message?o.message.replace(/\n/g,`
  `):"Unknown Error";a+=`
  `+i}super(a)}}const w=[".mp3",".mpeg","audio/mpeg"],_=[".mp4","video/mp4"],$=[".png",".jpeg",".jpg",".gif","image/png","image/jpeg","image/gif"],x=[".glb","model/gltf-binary"],E=[".tsx",".ts",".js"],L=[...w,..._,...$,...x,...E],j=L.join(","),k=()=>{const r=localStorage.getItem(b.publicRuntimeConfig.feathersStoreKey);if(r==null||r.length===0)throw new Error(p.t("editor:errors.notAuthenticated"));return r},f=b.publicRuntimeConfig.apiServer;let y=0;const T=async(r,t,e,a,o)=>{const i=k();return await new Promise((l,c)=>{const s=new XMLHttpRequest,d=()=>{s.abort();const n=new Error(p.t("editor:errors.uploadAborted"));n.name="AbortError",n.aborted=!0,c(n)};e&&e.addEventListener("abort",d),console.log("Posting to: ",`${f}/media`),s.open("post",`${f}/media`,!0),s.upload.addEventListener("progress",n=>{t&&t(n.loaded/n.total)}),s.addEventListener("error",n=>{e&&e.removeEventListener("abort",d),c(new F(p.t("editor:errors.uploadFailed"),n))}),s.addEventListener("load",()=>{if(e&&e.removeEventListener("abort",d),s.status<300){const n=JSON.parse(s.responseText);l(n)}else c(new Error(p.t("editor:errors.uploadFailed",{reason:s.statusText})))});const u=new FormData;o&&u.set("projectId",o),a&&u.set("fileIdentifier",a),u.set("media",r),s.setRequestHeader("Authorization",`Bearer ${i}`),s.send(u)})},q=async(r,t,e,a)=>await v(`${f}/static-resource`,r,t,e,a),v=async(r,t,e,a,o)=>{const i=[];for(const l of Array.from(e)){if(o.aborted)break;const c=new AbortController,s=()=>c.abort();o.addEventListener("abort",s);const d=await S(r,t,l,u=>a(i.length+1,e.length,u),c.signal);if(i.push(d),o.removeEventListener("abort",s),o.aborted)break}return i};function C(r,t){for(const e of t)if(e.startsWith(".")){if(r.name.toLowerCase().endsWith(e))return!0}else if(r.type.startsWith(e))return!0;return!1}const S=async(r,t,e,a,o)=>{let i=null,l=null;if(!C(e,[...w,...E])){const m=await t.generateFileThumbnail(e),g=await T(m,void 0,o);i=g.file_id,l=g.meta.access_token}const{file_id:c,meta:{access_token:s,expected_content_type:d},origin:u}=await T(e,a,o),n=Date.now()-y;return n<1100&&await new Promise(m=>setTimeout(m,1100-n)),k(),JSON.stringify({asset:{name:e.name,file_id:c,access_token:s,thumbnail_file_id:i,thumbnail_access_token:l}}),y=Date.now(),{id:c,name:e.name,url:u,type:"application/octet-stream",images:{preview:{url:e.thumbnail_url}}}};export{j as A,$ as I,x as M,F as R,_ as V,q as a,L as b,w as c,U as d,k as g,T as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
