import{f as Ue,n as Je}from"./vendor.475cb2ff.js";import{C as ge}from"./index.7b02be28.js";var He={exports:{}};/*!
 * Socket.IO v4.2.0
 * (c) 2014-2021 Guillermo Rauch
 * Released under the MIT License.
 */(function(fe,We){(function(H,I){fe.exports=I()})(self,function(){return function(G){var H={};function I(C){if(H[C])return H[C].exports;var T=H[C]={i:C,l:!1,exports:{}};return G[C].call(T.exports,T,T.exports,I),T.l=!0,T.exports}return I.m=G,I.c=H,I.d=function(C,T,u){I.o(C,T)||Object.defineProperty(C,T,{enumerable:!0,get:u})},I.r=function(C){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(C,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(C,"__esModule",{value:!0})},I.t=function(C,T){if(T&1&&(C=I(C)),T&8||T&4&&typeof C=="object"&&C&&C.__esModule)return C;var u=Object.create(null);if(I.r(u),Object.defineProperty(u,"default",{enumerable:!0,value:C}),T&2&&typeof C!="string")for(var O in C)I.d(u,O,function(v){return C[v]}.bind(null,O));return u},I.n=function(C){var T=C&&C.__esModule?function(){return C.default}:function(){return C};return I.d(T,"a",T),T},I.o=function(C,T){return Object.prototype.hasOwnProperty.call(C,T)},I.p="",I(I.s="./build/index.js")}({"./build/index.js":function(G,H,I){function C(p){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(m){return typeof m}:C=function(m){return m&&typeof Symbol=="function"&&m.constructor===Symbol&&m!==Symbol.prototype?"symbol":typeof m},C(p)}Object.defineProperty(H,"__esModule",{value:!0}),H.io=H.Socket=H.Manager=H.protocol=void 0;var T=I("./build/url.js"),u=I("./build/manager.js"),O=I("./node_modules/debug/src/browser.js")("socket.io-client");G.exports=H=j;var v=H.managers={};function j(p,b){C(p)==="object"&&(b=p,p=void 0),b=b||{};var m=(0,T.url)(p,b.path||"/socket.io"),k=m.source,A=m.id,P=m.path,E=v[A]&&P in v[A].nsps,g=b.forceNew||b["force new connection"]||b.multiplex===!1||E,a;return g?(O("ignoring socket cache for %s",k),a=new u.Manager(k,b)):(v[A]||(O("new io instance for %s",k),v[A]=new u.Manager(k,b)),a=v[A]),m.query&&!b.query&&(b.query=m.queryKey),a.socket(m.path,b)}H.io=j;var w=I("./node_modules/socket.io-parser/dist/index.js");Object.defineProperty(H,"protocol",{enumerable:!0,get:function(){return w.protocol}}),H.connect=j;var y=I("./build/manager.js");Object.defineProperty(H,"Manager",{enumerable:!0,get:function(){return y.Manager}});var S=I("./build/socket.js");Object.defineProperty(H,"Socket",{enumerable:!0,get:function(){return S.Socket}}),H.default=j},"./build/manager.js":function(G,H,I){function C(c){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(i){return typeof i}:C=function(i){return i&&typeof Symbol=="function"&&i.constructor===Symbol&&i!==Symbol.prototype?"symbol":typeof i},C(c)}function T(c,d){if(!(c instanceof d))throw new TypeError("Cannot call a class as a function")}function u(c,d){for(var i=0;i<d.length;i++){var e=d[i];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(c,e.key,e)}}function O(c,d,i){return d&&u(c.prototype,d),i&&u(c,i),c}function v(c,d){if(typeof d!="function"&&d!==null)throw new TypeError("Super expression must either be null or a function");c.prototype=Object.create(d&&d.prototype,{constructor:{value:c,writable:!0,configurable:!0}}),d&&j(c,d)}function j(c,d){return j=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},j(c,d)}function w(c){var d=p();return function(){var e=b(c),n;if(d){var r=b(this).constructor;n=Reflect.construct(e,arguments,r)}else n=e.apply(this,arguments);return y(this,n)}}function y(c,d){if(d&&(C(d)==="object"||typeof d=="function"))return d;if(d!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return S(c)}function S(c){if(c===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return c}function p(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(c){return!1}}function b(c){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(i){return i.__proto__||Object.getPrototypeOf(i)},b(c)}Object.defineProperty(H,"__esModule",{value:!0}),H.Manager=void 0;var m=I("./node_modules/engine.io-client/lib/index.js"),k=I("./node_modules/engine.io-client/lib/util.js"),A=I("./build/socket.js"),P=I("./node_modules/socket.io-parser/dist/index.js"),E=I("./build/on.js"),g=I("./node_modules/backo2/index.js"),a=I("./build/typed-events.js"),s=I("./node_modules/debug/src/browser.js")("socket.io-client:manager"),o=function(c){v(i,c);var d=w(i);function i(e,n){var r;T(this,i);var t;r=d.call(this),r.nsps={},r.subs=[],e&&C(e)==="object"&&(n=e,e=void 0),n=n||{},n.path=n.path||"/socket.io",r.opts=n,(0,k.installTimerFunctions)(S(r),n),r.reconnection(n.reconnection!==!1),r.reconnectionAttempts(n.reconnectionAttempts||1/0),r.reconnectionDelay(n.reconnectionDelay||1e3),r.reconnectionDelayMax(n.reconnectionDelayMax||5e3),r.randomizationFactor((t=n.randomizationFactor)!==null&&t!==void 0?t:.5),r.backoff=new g({min:r.reconnectionDelay(),max:r.reconnectionDelayMax(),jitter:r.randomizationFactor()}),r.timeout(n.timeout==null?2e4:n.timeout),r._readyState="closed",r.uri=e;var f=n.parser||P;return r.encoder=new f.Encoder,r.decoder=new f.Decoder,r._autoConnect=n.autoConnect!==!1,r._autoConnect&&r.open(),r}return O(i,[{key:"reconnection",value:function(n){return arguments.length?(this._reconnection=!!n,this):this._reconnection}},{key:"reconnectionAttempts",value:function(n){return n===void 0?this._reconnectionAttempts:(this._reconnectionAttempts=n,this)}},{key:"reconnectionDelay",value:function(n){var r;return n===void 0?this._reconnectionDelay:(this._reconnectionDelay=n,(r=this.backoff)===null||r===void 0||r.setMin(n),this)}},{key:"randomizationFactor",value:function(n){var r;return n===void 0?this._randomizationFactor:(this._randomizationFactor=n,(r=this.backoff)===null||r===void 0||r.setJitter(n),this)}},{key:"reconnectionDelayMax",value:function(n){var r;return n===void 0?this._reconnectionDelayMax:(this._reconnectionDelayMax=n,(r=this.backoff)===null||r===void 0||r.setMax(n),this)}},{key:"timeout",value:function(n){return arguments.length?(this._timeout=n,this):this._timeout}},{key:"maybeReconnectOnOpen",value:function(){!this._reconnecting&&this._reconnection&&this.backoff.attempts===0&&this.reconnect()}},{key:"open",value:function(n){var r=this;if(s("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;s("opening %s",this.uri),this.engine=m(this.uri,this.opts);var t=this.engine,f=this;this._readyState="opening",this.skipReconnect=!1;var l=(0,E.on)(t,"open",function(){f.onopen(),n&&n()}),h=(0,E.on)(t,"error",function(R){s("error"),f.cleanup(),f._readyState="closed",r.emitReserved("error",R),n?n(R):f.maybeReconnectOnOpen()});if(this._timeout!==!1){var _=this._timeout;s("connect attempt will timeout after %d",_),_===0&&l();var M=this.setTimeoutFn(function(){s("connect attempt timed out after %d",_),l(),t.close(),t.emit("error",new Error("timeout"))},_);this.opts.autoUnref&&M.unref(),this.subs.push(function(){clearTimeout(M)})}return this.subs.push(l),this.subs.push(h),this}},{key:"connect",value:function(n){return this.open(n)}},{key:"onopen",value:function(){s("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");var n=this.engine;this.subs.push((0,E.on)(n,"ping",this.onping.bind(this)),(0,E.on)(n,"data",this.ondata.bind(this)),(0,E.on)(n,"error",this.onerror.bind(this)),(0,E.on)(n,"close",this.onclose.bind(this)),(0,E.on)(this.decoder,"decoded",this.ondecoded.bind(this)))}},{key:"onping",value:function(){this.emitReserved("ping")}},{key:"ondata",value:function(n){this.decoder.add(n)}},{key:"ondecoded",value:function(n){this.emitReserved("packet",n)}},{key:"onerror",value:function(n){s("error",n),this.emitReserved("error",n)}},{key:"socket",value:function(n,r){var t=this.nsps[n];return t||(t=new A.Socket(this,n,r),this.nsps[n]=t),t}},{key:"_destroy",value:function(n){for(var r=Object.keys(this.nsps),t=0,f=r;t<f.length;t++){var l=f[t],h=this.nsps[l];if(h.active){s("socket %s is still active, skipping close",l);return}}this._close()}},{key:"_packet",value:function(n){s("writing packet %j",n);for(var r=this.encoder.encode(n),t=0;t<r.length;t++)this.engine.write(r[t],n.options)}},{key:"cleanup",value:function(){s("cleanup"),this.subs.forEach(function(n){return n()}),this.subs.length=0,this.decoder.destroy()}},{key:"_close",value:function(){s("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this._readyState==="opening"&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}},{key:"disconnect",value:function(){return this._close()}},{key:"onclose",value:function(n){s("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",n),this._reconnection&&!this.skipReconnect&&this.reconnect()}},{key:"reconnect",value:function(){var n=this;if(this._reconnecting||this.skipReconnect)return this;var r=this;if(this.backoff.attempts>=this._reconnectionAttempts)s("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{var t=this.backoff.duration();s("will wait %dms before reconnect attempt",t),this._reconnecting=!0;var f=this.setTimeoutFn(function(){r.skipReconnect||(s("attempting reconnect"),n.emitReserved("reconnect_attempt",r.backoff.attempts),!r.skipReconnect&&r.open(function(l){l?(s("reconnect attempt error"),r._reconnecting=!1,r.reconnect(),n.emitReserved("reconnect_error",l)):(s("reconnect success"),r.onreconnect())}))},t);this.opts.autoUnref&&f.unref(),this.subs.push(function(){clearTimeout(f)})}}},{key:"onreconnect",value:function(){var n=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",n)}}]),i}(a.StrictEventEmitter);H.Manager=o},"./build/on.js":function(G,H,I){Object.defineProperty(H,"__esModule",{value:!0}),H.on=void 0;function C(T,u,O){return T.on(u,O),function(){T.off(u,O)}}H.on=C},"./build/socket.js":function(G,H,I){function C(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(n){return typeof n}:C=function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},C(i)}function T(i,e){var n=typeof Symbol!="undefined"&&i[Symbol.iterator]||i["@@iterator"];if(!n){if(Array.isArray(i)||(n=u(i))||e&&i&&typeof i.length=="number"){n&&(i=n);var r=0,t=function(){};return{s:t,n:function(){return r>=i.length?{done:!0}:{done:!1,value:i[r++]}},e:function(M){throw M},f:t}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var f=!0,l=!1,h;return{s:function(){n=n.call(i)},n:function(){var M=n.next();return f=M.done,M},e:function(M){l=!0,h=M},f:function(){try{!f&&n.return!=null&&n.return()}finally{if(l)throw h}}}}function u(i,e){if(!!i){if(typeof i=="string")return O(i,e);var n=Object.prototype.toString.call(i).slice(8,-1);if(n==="Object"&&i.constructor&&(n=i.constructor.name),n==="Map"||n==="Set")return Array.from(i);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return O(i,e)}}function O(i,e){(e==null||e>i.length)&&(e=i.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=i[n];return r}function v(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}function j(i,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(i,r.key,r)}}function w(i,e,n){return e&&j(i.prototype,e),n&&j(i,n),i}function y(i,e,n){return typeof Reflect!="undefined"&&Reflect.get?y=Reflect.get:y=function(t,f,l){var h=S(t,f);if(!!h){var _=Object.getOwnPropertyDescriptor(h,f);return _.get?_.get.call(l):_.value}},y(i,e,n||i)}function S(i,e){for(;!Object.prototype.hasOwnProperty.call(i,e)&&(i=E(i),i!==null););return i}function p(i,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function");i.prototype=Object.create(e&&e.prototype,{constructor:{value:i,writable:!0,configurable:!0}}),e&&b(i,e)}function b(i,e){return b=Object.setPrototypeOf||function(r,t){return r.__proto__=t,r},b(i,e)}function m(i){var e=P();return function(){var r=E(i),t;if(e){var f=E(this).constructor;t=Reflect.construct(r,arguments,f)}else t=r.apply(this,arguments);return k(this,t)}}function k(i,e){if(e&&(C(e)==="object"||typeof e=="function"))return e;if(e!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return A(i)}function A(i){if(i===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return i}function P(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(i){return!1}}function E(i){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)},E(i)}Object.defineProperty(H,"__esModule",{value:!0}),H.Socket=void 0;var g=I("./node_modules/socket.io-parser/dist/index.js"),a=I("./build/on.js"),s=I("./build/typed-events.js"),o=I("./node_modules/debug/src/browser.js")("socket.io-client:socket"),c=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1}),d=function(i){p(n,i);var e=m(n);function n(r,t,f){var l;return v(this,n),l=e.call(this),l.connected=!1,l.disconnected=!0,l.receiveBuffer=[],l.sendBuffer=[],l.ids=0,l.acks={},l.flags={},l.io=r,l.nsp=t,f&&f.auth&&(l.auth=f.auth),l.io._autoConnect&&l.open(),l}return w(n,[{key:"subEvents",value:function(){if(!this.subs){var t=this.io;this.subs=[(0,a.on)(t,"open",this.onopen.bind(this)),(0,a.on)(t,"packet",this.onpacket.bind(this)),(0,a.on)(t,"error",this.onerror.bind(this)),(0,a.on)(t,"close",this.onclose.bind(this))]}}},{key:"active",get:function(){return!!this.subs}},{key:"connect",value:function(){return this.connected?this:(this.subEvents(),this.io._reconnecting||this.io.open(),this.io._readyState==="open"&&this.onopen(),this)}},{key:"open",value:function(){return this.connect()}},{key:"send",value:function(){for(var t=arguments.length,f=new Array(t),l=0;l<t;l++)f[l]=arguments[l];return f.unshift("message"),this.emit.apply(this,f),this}},{key:"emit",value:function(t){if(c.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');for(var f=arguments.length,l=new Array(f>1?f-1:0),h=1;h<f;h++)l[h-1]=arguments[h];l.unshift(t);var _={type:g.PacketType.EVENT,data:l};_.options={},_.options.compress=this.flags.compress!==!1,typeof l[l.length-1]=="function"&&(o("emitting packet with ack id %d",this.ids),this.acks[this.ids]=l.pop(),_.id=this.ids++);var M=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable,R=this.flags.volatile&&(!M||!this.connected);return R?o("discard packet as the transport is not currently writable"):this.connected?this.packet(_):this.sendBuffer.push(_),this.flags={},this}},{key:"packet",value:function(t){t.nsp=this.nsp,this.io._packet(t)}},{key:"onopen",value:function(){var t=this;o("transport is open - connecting"),typeof this.auth=="function"?this.auth(function(f){t.packet({type:g.PacketType.CONNECT,data:f})}):this.packet({type:g.PacketType.CONNECT,data:this.auth})}},{key:"onerror",value:function(t){this.connected||this.emitReserved("connect_error",t)}},{key:"onclose",value:function(t){o("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",t)}},{key:"onpacket",value:function(t){var f=t.nsp===this.nsp;if(!!f)switch(t.type){case g.PacketType.CONNECT:if(t.data&&t.data.sid){var l=t.data.sid;this.onconnect(l)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case g.PacketType.EVENT:this.onevent(t);break;case g.PacketType.BINARY_EVENT:this.onevent(t);break;case g.PacketType.ACK:this.onack(t);break;case g.PacketType.BINARY_ACK:this.onack(t);break;case g.PacketType.DISCONNECT:this.ondisconnect();break;case g.PacketType.CONNECT_ERROR:var h=new Error(t.data.message);h.data=t.data.data,this.emitReserved("connect_error",h);break}}},{key:"onevent",value:function(t){var f=t.data||[];o("emitting event %j",f),t.id!=null&&(o("attaching ack callback to event"),f.push(this.ack(t.id))),this.connected?this.emitEvent(f):this.receiveBuffer.push(Object.freeze(f))}},{key:"emitEvent",value:function(t){if(this._anyListeners&&this._anyListeners.length){var f=this._anyListeners.slice(),l=T(f),h;try{for(l.s();!(h=l.n()).done;){var _=h.value;_.apply(this,t)}}catch(M){l.e(M)}finally{l.f()}}y(E(n.prototype),"emit",this).apply(this,t)}},{key:"ack",value:function(t){var f=this,l=!1;return function(){if(!l){l=!0;for(var h=arguments.length,_=new Array(h),M=0;M<h;M++)_[M]=arguments[M];o("sending ack %j",_),f.packet({type:g.PacketType.ACK,id:t,data:_})}}}},{key:"onack",value:function(t){var f=this.acks[t.id];typeof f=="function"?(o("calling ack %s with %j",t.id,t.data),f.apply(this,t.data),delete this.acks[t.id]):o("bad ack %s",t.id)}},{key:"onconnect",value:function(t){o("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}},{key:"emitBuffered",value:function(){var t=this;this.receiveBuffer.forEach(function(f){return t.emitEvent(f)}),this.receiveBuffer=[],this.sendBuffer.forEach(function(f){return t.packet(f)}),this.sendBuffer=[]}},{key:"ondisconnect",value:function(){o("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}},{key:"destroy",value:function(){this.subs&&(this.subs.forEach(function(t){return t()}),this.subs=void 0),this.io._destroy(this)}},{key:"disconnect",value:function(){return this.connected&&(o("performing disconnect (%s)",this.nsp),this.packet({type:g.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}},{key:"close",value:function(){return this.disconnect()}},{key:"compress",value:function(t){return this.flags.compress=t,this}},{key:"volatile",get:function(){return this.flags.volatile=!0,this}},{key:"onAny",value:function(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}},{key:"prependAny",value:function(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}},{key:"offAny",value:function(t){if(!this._anyListeners)return this;if(t){for(var f=this._anyListeners,l=0;l<f.length;l++)if(t===f[l])return f.splice(l,1),this}else this._anyListeners=[];return this}},{key:"listenersAny",value:function(){return this._anyListeners||[]}}]),n}(s.StrictEventEmitter);H.Socket=d},"./build/typed-events.js":function(G,H,I){function C(E){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(a){return typeof a}:C=function(a){return a&&typeof Symbol=="function"&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},C(E)}function T(E,g){if(!(E instanceof g))throw new TypeError("Cannot call a class as a function")}function u(E,g){for(var a=0;a<g.length;a++){var s=g[a];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(E,s.key,s)}}function O(E,g,a){return g&&u(E.prototype,g),a&&u(E,a),E}function v(E,g,a){return typeof Reflect!="undefined"&&Reflect.get?v=Reflect.get:v=function(o,c,d){var i=j(o,c);if(!!i){var e=Object.getOwnPropertyDescriptor(i,c);return e.get?e.get.call(d):e.value}},v(E,g,a||E)}function j(E,g){for(;!Object.prototype.hasOwnProperty.call(E,g)&&(E=k(E),E!==null););return E}function w(E,g){if(typeof g!="function"&&g!==null)throw new TypeError("Super expression must either be null or a function");E.prototype=Object.create(g&&g.prototype,{constructor:{value:E,writable:!0,configurable:!0}}),g&&y(E,g)}function y(E,g){return y=Object.setPrototypeOf||function(s,o){return s.__proto__=o,s},y(E,g)}function S(E){var g=m();return function(){var s=k(E),o;if(g){var c=k(this).constructor;o=Reflect.construct(s,arguments,c)}else o=s.apply(this,arguments);return p(this,o)}}function p(E,g){if(g&&(C(g)==="object"||typeof g=="function"))return g;if(g!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return b(E)}function b(E){if(E===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return E}function m(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(E){return!1}}function k(E){return k=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},k(E)}Object.defineProperty(H,"__esModule",{value:!0}),H.StrictEventEmitter=void 0;var A=I("./node_modules/component-emitter/index.js"),P=function(E){w(a,E);var g=S(a);function a(){return T(this,a),g.apply(this,arguments)}return O(a,[{key:"on",value:function(o,c){return v(k(a.prototype),"on",this).call(this,o,c),this}},{key:"once",value:function(o,c){return v(k(a.prototype),"once",this).call(this,o,c),this}},{key:"emit",value:function(o){for(var c,d=arguments.length,i=new Array(d>1?d-1:0),e=1;e<d;e++)i[e-1]=arguments[e];return(c=v(k(a.prototype),"emit",this)).call.apply(c,[this,o].concat(i)),this}},{key:"emitReserved",value:function(o){for(var c,d=arguments.length,i=new Array(d>1?d-1:0),e=1;e<d;e++)i[e-1]=arguments[e];return(c=v(k(a.prototype),"emit",this)).call.apply(c,[this,o].concat(i)),this}},{key:"listeners",value:function(o){return v(k(a.prototype),"listeners",this).call(this,o)}}]),a}(A);H.StrictEventEmitter=P},"./build/url.js":function(G,H,I){Object.defineProperty(H,"__esModule",{value:!0}),H.url=void 0;var C=I("./node_modules/parseuri/index.js"),T=I("./node_modules/debug/src/browser.js")("socket.io-client:url");function u(O){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"",j=arguments.length>2?arguments[2]:void 0,w=O;j=j||typeof location!="undefined"&&location,O==null&&(O=j.protocol+"//"+j.host),typeof O=="string"&&(O.charAt(0)==="/"&&(O.charAt(1)==="/"?O=j.protocol+O:O=j.host+O),/^(https?|wss?):\/\//.test(O)||(T("protocol-less url %s",O),typeof j!="undefined"?O=j.protocol+"//"+O:O="https://"+O),T("parse %s",O),w=C(O)),w.port||(/^(http|ws)$/.test(w.protocol)?w.port="80":/^(http|ws)s$/.test(w.protocol)&&(w.port="443")),w.path=w.path||"/";var y=w.host.indexOf(":")!==-1,S=y?"["+w.host+"]":w.host;return w.id=w.protocol+"://"+S+":"+w.port+v,w.href=w.protocol+"://"+S+(j&&j.port===w.port?"":":"+w.port),w}H.url=u},"./node_modules/backo2/index.js":function(G,H){G.exports=I;function I(C){C=C||{},this.ms=C.min||100,this.max=C.max||1e4,this.factor=C.factor||2,this.jitter=C.jitter>0&&C.jitter<=1?C.jitter:0,this.attempts=0}I.prototype.duration=function(){var C=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var T=Math.random(),u=Math.floor(T*this.jitter*C);C=(Math.floor(T*10)&1)==0?C-u:C+u}return Math.min(C,this.max)|0},I.prototype.reset=function(){this.attempts=0},I.prototype.setMin=function(C){this.ms=C},I.prototype.setMax=function(C){this.max=C},I.prototype.setJitter=function(C){this.jitter=C}},"./node_modules/component-emitter/index.js":function(G,H,I){G.exports=C;function C(u){if(u)return T(u)}function T(u){for(var O in C.prototype)u[O]=C.prototype[O];return u}C.prototype.on=C.prototype.addEventListener=function(u,O){return this._callbacks=this._callbacks||{},(this._callbacks["$"+u]=this._callbacks["$"+u]||[]).push(O),this},C.prototype.once=function(u,O){function v(){this.off(u,v),O.apply(this,arguments)}return v.fn=O,this.on(u,v),this},C.prototype.off=C.prototype.removeListener=C.prototype.removeAllListeners=C.prototype.removeEventListener=function(u,O){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var v=this._callbacks["$"+u];if(!v)return this;if(arguments.length==1)return delete this._callbacks["$"+u],this;for(var j,w=0;w<v.length;w++)if(j=v[w],j===O||j.fn===O){v.splice(w,1);break}return v.length===0&&delete this._callbacks["$"+u],this},C.prototype.emit=function(u){this._callbacks=this._callbacks||{};for(var O=new Array(arguments.length-1),v=this._callbacks["$"+u],j=1;j<arguments.length;j++)O[j-1]=arguments[j];if(v){v=v.slice(0);for(var j=0,w=v.length;j<w;++j)v[j].apply(this,O)}return this},C.prototype.listeners=function(u){return this._callbacks=this._callbacks||{},this._callbacks["$"+u]||[]},C.prototype.hasListeners=function(u){return!!this.listeners(u).length}},"./node_modules/debug/src/browser.js":function(G,H,I){H.formatArgs=T,H.save=u,H.load=O,H.useColors=C,H.storage=v(),H.destroy=function(){var w=!1;return function(){w||(w=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}}(),H.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function C(){return typeof window!="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document!="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function T(w){if(w[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+w[0]+(this.useColors?"%c ":" ")+"+"+G.exports.humanize(this.diff),!!this.useColors){var y="color: "+this.color;w.splice(1,0,y,"color: inherit");var S=0,p=0;w[0].replace(/%[a-zA-Z%]/g,function(b){b!=="%%"&&(S++,b==="%c"&&(p=S))}),w.splice(p,0,y)}}H.log=console.debug||console.log||function(){};function u(w){try{w?H.storage.setItem("debug",w):H.storage.removeItem("debug")}catch(y){}}function O(){var w;try{w=H.storage.getItem("debug")}catch(y){}return!w&&typeof process!="undefined"&&"env"in process&&(w={npm_config_legacy_peer_deps:"true",TERM_PROGRAM:"Apple_Terminal",LC_MONETARY:"en_US.UTF-8",NODE:"/usr/local/bin/node",ANDROID_HOME:"/Users/datamintsolutions/Documents/software/sdk",INIT_CWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/social",TERM:"xterm-256color",SHELL:"/bin/zsh",TMPDIR:"/var/folders/y9/0sjyrfqd3kq4nm0m0qg_hg440000gn/T/",npm_config_metrics_registry:"https://registry.npmjs.org/",npm_config_global_prefix:"/usr/local",GOOGLE_APPLICATION_CREDENTIALS:"/Users/datamintsolutions/Desktop/auth.json",TERM_PROGRAM_VERSION:"440",LC_NUMERIC:"en_US.UTF-8",ANDROID_SDK_ROOT:"/Users/datamintsolutions/Documents/software/sdk",TERM_SESSION_ID:"B63D7004-6476-44B8-8349-D72F98EFDBD4",COLOR:"0",npm_config_noproxy:"",npm_config_local_prefix:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/social",LC_ALL:"",USER:"datamintsolutions",npm_config_globalconfig:"/usr/local/etc/npmrc",SSH_AUTH_SOCK:"/private/tmp/com.apple.launchd.Kg62pTe45Z/Listeners",__CF_USER_TEXT_ENCODING:"0x1F5:0x0:0x0",npm_execpath:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/bin/npm-cli.js",GIT_PREFIX:"",PATH:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/social/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/.bin:/Users/datamintsolutions/Documents/work/capacitorunity/node_modules/.bin:/Users/datamintsolutions/Documents/work/node_modules/.bin:/Users/datamintsolutions/Documents/node_modules/.bin:/Users/datamintsolutions/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/usr/local/Cellar/git/2.18.0/libexec/git-core:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Users/datamintsolutions/.cargo/bin:/usr/local/Cellar/dart/2.7.1/bin:/Users/datamintsolutions/Documents/software/flutter/.pub-cache/bin:/Users/datamintsolutions/Documents/software/flutter/bin:/usr/local/php5/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/php5/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/datamintsolutions/Documents/software/sdk/platform-tools/adb:/Users/datamintsolutions/Documents/software/sdk/platform-tools:/Users/datamintsolutions/.pub-cache/bin:/usr/local/go/bin:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/bin:/Users/datamintsolutions/Library/Android/sdk/platform-tools/:/Users/datamintsolutions/Documents/software/sdk/tools:/Users/datamintsolutions/Documents/software/sdk/platform-tools",LC_MESSAGES:"en_US.UTF-8",_:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/social/node_modules/.bin/cross-env",npm_package_json:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/social/package.json",__CFBundleIdentifier:"com.apple.Terminal",LC_COLLATE:"en_US.UTF-8",npm_config_init_module:"/Users/datamintsolutions/.npm-init.js",npm_config_userconfig:"/Users/datamintsolutions/.npmrc",PWD:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/packages/social",npm_command:"run-script",JAVA_HOME:"/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home",EDITOR:"vi",npm_lifecycle_event:"build",LANG:"en_US.UTF-8",npm_package_name:"@xrengine/social",XPC_FLAGS:"0x0",npm_package_engines_node:">= 16.3.0",npm_config_node_gyp:"/Users/datamintsolutions/Documents/work/capacitorunity/mappaxrengine/node_modules/@semantic-release/npm/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js",XPC_SERVICE_NAME:"0",npm_package_version:"0.4.8",SHLVL:"4",HOME:"/Users/datamintsolutions",npm_config_loglevel:"silent",GIT_SSH_COMMAND:"ssh -i ~/.ssh/kinjal",LOGNAME:"datamintsolutions",npm_config_cache:"/Users/datamintsolutions/.npm",npm_lifecycle_script:"cross-env APP_ENV=production NODE_OPTIONS=--max_old_space_size=6144 vite build && cp src/server.js www/server.js",LC_CTYPE:"en_US.UTF-8",CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL:"https://services.gradle.org/distributions/gradle-6.3-all.zip",npm_config_user_agent:"npm/7.21.0 node/v16.4.2 darwin x64 workspaces/false",ANDROID_NDK_HOME:"/Users/datamintsolutions/Documents/software/sdk/ndk-bundle",LC_TIME:"en_US.UTF-8",GIT_EXEC_PATH:"/usr/local/Cellar/git/2.18.0/libexec/git-core",npm_config_prefix:"/usr/local",npm_node_execpath:"/usr/local/bin/node",APP_ENV:"production",NODE_OPTIONS:"--max_old_space_size=6144",NODE_ENV:"production",VITE_GA_TRACKING_ID:"",VITE_SENTRY_DSN:"",VITE_APP_HOST:"localhost",VITE_APP_PORT:"3000",VITE_SERVER_HOST:"localhost",VITE_SERVER_PORT:"3030",VITE_GAMESERVER_HOST:"localhost",VITE_GAMESERVER_PORT:"3031",VITE_EMAILJS_SERVICE_ID:"",VITE_EMAILJS_TEMPLATE_ID:"",VITE_EMAILJS_USER_ID:"",VITE_READY_PLAYER_ME_URL:"https://xre.readyplayer.me",VITE_MEDIATOR_SERVER:"https://authn.io",publicRuntimeConfig:'{"title":"ARC","dev":false,"loginDisabled":false,"logo":"./logo.svg","apiServer":"https://localhost:3030","appServer":"https://localhost:3000","readyPlayerMeUrl":"https://xre.readyplayer.me","siteTitle":"ARC","siteDescription":"Connected Social for Everyone","feathersStoreKey":"TheOverlay-Auth-Store","localStorageKey":"arc-client-store-key-v1","auth":{"enableSmsMagicLink":true,"enableEmailMagicLink":true,"enableUserPassword":true,"enableGithubSocial":true,"enableFacebookSocial":true,"enableGoogleSocial":true},"alert":{"timeout":10000}}'}.DEBUG),w}function v(){try{return localStorage}catch(w){}}G.exports=I("./node_modules/debug/src/common.js")(H);var j=G.exports.formatters;j.j=function(w){try{return JSON.stringify(w)}catch(y){return"[UnexpectedJSONParseError]: "+y.message}}},"./node_modules/debug/src/common.js":function(G,H,I){function C(y){return v(y)||O(y)||u(y)||T()}function T(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function u(y,S){if(!!y){if(typeof y=="string")return j(y,S);var p=Object.prototype.toString.call(y).slice(8,-1);if(p==="Object"&&y.constructor&&(p=y.constructor.name),p==="Map"||p==="Set")return Array.from(y);if(p==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(p))return j(y,S)}}function O(y){if(typeof Symbol!="undefined"&&y[Symbol.iterator]!=null||y["@@iterator"]!=null)return Array.from(y)}function v(y){if(Array.isArray(y))return j(y)}function j(y,S){(S==null||S>y.length)&&(S=y.length);for(var p=0,b=new Array(S);p<S;p++)b[p]=y[p];return b}function w(y){p.debug=p,p.default=p,p.coerce=E,p.disable=k,p.enable=m,p.enabled=A,p.humanize=I("./node_modules/ms/index.js"),p.destroy=g,Object.keys(y).forEach(function(a){p[a]=y[a]}),p.names=[],p.skips=[],p.formatters={};function S(a){for(var s=0,o=0;o<a.length;o++)s=(s<<5)-s+a.charCodeAt(o),s|=0;return p.colors[Math.abs(s)%p.colors.length]}p.selectColor=S;function p(a){var s,o=null,c,d;function i(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];if(!!i.enabled){var t=i,f=Number(new Date),l=f-(s||f);t.diff=l,t.prev=s,t.curr=f,s=f,n[0]=p.coerce(n[0]),typeof n[0]!="string"&&n.unshift("%O");var h=0;n[0]=n[0].replace(/%([a-zA-Z%])/g,function(M,R){if(M==="%%")return"%";h++;var B=p.formatters[R];if(typeof B=="function"){var F=n[h];M=B.call(t,F),n.splice(h,1),h--}return M}),p.formatArgs.call(t,n);var _=t.log||p.log;_.apply(t,n)}}return i.namespace=a,i.useColors=p.useColors(),i.color=p.selectColor(a),i.extend=b,i.destroy=p.destroy,Object.defineProperty(i,"enabled",{enumerable:!0,configurable:!1,get:function(){return o!==null?o:(c!==p.namespaces&&(c=p.namespaces,d=p.enabled(a)),d)},set:function(n){o=n}}),typeof p.init=="function"&&p.init(i),i}function b(a,s){var o=p(this.namespace+(typeof s=="undefined"?":":s)+a);return o.log=this.log,o}function m(a){p.save(a),p.namespaces=a,p.names=[],p.skips=[];var s,o=(typeof a=="string"?a:"").split(/[\s,]+/),c=o.length;for(s=0;s<c;s++)!o[s]||(a=o[s].replace(/\*/g,".*?"),a[0]==="-"?p.skips.push(new RegExp("^"+a.substr(1)+"$")):p.names.push(new RegExp("^"+a+"$")))}function k(){var a=[].concat(C(p.names.map(P)),C(p.skips.map(P).map(function(s){return"-"+s}))).join(",");return p.enable(""),a}function A(a){if(a[a.length-1]==="*")return!0;var s,o;for(s=0,o=p.skips.length;s<o;s++)if(p.skips[s].test(a))return!1;for(s=0,o=p.names.length;s<o;s++)if(p.names[s].test(a))return!0;return!1}function P(a){return a.toString().substring(2,a.toString().length-2).replace(/\.\*\?$/,"*")}function E(a){return a instanceof Error?a.stack||a.message:a}function g(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return p.enable(p.load()),p}G.exports=w},"./node_modules/engine.io-client/lib/globalThis.browser.js":function(G,H){G.exports=function(){return typeof self!="undefined"?self:typeof window!="undefined"?window:Function("return this")()}()},"./node_modules/engine.io-client/lib/index.js":function(G,H,I){var C=I("./node_modules/engine.io-client/lib/socket.js");G.exports=function(T,u){return new C(T,u)},G.exports.Socket=C,G.exports.protocol=C.protocol,G.exports.Transport=I("./node_modules/engine.io-client/lib/transport.js"),G.exports.transports=I("./node_modules/engine.io-client/lib/transports/index.js"),G.exports.parser=I("./node_modules/engine.io-parser/lib/index.js")},"./node_modules/engine.io-client/lib/socket.js":function(G,H,I){function C(){return C=Object.assign||function(i){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(i[r]=n[r])}return i},C.apply(this,arguments)}function T(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?T=function(n){return typeof n}:T=function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},T(i)}function u(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}function O(i,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(i,r.key,r)}}function v(i,e,n){return e&&O(i.prototype,e),n&&O(i,n),i}function j(i,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function");i.prototype=Object.create(e&&e.prototype,{constructor:{value:i,writable:!0,configurable:!0}}),e&&w(i,e)}function w(i,e){return w=Object.setPrototypeOf||function(r,t){return r.__proto__=t,r},w(i,e)}function y(i){var e=b();return function(){var r=m(i),t;if(e){var f=m(this).constructor;t=Reflect.construct(r,arguments,f)}else t=r.apply(this,arguments);return S(this,t)}}function S(i,e){if(e&&(T(e)==="object"||typeof e=="function"))return e;if(e!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return p(i)}function p(i){if(i===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return i}function b(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(i){return!1}}function m(i){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)},m(i)}var k=I("./node_modules/engine.io-client/lib/transports/index.js"),A=I("./node_modules/component-emitter/index.js"),P=I("./node_modules/debug/src/browser.js")("engine.io-client:socket"),E=I("./node_modules/engine.io-parser/lib/index.js"),g=I("./node_modules/parseuri/index.js"),a=I("./node_modules/parseqs/index.js"),s=I("./node_modules/engine.io-client/lib/util.js"),o=s.installTimerFunctions,c=function(i){j(n,i);var e=y(n);function n(r){var t,f=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return u(this,n),t=e.call(this),r&&T(r)==="object"&&(f=r,r=null),r?(r=g(r),f.hostname=r.host,f.secure=r.protocol==="https"||r.protocol==="wss",f.port=r.port,r.query&&(f.query=r.query)):f.host&&(f.hostname=g(f.host).host),o(p(t),f),t.secure=f.secure!=null?f.secure:typeof location!="undefined"&&location.protocol==="https:",f.hostname&&!f.port&&(f.port=t.secure?"443":"80"),t.hostname=f.hostname||(typeof location!="undefined"?location.hostname:"localhost"),t.port=f.port||(typeof location!="undefined"&&location.port?location.port:t.secure?443:80),t.transports=f.transports||["polling","websocket"],t.readyState="",t.writeBuffer=[],t.prevBufferLen=0,t.opts=C({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},f),t.opts.path=t.opts.path.replace(/\/$/,"")+"/",typeof t.opts.query=="string"&&(t.opts.query=a.decode(t.opts.query)),t.id=null,t.upgrades=null,t.pingInterval=null,t.pingTimeout=null,t.pingTimeoutTimer=null,typeof addEventListener=="function"&&(t.opts.closeOnBeforeunload&&addEventListener("beforeunload",function(){t.transport&&(t.transport.removeAllListeners(),t.transport.close())},!1),t.hostname!=="localhost"&&(t.offlineEventListener=function(){t.onClose("transport close")},addEventListener("offline",t.offlineEventListener,!1))),t.open(),t}return v(n,[{key:"createTransport",value:function(t){P('creating transport "%s"',t);var f=d(this.opts.query);f.EIO=E.protocol,f.transport=t,this.id&&(f.sid=this.id);var l=C({},this.opts.transportOptions[t],this.opts,{query:f,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return P("options: %j",l),new k[t](l)}},{key:"open",value:function(){var t=this,f;if(this.opts.rememberUpgrade&&n.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)f="websocket";else if(this.transports.length===0){this.setTimeoutFn(function(){t.emit("error","No transports available")},0);return}else f=this.transports[0];this.readyState="opening";try{f=this.createTransport(f)}catch(l){P("error while creating transport: %s",l),this.transports.shift(),this.open();return}f.open(),this.setTransport(f)}},{key:"setTransport",value:function(t){var f=this;P("setting transport %s",t.name),this.transport&&(P("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",function(){f.onClose("transport close")})}},{key:"probe",value:function(t){var f=this;P('probing transport "%s"',t);var l=this.createTransport(t,{probe:1}),h=!1;n.priorWebsocketSuccess=!1;var _=function(){h||(P('probe transport "%s" opened',t),l.send([{type:"ping",data:"probe"}]),l.once("packet",function(q){if(!h)if(q.type==="pong"&&q.data==="probe"){if(P('probe transport "%s" pong',t),f.upgrading=!0,f.emit("upgrading",l),!l)return;n.priorWebsocketSuccess=l.name==="websocket",P('pausing current transport "%s"',f.transport.name),f.transport.pause(function(){h||f.readyState!=="closed"&&(P("changing transport and sending upgrade packet"),z(),f.setTransport(l),l.send([{type:"upgrade"}]),f.emit("upgrade",l),l=null,f.upgrading=!1,f.flush())})}else{P('probe transport "%s" failed',t);var L=new Error("probe error");L.transport=l.name,f.emit("upgradeError",L)}}))};function M(){h||(h=!0,z(),l.close(),l=null)}var R=function(q){var L=new Error("probe error: "+q);L.transport=l.name,M(),P('probe transport "%s" failed because of error: %s',t,q),f.emit("upgradeError",L)};function B(){R("transport closed")}function F(){R("socket closed")}function V(K){l&&K.name!==l.name&&(P('"%s" works - aborting "%s"',K.name,l.name),M())}var z=function(){l.removeListener("open",_),l.removeListener("error",R),l.removeListener("close",B),f.removeListener("close",F),f.removeListener("upgrading",V)};l.once("open",_),l.once("error",R),l.once("close",B),this.once("close",F),this.once("upgrading",V),l.open()}},{key:"onOpen",value:function(){if(P("socket open"),this.readyState="open",n.priorWebsocketSuccess=this.transport.name==="websocket",this.emit("open"),this.flush(),this.readyState==="open"&&this.opts.upgrade&&this.transport.pause){P("starting upgrade probes");for(var t=0,f=this.upgrades.length;t<f;t++)this.probe(this.upgrades[t])}}},{key:"onPacket",value:function(t){if(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")switch(P('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":var f=new Error("server error");f.code=t.data,this.onError(f);break;case"message":this.emit("data",t.data),this.emit("message",t.data);break}else P('packet received with socket readyState "%s"',this.readyState)}},{key:"onHandshake",value:function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),this.readyState!=="closed"&&this.resetPingTimeout()}},{key:"resetPingTimeout",value:function(){var t=this;this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn(function(){t.onClose("ping timeout")},this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}},{key:"onDrain",value:function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,this.writeBuffer.length===0?this.emit("drain"):this.flush()}},{key:"flush",value:function(){this.readyState!=="closed"&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(P("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}},{key:"write",value:function(t,f,l){return this.sendPacket("message",t,f,l),this}},{key:"send",value:function(t,f,l){return this.sendPacket("message",t,f,l),this}},{key:"sendPacket",value:function(t,f,l,h){if(typeof f=="function"&&(h=f,f=void 0),typeof l=="function"&&(h=l,l=null),!(this.readyState==="closing"||this.readyState==="closed")){l=l||{},l.compress=l.compress!==!1;var _={type:t,data:f,options:l};this.emit("packetCreate",_),this.writeBuffer.push(_),h&&this.once("flush",h),this.flush()}}},{key:"close",value:function(){var t=this,f=function(){t.onClose("forced close"),P("socket closing - telling transport to close"),t.transport.close()},l=function _(){t.removeListener("upgrade",_),t.removeListener("upgradeError",_),f()},h=function(){t.once("upgrade",l),t.once("upgradeError",l)};return(this.readyState==="opening"||this.readyState==="open")&&(this.readyState="closing",this.writeBuffer.length?this.once("drain",function(){t.upgrading?h():f()}):this.upgrading?h():f()),this}},{key:"onError",value:function(t){P("socket error %j",t),n.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}},{key:"onClose",value:function(t,f){(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")&&(P('socket close with reason: "%s"',t),this.clearTimeoutFn(this.pingIntervalTimer),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),typeof removeEventListener=="function"&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",t,f),this.writeBuffer=[],this.prevBufferLen=0)}},{key:"filterUpgrades",value:function(t){for(var f=[],l=0,h=t.length;l<h;l++)~this.transports.indexOf(t[l])&&f.push(t[l]);return f}}]),n}(A);c.priorWebsocketSuccess=!1,c.protocol=E.protocol;function d(i){var e={};for(var n in i)i.hasOwnProperty(n)&&(e[n]=i[n]);return e}G.exports=c},"./node_modules/engine.io-client/lib/transport.js":function(G,H,I){function C(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(o){return typeof o}:C=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},C(a)}function T(a,s){if(!(a instanceof s))throw new TypeError("Cannot call a class as a function")}function u(a,s){for(var o=0;o<s.length;o++){var c=s[o];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}}function O(a,s,o){return s&&u(a.prototype,s),o&&u(a,o),a}function v(a,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(s&&s.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),s&&j(a,s)}function j(a,s){return j=Object.setPrototypeOf||function(c,d){return c.__proto__=d,c},j(a,s)}function w(a){var s=p();return function(){var c=b(a),d;if(s){var i=b(this).constructor;d=Reflect.construct(c,arguments,i)}else d=c.apply(this,arguments);return y(this,d)}}function y(a,s){if(s&&(C(s)==="object"||typeof s=="function"))return s;if(s!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return S(a)}function S(a){if(a===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function p(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}function b(a){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},b(a)}var m=I("./node_modules/engine.io-parser/lib/index.js"),k=I("./node_modules/component-emitter/index.js"),A=I("./node_modules/engine.io-client/lib/util.js"),P=A.installTimerFunctions,E=I("./node_modules/debug/src/browser.js")("engine.io-client:transport"),g=function(a){v(o,a);var s=w(o);function o(c){var d;return T(this,o),d=s.call(this),P(S(d),c),d.opts=c,d.query=c.query,d.readyState="",d.socket=c.socket,d}return O(o,[{key:"onError",value:function(d,i){var e=new Error(d);return e.type="TransportError",e.description=i,this.emit("error",e),this}},{key:"open",value:function(){return(this.readyState==="closed"||this.readyState==="")&&(this.readyState="opening",this.doOpen()),this}},{key:"close",value:function(){return(this.readyState==="opening"||this.readyState==="open")&&(this.doClose(),this.onClose()),this}},{key:"send",value:function(d){this.readyState==="open"?this.write(d):E("transport is not open, discarding packets")}},{key:"onOpen",value:function(){this.readyState="open",this.writable=!0,this.emit("open")}},{key:"onData",value:function(d){var i=m.decodePacket(d,this.socket.binaryType);this.onPacket(i)}},{key:"onPacket",value:function(d){this.emit("packet",d)}},{key:"onClose",value:function(){this.readyState="closed",this.emit("close")}}]),o}(k);G.exports=g},"./node_modules/engine.io-client/lib/transports/index.js":function(G,H,I){var C=I("./node_modules/engine.io-client/lib/xmlhttprequest.js"),T=I("./node_modules/engine.io-client/lib/transports/polling-xhr.js"),u=I("./node_modules/engine.io-client/lib/transports/polling-jsonp.js"),O=I("./node_modules/engine.io-client/lib/transports/websocket.js");H.polling=v,H.websocket=O;function v(j){var w,y=!1,S=!1,p=j.jsonp!==!1;if(typeof location!="undefined"){var b=location.protocol==="https:",m=location.port;m||(m=b?443:80),y=j.hostname!==location.hostname||m!==j.port,S=j.secure!==b}if(j.xdomain=y,j.xscheme=S,w=new C(j),"open"in w&&!j.forceJSONP)return new T(j);if(!p)throw new Error("JSONP disabled");return new u(j)}},"./node_modules/engine.io-client/lib/transports/polling-jsonp.js":function(G,H,I){function C(o){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(d){return typeof d}:C=function(d){return d&&typeof Symbol=="function"&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d},C(o)}function T(o,c){if(!(o instanceof c))throw new TypeError("Cannot call a class as a function")}function u(o,c){for(var d=0;d<c.length;d++){var i=c[d];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(o,i.key,i)}}function O(o,c,d){return c&&u(o.prototype,c),d&&u(o,d),o}function v(o,c,d){return typeof Reflect!="undefined"&&Reflect.get?v=Reflect.get:v=function(e,n,r){var t=j(e,n);if(!!t){var f=Object.getOwnPropertyDescriptor(t,n);return f.get?f.get.call(r):f.value}},v(o,c,d||o)}function j(o,c){for(;!Object.prototype.hasOwnProperty.call(o,c)&&(o=k(o),o!==null););return o}function w(o,c){if(typeof c!="function"&&c!==null)throw new TypeError("Super expression must either be null or a function");o.prototype=Object.create(c&&c.prototype,{constructor:{value:o,writable:!0,configurable:!0}}),c&&y(o,c)}function y(o,c){return y=Object.setPrototypeOf||function(i,e){return i.__proto__=e,i},y(o,c)}function S(o){var c=m();return function(){var i=k(o),e;if(c){var n=k(this).constructor;e=Reflect.construct(i,arguments,n)}else e=i.apply(this,arguments);return p(this,e)}}function p(o,c){if(c&&(C(c)==="object"||typeof c=="function"))return c;if(c!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return b(o)}function b(o){if(o===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o}function m(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(o){return!1}}function k(o){return k=Object.setPrototypeOf?Object.getPrototypeOf:function(d){return d.__proto__||Object.getPrototypeOf(d)},k(o)}var A=I("./node_modules/engine.io-client/lib/transports/polling.js"),P=I("./node_modules/engine.io-client/lib/globalThis.browser.js"),E=/\n/g,g=/\\n/g,a,s=function(o){w(d,o);var c=S(d);function d(i){var e;return T(this,d),e=c.call(this,i),e.query=e.query||{},a||(a=P.___eio=P.___eio||[]),e.index=a.length,a.push(e.onData.bind(b(e))),e.query.j=e.index,e}return O(d,[{key:"supportsBinary",get:function(){return!1}},{key:"doClose",value:function(){this.script&&(this.script.onerror=function(){},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),v(k(d.prototype),"doClose",this).call(this)}},{key:"doPoll",value:function(){var e=this,n=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),n.async=!0,n.src=this.uri(),n.onerror=function(f){e.onError("jsonp poll error",f)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(n,r):(document.head||document.body).appendChild(n),this.script=n;var t=typeof navigator!="undefined"&&/gecko/i.test(navigator.userAgent);t&&this.setTimeoutFn(function(){var f=document.createElement("iframe");document.body.appendChild(f),document.body.removeChild(f)},100)}},{key:"doWrite",value:function(e,n){var r=this,t;if(!this.form){var f=document.createElement("form"),l=document.createElement("textarea"),h=this.iframeId="eio_iframe_"+this.index;f.className="socketio",f.style.position="absolute",f.style.top="-1000px",f.style.left="-1000px",f.target=h,f.method="POST",f.setAttribute("accept-charset","utf-8"),l.name="d",f.appendChild(l),document.body.appendChild(f),this.form=f,this.area=l}this.form.action=this.uri();function _(){M(),n()}var M=function(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(F){r.onError("jsonp polling iframe removal error",F)}try{var B='<iframe src="javascript:0" name="'+r.iframeId+'">';t=document.createElement(B)}catch(F){t=document.createElement("iframe"),t.name=r.iframeId,t.src="javascript:0"}t.id=r.iframeId,r.form.appendChild(t),r.iframe=t};M(),e=e.replace(g,`\\
`),this.area.value=e.replace(E,"\\n");try{this.form.submit()}catch(R){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){r.iframe.readyState==="complete"&&_()}:this.iframe.onload=_}}]),d}(A);G.exports=s},"./node_modules/engine.io-client/lib/transports/polling-xhr.js":function(G,H,I){function C(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(l){return typeof l}:C=function(l){return l&&typeof Symbol=="function"&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l},C(t)}function T(){return T=Object.assign||function(t){for(var f=1;f<arguments.length;f++){var l=arguments[f];for(var h in l)Object.prototype.hasOwnProperty.call(l,h)&&(t[h]=l[h])}return t},T.apply(this,arguments)}function u(t,f){if(!(t instanceof f))throw new TypeError("Cannot call a class as a function")}function O(t,f){for(var l=0;l<f.length;l++){var h=f[l];h.enumerable=h.enumerable||!1,h.configurable=!0,"value"in h&&(h.writable=!0),Object.defineProperty(t,h.key,h)}}function v(t,f,l){return f&&O(t.prototype,f),l&&O(t,l),t}function j(t,f){if(typeof f!="function"&&f!==null)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(f&&f.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),f&&w(t,f)}function w(t,f){return w=Object.setPrototypeOf||function(h,_){return h.__proto__=_,h},w(t,f)}function y(t){var f=b();return function(){var h=m(t),_;if(f){var M=m(this).constructor;_=Reflect.construct(h,arguments,M)}else _=h.apply(this,arguments);return S(this,_)}}function S(t,f){if(f&&(C(f)==="object"||typeof f=="function"))return f;if(f!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return p(t)}function p(t){if(t===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function b(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function m(t){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(l){return l.__proto__||Object.getPrototypeOf(l)},m(t)}var k=I("./node_modules/engine.io-client/lib/xmlhttprequest.js"),A=I("./node_modules/engine.io-client/lib/transports/polling.js"),P=I("./node_modules/component-emitter/index.js"),E=I("./node_modules/engine.io-client/lib/util.js"),g=E.pick,a=E.installTimerFunctions,s=I("./node_modules/engine.io-client/lib/globalThis.browser.js"),o=I("./node_modules/debug/src/browser.js")("engine.io-client:polling-xhr");function c(){}var d=function(){var t=new k({xdomain:!1});return t.responseType!=null}(),i=function(t){j(l,t);var f=y(l);function l(h){var _;if(u(this,l),_=f.call(this,h),typeof location!="undefined"){var M=location.protocol==="https:",R=location.port;R||(R=M?443:80),_.xd=typeof location!="undefined"&&h.hostname!==location.hostname||R!==h.port,_.xs=h.secure!==M}var B=h&&h.forceBase64;return _.supportsBinary=d&&!B,_}return v(l,[{key:"request",value:function(){var _=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return T(_,{xd:this.xd,xs:this.xs},this.opts),new e(this.uri(),_)}},{key:"doWrite",value:function(_,M){var R=this,B=this.request({method:"POST",data:_});B.on("success",M),B.on("error",function(F){R.onError("xhr post error",F)})}},{key:"doPoll",value:function(){var _=this;o("xhr poll");var M=this.request();M.on("data",this.onData.bind(this)),M.on("error",function(R){_.onError("xhr poll error",R)}),this.pollXhr=M}}]),l}(A),e=function(t){j(l,t);var f=y(l);function l(h,_){var M;return u(this,l),M=f.call(this),a(p(M),_),M.opts=_,M.method=_.method||"GET",M.uri=h,M.async=_.async!==!1,M.data=_.data!==void 0?_.data:null,M.create(),M}return v(l,[{key:"create",value:function(){var _=this,M=g(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");M.xdomain=!!this.opts.xd,M.xscheme=!!this.opts.xs;var R=this.xhr=new k(M);try{o("xhr open %s: %s",this.method,this.uri),R.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){R.setDisableHeaderCheck&&R.setDisableHeaderCheck(!0);for(var B in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(B)&&R.setRequestHeader(B,this.opts.extraHeaders[B])}}catch(F){}if(this.method==="POST")try{R.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(F){}try{R.setRequestHeader("Accept","*/*")}catch(F){}"withCredentials"in R&&(R.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(R.timeout=this.opts.requestTimeout),this.hasXDR()?(R.onload=function(){_.onLoad()},R.onerror=function(){_.onError(R.responseText)}):R.onreadystatechange=function(){R.readyState===4&&(R.status===200||R.status===1223?_.onLoad():_.setTimeoutFn(function(){_.onError(typeof R.status=="number"?R.status:0)},0))},o("xhr data %s",this.data),R.send(this.data)}catch(F){this.setTimeoutFn(function(){_.onError(F)},0);return}typeof document!="undefined"&&(this.index=l.requestsCount++,l.requests[this.index]=this)}},{key:"onSuccess",value:function(){this.emit("success"),this.cleanup()}},{key:"onData",value:function(_){this.emit("data",_),this.onSuccess()}},{key:"onError",value:function(_){this.emit("error",_),this.cleanup(!0)}},{key:"cleanup",value:function(_){if(!(typeof this.xhr=="undefined"||this.xhr===null)){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,_)try{this.xhr.abort()}catch(M){}typeof document!="undefined"&&delete l.requests[this.index],this.xhr=null}}},{key:"onLoad",value:function(){var _=this.xhr.responseText;_!==null&&this.onData(_)}},{key:"hasXDR",value:function(){return typeof XDomainRequest!="undefined"&&!this.xs&&this.enablesXDR}},{key:"abort",value:function(){this.cleanup()}}]),l}(P);if(e.requestsCount=0,e.requests={},typeof document!="undefined"){if(typeof attachEvent=="function")attachEvent("onunload",r);else if(typeof addEventListener=="function"){var n="onpagehide"in s?"pagehide":"unload";addEventListener(n,r,!1)}}function r(){for(var t in e.requests)e.requests.hasOwnProperty(t)&&e.requests[t].abort()}G.exports=i,G.exports.Request=e},"./node_modules/engine.io-client/lib/transports/polling.js":function(G,H,I){function C(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(o){return typeof o}:C=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},C(a)}function T(a,s){if(!(a instanceof s))throw new TypeError("Cannot call a class as a function")}function u(a,s){for(var o=0;o<s.length;o++){var c=s[o];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}}function O(a,s,o){return s&&u(a.prototype,s),o&&u(a,o),a}function v(a,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(s&&s.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),s&&j(a,s)}function j(a,s){return j=Object.setPrototypeOf||function(c,d){return c.__proto__=d,c},j(a,s)}function w(a){var s=p();return function(){var c=b(a),d;if(s){var i=b(this).constructor;d=Reflect.construct(c,arguments,i)}else d=c.apply(this,arguments);return y(this,d)}}function y(a,s){if(s&&(C(s)==="object"||typeof s=="function"))return s;if(s!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return S(a)}function S(a){if(a===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function p(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}function b(a){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},b(a)}var m=I("./node_modules/engine.io-client/lib/transport.js"),k=I("./node_modules/parseqs/index.js"),A=I("./node_modules/engine.io-parser/lib/index.js"),P=I("./node_modules/yeast/index.js"),E=I("./node_modules/debug/src/browser.js")("engine.io-client:polling"),g=function(a){v(o,a);var s=w(o);function o(){return T(this,o),s.apply(this,arguments)}return O(o,[{key:"name",get:function(){return"polling"}},{key:"doOpen",value:function(){this.poll()}},{key:"pause",value:function(d){var i=this;this.readyState="pausing";var e=function(){E("paused"),i.readyState="paused",d()};if(this.polling||!this.writable){var n=0;this.polling&&(E("we are currently polling - waiting to pause"),n++,this.once("pollComplete",function(){E("pre-pause polling complete"),--n||e()})),this.writable||(E("we are currently writing - waiting to pause"),n++,this.once("drain",function(){E("pre-pause writing complete"),--n||e()}))}else e()}},{key:"poll",value:function(){E("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}},{key:"onData",value:function(d){var i=this;E("polling got data %s",d);var e=function(r){if(i.readyState==="opening"&&r.type==="open"&&i.onOpen(),r.type==="close")return i.onClose(),!1;i.onPacket(r)};A.decodePayload(d,this.socket.binaryType).forEach(e),this.readyState!=="closed"&&(this.polling=!1,this.emit("pollComplete"),this.readyState==="open"?this.poll():E('ignoring poll - transport state "%s"',this.readyState))}},{key:"doClose",value:function(){var d=this,i=function(){E("writing close packet"),d.write([{type:"close"}])};this.readyState==="open"?(E("transport open - closing"),i()):(E("transport not open - deferring close"),this.once("open",i))}},{key:"write",value:function(d){var i=this;this.writable=!1,A.encodePayload(d,function(e){i.doWrite(e,function(){i.writable=!0,i.emit("drain")})})}},{key:"uri",value:function(){var d=this.query||{},i=this.opts.secure?"https":"http",e="";this.opts.timestampRequests!==!1&&(d[this.opts.timestampParam]=P()),!this.supportsBinary&&!d.sid&&(d.b64=1),d=k.encode(d),this.opts.port&&(i==="https"&&Number(this.opts.port)!==443||i==="http"&&Number(this.opts.port)!==80)&&(e=":"+this.opts.port),d.length&&(d="?"+d);var n=this.opts.hostname.indexOf(":")!==-1;return i+"://"+(n?"["+this.opts.hostname+"]":this.opts.hostname)+e+this.opts.path+d}}]),o}(m);G.exports=g},"./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js":function(G,H,I){var C=I("./node_modules/engine.io-client/lib/globalThis.browser.js"),T=function(){var u=typeof Promise=="function"&&typeof Promise.resolve=="function";return u?function(O){return Promise.resolve().then(O)}:function(O,v){return v(O,0)}}();G.exports={WebSocket:C.WebSocket||C.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:T}},"./node_modules/engine.io-client/lib/transports/websocket.js":function(G,H,I){function C(r){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(f){return typeof f}:C=function(f){return f&&typeof Symbol=="function"&&f.constructor===Symbol&&f!==Symbol.prototype?"symbol":typeof f},C(r)}function T(r,t){if(!(r instanceof t))throw new TypeError("Cannot call a class as a function")}function u(r,t){for(var f=0;f<t.length;f++){var l=t[f];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(r,l.key,l)}}function O(r,t,f){return t&&u(r.prototype,t),f&&u(r,f),r}function v(r,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function");r.prototype=Object.create(t&&t.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),t&&j(r,t)}function j(r,t){return j=Object.setPrototypeOf||function(l,h){return l.__proto__=h,l},j(r,t)}function w(r){var t=p();return function(){var l=b(r),h;if(t){var _=b(this).constructor;h=Reflect.construct(l,arguments,_)}else h=l.apply(this,arguments);return y(this,h)}}function y(r,t){if(t&&(C(t)==="object"||typeof t=="function"))return t;if(t!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return S(r)}function S(r){if(r===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r}function p(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}function b(r){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(f){return f.__proto__||Object.getPrototypeOf(f)},b(r)}var m=I("./node_modules/engine.io-client/lib/transport.js"),k=I("./node_modules/engine.io-parser/lib/index.js"),A=I("./node_modules/parseqs/index.js"),P=I("./node_modules/yeast/index.js"),E=I("./node_modules/engine.io-client/lib/util.js"),g=E.pick,a=I("./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js"),s=a.WebSocket,o=a.usingBrowserWebSocket,c=a.defaultBinaryType,d=a.nextTick,i=I("./node_modules/debug/src/browser.js")("engine.io-client:websocket"),e=typeof navigator!="undefined"&&typeof navigator.product=="string"&&navigator.product.toLowerCase()==="reactnative",n=function(r){v(f,r);var t=w(f);function f(l){var h;return T(this,f),h=t.call(this,l),h.supportsBinary=!l.forceBase64,h}return O(f,[{key:"name",get:function(){return"websocket"}},{key:"doOpen",value:function(){if(!!this.check()){var h=this.uri(),_=this.opts.protocols,M=e?{}:g(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(M.headers=this.opts.extraHeaders);try{this.ws=o&&!e?_?new s(h,_):new s(h):new s(h,_,M)}catch(R){return this.emit("error",R)}this.ws.binaryType=this.socket.binaryType||c,this.addEventListeners()}}},{key:"addEventListeners",value:function(){var h=this;this.ws.onopen=function(){h.opts.autoUnref&&h.ws._socket.unref(),h.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=function(_){return h.onData(_.data)},this.ws.onerror=function(_){return h.onError("websocket error",_)}}},{key:"write",value:function(h){var _=this;this.writable=!1;for(var M=function(F){var V=h[F],z=F===h.length-1;k.encodePacket(V,_.supportsBinary,function(K){var q={};if(!o&&(V.options&&(q.compress=V.options.compress),_.opts.perMessageDeflate)){var L=typeof K=="string"?Buffer.byteLength(K):K.length;L<_.opts.perMessageDeflate.threshold&&(q.compress=!1)}try{o?_.ws.send(K):_.ws.send(K,q)}catch(U){i("websocket closed before onclose event")}z&&d(function(){_.writable=!0,_.emit("drain")},_.setTimeoutFn)})},R=0;R<h.length;R++)M(R)}},{key:"onClose",value:function(){m.prototype.onClose.call(this)}},{key:"doClose",value:function(){typeof this.ws!="undefined"&&(this.ws.close(),this.ws=null)}},{key:"uri",value:function(){var h=this.query||{},_=this.opts.secure?"wss":"ws",M="";this.opts.port&&(_==="wss"&&Number(this.opts.port)!==443||_==="ws"&&Number(this.opts.port)!==80)&&(M=":"+this.opts.port),this.opts.timestampRequests&&(h[this.opts.timestampParam]=P()),this.supportsBinary||(h.b64=1),h=A.encode(h),h.length&&(h="?"+h);var R=this.opts.hostname.indexOf(":")!==-1;return _+"://"+(R?"["+this.opts.hostname+"]":this.opts.hostname)+M+this.opts.path+h}},{key:"check",value:function(){return!!s&&!("__initialize"in s&&this.name===f.prototype.name)}}]),f}(m);G.exports=n},"./node_modules/engine.io-client/lib/util.js":function(G,H,I){var C=I("./node_modules/engine.io-client/lib/globalThis.browser.js");G.exports.pick=function(O){for(var v=arguments.length,j=new Array(v>1?v-1:0),w=1;w<v;w++)j[w-1]=arguments[w];return j.reduce(function(y,S){return O.hasOwnProperty(S)&&(y[S]=O[S]),y},{})};var T=setTimeout,u=clearTimeout;G.exports.installTimerFunctions=function(O,v){v.useNativeTimers?(O.setTimeoutFn=T.bind(C),O.clearTimeoutFn=u.bind(C)):(O.setTimeoutFn=setTimeout.bind(C),O.clearTimeoutFn=clearTimeout.bind(C))}},"./node_modules/engine.io-client/lib/xmlhttprequest.js":function(G,H,I){var C=I("./node_modules/has-cors/index.js"),T=I("./node_modules/engine.io-client/lib/globalThis.browser.js");G.exports=function(u){var O=u.xdomain,v=u.xscheme,j=u.enablesXDR;try{if(typeof XMLHttpRequest!="undefined"&&(!O||C))return new XMLHttpRequest}catch(w){}try{if(typeof XDomainRequest!="undefined"&&!v&&j)return new XDomainRequest}catch(w){}if(!O)try{return new T[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP")}catch(w){}}},"./node_modules/engine.io-parser/lib/commons.js":function(G,H){var I=Object.create(null);I.open="0",I.close="1",I.ping="2",I.pong="3",I.message="4",I.upgrade="5",I.noop="6";var C=Object.create(null);Object.keys(I).forEach(function(u){C[I[u]]=u});var T={type:"error",data:"parser error"};G.exports={PACKET_TYPES:I,PACKET_TYPES_REVERSE:C,ERROR_PACKET:T}},"./node_modules/engine.io-parser/lib/decodePacket.browser.js":function(G,H,I){var C=I("./node_modules/engine.io-parser/lib/commons.js"),T=C.PACKET_TYPES_REVERSE,u=C.ERROR_PACKET,O=typeof ArrayBuffer=="function",v;O&&(v=I("./node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js"));var j=function(p,b){if(typeof p!="string")return{type:"message",data:y(p,b)};var m=p.charAt(0);if(m==="b")return{type:"message",data:w(p.substring(1),b)};var k=T[m];return k?p.length>1?{type:T[m],data:p.substring(1)}:{type:T[m]}:u},w=function(p,b){if(v){var m=v.decode(p);return y(m,b)}else return{base64:!0,data:p}},y=function(p,b){switch(b){case"blob":return p instanceof ArrayBuffer?new Blob([p]):p;case"arraybuffer":default:return p}};G.exports=j},"./node_modules/engine.io-parser/lib/encodePacket.browser.js":function(G,H,I){var C=I("./node_modules/engine.io-parser/lib/commons.js"),T=C.PACKET_TYPES,u=typeof Blob=="function"||typeof Blob!="undefined"&&Object.prototype.toString.call(Blob)==="[object BlobConstructor]",O=typeof ArrayBuffer=="function",v=function(S){return typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(S):S&&S.buffer instanceof ArrayBuffer},j=function(S,p,b){var m=S.type,k=S.data;return u&&k instanceof Blob?p?b(k):w(k,b):O&&(k instanceof ArrayBuffer||v(k))?p?b(k instanceof ArrayBuffer?k:k.buffer):w(new Blob([k]),b):b(T[m]+(k||""))},w=function(S,p){var b=new FileReader;return b.onload=function(){var m=b.result.split(",")[1];p("b"+m)},b.readAsDataURL(S)};G.exports=j},"./node_modules/engine.io-parser/lib/index.js":function(G,H,I){var C=I("./node_modules/engine.io-parser/lib/encodePacket.browser.js"),T=I("./node_modules/engine.io-parser/lib/decodePacket.browser.js"),u=String.fromCharCode(30),O=function(w,y){var S=w.length,p=new Array(S),b=0;w.forEach(function(m,k){C(m,!1,function(A){p[k]=A,++b===S&&y(p.join(u))})})},v=function(w,y){for(var S=w.split(u),p=[],b=0;b<S.length;b++){var m=T(S[b],y);if(p.push(m),m.type==="error")break}return p};G.exports={protocol:4,encodePacket:C,encodePayload:O,decodePacket:T,decodePayload:v}},"./node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":function(G,H){(function(I){H.encode=function(C){var T=new Uint8Array(C),u,O=T.length,v="";for(u=0;u<O;u+=3)v+=I[T[u]>>2],v+=I[(T[u]&3)<<4|T[u+1]>>4],v+=I[(T[u+1]&15)<<2|T[u+2]>>6],v+=I[T[u+2]&63];return O%3==2?v=v.substring(0,v.length-1)+"=":O%3==1&&(v=v.substring(0,v.length-2)+"=="),v},H.decode=function(C){var T=C.length*.75,u=C.length,O,v=0,j,w,y,S;C[C.length-1]==="="&&(T--,C[C.length-2]==="="&&T--);var p=new ArrayBuffer(T),b=new Uint8Array(p);for(O=0;O<u;O+=4)j=I.indexOf(C[O]),w=I.indexOf(C[O+1]),y=I.indexOf(C[O+2]),S=I.indexOf(C[O+3]),b[v++]=j<<2|w>>4,b[v++]=(w&15)<<4|y>>2,b[v++]=(y&3)<<6|S&63;return p}})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},"./node_modules/has-cors/index.js":function(G,H){try{G.exports=typeof XMLHttpRequest!="undefined"&&"withCredentials"in new XMLHttpRequest}catch(I){G.exports=!1}},"./node_modules/ms/index.js":function(G,H){function I(b){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?I=function(k){return typeof k}:I=function(k){return k&&typeof Symbol=="function"&&k.constructor===Symbol&&k!==Symbol.prototype?"symbol":typeof k},I(b)}var C=1e3,T=C*60,u=T*60,O=u*24,v=O*7,j=O*365.25;G.exports=function(b,m){m=m||{};var k=I(b);if(k==="string"&&b.length>0)return w(b);if(k==="number"&&isFinite(b))return m.long?S(b):y(b);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(b))};function w(b){if(b=String(b),!(b.length>100)){var m=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(b);if(!!m){var k=parseFloat(m[1]),A=(m[2]||"ms").toLowerCase();switch(A){case"years":case"year":case"yrs":case"yr":case"y":return k*j;case"weeks":case"week":case"w":return k*v;case"days":case"day":case"d":return k*O;case"hours":case"hour":case"hrs":case"hr":case"h":return k*u;case"minutes":case"minute":case"mins":case"min":case"m":return k*T;case"seconds":case"second":case"secs":case"sec":case"s":return k*C;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return k;default:return}}}}function y(b){var m=Math.abs(b);return m>=O?Math.round(b/O)+"d":m>=u?Math.round(b/u)+"h":m>=T?Math.round(b/T)+"m":m>=C?Math.round(b/C)+"s":b+"ms"}function S(b){var m=Math.abs(b);return m>=O?p(b,m,O,"day"):m>=u?p(b,m,u,"hour"):m>=T?p(b,m,T,"minute"):m>=C?p(b,m,C,"second"):b+" ms"}function p(b,m,k,A){var P=m>=k*1.5;return Math.round(b/k)+" "+A+(P?"s":"")}},"./node_modules/parseqs/index.js":function(G,H){H.encode=function(I){var C="";for(var T in I)I.hasOwnProperty(T)&&(C.length&&(C+="&"),C+=encodeURIComponent(T)+"="+encodeURIComponent(I[T]));return C},H.decode=function(I){for(var C={},T=I.split("&"),u=0,O=T.length;u<O;u++){var v=T[u].split("=");C[decodeURIComponent(v[0])]=decodeURIComponent(v[1])}return C}},"./node_modules/parseuri/index.js":function(G,H){var I=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,C=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];G.exports=function(v){var j=v,w=v.indexOf("["),y=v.indexOf("]");w!=-1&&y!=-1&&(v=v.substring(0,w)+v.substring(w,y).replace(/:/g,";")+v.substring(y,v.length));for(var S=I.exec(v||""),p={},b=14;b--;)p[C[b]]=S[b]||"";return w!=-1&&y!=-1&&(p.source=j,p.host=p.host.substring(1,p.host.length-1).replace(/;/g,":"),p.authority=p.authority.replace("[","").replace("]","").replace(/;/g,":"),p.ipv6uri=!0),p.pathNames=T(p,p.path),p.queryKey=u(p,p.query),p};function T(O,v){var j=/\/{2,9}/g,w=v.replace(j,"/").split("/");return(v.substr(0,1)=="/"||v.length===0)&&w.splice(0,1),v.substr(v.length-1,1)=="/"&&w.splice(w.length-1,1),w}function u(O,v){var j={};return v.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(w,y,S){y&&(j[y]=S)}),j}},"./node_modules/socket.io-parser/dist/binary.js":function(G,H,I){function C(w){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(S){return typeof S}:C=function(S){return S&&typeof Symbol=="function"&&S.constructor===Symbol&&S!==Symbol.prototype?"symbol":typeof S},C(w)}Object.defineProperty(H,"__esModule",{value:!0}),H.reconstructPacket=H.deconstructPacket=void 0;var T=I("./node_modules/socket.io-parser/dist/is-binary.js");function u(w){var y=[],S=w.data,p=w;return p.data=O(S,y),p.attachments=y.length,{packet:p,buffers:y}}H.deconstructPacket=u;function O(w,y){if(!w)return w;if(T.isBinary(w)){var S={_placeholder:!0,num:y.length};return y.push(w),S}else if(Array.isArray(w)){for(var p=new Array(w.length),b=0;b<w.length;b++)p[b]=O(w[b],y);return p}else if(C(w)==="object"&&!(w instanceof Date)){var m={};for(var k in w)w.hasOwnProperty(k)&&(m[k]=O(w[k],y));return m}return w}function v(w,y){return w.data=j(w.data,y),w.attachments=void 0,w}H.reconstructPacket=v;function j(w,y){if(!w)return w;if(w&&w._placeholder)return y[w.num];if(Array.isArray(w))for(var S=0;S<w.length;S++)w[S]=j(w[S],y);else if(C(w)==="object")for(var p in w)w.hasOwnProperty(p)&&(w[p]=j(w[p],y));return w}},"./node_modules/socket.io-parser/dist/index.js":function(G,H,I){function C(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(n){return typeof n}:C=function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},C(i)}function T(i,e,n){return typeof Reflect!="undefined"&&Reflect.get?T=Reflect.get:T=function(t,f,l){var h=u(t,f);if(!!h){var _=Object.getOwnPropertyDescriptor(h,f);return _.get?_.get.call(l):_.value}},T(i,e,n||i)}function u(i,e){for(;!Object.prototype.hasOwnProperty.call(i,e)&&(i=p(i),i!==null););return i}function O(i,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function");i.prototype=Object.create(e&&e.prototype,{constructor:{value:i,writable:!0,configurable:!0}}),e&&v(i,e)}function v(i,e){return v=Object.setPrototypeOf||function(r,t){return r.__proto__=t,r},v(i,e)}function j(i){var e=S();return function(){var r=p(i),t;if(e){var f=p(this).constructor;t=Reflect.construct(r,arguments,f)}else t=r.apply(this,arguments);return w(this,t)}}function w(i,e){if(e&&(C(e)==="object"||typeof e=="function"))return e;if(e!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return y(i)}function y(i){if(i===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return i}function S(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(i){return!1}}function p(i){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)},p(i)}function b(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}function m(i,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(i,r.key,r)}}function k(i,e,n){return e&&m(i.prototype,e),n&&m(i,n),i}Object.defineProperty(H,"__esModule",{value:!0}),H.Decoder=H.Encoder=H.PacketType=H.protocol=void 0;var A=I("./node_modules/component-emitter/index.js"),P=I("./node_modules/socket.io-parser/dist/binary.js"),E=I("./node_modules/socket.io-parser/dist/is-binary.js"),g=I("./node_modules/debug/src/browser.js")("socket.io-parser");H.protocol=5;var a;(function(i){i[i.CONNECT=0]="CONNECT",i[i.DISCONNECT=1]="DISCONNECT",i[i.EVENT=2]="EVENT",i[i.ACK=3]="ACK",i[i.CONNECT_ERROR=4]="CONNECT_ERROR",i[i.BINARY_EVENT=5]="BINARY_EVENT",i[i.BINARY_ACK=6]="BINARY_ACK"})(a=H.PacketType||(H.PacketType={}));var s=function(){function i(){b(this,i)}return k(i,[{key:"encode",value:function(n){return g("encoding packet %j",n),(n.type===a.EVENT||n.type===a.ACK)&&E.hasBinary(n)?(n.type=n.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(n)):[this.encodeAsString(n)]}},{key:"encodeAsString",value:function(n){var r=""+n.type;return(n.type===a.BINARY_EVENT||n.type===a.BINARY_ACK)&&(r+=n.attachments+"-"),n.nsp&&n.nsp!=="/"&&(r+=n.nsp+","),n.id!=null&&(r+=n.id),n.data!=null&&(r+=JSON.stringify(n.data)),g("encoded %j as %s",n,r),r}},{key:"encodeAsBinary",value:function(n){var r=P.deconstructPacket(n),t=this.encodeAsString(r.packet),f=r.buffers;return f.unshift(t),f}}]),i}();H.Encoder=s;var o=function(i){O(n,i);var e=j(n);function n(){return b(this,n),e.call(this)}return k(n,[{key:"add",value:function(t){var f;if(typeof t=="string")f=this.decodeString(t),f.type===a.BINARY_EVENT||f.type===a.BINARY_ACK?(this.reconstructor=new d(f),f.attachments===0&&T(p(n.prototype),"emit",this).call(this,"decoded",f)):T(p(n.prototype),"emit",this).call(this,"decoded",f);else if(E.isBinary(t)||t.base64)if(this.reconstructor)f=this.reconstructor.takeBinaryData(t),f&&(this.reconstructor=null,T(p(n.prototype),"emit",this).call(this,"decoded",f));else throw new Error("got binary data when not reconstructing a packet");else throw new Error("Unknown type: "+t)}},{key:"decodeString",value:function(t){var f=0,l={type:Number(t.charAt(0))};if(a[l.type]===void 0)throw new Error("unknown packet type "+l.type);if(l.type===a.BINARY_EVENT||l.type===a.BINARY_ACK){for(var h=f+1;t.charAt(++f)!=="-"&&f!=t.length;);var _=t.substring(h,f);if(_!=Number(_)||t.charAt(f)!=="-")throw new Error("Illegal attachments");l.attachments=Number(_)}if(t.charAt(f+1)==="/"){for(var M=f+1;++f;){var R=t.charAt(f);if(R===","||f===t.length)break}l.nsp=t.substring(M,f)}else l.nsp="/";var B=t.charAt(f+1);if(B!==""&&Number(B)==B){for(var F=f+1;++f;){var V=t.charAt(f);if(V==null||Number(V)!=V){--f;break}if(f===t.length)break}l.id=Number(t.substring(F,f+1))}if(t.charAt(++f)){var z=c(t.substr(f));if(n.isPayloadValid(l.type,z))l.data=z;else throw new Error("invalid payload")}return g("decoded %s as %j",t,l),l}},{key:"destroy",value:function(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}],[{key:"isPayloadValid",value:function(t,f){switch(t){case a.CONNECT:return C(f)==="object";case a.DISCONNECT:return f===void 0;case a.CONNECT_ERROR:return typeof f=="string"||C(f)==="object";case a.EVENT:case a.BINARY_EVENT:return Array.isArray(f)&&f.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(f)}}}]),n}(A);H.Decoder=o;function c(i){try{return JSON.parse(i)}catch(e){return!1}}var d=function(){function i(e){b(this,i),this.packet=e,this.buffers=[],this.reconPack=e}return k(i,[{key:"takeBinaryData",value:function(n){if(this.buffers.push(n),this.buffers.length===this.reconPack.attachments){var r=P.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),r}return null}},{key:"finishedReconstruction",value:function(){this.reconPack=null,this.buffers=[]}}]),i}()},"./node_modules/socket.io-parser/dist/is-binary.js":function(G,H,I){function C(S){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?C=function(b){return typeof b}:C=function(b){return b&&typeof Symbol=="function"&&b.constructor===Symbol&&b!==Symbol.prototype?"symbol":typeof b},C(S)}Object.defineProperty(H,"__esModule",{value:!0}),H.hasBinary=H.isBinary=void 0;var T=typeof ArrayBuffer=="function",u=function(p){return typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(p):p.buffer instanceof ArrayBuffer},O=Object.prototype.toString,v=typeof Blob=="function"||typeof Blob!="undefined"&&O.call(Blob)==="[object BlobConstructor]",j=typeof File=="function"||typeof File!="undefined"&&O.call(File)==="[object FileConstructor]";function w(S){return T&&(S instanceof ArrayBuffer||u(S))||v&&S instanceof Blob||j&&S instanceof File}H.isBinary=w;function y(S,p){if(!S||C(S)!=="object")return!1;if(Array.isArray(S)){for(var b=0,m=S.length;b<m;b++)if(y(S[b]))return!0;return!1}if(w(S))return!0;if(S.toJSON&&typeof S.toJSON=="function"&&arguments.length===1)return y(S.toJSON(),!0);for(var k in S)if(Object.prototype.hasOwnProperty.call(S,k)&&y(S[k]))return!0;return!1}H.hasBinary=y},"./node_modules/yeast/index.js":function(G,H,I){var C="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),T=64,u={},O=0,v=0,j;function w(p){var b="";do b=C[p%T]+b,p=Math.floor(p/T);while(p>0);return b}function y(p){var b=0;for(v=0;v<p.length;v++)b=b*T+u[p.charAt(v)];return b}function S(){var p=w(+new Date);return p!==j?(O=0,j=p):p+"."+w(O++)}for(;v<T;v++)u[C[v]]=v;S.encode=w,S.decode=y,G.exports=S}})})})(He);var Xe=Ue(He.exports),Ve={exports:{}};(function(fe,We){(function(H,I){fe.exports=I()})(Je,function(){return function(){var G={"../../node_modules/@feathersjs/hooks/lib/base.js":function(T,u,O){function v(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(r){return typeof r}:v=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},v(e)}function j(e,n){if(typeof n!="function"&&n!==null)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&w(e,n)}function w(e,n){return w=Object.setPrototypeOf||function(t,f){return t.__proto__=f,t},w(e,n)}function y(e){var n=b();return function(){var t=m(e),f;if(n){var l=m(this).constructor;f=Reflect.construct(t,arguments,l)}else f=t.apply(this,arguments);return S(this,f)}}function S(e,n){if(n&&(v(n)==="object"||typeof n=="function"))return n;if(n!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return p(e)}function p(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)},m(e)}function k(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function A(e,n,r){return n&&k(e.prototype,n),r&&k(e,r),e}function P(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(u,"__esModule",{value:!0}),u.setMiddleware=u.getMiddleware=u.setManager=u.getManager=u.convertOptions=u.HookManager=u.BaseHookContext=u.HOOKS=void 0;var E=O("../../node_modules/@feathersjs/hooks/lib/utils.js");u.HOOKS=Symbol("@feathersjs/hooks");var g=function e(){var n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};P(this,e),Object.defineProperty(this,"self",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,n)};u.BaseHookContext=g;var a=function(){function e(){P(this,e),Object.defineProperty(this,"_parent",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_params",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_middleware",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_props",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,"_defaults",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}return A(e,[{key:"parent",value:function(r){return this._parent=r,this}},{key:"middleware",value:function(r){return this._middleware=(r==null?void 0:r.length)?r:null,this}},{key:"getMiddleware",value:function(){var r,t=(r=this._parent)===null||r===void 0?void 0:r.getMiddleware();return t&&this._middleware?t.concat(this._middleware):t||this._middleware}},{key:"collectMiddleware",value:function(r,t){var f=d(r),l=this.getMiddleware();return f&&l?f.concat(l):f||l||[]}},{key:"props",value:function(r){return this._props||(this._props={}),E.copyProperties(this._props,r),this}},{key:"getProps",value:function(){var r,t=(r=this._parent)===null||r===void 0?void 0:r.getProps();return t&&this._props?E.copyProperties({},t,this._props):t||this._props||null}},{key:"params",value:function(){for(var r=arguments.length,t=new Array(r),f=0;f<r;f++)t[f]=arguments[f];return this._params=t,this}},{key:"getParams",value:function(){var r,t=(r=this._parent)===null||r===void 0?void 0:r.getParams();return t&&this._params?t.concat(this._params):t||this._params}},{key:"defaults",value:function(r){return this._defaults=r,this}},{key:"getDefaults",value:function(r,t,f){var l,h=typeof this._defaults=="function"?this._defaults(r,t,f):null,_=(l=this._parent)===null||l===void 0?void 0:l.getDefaults(r,t,f);return _&&h?Object.assign({},_,h):_||h}},{key:"getContextClass",value:function(){var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:g,t=function(h){j(M,h);var _=y(M);function M(R){var B;return P(this,M),B=_.call(this,R),E.copyToSelf(p(B)),B}return M}(r),f=this.getParams(),l=this.getProps();return f&&f.forEach(function(h,_){if((l==null?void 0:l[h])!==void 0)throw new Error("Hooks can not have a property and param named '".concat(h,"'. Use .defaults instead."));Object.defineProperty(t.prototype,h,{enumerable:!0,get:function(){return this===null||this===void 0?void 0:this.arguments[_]},set:function(R){this.arguments[_]=R}})}),l&&E.copyProperties(t.prototype,l),t}},{key:"initializeContext",value:function(r,t,f){var l=this._parent?this._parent.initializeContext(r,t,f):f,h=this.getDefaults(r,t,l);if(r&&(l.self=r),l.arguments=t,h)for(var _=0,M=Object.keys(h);_<M.length;_++){var R=M[_];l[R]===void 0&&(l[R]=h[R])}return l}}]),e}();u.HookManager=a;function s(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;return e?Array.isArray(e)?new a().middleware(e):e:new a}u.convertOptions=s;function o(e){return e&&e[u.HOOKS]||null}u.getManager=o;function c(e,n){var r=o(e);return e[u.HOOKS]=n.parent(r),e}u.setManager=c;function d(e){var n=o(e);return n?n.getMiddleware():null}u.getMiddleware=d;function i(e,n){var r=new a().middleware(n);return c(e,r)}u.setMiddleware=i},"../../node_modules/@feathersjs/hooks/lib/compose.js":function(T,u){function O(y,S){var p=typeof Symbol!="undefined"&&y[Symbol.iterator]||y["@@iterator"];if(!p){if(Array.isArray(y)||(p=v(y))||S&&y&&typeof y.length=="number"){p&&(y=p);var b=0,m=function(){};return{s:m,n:function(){return b>=y.length?{done:!0}:{done:!1,value:y[b++]}},e:function(g){throw g},f:m}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var k=!0,A=!1,P;return{s:function(){p=p.call(y)},n:function(){var g=p.next();return k=g.done,g},e:function(g){A=!0,P=g},f:function(){try{!k&&p.return!=null&&p.return()}finally{if(A)throw P}}}}function v(y,S){if(!!y){if(typeof y=="string")return j(y,S);var p=Object.prototype.toString.call(y).slice(8,-1);if(p==="Object"&&y.constructor&&(p=y.constructor.name),p==="Map"||p==="Set")return Array.from(y);if(p==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(p))return j(y,S)}}function j(y,S){(S==null||S>y.length)&&(S=y.length);for(var p=0,b=new Array(S);p<S;p++)b[p]=y[p];return b}Object.defineProperty(u,"__esModule",{value:!0}),u.compose=void 0;function w(y){if(!Array.isArray(y))throw new TypeError("Middleware stack must be an array!");var S=O(y),p;try{for(S.s();!(p=S.n()).done;){var b=p.value;if(typeof b!="function")throw new TypeError("Middleware must be composed of functions!")}}catch(m){S.e(m)}finally{S.f()}return function(m,k){var A=-1;return P.call(this,0);function P(E){if(E<=A)return Promise.reject(new Error("next() called multiple times"));A=E;var g=y[E];if(E===y.length&&(g=k),!g)return Promise.resolve();try{return Promise.resolve(g.call(this,m,P.bind(this,E+1)))}catch(a){return Promise.reject(a)}}}}u.compose=w},"../../node_modules/@feathersjs/hooks/lib/hooks.js":function(T,u,O){Object.defineProperty(u,"__esModule",{value:!0}),u.hookDecorator=u.objectHooks=u.functionHooks=u.getOriginal=void 0;var v=O("../../node_modules/@feathersjs/hooks/lib/compose.js"),j=O("../../node_modules/@feathersjs/hooks/lib/base.js"),w=O("../../node_modules/@feathersjs/hooks/lib/utils.js");function y(m){return typeof m.original=="function"?y(m.original):m}u.getOriginal=y;function S(m,k){if(typeof m!="function")throw new Error("Can not apply hooks to non-function");var A=j.convertOptions(k),P=function E(){for(var g=this,a=E.Context,s=E.original,o=arguments.length,c=new Array(o),d=0;d<o;d++)c[d]=arguments[d];var i=c[c.length-1]instanceof a,e=i?c.pop():new a,n=A.initializeContext(this,c,e),r=[function(f,l){return l().then(function(){return i?f:f.result})}],t=A.collectMiddleware(this,c);return t&&Array.prototype.push.apply(r,t),r.push(function(f,l){return Object.prototype.hasOwnProperty.call(n,"result")?l():Promise.resolve(s.apply(g,f.arguments)).then(function(h){return f.result=h,l()})}),v.compose(r).call(this,n)};return w.copyFnProperties(P,m),w.copyProperties(P,m),j.setManager(P,A),Object.assign(P,{original:y(m),Context:A.getContextClass(),createContext:function(){var g=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return new P.Context(g)}})}u.functionHooks=S;function p(m,k){var A=typeof m=="function"?m.prototype:m;return Array.isArray(k)?j.setMiddleware(A,k):Object.keys(k).reduce(function(P,E){var g=A[E];if(typeof g!="function")throw new Error("Can not apply hooks. '".concat(E,"' is not a function"));var a=j.convertOptions(k[E]);return P[E]=S(g,a.props({method:E})),P},A)}u.objectHooks=p;var b=function(k){var A=function(E,g,a){var s=j.convertOptions(k);if(!a)return j.setManager(E.prototype,s),E;var o=a.value;if(typeof o!="function")throw new Error("Can not apply hooks. '".concat(g,"' is not a function"));return a.value=S(o,s.props({method:g})),a};return A};u.hookDecorator=b},"../../node_modules/@feathersjs/hooks/lib/index.js":function(T,u,O){function v(g){return S(g)||y(g)||w(g)||j()}function j(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function w(g,a){if(!!g){if(typeof g=="string")return p(g,a);var s=Object.prototype.toString.call(g).slice(8,-1);if(s==="Object"&&g.constructor&&(s=g.constructor.name),s==="Map"||s==="Set")return Array.from(g);if(s==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s))return p(g,a)}}function y(g){if(typeof Symbol!="undefined"&&g[Symbol.iterator]!=null||g["@@iterator"]!=null)return Array.from(g)}function S(g){if(Array.isArray(g))return p(g)}function p(g,a){(a==null||a>g.length)&&(a=g.length);for(var s=0,o=new Array(a);s<a;s++)o[s]=g[s];return o}var b=this&&this.__createBinding||(Object.create?function(g,a,s,o){o===void 0&&(o=s),Object.defineProperty(g,o,{enumerable:!0,get:function(){return a[s]}})}:function(g,a,s,o){o===void 0&&(o=s),g[o]=a[s]}),m=this&&this.__exportStar||function(g,a){for(var s in g)s!=="default"&&!Object.prototype.hasOwnProperty.call(a,s)&&b(a,g,s)};Object.defineProperty(u,"__esModule",{value:!0}),u.hooks=u.middleware=void 0;var k=O("../../node_modules/@feathersjs/hooks/lib/base.js"),A=O("../../node_modules/@feathersjs/hooks/lib/hooks.js");m(O("../../node_modules/@feathersjs/hooks/lib/hooks.js"),u),m(O("../../node_modules/@feathersjs/hooks/lib/compose.js"),u),m(O("../../node_modules/@feathersjs/hooks/lib/base.js"),u);function P(g,a){var s=new k.HookManager().middleware(g);return a&&(a.params&&s.params.apply(s,v(a.params)),a.defaults&&s.defaults(a.defaults),a.props&&s.props(a.props)),s}u.middleware=P;function E(){for(var g=arguments.length,a=new Array(g),s=0;s<g;s++)a[s]=arguments[s];var o=a[0],c=a[1];return typeof o=="function"&&(c instanceof k.HookManager||Array.isArray(c)||a.length===1)?A.functionHooks(o,c):a.length===2?A.objectHooks(o,c):A.hookDecorator(o)}u.hooks=E},"../../node_modules/@feathersjs/hooks/lib/utils.js":function(T,u){function O(m,k){var A=typeof Symbol!="undefined"&&m[Symbol.iterator]||m["@@iterator"];if(!A){if(Array.isArray(m)||(A=v(m))||k&&m&&typeof m.length=="number"){A&&(m=A);var P=0,E=function(){};return{s:E,n:function(){return P>=m.length?{done:!0}:{done:!1,value:m[P++]}},e:function(c){throw c},f:E}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var g=!0,a=!1,s;return{s:function(){A=A.call(m)},n:function(){var c=A.next();return g=c.done,c},e:function(c){a=!0,s=c},f:function(){try{!g&&A.return!=null&&A.return()}finally{if(a)throw s}}}}function v(m,k){if(!!m){if(typeof m=="string")return j(m,k);var A=Object.prototype.toString.call(m).slice(8,-1);if(A==="Object"&&m.constructor&&(A=m.constructor.name),A==="Map"||A==="Set")return Array.from(m);if(A==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(A))return j(m,k)}}function j(m,k){(k==null||k>m.length)&&(k=m.length);for(var A=0,P=new Array(k);A<k;A++)P[A]=m[A];return P}Object.defineProperty(u,"__esModule",{value:!0}),u.copyFnProperties=u.copyProperties=u.copyToSelf=void 0;var w=Object.prototype,y=typeof w.__lookupGetter__=="function"&&typeof w.__defineGetter__=="function"&&typeof w.__defineSetter__=="function";function S(m){for(var k in m)if(!m.hasOwnProperty(k)){var A=y?m.constructor.prototype.__lookupGetter__(k):Object.getOwnPropertyDescriptor(m,k);if(y&&A){m.__defineGetter__(k,A);var P=m.constructor.prototype.__lookupSetter__(k);P&&m.__defineSetter__(k,P)}else A?Object.defineProperty(m,k,A):m[k]=m[k]}}u.copyToSelf=S;function p(m){for(var k=arguments.length,A=new Array(k>1?k-1:0),P=1;P<k;P++)A[P-1]=arguments[P];for(var E=0,g=A;E<g.length;E++){var a=g[E],s=Object.keys(a).concat(Object.getOwnPropertySymbols(a)),o=O(s),c;try{for(o.s();!(c=o.n()).done;){var d=c.value,i=Object.getOwnPropertyDescriptor(a,d);i&&!Object.prototype.hasOwnProperty.call(m,d)&&Object.defineProperty(m,d,i)}}catch(e){o.e(e)}finally{o.f()}}return m}u.copyProperties=p;function b(m,k){var A=["name","length"];try{for(var P=0,E=A;P<E.length;P++){var g=E[P],a=k[g];Object.defineProperty(m,g,{value:a})}}catch(s){}return m}u.copyFnProperties=b},"../authentication-client/lib/core.js":function(T,u,O){function v(t){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(l){return typeof l}:v=function(l){return l&&typeof Symbol=="function"&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l},v(t)}function j(t,f){for(var l=0;l<f.length;l++){var h=f[l];h.enumerable=h.enumerable||!1,h.configurable=!0,"value"in h&&(h.writable=!0),Object.defineProperty(t,h.key,h)}}function w(t,f,l){return f&&j(t.prototype,f),l&&j(t,l),t}function y(t,f){return k(t)||m(t,f)||p(t,f)||S()}function S(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function p(t,f){if(!!t){if(typeof t=="string")return b(t,f);var l=Object.prototype.toString.call(t).slice(8,-1);if(l==="Object"&&t.constructor&&(l=t.constructor.name),l==="Map"||l==="Set")return Array.from(t);if(l==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(l))return b(t,f)}}function b(t,f){(f==null||f>t.length)&&(f=t.length);for(var l=0,h=new Array(f);l<f;l++)h[l]=t[l];return h}function m(t,f){var l=t==null?null:typeof Symbol!="undefined"&&t[Symbol.iterator]||t["@@iterator"];if(l!=null){var h=[],_=!0,M=!1,R,B;try{for(l=l.call(t);!(_=(R=l.next()).done)&&(h.push(R.value),!(f&&h.length===f));_=!0);}catch(F){M=!0,B=F}finally{try{!_&&l.return!=null&&l.return()}finally{if(M)throw B}}return h}}function k(t){if(Array.isArray(t))return t}function A(t,f){if(!(t instanceof f))throw new TypeError("Cannot call a class as a function")}function P(t,f){if(typeof f!="function"&&f!==null)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(f&&f.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),f&&E(t,f)}function E(t,f){return E=Object.setPrototypeOf||function(h,_){return h.__proto__=_,h},E(t,f)}function g(t){var f=o();return function(){var h=c(t),_;if(f){var M=c(this).constructor;_=Reflect.construct(h,arguments,M)}else _=h.apply(this,arguments);return a(this,_)}}function a(t,f){if(f&&(v(f)==="object"||typeof f=="function"))return f;if(f!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return s(t)}function s(t){if(t===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function o(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function c(t){return c=Object.setPrototypeOf?Object.getPrototypeOf:function(l){return l.__proto__||Object.getPrototypeOf(l)},c(t)}Object.defineProperty(u,"__esModule",{value:!0}),u.AuthenticationClient=void 0;var d=O("../errors/lib/index.js"),i=O("../authentication-client/lib/storage.js"),e=function(t){P(l,t);var f=g(l);function l(h,_){return A(this,l),f.call(this,h,"OauthError",401,"oauth-error",_)}return l}(d.FeathersError),n=function(f,l){var h=new RegExp("(?:&?)".concat(l,"=([^&]*)")),_=f.hash?f.hash.match(h):null;if(_!==null){var M=y(_,2),R=M[1];return[R,h]}return[null,h]},r=function(){function t(f,l){A(this,t);var h=f.io,_=new i.StorageWrapper(f.get("storage")||l.storage);this.app=f,this.options=l,this.authenticated=!1,this.app.set("storage",_),h&&this.handleSocket(h)}return w(t,[{key:"service",get:function(){return this.app.service(this.options.path)}},{key:"storage",get:function(){return this.app.get("storage")}},{key:"handleSocket",value:function(l){var h=this,_=this.app.io?"connect":"open",M=this.app.io?"disconnect":"disconnection";l.on(M,function(){var R=new Promise(function(B){return l.once(_,function(F){return B(F)})}).then(function(){return h.authenticated?h.reAuthenticate(!0):null});h.app.set("authentication",R)})}},{key:"getFromLocation",value:function(l){var h=n(l,this.options.locationKey),_=y(h,2),M=_[0],R=_[1];if(M!==null)return l.hash=l.hash.replace(R,""),Promise.resolve(M);var B=n(l,this.options.locationErrorKey),F=y(B,2),V=F[0],z=F[1];return V!==null?(l.hash=l.hash.replace(z,""),Promise.reject(new e(decodeURIComponent(V)))):Promise.resolve(null)}},{key:"setAccessToken",value:function(l){return this.storage.setItem(this.options.storageKey,l)}},{key:"getAccessToken",value:function(){var l=this;return this.storage.getItem(this.options.storageKey).then(function(h){return!h&&typeof window!="undefined"&&window.location?l.getFromLocation(window.location):h||null})}},{key:"removeAccessToken",value:function(){return this.storage.removeItem(this.options.storageKey)}},{key:"reset",value:function(){return this.app.set("authentication",null),this.authenticated=!1,Promise.resolve(null)}},{key:"handleError",value:function(l,h){var _=this;if(l.code===401||l.code===403){var M=this.removeAccessToken().then(function(){return _.reset()});return h==="logout"?M:M.then(function(){return Promise.reject(l)})}return Promise.reject(l)}},{key:"reAuthenticate",value:function(){var l=this,h=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,_=arguments.length>1?arguments[1]:void 0,M=this.app.get("authentication");return!M||h===!0?this.getAccessToken().then(function(R){if(!R)throw new d.NotAuthenticated("No accessToken found in storage");return l.authenticate({strategy:_||l.options.jwtStrategy,accessToken:R})}):M}},{key:"authenticate",value:function(l,h){var _=this;if(!l)return this.reAuthenticate();var M=this.service.create(l,h).then(function(R){var B=R.accessToken;return _.authenticated=!0,_.app.emit("login",R),_.app.emit("authenticated",R),_.setAccessToken(B).then(function(){return R})}).catch(function(R){return _.handleError(R,"authenticate")});return this.app.set("authentication",M),M}},{key:"logout",value:function(){var l=this;return Promise.resolve(this.app.get("authentication")).then(function(){return l.service.remove(null).then(function(h){return l.removeAccessToken().then(function(){return l.reset()}).then(function(){return l.app.emit("logout",h),h})})}).catch(function(h){return l.handleError(h,"logout")})}}]),t}();u.AuthenticationClient=r},"../authentication-client/lib/hooks/authentication.js":function(T,u,O){Object.defineProperty(u,"__esModule",{value:!0}),u.authentication=void 0;var v=O("../commons/lib/index.js"),j=function(){return function(y,S){var p=y.app,b=y.params,m=y.path,k=y.method,A=y.app.authentication;return(0,v.stripSlashes)(A.options.path)===m&&k==="create"?S():Promise.resolve(p.get("authentication")).then(function(P){P&&(y.params=Object.assign({},P,b))}).then(S)}};u.authentication=j},"../authentication-client/lib/hooks/index.js":function(T,u,O){Object.defineProperty(u,"__esModule",{value:!0}),u.populateHeader=u.authentication=void 0;var v=O("../authentication-client/lib/hooks/authentication.js");Object.defineProperty(u,"authentication",{enumerable:!0,get:function(){return v.authentication}});var j=O("../authentication-client/lib/hooks/populate-header.js");Object.defineProperty(u,"populateHeader",{enumerable:!0,get:function(){return j.populateHeader}})},"../authentication-client/lib/hooks/populate-header.js":function(T,u){function O(j,w,y){return w in j?Object.defineProperty(j,w,{value:y,enumerable:!0,configurable:!0,writable:!0}):j[w]=y,j}Object.defineProperty(u,"__esModule",{value:!0}),u.populateHeader=void 0;var v=function(){return function(w,y){var S=w.app,p=w.params.accessToken,b=S.authentication;if(S.rest&&p){var m=b.options,k=m.scheme,A=m.header,P="".concat(k," ").concat(p);w.params.headers=Object.assign({},O({},A,P),w.params.headers)}return y()}};u.populateHeader=v},"../authentication-client/lib/index.js":function(T,u,O){var v=this&&this.__createBinding||(Object.create?function(k,A,P,E){E===void 0&&(E=P),Object.defineProperty(k,E,{enumerable:!0,get:function(){return A[P]}})}:function(k,A,P,E){E===void 0&&(E=P),k[E]=A[P]}),j=this&&this.__setModuleDefault||(Object.create?function(k,A){Object.defineProperty(k,"default",{enumerable:!0,value:A})}:function(k,A){k.default=A}),w=this&&this.__importStar||function(k){if(k&&k.__esModule)return k;var A={};if(k!=null)for(var P in k)P!=="default"&&Object.prototype.hasOwnProperty.call(k,P)&&v(A,k,P);return j(A,k),A};Object.defineProperty(u,"__esModule",{value:!0}),u.defaults=u.defaultStorage=u.hooks=u.MemoryStorage=u.AuthenticationClient=u.getDefaultStorage=void 0;var y=O("../authentication-client/lib/core.js");Object.defineProperty(u,"AuthenticationClient",{enumerable:!0,get:function(){return y.AuthenticationClient}});var S=w(O("../authentication-client/lib/hooks/index.js"));u.hooks=S;var p=O("../authentication-client/lib/storage.js");Object.defineProperty(u,"MemoryStorage",{enumerable:!0,get:function(){return p.MemoryStorage}});var b=function(){try{return new p.StorageWrapper(window.localStorage)}catch(A){}return new p.MemoryStorage};u.getDefaultStorage=b,u.defaultStorage=(0,u.getDefaultStorage)(),u.defaults={header:"Authorization",scheme:"Bearer",storageKey:"feathers-jwt",locationKey:"access_token",locationErrorKey:"error",jwtStrategy:"jwt",path:"/authentication",Authentication:y.AuthenticationClient,storage:u.defaultStorage};var m=function(){var A=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},P=Object.assign({},u.defaults,A),E=P.Authentication;return function(g){var a=new E(g,P);g.authentication=a,g.authenticate=a.authenticate.bind(a),g.reAuthenticate=a.reAuthenticate.bind(a),g.logout=a.logout.bind(a),g.hooks([S.authentication(),S.populateHeader()])}};u.default=m,T.exports=Object.assign(m,T.exports)},"../authentication-client/lib/storage.js":function(T,u){function O(S,p){if(!(S instanceof p))throw new TypeError("Cannot call a class as a function")}function v(S,p){for(var b=0;b<p.length;b++){var m=p[b];m.enumerable=m.enumerable||!1,m.configurable=!0,"value"in m&&(m.writable=!0),Object.defineProperty(S,m.key,m)}}function j(S,p,b){return p&&v(S.prototype,p),b&&v(S,b),S}Object.defineProperty(u,"__esModule",{value:!0}),u.StorageWrapper=u.MemoryStorage=void 0;var w=function(){function S(){O(this,S),this.store={}}return j(S,[{key:"getItem",value:function(b){return Promise.resolve(this.store[b])}},{key:"setItem",value:function(b,m){return Promise.resolve(this.store[b]=m)}},{key:"removeItem",value:function(b){var m=this.store[b];return delete this.store[b],Promise.resolve(m)}}]),S}();u.MemoryStorage=w;var y=function(){function S(p){O(this,S),this.storage=p}return j(S,[{key:"getItem",value:function(b){return Promise.resolve(this.storage.getItem(b))}},{key:"setItem",value:function(b,m){return Promise.resolve(this.storage.setItem(b,m))}},{key:"removeItem",value:function(b){return Promise.resolve(this.storage.removeItem(b))}}]),S}();u.StorageWrapper=y},"../commons/lib/debug.js":function(T,u){Object.defineProperty(u,"__esModule",{value:!0}),u.createDebug=u.setDebug=u.noopDebug=void 0;var O={};function v(){return function(){}}u.noopDebug=v;var j=v;function w(S){j=S,Object.keys(O).forEach(function(p){O[p]=S(p)})}u.setDebug=w;function y(S){return O[S]||(O[S]=j(S)),function(){return O[S].apply(O,arguments)}}u.createDebug=y},"../commons/lib/index.js":function(T,u,O){function v(a,s,o){return s in a?Object.defineProperty(a,s,{value:o,enumerable:!0,configurable:!0,writable:!0}):a[s]=o,a}function j(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?j=function(o){return typeof o}:j=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},j(a)}function w(a,s){return m(a)||b(a,s)||S(a,s)||y()}function y(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function S(a,s){if(!!a){if(typeof a=="string")return p(a,s);var o=Object.prototype.toString.call(a).slice(8,-1);if(o==="Object"&&a.constructor&&(o=a.constructor.name),o==="Map"||o==="Set")return Array.from(a);if(o==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return p(a,s)}}function p(a,s){(s==null||s>a.length)&&(s=a.length);for(var o=0,c=new Array(s);o<s;o++)c[o]=a[o];return c}function b(a,s){var o=a==null?null:typeof Symbol!="undefined"&&a[Symbol.iterator]||a["@@iterator"];if(o!=null){var c=[],d=!0,i=!1,e,n;try{for(o=o.call(a);!(d=(e=o.next()).done)&&(c.push(e.value),!(s&&c.length===s));d=!0);}catch(r){i=!0,n=r}finally{try{!d&&o.return!=null&&o.return()}finally{if(i)throw n}}return c}}function m(a){if(Array.isArray(a))return a}var k=this&&this.__createBinding||(Object.create?function(a,s,o,c){c===void 0&&(c=o),Object.defineProperty(a,c,{enumerable:!0,get:function(){return s[o]}})}:function(a,s,o,c){c===void 0&&(c=o),a[c]=s[o]}),A=this&&this.__exportStar||function(a,s){for(var o in a)o!=="default"&&!Object.prototype.hasOwnProperty.call(s,o)&&k(s,a,o)};Object.defineProperty(u,"__esModule",{value:!0}),u.createSymbol=u.isPromise=u._=u.stripSlashes=void 0;function P(a){return a.replace(/^(\/+)|(\/+)$/g,"")}u.stripSlashes=P,u._={each:function(s,o){s&&typeof s.forEach=="function"?s.forEach(o):u._.isObject(s)&&Object.keys(s).forEach(function(c){return o(s[c],c)})},some:function(s,o){return Object.keys(s).map(function(c){return[s[c],c]}).some(function(c){var d=w(c,2),i=d[0],e=d[1];return o(i,e)})},every:function(s,o){return Object.keys(s).map(function(c){return[s[c],c]}).every(function(c){var d=w(c,2),i=d[0],e=d[1];return o(i,e)})},keys:function(s){return Object.keys(s)},values:function(s){return u._.keys(s).map(function(o){return s[o]})},isMatch:function(s,o){return u._.keys(o).every(function(c){return s[c]===o[c]})},isEmpty:function(s){return u._.keys(s).length===0},isObject:function(s){return j(s)==="object"&&!Array.isArray(s)&&s!==null},isObjectOrArray:function(s){return j(s)==="object"&&s!==null},extend:function(s){for(var o=arguments.length,c=new Array(o>1?o-1:0),d=1;d<o;d++)c[d-1]=arguments[d];return Object.assign.apply(Object,[s].concat(c))},omit:function(s){for(var o=u._.extend({},s),c=arguments.length,d=new Array(c>1?c-1:0),i=1;i<c;i++)d[i-1]=arguments[i];return d.forEach(function(e){return delete o[e]}),o},pick:function(s){for(var o=arguments.length,c=new Array(o>1?o-1:0),d=1;d<o;d++)c[d-1]=arguments[d];return c.reduce(function(i,e){return s[e]!==void 0&&(i[e]=s[e]),i},{})},merge:function(s,o){return u._.isObject(s)&&u._.isObject(o)&&Object.keys(o).forEach(function(c){u._.isObject(o[c])?(s[c]||Object.assign(s,v({},c,{})),u._.merge(s[c],o[c])):Object.assign(s,v({},c,o[c]))}),s}};function E(a){return u._.isObject(a)&&typeof a.then=="function"}u.isPromise=E;function g(a){return typeof Symbol!="undefined"?Symbol(a):a}u.createSymbol=g,A(O("../commons/lib/debug.js"),u)},"../errors/lib/index.js":function(T,u){var O=["message","errors"];function v(L,U){if(L==null)return{};var N=j(L,U),W,$;if(Object.getOwnPropertySymbols){var J=Object.getOwnPropertySymbols(L);for($=0;$<J.length;$++)W=J[$],!(U.indexOf(W)>=0)&&(!Object.prototype.propertyIsEnumerable.call(L,W)||(N[W]=L[W]))}return N}function j(L,U){if(L==null)return{};var N={},W=Object.keys(L),$,J;for(J=0;J<W.length;J++)$=W[J],!(U.indexOf($)>=0)&&(N[$]=L[$]);return N}function w(L){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?w=function(N){return typeof N}:w=function(N){return N&&typeof Symbol=="function"&&N.constructor===Symbol&&N!==Symbol.prototype?"symbol":typeof N},w(L)}function y(L,U){if(!(L instanceof U))throw new TypeError("Cannot call a class as a function")}function S(L,U){for(var N=0;N<U.length;N++){var W=U[N];W.enumerable=W.enumerable||!1,W.configurable=!0,"value"in W&&(W.writable=!0),Object.defineProperty(L,W.key,W)}}function p(L,U,N){return U&&S(L.prototype,U),N&&S(L,N),L}function b(L,U){if(typeof U!="function"&&U!==null)throw new TypeError("Super expression must either be null or a function");L.prototype=Object.create(U&&U.prototype,{constructor:{value:L,writable:!0,configurable:!0}}),U&&s(L,U)}function m(L){var U=g();return function(){var W=o(L),$;if(U){var J=o(this).constructor;$=Reflect.construct(W,arguments,J)}else $=W.apply(this,arguments);return k(this,$)}}function k(L,U){if(U&&(w(U)==="object"||typeof U=="function"))return U;if(U!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return A(L)}function A(L){if(L===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return L}function P(L){var U=typeof Map=="function"?new Map:void 0;return P=function(W){if(W===null||!a(W))return W;if(typeof W!="function")throw new TypeError("Super expression must either be null or a function");if(typeof U!="undefined"){if(U.has(W))return U.get(W);U.set(W,$)}function $(){return E(W,arguments,o(this).constructor)}return $.prototype=Object.create(W.prototype,{constructor:{value:$,enumerable:!1,writable:!0,configurable:!0}}),s($,W)},P(L)}function E(L,U,N){return g()?E=Reflect.construct:E=function($,J,oe){var re=[null];re.push.apply(re,J);var ie=Function.bind.apply($,re),ne=new ie;return oe&&s(ne,oe.prototype),ne},E.apply(null,arguments)}function g(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(L){return!1}}function a(L){return Function.toString.call(L).indexOf("[native code]")!==-1}function s(L,U){return s=Object.setPrototypeOf||function(W,$){return W.__proto__=$,W},s(L,U)}function o(L){return o=Object.setPrototypeOf?Object.getPrototypeOf:function(N){return N.__proto__||Object.getPrototypeOf(N)},o(L)}Object.defineProperty(u,"__esModule",{value:!0}),u.convert=u.errors=u.Unavailable=u.BadGateway=u.NotImplemented=u.GeneralError=u.TooManyRequests=u.Unprocessable=u.LengthRequired=u.Gone=u.Conflict=u.Timeout=u.NotAcceptable=u.MethodNotAllowed=u.NotFound=u.Forbidden=u.PaymentError=u.NotAuthenticated=u.BadRequest=u.FeathersError=void 0;var c=function(L){b(N,L);var U=m(N);function N(W,$,J,oe,re){var ie;y(this,N);var ne=typeof W=="string"?W:"Error",se={name:$,code:J,className:oe,type:"FeathersError"};if(Array.isArray(re))se.data=re;else if(w(W)==="object"||re!==void 0){var le=w(W)==="object"?W:re,be=le.message,_e=le.errors,he=v(le,O);ne=be||ne,se.errors=_e,se.data=he}return ie=U.call(this,ne),Object.assign(A(ie),se),ie}return p(N,[{key:"toJSON",value:function(){var $={name:this.name,message:this.message,code:this.code,className:this.className};return this.data!==void 0&&($.data=this.data),this.errors!==void 0&&($.errors=this.errors),$}}]),N}(P(Error));u.FeathersError=c;var d=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"BadRequest",400,"bad-request",$)}return N}(c);u.BadRequest=d;var i=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"NotAuthenticated",401,"not-authenticated",$)}return N}(c);u.NotAuthenticated=i;var e=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"PaymentError",402,"payment-error",$)}return N}(c);u.PaymentError=e;var n=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"Forbidden",403,"forbidden",$)}return N}(c);u.Forbidden=n;var r=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"NotFound",404,"not-found",$)}return N}(c);u.NotFound=r;var t=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"MethodNotAllowed",405,"method-not-allowed",$)}return N}(c);u.MethodNotAllowed=t;var f=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"NotAcceptable",406,"not-acceptable",$)}return N}(c);u.NotAcceptable=f;var l=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"Timeout",408,"timeout",$)}return N}(c);u.Timeout=l;var h=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"Conflict",409,"conflict",$)}return N}(c);u.Conflict=h;var _=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"Gone",410,"gone",$)}return N}(c);u.Gone=_;var M=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"LengthRequired",411,"length-required",$)}return N}(c);u.LengthRequired=M;var R=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"Unprocessable",422,"unprocessable",$)}return N}(c);u.Unprocessable=R;var B=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"TooManyRequests",429,"too-many-requests",$)}return N}(c);u.TooManyRequests=B;var F=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"GeneralError",500,"general-error",$)}return N}(c);u.GeneralError=F;var V=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"NotImplemented",501,"not-implemented",$)}return N}(c);u.NotImplemented=V;var z=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"BadGateway",502,"bad-gateway",$)}return N}(c);u.BadGateway=z;var K=function(L){b(N,L);var U=m(N);function N(W,$){return y(this,N),U.call(this,W,"Unavailable",503,"unavailable",$)}return N}(c);u.Unavailable=K,u.errors={FeathersError:c,BadRequest:d,NotAuthenticated:i,PaymentError:e,Forbidden:n,NotFound:r,MethodNotAllowed:t,NotAcceptable:f,Timeout:l,Conflict:h,LengthRequired:M,Unprocessable:R,TooManyRequests:B,GeneralError:F,NotImplemented:V,BadGateway:z,Unavailable:K,400:d,401:i,402:e,403:n,404:r,405:t,406:f,408:l,409:h,410:_,411:M,422:R,429:B,500:F,501:V,502:z,503:K};function q(L){if(!L)return L;var U=u.errors[L.name],N=U?new U(L.message,L.data):new Error(L.message||L);return w(L)==="object"&&Object.assign(N,L),N}u.convert=q},"../feathers/lib/application.js":function(T,u,O){function v(R){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(F){return typeof F}:v=function(F){return F&&typeof Symbol=="function"&&F.constructor===Symbol&&F!==Symbol.prototype?"symbol":typeof F},v(R)}function j(R){return S(R)||y(R)||b(R)||w()}function w(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function y(R){if(typeof Symbol!="undefined"&&R[Symbol.iterator]!=null||R["@@iterator"]!=null)return Array.from(R)}function S(R){if(Array.isArray(R))return m(R)}function p(R,B){var F=typeof Symbol!="undefined"&&R[Symbol.iterator]||R["@@iterator"];if(!F){if(Array.isArray(R)||(F=b(R))||B&&R&&typeof R.length=="number"){F&&(R=F);var V=0,z=function(){};return{s:z,n:function(){return V>=R.length?{done:!0}:{done:!1,value:R[V++]}},e:function(N){throw N},f:z}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var K=!0,q=!1,L;return{s:function(){F=F.call(R)},n:function(){var N=F.next();return K=N.done,N},e:function(N){q=!0,L=N},f:function(){try{!K&&F.return!=null&&F.return()}finally{if(q)throw L}}}}function b(R,B){if(!!R){if(typeof R=="string")return m(R,B);var F=Object.prototype.toString.call(R).slice(8,-1);if(F==="Object"&&R.constructor&&(F=R.constructor.name),F==="Map"||F==="Set")return Array.from(R);if(F==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(F))return m(R,B)}}function m(R,B){(B==null||B>R.length)&&(B=R.length);for(var F=0,V=new Array(B);F<B;F++)V[F]=R[F];return V}function k(R,B,F){return B in R?Object.defineProperty(R,B,{value:F,enumerable:!0,configurable:!0,writable:!0}):R[B]=F,R}function A(R,B){if(!(R instanceof B))throw new TypeError("Cannot call a class as a function")}function P(R,B){for(var F=0;F<B.length;F++){var V=B[F];V.enumerable=V.enumerable||!1,V.configurable=!0,"value"in V&&(V.writable=!0),Object.defineProperty(R,V.key,V)}}function E(R,B,F){return B&&P(R.prototype,B),F&&P(R,F),R}function g(R,B){if(typeof B!="function"&&B!==null)throw new TypeError("Super expression must either be null or a function");R.prototype=Object.create(B&&B.prototype,{constructor:{value:R,writable:!0,configurable:!0}}),B&&a(R,B)}function a(R,B){return a=Object.setPrototypeOf||function(V,z){return V.__proto__=z,V},a(R,B)}function s(R){var B=d();return function(){var V=i(R),z;if(B){var K=i(this).constructor;z=Reflect.construct(V,arguments,K)}else z=V.apply(this,arguments);return o(this,z)}}function o(R,B){if(B&&(v(B)==="object"||typeof B=="function"))return B;if(B!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return c(R)}function c(R){if(R===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return R}function d(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(R){return!1}}function i(R){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(F){return F.__proto__||Object.getPrototypeOf(F)},i(R)}var e=this&&this.__importDefault||function(R){return R&&R.__esModule?R:{default:R}};Object.defineProperty(u,"__esModule",{value:!0}),u.Feathers=void 0;var n=e(O("../feathers/lib/version.js")),r=O("../feathers/lib/dependencies.js"),t=O("../feathers/lib/events.js"),f=O("../feathers/lib/hooks/index.js"),l=O("../feathers/lib/service.js"),h=O("../feathers/lib/hooks/legacy.js"),_=(0,r.createDebug)("@feathersjs/feathers"),M=function(R){g(F,R);var B=s(F);function F(){var V;return A(this,F),V=B.call(this),V.services={},V.settings={},V.mixins=[f.hookMixin,t.eventMixin],V.version=n.default,V._isSetup=!1,V.appHooks=k({},r.HOOKS,[t.eventHook]),V.legacyHooks=(0,h.enableLegacyHooks)(c(V)),V}return E(F,[{key:"get",value:function(z){return this.settings[z]}},{key:"set",value:function(z,K){return this.settings[z]=K,this}},{key:"configure",value:function(z){return z.call(this,this),this}},{key:"defaultService",value:function(z){throw new Error("Can not find service '".concat(z,"'"))}},{key:"service",value:function(z){var K=(0,r.stripSlashes)(z)||"/",q=this.services[K];return typeof q=="undefined"?(this.use(K,this.defaultService(K)),this.service(K)):q}},{key:"use",value:function(z,K,q){var L=this;if(typeof z!="string")throw new Error("'".concat(z,"' is not a valid service path."));var U=(0,r.stripSlashes)(z)||"/",N=K,W=typeof N.service=="function"&&N.services;if(W)return Object.keys(N.services).forEach(function(ne){return L.use("".concat(U,"/").concat(ne),N.service(ne))}),this;var $=(0,l.wrapService)(U,K,q),J=(0,l.getServiceOptions)(K,q),oe=p(l.protectedMethods),re;try{for(oe.s();!(re=oe.n()).done;){var ie=re.value;if(J.methods.includes(ie))throw new Error("'".concat(ie,"' on service '").concat(U,"' is not allowed as a custom method name"))}}catch(ne){oe.e(ne)}finally{oe.f()}return _("Registering new service at `".concat(U,"`")),this.mixins.forEach(function(ne){return ne.call(L,$,U,J)}),this._isSetup&&typeof $.setup=="function"&&(_("Setting up service for `".concat(U,"`")),$.setup(this,U)),this.services[U]=$,this}},{key:"hooks",value:function(z){var K=this,q=z;if(q.before||q.after||q.error)return this.legacyHooks(q);if(Array.isArray(z)){var L;(L=this.appHooks[r.HOOKS]).push.apply(L,j(z))}else{var U=z;Object.keys(U).forEach(function(N){var W=K.appHooks[N]||[];K.appHooks[N]=W.concat(U[N])})}return this}},{key:"setup",value:function(){for(var z=this,K=Promise.resolve(),q=function(){var W=U[L];K=K.then(function(){var $=z.service(W);if(typeof $.setup=="function")return _("Setting up service for `".concat(W,"`")),$.setup(z,W)})},L=0,U=Object.keys(this.services);L<U.length;L++)q();return K.then(function(){return z._isSetup=!0,z})}}]),F}(r.EventEmitter);u.Feathers=M},"../feathers/lib/declarations.js":function(T,u){Object.defineProperty(u,"__esModule",{value:!0})},"../feathers/lib/dependencies.js":function(T,u,O){var v=this&&this.__createBinding||(Object.create?function(y,S,p,b){b===void 0&&(b=p),Object.defineProperty(y,b,{enumerable:!0,get:function(){return S[p]}})}:function(y,S,p,b){b===void 0&&(b=p),y[b]=S[p]}),j=this&&this.__exportStar||function(y,S){for(var p in y)p!=="default"&&!Object.prototype.hasOwnProperty.call(S,p)&&v(S,y,p)};Object.defineProperty(u,"__esModule",{value:!0}),u.EventEmitter=void 0;var w=O("../../node_modules/events/events.js");Object.defineProperty(u,"EventEmitter",{enumerable:!0,get:function(){return w.EventEmitter}}),j(O("../commons/lib/index.js"),u),j(O("../../node_modules/@feathersjs/hooks/lib/index.js"),u)},"../feathers/lib/events.js":function(T,u,O){Object.defineProperty(u,"__esModule",{value:!0}),u.eventMixin=u.eventHook=void 0;var v=O("../feathers/lib/dependencies.js"),j=O("../feathers/lib/service.js");function w(S,p){var b=(0,j.getServiceOptions)(S.self),m=b.events,k=j.defaultEventMap[S.method]||null;return S.event=k,p().then(function(){if(typeof S.event=="string"&&!m.includes(S.event)){var A=Array.isArray(S.result)?S.result:[S.result];A.forEach(function(P){return S.self.emit(S.event,P,S)})}})}u.eventHook=w;function y(S){var p=typeof S.on=="function"&&typeof S.emit=="function";return p||Object.assign(S,v.EventEmitter.prototype),S}u.eventMixin=y},"../feathers/lib/hooks/index.js":function(T,u,O){function v(h){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(M){return typeof M}:v=function(M){return M&&typeof Symbol=="function"&&M.constructor===Symbol&&M!==Symbol.prototype?"symbol":typeof M},v(h)}function j(h){return p(h)||S(h)||y(h)||w()}function w(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function y(h,_){if(!!h){if(typeof h=="string")return b(h,_);var M=Object.prototype.toString.call(h).slice(8,-1);if(M==="Object"&&h.constructor&&(M=h.constructor.name),M==="Map"||M==="Set")return Array.from(h);if(M==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(M))return b(h,_)}}function S(h){if(typeof Symbol!="undefined"&&h[Symbol.iterator]!=null||h["@@iterator"]!=null)return Array.from(h)}function p(h){if(Array.isArray(h))return b(h)}function b(h,_){(_==null||_>h.length)&&(_=h.length);for(var M=0,R=new Array(_);M<_;M++)R[M]=h[M];return R}function m(h,_){if(!(h instanceof _))throw new TypeError("Cannot call a class as a function")}function k(h,_){for(var M=0;M<_.length;M++){var R=_[M];R.enumerable=R.enumerable||!1,R.configurable=!0,"value"in R&&(R.writable=!0),Object.defineProperty(h,R.key,R)}}function A(h,_,M){return _&&k(h.prototype,_),M&&k(h,M),h}function P(h,_,M){return typeof Reflect!="undefined"&&Reflect.get?P=Reflect.get:P=function(B,F,V){var z=E(B,F);if(!!z){var K=Object.getOwnPropertyDescriptor(z,F);return K.get?K.get.call(V):K.value}},P(h,_,M||h)}function E(h,_){for(;!Object.prototype.hasOwnProperty.call(h,_)&&(h=i(h),h!==null););return h}function g(h,_){if(typeof _!="function"&&_!==null)throw new TypeError("Super expression must either be null or a function");h.prototype=Object.create(_&&_.prototype,{constructor:{value:h,writable:!0,configurable:!0}}),_&&a(h,_)}function a(h,_){return a=Object.setPrototypeOf||function(R,B){return R.__proto__=B,R},a(h,_)}function s(h){var _=d();return function(){var R=i(h),B;if(_){var F=i(this).constructor;B=Reflect.construct(R,arguments,F)}else B=R.apply(this,arguments);return o(this,B)}}function o(h,_){if(_&&(v(_)==="object"||typeof _=="function"))return _;if(_!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return c(h)}function c(h){if(h===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return h}function d(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(h){return!1}}function i(h){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(M){return M.__proto__||Object.getPrototypeOf(M)},i(h)}Object.defineProperty(u,"__esModule",{value:!0}),u.hookMixin=u.FeathersHookManager=u.createContext=u.fromErrorHooks=u.fromBeforeHook=u.fromAfterHook=void 0;var e=O("../feathers/lib/dependencies.js"),n=O("../feathers/lib/service.js"),r=O("../feathers/lib/hooks/legacy.js");Object.defineProperty(u,"fromAfterHook",{enumerable:!0,get:function(){return r.fromAfterHook}}),Object.defineProperty(u,"fromBeforeHook",{enumerable:!0,get:function(){return r.fromBeforeHook}}),Object.defineProperty(u,"fromErrorHooks",{enumerable:!0,get:function(){return r.fromErrorHooks}});function t(h,_){var M=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},R=h[_].createContext;if(typeof R!="function")throw new Error("Can not create context for method ".concat(_));return R(M)}u.createContext=t;var f=function(h){g(M,h);var _=s(M);function M(R,B){var F;return m(this,M),F=_.call(this),F.app=R,F.method=B,F._middleware=[],F}return A(M,[{key:"collectMiddleware",value:function(B,F){var V=this.app,z=V.appHooks[e.HOOKS].concat(V.appHooks[this.method]||[]),K=(0,r.collectLegacyHooks)(this.app,this.method),q=P(i(M.prototype),"collectMiddleware",this).call(this,B,F),L=(0,r.collectLegacyHooks)(B,this.method);return[].concat(j(z),j(K),j(q),j(L))}},{key:"initializeContext",value:function(B,F,V){var z=P(i(M.prototype),"initializeContext",this).call(this,B,F,V);return z.params=z.params||{},z}},{key:"middleware",value:function(B){var F;return(F=this._middleware).push.apply(F,j(B)),this}}]),M}(e.HookManager);u.FeathersHookManager=f;function l(h,_,M){if(typeof h.hooks=="function")return h;var R=this,B=(0,n.getHookMethods)(h,M).reduce(function(V,z){var K,q=n.defaultServiceArguments[z]||["data","params"];return V[z]=(K=new f(R,z)).params.apply(K,j(q)).props({app:R,path:_,method:z,service:h,event:null,type:null}),V},{}),F=(0,r.enableLegacyHooks)(h);return(0,e.hooks)(h,B),h.hooks=function(V){var z=this;return V.before||V.after||V.error?F.call(this,V):Array.isArray(V)?(0,e.hooks)(this,V):(Object.keys(V).forEach(function(K){var q=(0,e.getManager)(z[K]);if(!(q instanceof f))throw new Error("Method ".concat(K," is not a Feathers hooks enabled service method"));q.middleware(V[K])}),this)},h}u.hookMixin=l},"../feathers/lib/hooks/legacy.js":function(T,u,O){function v(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(r){return typeof r}:v=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},v(e)}function j(e){return S(e)||y(e)||b(e)||w()}function w(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function y(e){if(typeof Symbol!="undefined"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function S(e){if(Array.isArray(e))return m(e)}function p(e,n){var r=typeof Symbol!="undefined"&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=b(e))||n&&e&&typeof e.length=="number"){r&&(e=r);var t=0,f=function(){};return{s:f,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(R){throw R},f}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var l=!0,h=!1,_;return{s:function(){r=r.call(e)},n:function(){var R=r.next();return l=R.done,R},e:function(R){h=!0,_=R},f:function(){try{!l&&r.return!=null&&r.return()}finally{if(h)throw _}}}}function b(e,n){if(!!e){if(typeof e=="string")return m(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if(r==="Object"&&e.constructor&&(r=e.constructor.name),r==="Map"||r==="Set")return Array.from(e);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return m(e,n)}}function m(e,n){(n==null||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}function k(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(f){return Object.getOwnPropertyDescriptor(e,f).enumerable})),r.push.apply(r,t)}return r}function A(e){for(var n=1;n<arguments.length;n++){var r=arguments[n]!=null?arguments[n]:{};n%2?k(Object(r),!0).forEach(function(t){P(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):k(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function P(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}Object.defineProperty(u,"__esModule",{value:!0}),u.enableLegacyHooks=u.convertHookData=u.collectLegacyHooks=u.fromErrorHooks=u.fromAfterHook=u.fromBeforeHook=void 0;var E=O("../feathers/lib/dependencies.js"),g=E._.each;function a(e){return function(n,r){return n.type="before",Promise.resolve(e.call(n.self,n)).then(function(){return n.type=null,r()})}}u.fromBeforeHook=a;function s(e){return function(n,r){return r().then(function(){return n.type="after",e.call(n.self,n)}).then(function(){n.type=null})}}u.fromAfterHook=s;function o(e){return function(n,r){return r().catch(function(t){var f=Promise.resolve();n.original=A({},n),n.error=t,n.type="error",delete n.result;var l=p(e),h;try{var _=function(){var R=h.value;f=f.then(function(){return R.call(n.self,n)})};for(l.s();!(h=l.n()).done;)_()}catch(M){l.e(M)}finally{l.f()}return f.then(function(){if(n.type=null,n.result===void 0)throw n.error})})}}u.fromErrorHooks=o;function c(e,n){var r=e.__hooks,t=r.before[n],f=t===void 0?[]:t,l=r.after[n],h=l===void 0?[]:l,_=r.error[n],M=_===void 0?[]:_,R=f,B=j(h).reverse(),F=o(M);return[F].concat(j(R),j(B))}u.collectLegacyHooks=c;function d(e){var n={};return Array.isArray(e)?n={all:e}:v(e)!=="object"?n={all:[e]}:g(e,function(r,t){n[t]=Array.isArray(r)?r:[r]}),n}u.convertHookData=d;function i(e){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:["find","get","create","update","patch","remove"],r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:["before","after","error"],t={};return r.forEach(function(f){t[f]={}}),Object.defineProperty(e,"__hooks",{configurable:!0,value:t,writable:!0}),function(l){var h=this;return g(l,function(_,M){if(!h.__hooks[M])throw new Error("'".concat(M,"' is not a valid hook type"));var R=d(_);g(R,function(B,F){if(F!=="all"&&n.indexOf(F)===-1)throw new Error("'".concat(F,"' is not a valid hook method"))}),n.forEach(function(B){var F,V=[].concat(j(R.all||[]),j(R[B]||[]));h.__hooks[M][B]=h.__hooks[M][B]||[],M==="before"&&(V=V.map(a)),M==="after"&&(V=V.map(s)),(F=h.__hooks[M][B]).push.apply(F,j(V))})}),this}}u.enableLegacyHooks=i},"../feathers/lib/index.js":function(T,u,O){var v=this&&this.__createBinding||(Object.create?function(m,k,A,P){P===void 0&&(P=A),Object.defineProperty(m,P,{enumerable:!0,get:function(){return k[A]}})}:function(m,k,A,P){P===void 0&&(P=A),m[P]=k[A]}),j=this&&this.__exportStar||function(m,k){for(var A in m)A!=="default"&&!Object.prototype.hasOwnProperty.call(k,A)&&v(k,m,A)},w=this&&this.__importDefault||function(m){return m&&m.__esModule?m:{default:m}};Object.defineProperty(u,"__esModule",{value:!0}),u.Feathers=u.version=u.feathers=void 0;var y=O("../feathers/lib/dependencies.js"),S=w(O("../feathers/lib/version.js"));u.version=S.default;var p=O("../feathers/lib/application.js");Object.defineProperty(u,"Feathers",{enumerable:!0,get:function(){return p.Feathers}});function b(){return new p.Feathers}u.feathers=b,b.setDebug=y.setDebug,j(O("../feathers/lib/hooks/index.js"),u),j(O("../feathers/lib/declarations.js"),u),j(O("../feathers/lib/service.js"),u),T.exports=Object.assign(b,T.exports)},"../feathers/lib/service.js":function(T,u,O){function v(m,k){var A=Object.keys(m);if(Object.getOwnPropertySymbols){var P=Object.getOwnPropertySymbols(m);k&&(P=P.filter(function(E){return Object.getOwnPropertyDescriptor(m,E).enumerable})),A.push.apply(A,P)}return A}function j(m){for(var k=1;k<arguments.length;k++){var A=arguments[k]!=null?arguments[k]:{};k%2?v(Object(A),!0).forEach(function(P){w(m,P,A[P])}):Object.getOwnPropertyDescriptors?Object.defineProperties(m,Object.getOwnPropertyDescriptors(A)):v(Object(A)).forEach(function(P){Object.defineProperty(m,P,Object.getOwnPropertyDescriptor(A,P))})}return m}function w(m,k,A){return k in m?Object.defineProperty(m,k,{value:A,enumerable:!0,configurable:!0,writable:!0}):m[k]=A,m}Object.defineProperty(u,"__esModule",{value:!0}),u.wrapService=u.getServiceOptions=u.getHookMethods=u.protectedMethods=u.defaultEventMap=u.defaultServiceMethods=u.defaultServiceArguments=u.SERVICE=void 0;var y=O("../feathers/lib/dependencies.js");u.SERVICE=(0,y.createSymbol)("@feathersjs/service"),u.defaultServiceArguments={find:["params"],get:["id","params"],create:["data","params"],update:["id","data","params"],patch:["id","data","params"],remove:["id","params"]},u.defaultServiceMethods=Object.keys(u.defaultServiceArguments),u.defaultEventMap={create:"created",update:"updated",patch:"patched",remove:"removed"},u.protectedMethods=Object.keys(Object.prototype).concat(Object.keys(y.EventEmitter.prototype)).concat(["before","after","error","hooks","setup","publish"]);function S(m,k){var A=k.methods;return u.defaultServiceMethods.filter(function(P){return typeof m[P]=="function"&&!A.includes(P)}).concat(A)}u.getHookMethods=S;function p(m){var k=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},A=m[u.SERVICE];if(A)return A;var P=k.methods,E=P===void 0?u.defaultServiceMethods.filter(function(c){return typeof m[c]=="function"}):P,g=k.events,a=g===void 0?m.events||[]:g,s=k.serviceEvents,o=s===void 0?Object.values(u.defaultEventMap).concat(a):s;return j(j({},k),{},{events:a,methods:E,serviceEvents:o})}u.getServiceOptions=p;function b(m,k,A){if(k[u.SERVICE])return k;var P=Object.create(k),E=p(k,A);if(Object.keys(E.methods).length===0&&typeof k.setup!="function")throw new Error("Invalid service object passed for path `".concat(m,"`"));return Object.defineProperty(P,u.SERVICE,{value:E}),P}u.wrapService=b},"../feathers/lib/version.js":function(T,u){Object.defineProperty(u,"__esModule",{value:!0}),u.default="development"},"../rest-client/lib/axios.js":function(T,u,O){function v(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(o){return typeof o}:v=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},v(a)}function j(a,s){if(!(a instanceof s))throw new TypeError("Cannot call a class as a function")}function w(a,s){for(var o=0;o<s.length;o++){var c=s[o];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}}function y(a,s,o){return s&&w(a.prototype,s),o&&w(a,o),a}function S(a,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(s&&s.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),s&&p(a,s)}function p(a,s){return p=Object.setPrototypeOf||function(c,d){return c.__proto__=d,c},p(a,s)}function b(a){var s=A();return function(){var c=P(a),d;if(s){var i=P(this).constructor;d=Reflect.construct(c,arguments,i)}else d=c.apply(this,arguments);return m(this,d)}}function m(a,s){if(s&&(v(s)==="object"||typeof s=="function"))return s;if(s!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return k(a)}function k(a){if(a===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function A(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}function P(a){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},P(a)}Object.defineProperty(u,"__esModule",{value:!0}),u.AxiosClient=void 0;var E=O("../rest-client/lib/base.js"),g=function(a){S(o,a);var s=b(o);function o(){return j(this,o),s.apply(this,arguments)}return y(o,[{key:"request",value:function(d,i){var e=Object.assign({url:d.url,method:d.method,data:d.body,headers:Object.assign({Accept:"application/json"},this.options.headers,d.headers)},i.connection);return this.connection.request(e).then(function(n){return n.data}).catch(function(n){var r=n.response||n;throw r instanceof Error?r:r.data||r})}}]),o}(E.Base);u.AxiosClient=g},"../rest-client/lib/base.js":function(T,u,O){function v(A,P){if(!(A instanceof P))throw new TypeError("Cannot call a class as a function")}function j(A,P){for(var E=0;E<P.length;E++){var g=P[E];g.enumerable=g.enumerable||!1,g.configurable=!0,"value"in g&&(g.writable=!0),Object.defineProperty(A,g.key,g)}}function w(A,P,E){return P&&j(A.prototype,P),E&&j(A,E),A}var y=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(u,"__esModule",{value:!0}),u.Base=void 0;var S=y(O("../../node_modules/qs/lib/index.js")),p=O("../errors/lib/index.js"),b=O("../commons/lib/index.js");function m(A){throw A.code==="ECONNREFUSED"?new p.Unavailable(A.message,b._.pick(A,"address","port","config")):(0,p.convert)(A)}var k=function(){function A(P){v(this,A),this.name=(0,b.stripSlashes)(P.name),this.options=P.options,this.connection=P.connection,this.base="".concat(P.base,"/").concat(this.name)}return w(A,[{key:"makeUrl",value:function(E,g){var a=this.base;return E=E||{},typeof g!="undefined"&&g!==null&&(a+="/".concat(encodeURIComponent(g))),a+this.getQuery(E)}},{key:"getQuery",value:function(E){if(Object.keys(E).length!==0){var g=S.default.stringify(E);return"?".concat(g)}return""}},{key:"methods",value:function(){for(var E=this,g=arguments.length,a=new Array(g),s=0;s<g;s++)a[s]=arguments[s];return a.forEach(function(o){E[o]=function(c){var d=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.request({body:c,url:this.makeUrl(d.query),method:"POST",headers:Object.assign({"Content-Type":"application/json","X-Service-Method":o},d.headers)},d).catch(m)}}),this}},{key:"find",value:function(){var E=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return this.request({url:this.makeUrl(E.query),method:"GET",headers:Object.assign({},E.headers)},E).catch(m)}},{key:"get",value:function(E){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return typeof E=="undefined"?Promise.reject(new Error("id for 'get' can not be undefined")):this.request({url:this.makeUrl(g.query,E),method:"GET",headers:Object.assign({},g.headers)},g).catch(m)}},{key:"create",value:function(E){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.request({url:this.makeUrl(g.query),body:E,method:"POST",headers:Object.assign({"Content-Type":"application/json"},g.headers)},g).catch(m)}},{key:"update",value:function(E,g){var a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return typeof E=="undefined"?Promise.reject(new Error("id for 'update' can not be undefined, only 'null' when updating multiple entries")):this.request({url:this.makeUrl(a.query,E),body:g,method:"PUT",headers:Object.assign({"Content-Type":"application/json"},a.headers)},a).catch(m)}},{key:"patch",value:function(E,g){var a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return typeof E=="undefined"?Promise.reject(new Error("id for 'patch' can not be undefined, only 'null' when updating multiple entries")):this.request({url:this.makeUrl(a.query,E),body:g,method:"PATCH",headers:Object.assign({"Content-Type":"application/json"},a.headers)},a).catch(m)}},{key:"remove",value:function(E){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return typeof E=="undefined"?Promise.reject(new Error("id for 'remove' can not be undefined, only 'null' when removing multiple entries")):this.request({url:this.makeUrl(g.query,E),method:"DELETE",headers:Object.assign({},g.headers)},g).catch(m)}}]),A}();u.Base=k},"../rest-client/lib/fetch.js":function(T,u,O){function v(s){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(c){return typeof c}:v=function(c){return c&&typeof Symbol=="function"&&c.constructor===Symbol&&c!==Symbol.prototype?"symbol":typeof c},v(s)}function j(s,o){if(!(s instanceof o))throw new TypeError("Cannot call a class as a function")}function w(s,o){for(var c=0;c<o.length;c++){var d=o[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(s,d.key,d)}}function y(s,o,c){return o&&w(s.prototype,o),c&&w(s,c),s}function S(s,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function");s.prototype=Object.create(o&&o.prototype,{constructor:{value:s,writable:!0,configurable:!0}}),o&&p(s,o)}function p(s,o){return p=Object.setPrototypeOf||function(d,i){return d.__proto__=i,d},p(s,o)}function b(s){var o=A();return function(){var d=P(s),i;if(o){var e=P(this).constructor;i=Reflect.construct(d,arguments,e)}else i=d.apply(this,arguments);return m(this,i)}}function m(s,o){if(o&&(v(o)==="object"||typeof o=="function"))return o;if(o!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return k(s)}function k(s){if(s===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return s}function A(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(s){return!1}}function P(s){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(c){return c.__proto__||Object.getPrototypeOf(c)},P(s)}Object.defineProperty(u,"__esModule",{value:!0}),u.FetchClient=void 0;var E=O("../errors/lib/index.js"),g=O("../rest-client/lib/base.js"),a=function(s){S(c,s);var o=b(c);function c(){return j(this,c),o.apply(this,arguments)}return y(c,[{key:"request",value:function(i,e){var n=Object.assign({},i,e.connection);return n.headers=Object.assign({Accept:"application/json"},this.options.headers,n.headers),i.body&&(n.body=JSON.stringify(i.body)),this.connection(i.url,n).then(this.checkStatus).then(function(r){return r.status===204?null:r.json()})}},{key:"checkStatus",value:function(i){return i.ok?i:i.json().catch(function(){var e=E.errors[i.status]||Error;return new e("JSON parsing error")}).then(function(e){throw e.response=i,e})}}]),c}(g.Base);u.FetchClient=a},"../rest-client/lib/index.js":function(T,u,O){Object.defineProperty(u,"__esModule",{value:!0}),u.SuperagentClient=u.FetchClient=u.AxiosClient=void 0;var v=O("../rest-client/lib/base.js"),j=O("../rest-client/lib/axios.js");Object.defineProperty(u,"AxiosClient",{enumerable:!0,get:function(){return j.AxiosClient}});var w=O("../rest-client/lib/fetch.js");Object.defineProperty(u,"FetchClient",{enumerable:!0,get:function(){return w.FetchClient}});var y=O("../rest-client/lib/superagent.js");Object.defineProperty(u,"SuperagentClient",{enumerable:!0,get:function(){return y.SuperagentClient}});var S={superagent:y.SuperagentClient,fetch:w.FetchClient,axios:j.AxiosClient};function p(){var b=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",m={Base:v.Base};return Object.keys(S).forEach(function(k){m[k]=function(A){var P=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},E=arguments.length>2&&arguments[2]!==void 0?arguments[2]:S[k];if(!A)throw new Error("".concat(k," has to be provided to feathers-rest"));typeof P=="function"&&(E=P,P={});var g=function(o){return new E({base:b,name:o,connection:A,options:P})},a=function(o){if(o.rest!==void 0)throw new Error("Only one default client provider can be configured");o.rest=A,o.defaultService=g};return a.Service=E,a.service=g,a}}),m}u.default=p,T.exports=Object.assign(p,T.exports)},"../rest-client/lib/superagent.js":function(T,u,O){function v(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?v=function(o){return typeof o}:v=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},v(a)}function j(a,s){if(!(a instanceof s))throw new TypeError("Cannot call a class as a function")}function w(a,s){for(var o=0;o<s.length;o++){var c=s[o];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}}function y(a,s,o){return s&&w(a.prototype,s),o&&w(a,o),a}function S(a,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(s&&s.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),s&&p(a,s)}function p(a,s){return p=Object.setPrototypeOf||function(c,d){return c.__proto__=d,c},p(a,s)}function b(a){var s=A();return function(){var c=P(a),d;if(s){var i=P(this).constructor;d=Reflect.construct(c,arguments,i)}else d=c.apply(this,arguments);return m(this,d)}}function m(a,s){if(s&&(v(s)==="object"||typeof s=="function"))return s;if(s!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return k(a)}function k(a){if(a===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function A(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}function P(a){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},P(a)}Object.defineProperty(u,"__esModule",{value:!0}),u.SuperagentClient=void 0;var E=O("../rest-client/lib/base.js"),g=function(a){S(o,a);var s=b(o);function o(){return j(this,o),s.apply(this,arguments)}return y(o,[{key:"request",value:function(d,i){var e=this.connection(d.method,d.url).set(this.options.headers||{}).set("Accept","application/json").set(i.connection||{}).set(d.headers||{}).type(d.type||"json");return new Promise(function(n,r){e.set(d.headers),d.body&&e.send(d.body),e.end(function(t,f){if(t){try{var l=t.response;t=JSON.parse(t.response.text),t.response=l}catch(h){}return r(t)}n(f&&f.body)})})}}]),o}(E.Base);u.SuperagentClient=g},"../socketio-client/lib/index.js":function(T,u,O){Object.defineProperty(u,"__esModule",{value:!0});var v=O("../transport-commons/client.js"),j=O("../feathers/lib/index.js");function w(y,S){if(!y)throw new Error("Socket.io connection needs to be provided");var p=function(k){var A=Object.values(j.defaultEventMap),P=Object.assign({},S,{events:A,name:k,connection:y,method:"emit"});return new v.Service(P)},b=function(k){if(k.io!==void 0)throw new Error("Only one default client provider can be configured");k.io=y,k.defaultService=p};return b.Service=v.Service,b.service=p,b}u.default=w,T.exports=Object.assign(w,T.exports)},"../transport-commons/client.js":function(T,u,O){T.exports=O("../transport-commons/lib/client.js")},"../transport-commons/lib/client.js":function(T,u,O){function v(P,E){if(!(P instanceof E))throw new TypeError("Cannot call a class as a function")}function j(P,E){for(var g=0;g<E.length;g++){var a=E[g];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(P,a.key,a)}}function w(P,E,g){return E&&j(P.prototype,E),g&&j(P,g),P}Object.defineProperty(u,"__esModule",{value:!0}),u.Service=void 0;var y=O("../errors/lib/index.js"),S=O("../commons/lib/index.js"),p=(0,S.createDebug)("@feathersjs/transport-commons/client"),b=["addListener","emit","listenerCount","listeners","on","once","prependListener","prependOnceListener","removeAllListeners","removeListener"],m=["eventNames","getMaxListeners","setMaxListeners"],k=function(E){m.forEach(function(g){E[g]=function(){var a;if(typeof this.connection[g]!="function")throw new Error("Can not call '".concat(g,"' on the client service connection"));return(a=this.connection)[g].apply(a,arguments)}}),b.forEach(function(g){E[g]=function(a){var s;if(typeof this.connection[g]!="function")throw new Error("Can not call '".concat(g,"' on the client service connection"));var o="".concat(this.path," ").concat(a);p("Calling emitter method ".concat(g," with ")+"namespaced event '".concat(o,"'"));for(var c=arguments.length,d=new Array(c>1?c-1:0),i=1;i<c;i++)d[i-1]=arguments[i];var e=(s=this.connection)[g].apply(s,[o].concat(d));return e===this.connection?this:e}})},A=function(){function P(E){v(this,P),this.events=E.events,this.path=E.name,this.connection=E.connection,this.method=E.method,k(this)}return w(P,[{key:"send",value:function(g){for(var a=this,s=arguments.length,o=new Array(s>1?s-1:0),c=1;c<s;c++)o[c-1]=arguments[c];return new Promise(function(d,i){var e;o.unshift(g,a.path),o.push(function(n,r){return n?i((0,y.convert)(n)):d(r)}),p("Sending socket.".concat(a.method),o),(e=a.connection)[a.method].apply(e,o)})}},{key:"methods",value:function(){for(var g=this,a=arguments.length,s=new Array(a),o=0;o<a;o++)s[o]=arguments[o];return s.forEach(function(c){g[c]=function(d){var i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send(c,d,i.query||{})}}),this}},{key:"find",value:function(){var g=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return this.send("find",g.query||{})}},{key:"get",value:function(g){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send("get",g,a.query||{})}},{key:"create",value:function(g){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send("create",g,a.query||{})}},{key:"update",value:function(g,a){var s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return this.send("update",g,a,s.query||{})}},{key:"patch",value:function(g,a){var s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return this.send("patch",g,a,s.query||{})}},{key:"remove",value:function(g){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return this.send("remove",g,a.query||{})}},{key:"off",value:function(g){for(var a=arguments.length,s=new Array(a>1?a-1:0),o=1;o<a;o++)s[o-1]=arguments[o];if(typeof this.connection.off=="function"){var c,d=(c=this.connection).off.apply(c,["".concat(this.path," ").concat(g)].concat(s));return d===this.connection?this:d}else if(s.length===0)return this.removeAllListeners(g);return this.removeListener.apply(this,[g].concat(s))}}]),P}();u.Service=A},"../../node_modules/call-bind/callBound.js":function(T,u,O){var v=O("../../node_modules/get-intrinsic/index.js"),j=O("../../node_modules/call-bind/index.js"),w=j(v("String.prototype.indexOf"));T.exports=function(S,p){var b=v(S,!!p);return typeof b=="function"&&w(S,".prototype.")>-1?j(b):b}},"../../node_modules/call-bind/index.js":function(T,u,O){var v=O("../../node_modules/function-bind/index.js"),j=O("../../node_modules/get-intrinsic/index.js"),w=j("%Function.prototype.apply%"),y=j("%Function.prototype.call%"),S=j("%Reflect.apply%",!0)||v.call(y,w),p=j("%Object.getOwnPropertyDescriptor%",!0),b=j("%Object.defineProperty%",!0),m=j("%Math.max%");if(b)try{b({},"a",{value:1})}catch(A){b=null}T.exports=function(P){var E=S(v,y,arguments);if(p&&b){var g=p(E,"length");g.configurable&&b(E,"length",{value:1+m(0,P.length-(arguments.length-1))})}return E};var k=function(){return S(v,w,arguments)};b?b(T.exports,"apply",{value:k}):T.exports.apply=k},"../../node_modules/events/events.js":function(T){var u=typeof Reflect=="object"?Reflect:null,O=u&&typeof u.apply=="function"?u.apply:function(e,n,r){return Function.prototype.apply.call(e,n,r)},v;u&&typeof u.ownKeys=="function"?v=u.ownKeys:Object.getOwnPropertySymbols?v=function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:v=function(e){return Object.getOwnPropertyNames(e)};function j(i){console&&console.warn&&console.warn(i)}var w=Number.isNaN||function(e){return e!==e};function y(){y.init.call(this)}T.exports=y,T.exports.once=o,y.EventEmitter=y,y.prototype._events=void 0,y.prototype._eventsCount=0,y.prototype._maxListeners=void 0;var S=10;function p(i){if(typeof i!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i)}Object.defineProperty(y,"defaultMaxListeners",{enumerable:!0,get:function(){return S},set:function(i){if(typeof i!="number"||i<0||w(i))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+i+".");S=i}}),y.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},y.prototype.setMaxListeners=function(e){if(typeof e!="number"||e<0||w(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this};function b(i){return i._maxListeners===void 0?y.defaultMaxListeners:i._maxListeners}y.prototype.getMaxListeners=function(){return b(this)},y.prototype.emit=function(e){for(var n=[],r=1;r<arguments.length;r++)n.push(arguments[r]);var t=e==="error",f=this._events;if(f!==void 0)t=t&&f.error===void 0;else if(!t)return!1;if(t){var l;if(n.length>0&&(l=n[0]),l instanceof Error)throw l;var h=new Error("Unhandled error."+(l?" ("+l.message+")":""));throw h.context=l,h}var _=f[e];if(_===void 0)return!1;if(typeof _=="function")O(_,this,n);else for(var M=_.length,R=g(_,M),r=0;r<M;++r)O(R[r],this,n);return!0};function m(i,e,n,r){var t,f,l;if(p(n),f=i._events,f===void 0?(f=i._events=Object.create(null),i._eventsCount=0):(f.newListener!==void 0&&(i.emit("newListener",e,n.listener?n.listener:n),f=i._events),l=f[e]),l===void 0)l=f[e]=n,++i._eventsCount;else if(typeof l=="function"?l=f[e]=r?[n,l]:[l,n]:r?l.unshift(n):l.push(n),t=b(i),t>0&&l.length>t&&!l.warned){l.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+l.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=i,h.type=e,h.count=l.length,j(h)}return i}y.prototype.addListener=function(e,n){return m(this,e,n,!1)},y.prototype.on=y.prototype.addListener,y.prototype.prependListener=function(e,n){return m(this,e,n,!0)};function k(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function A(i,e,n){var r={fired:!1,wrapFn:void 0,target:i,type:e,listener:n},t=k.bind(r);return t.listener=n,r.wrapFn=t,t}y.prototype.once=function(e,n){return p(n),this.on(e,A(this,e,n)),this},y.prototype.prependOnceListener=function(e,n){return p(n),this.prependListener(e,A(this,e,n)),this},y.prototype.removeListener=function(e,n){var r,t,f,l,h;if(p(n),t=this._events,t===void 0)return this;if(r=t[e],r===void 0)return this;if(r===n||r.listener===n)--this._eventsCount==0?this._events=Object.create(null):(delete t[e],t.removeListener&&this.emit("removeListener",e,r.listener||n));else if(typeof r!="function"){for(f=-1,l=r.length-1;l>=0;l--)if(r[l]===n||r[l].listener===n){h=r[l].listener,f=l;break}if(f<0)return this;f===0?r.shift():a(r,f),r.length===1&&(t[e]=r[0]),t.removeListener!==void 0&&this.emit("removeListener",e,h||n)}return this},y.prototype.off=y.prototype.removeListener,y.prototype.removeAllListeners=function(e){var n,r,t;if(r=this._events,r===void 0)return this;if(r.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):r[e]!==void 0&&(--this._eventsCount==0?this._events=Object.create(null):delete r[e]),this;if(arguments.length===0){var f=Object.keys(r),l;for(t=0;t<f.length;++t)l=f[t],l!=="removeListener"&&this.removeAllListeners(l);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(n=r[e],typeof n=="function")this.removeListener(e,n);else if(n!==void 0)for(t=n.length-1;t>=0;t--)this.removeListener(e,n[t]);return this};function P(i,e,n){var r=i._events;if(r===void 0)return[];var t=r[e];return t===void 0?[]:typeof t=="function"?n?[t.listener||t]:[t]:n?s(t):g(t,t.length)}y.prototype.listeners=function(e){return P(this,e,!0)},y.prototype.rawListeners=function(e){return P(this,e,!1)},y.listenerCount=function(i,e){return typeof i.listenerCount=="function"?i.listenerCount(e):E.call(i,e)},y.prototype.listenerCount=E;function E(i){var e=this._events;if(e!==void 0){var n=e[i];if(typeof n=="function")return 1;if(n!==void 0)return n.length}return 0}y.prototype.eventNames=function(){return this._eventsCount>0?v(this._events):[]};function g(i,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=i[r];return n}function a(i,e){for(;e+1<i.length;e++)i[e]=i[e+1];i.pop()}function s(i){for(var e=new Array(i.length),n=0;n<e.length;++n)e[n]=i[n].listener||i[n];return e}function o(i,e){return new Promise(function(n,r){function t(l){i.removeListener(e,f),r(l)}function f(){typeof i.removeListener=="function"&&i.removeListener("error",t),n([].slice.call(arguments))}d(i,e,f,{once:!0}),e!=="error"&&c(i,t,{once:!0})})}function c(i,e,n){typeof i.on=="function"&&d(i,"error",e,n)}function d(i,e,n,r){if(typeof i.on=="function")r.once?i.once(e,n):i.on(e,n);else if(typeof i.addEventListener=="function")i.addEventListener(e,function t(f){r.once&&i.removeEventListener(e,t),n(f)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof i)}},"../../node_modules/function-bind/implementation.js":function(T){var u="Function.prototype.bind called on incompatible ",O=Array.prototype.slice,v=Object.prototype.toString,j="[object Function]";T.exports=function(y){var S=this;if(typeof S!="function"||v.call(S)!==j)throw new TypeError(u+S);for(var p=O.call(arguments,1),b,m=function(){if(this instanceof b){var g=S.apply(this,p.concat(O.call(arguments)));return Object(g)===g?g:this}else return S.apply(y,p.concat(O.call(arguments)))},k=Math.max(0,S.length-p.length),A=[],P=0;P<k;P++)A.push("$"+P);if(b=Function("binder","return function ("+A.join(",")+"){ return binder.apply(this,arguments); }")(m),S.prototype){var E=function(){};E.prototype=S.prototype,b.prototype=new E,E.prototype=null}return b}},"../../node_modules/function-bind/index.js":function(T,u,O){var v=O("../../node_modules/function-bind/implementation.js");T.exports=Function.prototype.bind||v},"../../node_modules/get-intrinsic/index.js":function(T,u,O){var v,j=SyntaxError,w=Function,y=TypeError,S=function(h){try{return w('"use strict"; return ('+h+").constructor;")()}catch(_){}},p=Object.getOwnPropertyDescriptor;if(p)try{p({},"")}catch(h){p=null}var b=function(){throw new y},m=p?function(){try{return arguments.callee,b}catch(h){try{return p(arguments,"callee").get}catch(_){return b}}}():b,k=O("../../node_modules/has-symbols/index.js")(),A=Object.getPrototypeOf||function(h){return h.__proto__},P={},E=typeof Uint8Array=="undefined"?v:A(Uint8Array),g={"%AggregateError%":typeof AggregateError=="undefined"?v:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer=="undefined"?v:ArrayBuffer,"%ArrayIteratorPrototype%":k?A([][Symbol.iterator]()):v,"%AsyncFromSyncIteratorPrototype%":v,"%AsyncFunction%":P,"%AsyncGenerator%":P,"%AsyncGeneratorFunction%":P,"%AsyncIteratorPrototype%":P,"%Atomics%":typeof Atomics=="undefined"?v:Atomics,"%BigInt%":typeof BigInt=="undefined"?v:BigInt,"%Boolean%":Boolean,"%DataView%":typeof DataView=="undefined"?v:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array=="undefined"?v:Float32Array,"%Float64Array%":typeof Float64Array=="undefined"?v:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry=="undefined"?v:FinalizationRegistry,"%Function%":w,"%GeneratorFunction%":P,"%Int8Array%":typeof Int8Array=="undefined"?v:Int8Array,"%Int16Array%":typeof Int16Array=="undefined"?v:Int16Array,"%Int32Array%":typeof Int32Array=="undefined"?v:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":k?A(A([][Symbol.iterator]())):v,"%JSON%":typeof JSON=="object"?JSON:v,"%Map%":typeof Map=="undefined"?v:Map,"%MapIteratorPrototype%":typeof Map=="undefined"||!k?v:A(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise=="undefined"?v:Promise,"%Proxy%":typeof Proxy=="undefined"?v:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect=="undefined"?v:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set=="undefined"?v:Set,"%SetIteratorPrototype%":typeof Set=="undefined"||!k?v:A(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer=="undefined"?v:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":k?A(""[Symbol.iterator]()):v,"%Symbol%":k?Symbol:v,"%SyntaxError%":j,"%ThrowTypeError%":m,"%TypedArray%":E,"%TypeError%":y,"%Uint8Array%":typeof Uint8Array=="undefined"?v:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray=="undefined"?v:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array=="undefined"?v:Uint16Array,"%Uint32Array%":typeof Uint32Array=="undefined"?v:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap=="undefined"?v:WeakMap,"%WeakRef%":typeof WeakRef=="undefined"?v:WeakRef,"%WeakSet%":typeof WeakSet=="undefined"?v:WeakSet},a=function h(_){var M;if(_==="%AsyncFunction%")M=S("async function () {}");else if(_==="%GeneratorFunction%")M=S("function* () {}");else if(_==="%AsyncGeneratorFunction%")M=S("async function* () {}");else if(_==="%AsyncGenerator%"){var R=h("%AsyncGeneratorFunction%");R&&(M=R.prototype)}else if(_==="%AsyncIteratorPrototype%"){var B=h("%AsyncGenerator%");B&&(M=A(B.prototype))}return g[_]=M,M},s={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},o=O("../../node_modules/function-bind/index.js"),c=O("../../node_modules/has/src/index.js"),d=o.call(Function.call,Array.prototype.concat),i=o.call(Function.apply,Array.prototype.splice),e=o.call(Function.call,String.prototype.replace),n=o.call(Function.call,String.prototype.slice),r=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,t=/\\(\\)?/g,f=function(_){var M=n(_,0,1),R=n(_,-1);if(M==="%"&&R!=="%")throw new j("invalid intrinsic syntax, expected closing `%`");if(R==="%"&&M!=="%")throw new j("invalid intrinsic syntax, expected opening `%`");var B=[];return e(_,r,function(F,V,z,K){B[B.length]=z?e(K,t,"$1"):V||F}),B},l=function(_,M){var R=_,B;if(c(s,R)&&(B=s[R],R="%"+B[0]+"%"),c(g,R)){var F=g[R];if(F===P&&(F=a(R)),typeof F=="undefined"&&!M)throw new y("intrinsic "+_+" exists, but is not available. Please file an issue!");return{alias:B,name:R,value:F}}throw new j("intrinsic "+_+" does not exist!")};T.exports=function(_,M){if(typeof _!="string"||_.length===0)throw new y("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof M!="boolean")throw new y('"allowMissing" argument must be a boolean');var R=f(_),B=R.length>0?R[0]:"",F=l("%"+B+"%",M),V=F.name,z=F.value,K=!1,q=F.alias;q&&(B=q[0],i(R,d([0,1],q)));for(var L=1,U=!0;L<R.length;L+=1){var N=R[L],W=n(N,0,1),$=n(N,-1);if((W==='"'||W==="'"||W==="`"||$==='"'||$==="'"||$==="`")&&W!==$)throw new j("property names with quotes must have matching quotes");if((N==="constructor"||!U)&&(K=!0),B+="."+N,V="%"+B+"%",c(g,V))z=g[V];else if(z!=null){if(!(N in z)){if(!M)throw new y("base intrinsic for "+_+" exists, but the property is not available.");return}if(p&&L+1>=R.length){var J=p(z,N);U=!!J,U&&"get"in J&&!("originalValue"in J.get)?z=J.get:z=z[N]}else U=c(z,N),z=z[N];U&&!K&&(g[V]=z)}}return z}},"../../node_modules/has-symbols/index.js":function(T,u,O){var v=typeof Symbol!="undefined"&&Symbol,j=O("../../node_modules/has-symbols/shams.js");T.exports=function(){return typeof v!="function"||typeof Symbol!="function"||typeof v("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:j()}},"../../node_modules/has-symbols/shams.js":function(T){T.exports=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var O={},v=Symbol("test"),j=Object(v);if(typeof v=="string"||Object.prototype.toString.call(v)!=="[object Symbol]"||Object.prototype.toString.call(j)!=="[object Symbol]")return!1;var w=42;O[v]=w;for(v in O)return!1;if(typeof Object.keys=="function"&&Object.keys(O).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(O).length!==0)return!1;var y=Object.getOwnPropertySymbols(O);if(y.length!==1||y[0]!==v||!Object.prototype.propertyIsEnumerable.call(O,v))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var S=Object.getOwnPropertyDescriptor(O,v);if(S.value!==w||S.enumerable!==!0)return!1}return!0}},"../../node_modules/has/src/index.js":function(T,u,O){var v=O("../../node_modules/function-bind/index.js");T.exports=v.call(Function.call,Object.prototype.hasOwnProperty)},"../../node_modules/object-inspect/index.js":function(T,u,O){var v=typeof Map=="function"&&Map.prototype,j=Object.getOwnPropertyDescriptor&&v?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,w=v&&j&&typeof j.get=="function"?j.get:null,y=v&&Map.prototype.forEach,S=typeof Set=="function"&&Set.prototype,p=Object.getOwnPropertyDescriptor&&S?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,b=S&&p&&typeof p.get=="function"?p.get:null,m=S&&Set.prototype.forEach,k=typeof WeakMap=="function"&&WeakMap.prototype,A=k?WeakMap.prototype.has:null,P=typeof WeakSet=="function"&&WeakSet.prototype,E=P?WeakSet.prototype.has:null,g=typeof WeakRef=="function"&&WeakRef.prototype,a=g?WeakRef.prototype.deref:null,s=Boolean.prototype.valueOf,o=Object.prototype.toString,c=Function.prototype.toString,d=String.prototype.match,i=typeof BigInt=="function"?BigInt.prototype.valueOf:null,e=Object.getOwnPropertySymbols,n=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Symbol.prototype.toString:null,r=typeof Symbol=="function"&&typeof Symbol.iterator=="object",t=Object.prototype.propertyIsEnumerable,f=(typeof Reflect=="function"?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(D){return D.__proto__}:null),l=O("?c95a").custom,h=l&&U(l)?l:null,_=typeof Symbol=="function"&&typeof Symbol.toStringTag!="undefined"?Symbol.toStringTag:null;T.exports=function D(x,Y,Q,Z){var X=Y||{};if($(X,"quoteStyle")&&X.quoteStyle!=="single"&&X.quoteStyle!=="double")throw new TypeError('option "quoteStyle" must be "single" or "double"');if($(X,"maxStringLength")&&(typeof X.maxStringLength=="number"?X.maxStringLength<0&&X.maxStringLength!==1/0:X.maxStringLength!==null))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var ae=$(X,"customInspect")?X.customInspect:!0;if(typeof ae!="boolean"&&ae!=="symbol")throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if($(X,"indent")&&X.indent!==null&&X.indent!=="	"&&!(parseInt(X.indent,10)===X.indent&&X.indent>0))throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');if(typeof x=="undefined")return"undefined";if(x===null)return"null";if(typeof x=="boolean")return x?"true":"false";if(typeof x=="string")return he(x,X);if(typeof x=="number")return x===0?1/0/x>0?"0":"-0":String(x);if(typeof x=="bigint")return String(x)+"n";var ue=typeof X.depth=="undefined"?5:X.depth;if(typeof Q=="undefined"&&(Q=0),Q>=ue&&ue>0&&typeof x=="object")return B(x)?"[Array]":"[Object]";var ee=Ge(X,Q);if(typeof Z=="undefined")Z=[];else if(re(Z,x)>=0)return"[Circular]";function te(ce,me,qe){if(me&&(Z=Z.slice(),Z.push(me)),qe){var Le={depth:X.depth};return $(X,"quoteStyle")&&(Le.quoteStyle=X.quoteStyle),D(ce,Le,Q+1,Z)}return D(ce,X,Q+1,Z)}if(typeof x=="function"){var Ce=oe(x),Me=ye(x,te);return"[Function"+(Ce?": "+Ce:" (anonymous)")+"]"+(Me.length>0?" { "+Me.join(", ")+" }":"")}if(U(x)){var Ie=r?String(x).replace(/^(Symbol\(.*\))_[^)]*$/,"$1"):n.call(x);return typeof x=="object"&&!r?pe(Ie):Ie}if(_e(x)){for(var de="<"+String(x.nodeName).toLowerCase(),Se=x.attributes||[],ve=0;ve<Se.length;ve++)de+=" "+Se[ve].name+"="+M(R(Se[ve].value),"double",X);return de+=">",x.childNodes&&x.childNodes.length&&(de+="..."),de+="</"+String(x.nodeName).toLowerCase()+">",de}if(B(x)){if(x.length===0)return"[]";var Ee=ye(x,te);return ee&&!ze(Ee)?"["+we(Ee,ee)+"]":"[ "+Ee.join(", ")+" ]"}if(z(x)){var Ne=ye(x,te);return Ne.length===0?"["+String(x)+"]":"{ ["+String(x)+"] "+Ne.join(", ")+" }"}if(typeof x=="object"&&ae){if(h&&typeof x[h]=="function")return x[h]();if(ae!=="symbol"&&typeof x.inspect=="function")return x.inspect()}if(ie(x)){var Fe=[];return y.call(x,function(ce,me){Fe.push(te(me,x,!0)+" => "+te(ce,x))}),Te("Map",w.call(x),Fe,ee)}if(le(x)){var De=[];return m.call(x,function(ce){De.push(te(ce,x))}),Te("Set",b.call(x),De,ee)}if(ne(x))return Oe("WeakMap");if(be(x))return Oe("WeakSet");if(se(x))return Oe("WeakRef");if(q(x))return pe(te(Number(x)));if(N(x))return pe(te(i.call(x)));if(L(x))return pe(s.call(x));if(K(x))return pe(te(String(x)));if(!F(x)&&!V(x)){var Pe=ye(x,te),Be=f?f(x)===Object.prototype:x instanceof Object||x.constructor===Object,je=x instanceof Object?"":"null prototype",xe=!Be&&_&&Object(x)===x&&_ in x?J(x).slice(8,-1):je?"Object":"",Ke=Be||typeof x.constructor!="function"?"":x.constructor.name?x.constructor.name+" ":"",ke=Ke+(xe||je?"["+[].concat(xe||[],je||[]).join(": ")+"] ":"");return Pe.length===0?ke+"{}":ee?ke+"{"+we(Pe,ee)+"}":ke+"{ "+Pe.join(", ")+" }"}return String(x)};function M(D,x,Y){var Q=(Y.quoteStyle||x)==="double"?'"':"'";return Q+D+Q}function R(D){return String(D).replace(/"/g,"&quot;")}function B(D){return J(D)==="[object Array]"&&(!_||!(typeof D=="object"&&_ in D))}function F(D){return J(D)==="[object Date]"&&(!_||!(typeof D=="object"&&_ in D))}function V(D){return J(D)==="[object RegExp]"&&(!_||!(typeof D=="object"&&_ in D))}function z(D){return J(D)==="[object Error]"&&(!_||!(typeof D=="object"&&_ in D))}function K(D){return J(D)==="[object String]"&&(!_||!(typeof D=="object"&&_ in D))}function q(D){return J(D)==="[object Number]"&&(!_||!(typeof D=="object"&&_ in D))}function L(D){return J(D)==="[object Boolean]"&&(!_||!(typeof D=="object"&&_ in D))}function U(D){if(r)return D&&typeof D=="object"&&D instanceof Symbol;if(typeof D=="symbol")return!0;if(!D||typeof D!="object"||!n)return!1;try{return n.call(D),!0}catch(x){}return!1}function N(D){if(!D||typeof D!="object"||!i)return!1;try{return i.call(D),!0}catch(x){}return!1}var W=Object.prototype.hasOwnProperty||function(D){return D in this};function $(D,x){return W.call(D,x)}function J(D){return o.call(D)}function oe(D){if(D.name)return D.name;var x=d.call(c.call(D),/^function\s*([\w$]+)/);return x?x[1]:null}function re(D,x){if(D.indexOf)return D.indexOf(x);for(var Y=0,Q=D.length;Y<Q;Y++)if(D[Y]===x)return Y;return-1}function ie(D){if(!w||!D||typeof D!="object")return!1;try{w.call(D);try{b.call(D)}catch(x){return!0}return D instanceof Map}catch(x){}return!1}function ne(D){if(!A||!D||typeof D!="object")return!1;try{A.call(D,A);try{E.call(D,E)}catch(x){return!0}return D instanceof WeakMap}catch(x){}return!1}function se(D){if(!a||!D||typeof D!="object")return!1;try{return a.call(D),!0}catch(x){}return!1}function le(D){if(!b||!D||typeof D!="object")return!1;try{b.call(D);try{w.call(D)}catch(x){return!0}return D instanceof Set}catch(x){}return!1}function be(D){if(!E||!D||typeof D!="object")return!1;try{E.call(D,E);try{A.call(D,A)}catch(x){return!0}return D instanceof WeakSet}catch(x){}return!1}function _e(D){return!D||typeof D!="object"?!1:typeof HTMLElement!="undefined"&&D instanceof HTMLElement?!0:typeof D.nodeName=="string"&&typeof D.getAttribute=="function"}function he(D,x){if(D.length>x.maxStringLength){var Y=D.length-x.maxStringLength,Q="... "+Y+" more character"+(Y>1?"s":"");return he(D.slice(0,x.maxStringLength),x)+Q}var Z=D.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,$e);return M(Z,"single",x)}function $e(D){var x=D.charCodeAt(0),Y={8:"b",9:"t",10:"n",12:"f",13:"r"}[x];return Y?"\\"+Y:"\\x"+(x<16?"0":"")+x.toString(16).toUpperCase()}function pe(D){return"Object("+D+")"}function Oe(D){return D+" { ? }"}function Te(D,x,Y,Q){var Z=Q?we(Y,Q):Y.join(", ");return D+" ("+x+") {"+Z+"}"}function ze(D){for(var x=0;x<D.length;x++)if(re(D[x],`
`)>=0)return!1;return!0}function Ge(D,x){var Y;if(D.indent==="	")Y="	";else if(typeof D.indent=="number"&&D.indent>0)Y=Array(D.indent+1).join(" ");else return null;return{base:Y,prev:Array(x+1).join(Y)}}function we(D,x){if(D.length===0)return"";var Y=`
`+x.prev+x.base;return Y+D.join(","+Y)+`
`+x.prev}function ye(D,x){var Y=B(D),Q=[];if(Y){Q.length=D.length;for(var Z=0;Z<D.length;Z++)Q[Z]=$(D,Z)?x(D[Z],D):""}var X=typeof e=="function"?e(D):[],ae;if(r){ae={};for(var ue=0;ue<X.length;ue++)ae["$"+X[ue]]=X[ue]}for(var ee in D)!$(D,ee)||Y&&String(Number(ee))===ee&&ee<D.length||r&&ae["$"+ee]instanceof Symbol||(/[^\w$]/.test(ee)?Q.push(x(ee,D)+": "+x(D[ee],D)):Q.push(ee+": "+x(D[ee],D)));if(typeof e=="function")for(var te=0;te<X.length;te++)t.call(D,X[te])&&Q.push("["+x(X[te])+"]: "+x(D[X[te]],D));return Q}},"../../node_modules/qs/lib/formats.js":function(T){var u=String.prototype.replace,O=/%20/g,v={RFC1738:"RFC1738",RFC3986:"RFC3986"};T.exports={default:v.RFC3986,formatters:{RFC1738:function(j){return u.call(j,O,"+")},RFC3986:function(j){return String(j)}},RFC1738:v.RFC1738,RFC3986:v.RFC3986}},"../../node_modules/qs/lib/index.js":function(T,u,O){var v=O("../../node_modules/qs/lib/stringify.js"),j=O("../../node_modules/qs/lib/parse.js"),w=O("../../node_modules/qs/lib/formats.js");T.exports={formats:w,parse:j,stringify:v}},"../../node_modules/qs/lib/parse.js":function(T,u,O){var v=O("../../node_modules/qs/lib/utils.js"),j=Object.prototype.hasOwnProperty,w=Array.isArray,y={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:v.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},S=function(g){return g.replace(/&#(\d+);/g,function(a,s){return String.fromCharCode(parseInt(s,10))})},p=function(g,a){return g&&typeof g=="string"&&a.comma&&g.indexOf(",")>-1?g.split(","):g},b="utf8=%26%2310003%3B",m="utf8=%E2%9C%93",k=function(a,s){var o={},c=s.ignoreQueryPrefix?a.replace(/^\?/,""):a,d=s.parameterLimit===1/0?void 0:s.parameterLimit,i=c.split(s.delimiter,d),e=-1,n,r=s.charset;if(s.charsetSentinel)for(n=0;n<i.length;++n)i[n].indexOf("utf8=")===0&&(i[n]===m?r="utf-8":i[n]===b&&(r="iso-8859-1"),e=n,n=i.length);for(n=0;n<i.length;++n)if(n!==e){var t=i[n],f=t.indexOf("]="),l=f===-1?t.indexOf("="):f+1,h,_;l===-1?(h=s.decoder(t,y.decoder,r,"key"),_=s.strictNullHandling?null:""):(h=s.decoder(t.slice(0,l),y.decoder,r,"key"),_=v.maybeMap(p(t.slice(l+1),s),function(M){return s.decoder(M,y.decoder,r,"value")})),_&&s.interpretNumericEntities&&r==="iso-8859-1"&&(_=S(_)),t.indexOf("[]=")>-1&&(_=w(_)?[_]:_),j.call(o,h)?o[h]=v.combine(o[h],_):o[h]=_}return o},A=function(g,a,s,o){for(var c=o?a:p(a,s),d=g.length-1;d>=0;--d){var i,e=g[d];if(e==="[]"&&s.parseArrays)i=[].concat(c);else{i=s.plainObjects?Object.create(null):{};var n=e.charAt(0)==="["&&e.charAt(e.length-1)==="]"?e.slice(1,-1):e,r=parseInt(n,10);!s.parseArrays&&n===""?i={0:c}:!isNaN(r)&&e!==n&&String(r)===n&&r>=0&&s.parseArrays&&r<=s.arrayLimit?(i=[],i[r]=c):i[n]=c}c=i}return c},P=function(a,s,o,c){if(!!a){var d=o.allowDots?a.replace(/\.([^.[]+)/g,"[$1]"):a,i=/(\[[^[\]]*])/,e=/(\[[^[\]]*])/g,n=o.depth>0&&i.exec(d),r=n?d.slice(0,n.index):d,t=[];if(r){if(!o.plainObjects&&j.call(Object.prototype,r)&&!o.allowPrototypes)return;t.push(r)}for(var f=0;o.depth>0&&(n=e.exec(d))!==null&&f<o.depth;){if(f+=1,!o.plainObjects&&j.call(Object.prototype,n[1].slice(1,-1))&&!o.allowPrototypes)return;t.push(n[1])}return n&&t.push("["+d.slice(n.index)+"]"),A(t,s,o,c)}},E=function(a){if(!a)return y;if(a.decoder!==null&&a.decoder!==void 0&&typeof a.decoder!="function")throw new TypeError("Decoder has to be a function.");if(typeof a.charset!="undefined"&&a.charset!=="utf-8"&&a.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var s=typeof a.charset=="undefined"?y.charset:a.charset;return{allowDots:typeof a.allowDots=="undefined"?y.allowDots:!!a.allowDots,allowPrototypes:typeof a.allowPrototypes=="boolean"?a.allowPrototypes:y.allowPrototypes,allowSparse:typeof a.allowSparse=="boolean"?a.allowSparse:y.allowSparse,arrayLimit:typeof a.arrayLimit=="number"?a.arrayLimit:y.arrayLimit,charset:s,charsetSentinel:typeof a.charsetSentinel=="boolean"?a.charsetSentinel:y.charsetSentinel,comma:typeof a.comma=="boolean"?a.comma:y.comma,decoder:typeof a.decoder=="function"?a.decoder:y.decoder,delimiter:typeof a.delimiter=="string"||v.isRegExp(a.delimiter)?a.delimiter:y.delimiter,depth:typeof a.depth=="number"||a.depth===!1?+a.depth:y.depth,ignoreQueryPrefix:a.ignoreQueryPrefix===!0,interpretNumericEntities:typeof a.interpretNumericEntities=="boolean"?a.interpretNumericEntities:y.interpretNumericEntities,parameterLimit:typeof a.parameterLimit=="number"?a.parameterLimit:y.parameterLimit,parseArrays:a.parseArrays!==!1,plainObjects:typeof a.plainObjects=="boolean"?a.plainObjects:y.plainObjects,strictNullHandling:typeof a.strictNullHandling=="boolean"?a.strictNullHandling:y.strictNullHandling}};T.exports=function(g,a){var s=E(a);if(g===""||g===null||typeof g=="undefined")return s.plainObjects?Object.create(null):{};for(var o=typeof g=="string"?k(g,s):g,c=s.plainObjects?Object.create(null):{},d=Object.keys(o),i=0;i<d.length;++i){var e=d[i],n=P(e,o[e],s,typeof g=="string");c=v.merge(c,n,s)}return s.allowSparse===!0?c:v.compact(c)}},"../../node_modules/qs/lib/stringify.js":function(T,u,O){var v=O("../../node_modules/side-channel/index.js"),j=O("../../node_modules/qs/lib/utils.js"),w=O("../../node_modules/qs/lib/formats.js"),y=Object.prototype.hasOwnProperty,S={brackets:function(o){return o+"[]"},comma:"comma",indices:function(o,c){return o+"["+c+"]"},repeat:function(o){return o}},p=Array.isArray,b=Array.prototype.push,m=function(s,o){b.apply(s,p(o)?o:[o])},k=Date.prototype.toISOString,A=w.default,P={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:j.encode,encodeValuesOnly:!1,format:A,formatter:w.formatters[A],indices:!1,serializeDate:function(o){return k.call(o)},skipNulls:!1,strictNullHandling:!1},E=function(o){return typeof o=="string"||typeof o=="number"||typeof o=="boolean"||typeof o=="symbol"||typeof o=="bigint"},g=function s(o,c,d,i,e,n,r,t,f,l,h,_,M,R,B){var F=o;if(B.has(o))throw new RangeError("Cyclic object value");if(typeof r=="function"?F=r(c,F):F instanceof Date?F=l(F):d==="comma"&&p(F)&&(F=j.maybeMap(F,function(J){return J instanceof Date?l(J):J})),F===null){if(i)return n&&!M?n(c,P.encoder,R,"key",h):c;F=""}if(E(F)||j.isBuffer(F)){if(n){var V=M?c:n(c,P.encoder,R,"key",h);return[_(V)+"="+_(n(F,P.encoder,R,"value",h))]}return[_(c)+"="+_(String(F))]}var z=[];if(typeof F=="undefined")return z;var K;if(d==="comma"&&p(F))K=[{value:F.length>0?F.join(",")||null:void 0}];else if(p(r))K=r;else{var q=Object.keys(F);K=t?q.sort(t):q}for(var L=0;L<K.length;++L){var U=K[L],N=typeof U=="object"&&U.value!==void 0?U.value:F[U];if(!(e&&N===null)){var W=p(F)?typeof d=="function"?d(c,U):c:c+(f?"."+U:"["+U+"]");B.set(o,!0);var $=v();m(z,s(N,W,d,i,e,n,r,t,f,l,h,_,M,R,$))}}return z},a=function(o){if(!o)return P;if(o.encoder!==null&&o.encoder!==void 0&&typeof o.encoder!="function")throw new TypeError("Encoder has to be a function.");var c=o.charset||P.charset;if(typeof o.charset!="undefined"&&o.charset!=="utf-8"&&o.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var d=w.default;if(typeof o.format!="undefined"){if(!y.call(w.formatters,o.format))throw new TypeError("Unknown format option provided.");d=o.format}var i=w.formatters[d],e=P.filter;return(typeof o.filter=="function"||p(o.filter))&&(e=o.filter),{addQueryPrefix:typeof o.addQueryPrefix=="boolean"?o.addQueryPrefix:P.addQueryPrefix,allowDots:typeof o.allowDots=="undefined"?P.allowDots:!!o.allowDots,charset:c,charsetSentinel:typeof o.charsetSentinel=="boolean"?o.charsetSentinel:P.charsetSentinel,delimiter:typeof o.delimiter=="undefined"?P.delimiter:o.delimiter,encode:typeof o.encode=="boolean"?o.encode:P.encode,encoder:typeof o.encoder=="function"?o.encoder:P.encoder,encodeValuesOnly:typeof o.encodeValuesOnly=="boolean"?o.encodeValuesOnly:P.encodeValuesOnly,filter:e,format:d,formatter:i,serializeDate:typeof o.serializeDate=="function"?o.serializeDate:P.serializeDate,skipNulls:typeof o.skipNulls=="boolean"?o.skipNulls:P.skipNulls,sort:typeof o.sort=="function"?o.sort:null,strictNullHandling:typeof o.strictNullHandling=="boolean"?o.strictNullHandling:P.strictNullHandling}};T.exports=function(s,o){var c=s,d=a(o),i,e;typeof d.filter=="function"?(e=d.filter,c=e("",c)):p(d.filter)&&(e=d.filter,i=e);var n=[];if(typeof c!="object"||c===null)return"";var r;o&&o.arrayFormat in S?r=o.arrayFormat:o&&"indices"in o?r=o.indices?"indices":"repeat":r="indices";var t=S[r];i||(i=Object.keys(c)),d.sort&&i.sort(d.sort);for(var f=v(),l=0;l<i.length;++l){var h=i[l];d.skipNulls&&c[h]===null||m(n,g(c[h],h,t,d.strictNullHandling,d.skipNulls,d.encode?d.encoder:null,d.filter,d.sort,d.allowDots,d.serializeDate,d.format,d.formatter,d.encodeValuesOnly,d.charset,f))}var _=n.join(d.delimiter),M=d.addQueryPrefix===!0?"?":"";return d.charsetSentinel&&(d.charset==="iso-8859-1"?M+="utf8=%26%2310003%3B&":M+="utf8=%E2%9C%93&"),_.length>0?M+_:""}},"../../node_modules/qs/lib/utils.js":function(T,u,O){var v=O("../../node_modules/qs/lib/formats.js"),j=Object.prototype.hasOwnProperty,w=Array.isArray,y=function(){for(var o=[],c=0;c<256;++c)o.push("%"+((c<16?"0":"")+c.toString(16)).toUpperCase());return o}(),S=function(c){for(;c.length>1;){var d=c.pop(),i=d.obj[d.prop];if(w(i)){for(var e=[],n=0;n<i.length;++n)typeof i[n]!="undefined"&&e.push(i[n]);d.obj[d.prop]=e}}},p=function(c,d){for(var i=d&&d.plainObjects?Object.create(null):{},e=0;e<c.length;++e)typeof c[e]!="undefined"&&(i[e]=c[e]);return i},b=function o(c,d,i){if(!d)return c;if(typeof d!="object"){if(w(c))c.push(d);else if(c&&typeof c=="object")(i&&(i.plainObjects||i.allowPrototypes)||!j.call(Object.prototype,d))&&(c[d]=!0);else return[c,d];return c}if(!c||typeof c!="object")return[c].concat(d);var e=c;return w(c)&&!w(d)&&(e=p(c,i)),w(c)&&w(d)?(d.forEach(function(n,r){if(j.call(c,r)){var t=c[r];t&&typeof t=="object"&&n&&typeof n=="object"?c[r]=o(t,n,i):c.push(n)}else c[r]=n}),c):Object.keys(d).reduce(function(n,r){var t=d[r];return j.call(n,r)?n[r]=o(n[r],t,i):n[r]=t,n},e)},m=function(c,d){return Object.keys(d).reduce(function(i,e){return i[e]=d[e],i},c)},k=function(o,c,d){var i=o.replace(/\+/g," ");if(d==="iso-8859-1")return i.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(i)}catch(e){return i}},A=function(c,d,i,e,n){if(c.length===0)return c;var r=c;if(typeof c=="symbol"?r=Symbol.prototype.toString.call(c):typeof c!="string"&&(r=String(c)),i==="iso-8859-1")return escape(r).replace(/%u[0-9a-f]{4}/gi,function(h){return"%26%23"+parseInt(h.slice(2),16)+"%3B"});for(var t="",f=0;f<r.length;++f){var l=r.charCodeAt(f);if(l===45||l===46||l===95||l===126||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122||n===v.RFC1738&&(l===40||l===41)){t+=r.charAt(f);continue}if(l<128){t=t+y[l];continue}if(l<2048){t=t+(y[192|l>>6]+y[128|l&63]);continue}if(l<55296||l>=57344){t=t+(y[224|l>>12]+y[128|l>>6&63]+y[128|l&63]);continue}f+=1,l=65536+((l&1023)<<10|r.charCodeAt(f)&1023),t+=y[240|l>>18]+y[128|l>>12&63]+y[128|l>>6&63]+y[128|l&63]}return t},P=function(c){for(var d=[{obj:{o:c},prop:"o"}],i=[],e=0;e<d.length;++e)for(var n=d[e],r=n.obj[n.prop],t=Object.keys(r),f=0;f<t.length;++f){var l=t[f],h=r[l];typeof h=="object"&&h!==null&&i.indexOf(h)===-1&&(d.push({obj:r,prop:l}),i.push(h))}return S(d),c},E=function(c){return Object.prototype.toString.call(c)==="[object RegExp]"},g=function(c){return!c||typeof c!="object"?!1:!!(c.constructor&&c.constructor.isBuffer&&c.constructor.isBuffer(c))},a=function(c,d){return[].concat(c,d)},s=function(c,d){if(w(c)){for(var i=[],e=0;e<c.length;e+=1)i.push(d(c[e]));return i}return d(c)};T.exports={arrayToObject:p,assign:m,combine:a,compact:P,decode:k,encode:A,isBuffer:g,isRegExp:E,maybeMap:s,merge:b}},"../../node_modules/side-channel/index.js":function(T,u,O){var v=O("../../node_modules/get-intrinsic/index.js"),j=O("../../node_modules/call-bind/callBound.js"),w=O("../../node_modules/object-inspect/index.js"),y=v("%TypeError%"),S=v("%WeakMap%",!0),p=v("%Map%",!0),b=j("WeakMap.prototype.get",!0),m=j("WeakMap.prototype.set",!0),k=j("WeakMap.prototype.has",!0),A=j("Map.prototype.get",!0),P=j("Map.prototype.set",!0),E=j("Map.prototype.has",!0),g=function(c,d){for(var i=c,e;(e=i.next)!==null;i=e)if(e.key===d)return i.next=e.next,e.next=c.next,c.next=e,e},a=function(c,d){var i=g(c,d);return i&&i.value},s=function(c,d,i){var e=g(c,d);e?e.value=i:c.next={key:d,next:c.next,value:i}},o=function(c,d){return!!g(c,d)};T.exports=function(){var d,i,e,n={assert:function(r){if(!n.has(r))throw new y("Side channel does not contain "+w(r))},get:function(r){if(S&&r&&(typeof r=="object"||typeof r=="function")){if(d)return b(d,r)}else if(p){if(i)return A(i,r)}else if(e)return a(e,r)},has:function(r){if(S&&r&&(typeof r=="object"||typeof r=="function")){if(d)return k(d,r)}else if(p){if(i)return E(i,r)}else if(e)return o(e,r);return!1},set:function(r,t){S&&r&&(typeof r=="object"||typeof r=="function")?(d||(d=new S),m(d,r,t)):p?(i||(i=new p),P(i,r,t)):(e||(e={key:{},next:null}),s(e,r,t))}};return n}},"./src/feathers.ts":function(T,u,O){var v=this&&this.__createBinding||(Object.create?function(A,P,E,g){g===void 0&&(g=E),Object.defineProperty(A,g,{enumerable:!0,get:function(){return P[E]}})}:function(A,P,E,g){g===void 0&&(g=E),A[g]=P[E]}),j=this&&this.__setModuleDefault||(Object.create?function(A,P){Object.defineProperty(A,"default",{enumerable:!0,value:P})}:function(A,P){A.default=P}),w=this&&this.__exportStar||function(A,P){for(var E in A)E!=="default"&&!Object.prototype.hasOwnProperty.call(P,E)&&v(P,A,E)},y=this&&this.__importStar||function(A){if(A&&A.__esModule)return A;var P={};if(A!=null)for(var E in A)E!=="default"&&Object.prototype.hasOwnProperty.call(A,E)&&v(P,A,E);return j(P,A),P},S=this&&this.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(u,"__esModule",{value:!0}),u.socketio=u.rest=u.authentication=u.errors=void 0;const p=O("../feathers/lib/index.js"),b=S(O("../authentication-client/lib/index.js"));u.authentication=b.default;const m=S(O("../rest-client/lib/index.js"));u.rest=m.default;const k=S(O("../socketio-client/lib/index.js"));u.socketio=k.default,w(O("../feathers/lib/index.js"),u),u.errors=y(O("../errors/lib/index.js")),u.default=p.feathers,T.exports=Object.assign(p.feathers,T.exports)},"?c95a":function(){}},H={};function I(T){var u=H[T];if(u!==void 0)return u.exports;var O=H[T]={exports:{}};return G[T].call(O.exports,O,O.exports,I),O.exports}var C=I("./src/feathers.ts");return C}()})})(Ve);var Ae=Ue(Ve.exports);const Ye=ge.publicRuntimeConfig.feathersStoreKey,Re=ge.publicRuntimeConfig.offlineMode?void 0:Ae();if(!ge.publicRuntimeConfig.offlineMode){const fe=Xe(ge.publicRuntimeConfig.apiServer,{withCredentials:!0});Re.configure(Ae.socketio(fe,{timeout:1e4})),Re.configure(Ae.authentication({storageKey:Ye}))}const et=Re;export{et as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
