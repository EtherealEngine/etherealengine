import{B as H,M as T,c3 as ae,a3 as A,j as L,g as X,G as Z,b_ as ce,$ as he,a5 as le,h as R,V as _,o as F,ag as $,Q as V,p as J,bi as de,bz as D,ay as pe,c1 as O,a0 as ue,ak as fe,c4 as me,b$ as ye}from"./three.module.493739a3.js";import{c as ge,J as xe,E as y,b as I,d as B,A as j,g as S}from"./avatarFunctions.6d66cf01.js";import{R as we,S as ve,U as K,W as ee,Y as be,C as k,X as te,Z as _e,h as oe,V as Ae,q as Se,O as Me}from"./[projectId].a008d20c.js";import{B as se}from"./BoundingBoxComponent.a58053fa.js";import{T as U}from"./SystemUpdateType.772fc25d.js";import"./index.7b02be28.js";import"./vendor.475cb2ff.js";import"./_app.f0a72417.js";import"./AuthService.e8999ddc.js";import"./AlertService.5d8abaff.js";import"./feathers.32f4d4e8.js";import"./index.81138b53.js";import"./upload.bd537b46.js";function Ee(f){const n=f.regions,h=new H,l=new T({vertexColors:ae}),c=new A(h,l),g=[],w=[],d=new L;for(let x of n){d.setHex(Math.random()*16777215);let m=x.edge;const b=[];do b.push(m),m=m.next;while(m!==x.edge);const o=b.length-2;for(let t=1,e=o;t<=e;t++){const s=b[0].vertex,i=b[t+0].vertex,r=b[t+1].vertex;g.push(s.x,s.y,s.z),g.push(i.x,i.y,i.z),g.push(r.x,r.y,r.z),w.push(d.r,d.g,d.b),w.push(d.r,d.g,d.b),w.push(d.r,d.g,d.b)}}return h.addAttribute("position",new X(g,3)),h.addAttribute("color",new X(w,3)),c}function Ce(f,n=1,h=5145796,l=16777215){const c=new Z,g=new T({color:h}),w=new ce(n,2),d=[];f.getNodes(d);for(let e of d){const s=new A(w,g);s.position.copy(e.position),s.userData.nodeIndex=e.index,s.matrixAutoUpdate=!1,s.updateMatrix(),c.add(s)}const x=new H,m=[],b=new he({color:l}),o=[];for(let e of d){f.getEdgesOfNode(e.index,o);for(let s of o){const i=f.getNode(s.from),r=f.getNode(s.to);m.push(i.position.x,i.position.y,i.position.z),m.push(r.position.x,r.position.y,r.position.z)}}x.setAttribute("position",new X(m,3));const t=new le(x,b);return t.matrixAutoUpdate=!1,c.add(t),c}const Q=ge("DebugArrowComponent");class Y extends H{parameters;radiusTop;radiusBottom;height;radialSegments;heightSegments;capsTopSegments;capsBottomSegments;thetaStart;thetaLength;alpha;eqRadii;vertexCount;indexCount;indices;vertices;normals;uvs;_index=0;_halfHeight=0;_indexArray=[];_indexOffset=0;constructor(n,h,l,c,g,w,d,x,m){super();this.type="CapsuleBufferGeometry",this.parameters={radiusTop:n,radiusBottom:h,height:l,radialSegments:c,heightSegments:g,thetaStart:x,thetaLength:m},this.radiusTop=n!==void 0?n:.25,this.radiusBottom=h!==void 0?h:.25,this.height=l!==void 0?l:1,this.radialSegments=Math.floor(c??8),this.heightSegments=Math.floor(g??1),this.capsTopSegments=Math.floor(w??2),this.capsBottomSegments=Math.floor(d??2),this.thetaStart=x!==void 0?x:0,this.thetaLength=m!==void 0?m:2*Math.PI,this.alpha=Math.acos((this.radiusBottom-this.radiusTop)/this.height),this.eqRadii=this.radiusTop-this.radiusBottom==0,this.vertexCount=this.calculateVertexCount(),this.indexCount=this.calculateIndexCount(),this.indices=new R(new(this.indexCount>65535?Uint32Array:Uint16Array)(this.indexCount),1),this.vertices=new R(new Float32Array(this.vertexCount*3),3),this.normals=new R(new Float32Array(this.vertexCount*3),3),this.uvs=new R(new Float32Array(this.vertexCount*2),2),this._halfHeight=this.height/2,this.generateTorso(),this.setIndex(this.indices),this.setAttribute("position",this.vertices),this.setAttribute("normal",this.normals),this.setAttribute("uv",this.uvs)}calculateVertexCount(){return(this.radialSegments+1)*(this.heightSegments+1+this.capsBottomSegments+this.capsTopSegments)}calculateIndexCount(){return this.radialSegments*(this.heightSegments+this.capsBottomSegments+this.capsTopSegments)*2*3}generateTorso(){let n,h;const l=new _,c=new _,g=Math.cos(this.alpha),w=Math.sin(this.alpha),d=new F(this.radiusTop*w,this._halfHeight+this.radiusTop*g).sub(new F(this.radiusBottom*w,-this._halfHeight+this.radiusBottom*g)).length(),x=this.radiusTop*this.alpha+d+this.radiusBottom*(Math.PI/2-this.alpha);let m=0;for(h=0;h<=this.capsTopSegments;h++){const t=[],e=Math.PI/2-this.alpha*(h/this.capsTopSegments);m+=this.radiusTop*this.alpha/this.capsTopSegments;const s=Math.cos(e),i=Math.sin(e),r=s*this.radiusTop;for(n=0;n<=this.radialSegments;n++){const a=n/this.radialSegments,u=a*this.thetaLength+this.thetaStart,p=Math.sin(u),v=Math.cos(u);c.x=r*p,c.y=this._halfHeight+i*this.radiusTop,c.z=r*v,this.vertices.setXYZ(this._index,c.x,c.y,c.z),l.set(s*p,i,s*v),this.normals.setXYZ(this._index,l.x,l.y,l.z),this.uvs.setXY(this._index,a,1-m/x),t.push(this._index),this._index++}this._indexArray.push(t)}const b=this.height+g*this.radiusTop-g*this.radiusBottom,o=w*(this.radiusBottom-this.radiusTop)/b;for(h=1;h<=this.heightSegments;h++){const t=[];m+=d/this.heightSegments;const e=w*(h*(this.radiusBottom-this.radiusTop)/this.heightSegments+this.radiusTop);for(n=0;n<=this.radialSegments;n++){const s=n/this.radialSegments,i=s*this.thetaLength+this.thetaStart,r=Math.sin(i),a=Math.cos(i);c.x=e*r,c.y=this._halfHeight+g*this.radiusTop-h*b/this.heightSegments,c.z=e*a,this.vertices.setXYZ(this._index,c.x,c.y,c.z),l.set(r,o,a).normalize(),this.normals.setXYZ(this._index,l.x,l.y,l.z),this.uvs.setXY(this._index,s,1-m/x),t.push(this._index),this._index++}this._indexArray.push(t)}for(h=1;h<=this.capsBottomSegments;h++){const t=[],e=Math.PI/2-this.alpha-(Math.PI-this.alpha)*(h/this.capsBottomSegments);m+=this.radiusBottom*this.alpha/this.capsBottomSegments;const s=Math.cos(e),i=Math.sin(e),r=s*this.radiusBottom;for(n=0;n<=this.radialSegments;n++){const a=n/this.radialSegments,u=a*this.thetaLength+this.thetaStart,p=Math.sin(u),v=Math.cos(u);c.x=r*p,c.y=-this._halfHeight+i*this.radiusBottom,c.z=r*v,this.vertices.setXYZ(this._index,c.x,c.y,c.z),l.set(s*p,i,s*v),this.normals.setXYZ(this._index,l.x,l.y,l.z),this.uvs.setXY(this._index,a,1-m/x),t.push(this._index),this._index++}this._indexArray.push(t)}for(n=0;n<this.radialSegments;n++)for(h=0;h<this.capsTopSegments+this.heightSegments+this.capsBottomSegments;h++){const t=this._indexArray[h][n],e=this._indexArray[h+1][n],s=this._indexArray[h+1][n+1],i=this._indexArray[h][n+1];this.indices.setX(this._indexOffset,t),this._indexOffset++,this.indices.setX(this._indexOffset,e),this._indexOffset++,this.indices.setX(this._indexOffset,i),this._indexOffset++,this.indices.setX(this._indexOffset,e),this._indexOffset++,this.indices.setX(this._indexOffset,s),this._indexOffset++,this.indices.setX(this._indexOffset,i),this._indexOffset++}}}const ne=new $,q=new $,P=new _,G=new V;new V;const ie=new _(1,1,1),Te=new _(1,1,1),re=Math.PI/2;xe([we]);const Pe=()=>{const f=new Map,n=new Map,h=new Map,l=[new T({color:16711680,wireframe:!0}),new T({color:65280,wireframe:!0}),new T({color:43775,wireframe:!0}),new T({color:16777215,wireframe:!0}),new J({color:16711680,transparent:!0,opacity:.25}),new J({color:16777215,transparent:!0,opacity:.25})],c=new de(1),g=new D,w=new pe(1e4,1e4,100,100);let d=!1;const x=e=>{d=e,e||(f.forEach(s=>{y.scene.remove(s)}),h.forEach(s=>{y.scene.remove(s)}),n.forEach(s=>{y.scene.remove(s)}),f.clear(),h.clear(),n.clear())};function m(e,s){if(!n.get(s)){let i;if(e._isCapsule){const a=e.getRadius(),u=e.getHalfHeight();i=new Y(a,a,u*2)}else{const a=e.getHalfExtents();i=new D(a.x*2,a.y*2,a.z*2)}const r=new A(i,l[5]);r.position.copy(e.getPosition()),r.quaternion.copy(e.getRotation()),y.scene.add(r),n.set(s,r)}}function b(e){const s=e._shapes[0],i=s._id;let r=f.get(i),a=!1;if(e._debugNeedsUpdate&&(r&&(y.scene.remove(r),a=!0),e._debugNeedsUpdate=!1),!r||a){if(K(s)===PhysX.PxGeometryType.eCAPSULE.value){const p=new PhysX.PxCapsuleGeometry(1,1);s.getCapsuleGeometry(p),r=new A(new Y(E(p.radius/.8),E(p.radius/.8),E(p.halfHeight/.8)*2),l[ee.CONTROLLER])}else{const p=new PhysX.PxBoxGeometry(1,1,1);s.getBoxGeometry(p);const{x:v,y:C,z:M}=p.halfExtents;r=new A(new D(E(v*2),E(C*2),E(M*2)),l[ee.CONTROLLER])}f.set(i,r),y.scene.add(r)}}function o(e,s,i){let r=f.get(s),a=!1;i._debugNeedsUpdate&&(r&&(y.scene.remove(r),a=!0),delete i._debugNeedsUpdate),(!r||a)&&(r=t(i,e),f.set(s,r))}function t(e,s){const i=be(e),r=K(e);let a;const u=l[i?4:s._type];switch(r){case PhysX.PxGeometryType.eSPHERE.value:{const p=new PhysX.PxSphereGeometry(1);e.getSphereGeometry(p);const v=E(p.radius);a=new A(c,u),a.scale.set(v,v,v);break}case PhysX.PxGeometryType.eCAPSULE.value:{const p=new PhysX.PxCapsuleGeometry(1,1);e.getCapsuleGeometry(p),a=new A(new Y(E(p.radius),E(p.radius),E(p.halfHeight)*2),u);break}case PhysX.PxGeometryType.eBOX.value:{const p=new PhysX.PxBoxGeometry(1,1,1);e.getBoxGeometry(p);const{x:v,y:C,z:M}=p.halfExtents;a=new A(g,u),a.scale.set(E(v),E(C),E(M)).multiplyScalar(2);break}case PhysX.PxGeometryType.ePLANE.value:{a=new A(w.clone(),u),a.quaternion.copy(e.getLocalPose().rotation),a.geometry.rotateY(-re),a.geometry.rotateX(-re);break}case PhysX.PxGeometryType.eCONVEXMESH.value:{const p=e._vertices,v=e._indices,C=e._scale,M=new H;M.setAttribute("position",new X(p,3)),M.setIndex(v),M.scale(C.x,C.y,C.z),a=new A(M,u);break}case PhysX.PxGeometryType.eTRIANGLEMESH.value:{const p=e._vertices,v=e._indices,C=e._scale,M=new H;M.setAttribute("position",new X(p,3)),M.setIndex(v),M.scale(C.x,C.y,C.z),a=new A(M,u);break}default:a=new A;break}return a&&a.geometry&&y.scene.add(a),a}return(e,s)=>{d!==s&&(d=s,x(s)),!!d&&(e.physics.bodies.forEach(i=>{const r=i.getGlobalPose();if(P.set(r.translation.x,r.translation.y,r.translation.z),ve(i)){const a=i._shapes[0]._id;b(i),f.get(a).position.copy(P);return}G.set(r.rotation.x,r.rotation.y,r.rotation.z,r.rotation.w),ne.compose(P,G,ie),i._shapes?.forEach(a=>{const u=a.getLocalPose();o(i,a._id,a),f.get(a._id)&&(P.set(u.translation.x,u.translation.y,u.translation.z),G.set(u.rotation.x,u.rotation.y,u.rotation.z,u.rotation.w),q.compose(P,G,ie),q.premultiply(ne),q.decompose(P,G,Te),f.get(a._id).position.copy(P),f.get(a._id).quaternion.copy(G))})}),e.physics.obstacles.forEach((i,r)=>{m(i,r)}),n.forEach((i,r)=>{e.physics.obstacles.has(r)||(y.scene.remove(i),f.delete(r))}),f.forEach((i,r)=>{e.physics.shapes.has(r)||(y.scene.remove(i),f.delete(r))}))}},E=f=>Math.max(1e-5,f),z=new _,W=new V,N=new ye(.05,.25,4);N.rotateX(-Math.PI*.5);async function ke(f){const n={viewVector:new Map,ikExtents:new Map,box:new Map,helperArrow:new Map,velocityArrow:new Map,navmesh:new Map,navpath:new Map};let h=Pe(),l=!1,c=!1;I.instance.addEventListener(I.EVENTS.AVATAR_DEBUG,({enabled:o})=>{c=o,n.viewVector.forEach(t=>{t.visible=o}),n.velocityArrow.forEach(t=>{t.visible=o}),n.ikExtents.forEach(t=>{t.forEach(e=>e.visible=o)})}),I.instance.addEventListener(I.EVENTS.PHYSICS_DEBUG,({enabled:o})=>{l=o,n.helperArrow.forEach(t=>{t.visible=o}),n.box.forEach(t=>{t.forEach(e=>e.visible=o)})});const g=B([j]),w=B([se]),d=B([k]),x=B([Q]),m=B([te]),b=B([_e,oe]);return()=>{for(const o of g.enter()){const t=S(o,j);if(new _(0,2,0),!t||!t.viewVector){console.warn("avatar.viewVector is null");continue}const e=255,s=new O(new _,new _(0,0,0),.5,e);s.visible=c,y.scene.add(s),n.velocityArrow.set(o,s)}for(const o of g.exit()){const t=n.velocityArrow.get(o);y.scene.remove(t),n.velocityArrow.delete(o)}for(const o of g()){const t=S(o,j),e=S(o,Ae),s=S(o,U),i=n.velocityArrow.get(o);i!=null&&(i.setDirection(z.copy(e.velocity).normalize()),i.setLength(e.velocity.length()*20),i.position.copy(s.position).y+=t.avatarHalfHeight)}for(const o of m.enter()){const t=new A(N,new T({color:new L("red"),side:ue})),e=new A(N,new T({color:new L("yellow")})),s=new A(N,new T({color:new L("blue")}));t.visible=c,e.visible=c,s.visible=c,y.scene.add(t),y.scene.add(e),y.scene.add(s),n.ikExtents.set(o,[t,e,s])}for(const o of m()){const t=S(o,te),[e,s,i]=n.ikExtents.get(o);e.position.copy(t.head.getWorldPosition(z)),e.quaternion.copy(t.head.getWorldQuaternion(W)),s.position.copy(t.controllerLeft.getWorldPosition(z)),s.quaternion.copy(t.controllerLeft.getWorldQuaternion(W)),i.position.copy(t.controllerRight.getWorldPosition(z)),i.quaternion.copy(t.controllerRight.getWorldQuaternion(W))}for(const o of m.exit())n.ikExtents.get(o).forEach(t=>{t.removeFromParent()}),n.ikExtents.delete(o);for(const o of d.exit()){const t=n.viewVector.get(o);y.scene.remove(t),n.viewVector.delete(o);const e=n.velocityArrow.get(o);y.scene.remove(e),n.velocityArrow.delete(o)}for(const o of d.enter()){const t=S(o,k);if(Se(t.body))continue;const e=new _(0,2,0),s=.5,i=16776960,r=new O(z.copy(t.body.getGlobalPose().translation).normalize(),e,s,i);r.visible=c,y.scene.add(r),n.viewVector.set(o,r);const a=255,u=new O(new _,new _(0,0,0),.5,a);u.visible=c,y.scene.add(u),n.velocityArrow.set(o,u)}for(const o of d()){const t=S(o,k),e=S(o,U),s=n.viewVector.get(o);s!=null&&(s.setDirection(new _().copy(t.body.getGlobalPose().translation).setY(0).normalize()),s.position.copy(e.position));const i=n.velocityArrow.get(o);if(i!=null){const r=new _().copy(t.body.getLinearVelocity());i.setLength(r.length()*60),i.setDirection(r.normalize()),i.position.copy(e.position)}}for(const o of w.enter()){n.box.set(o,[]);const t=S(o,se),e=new fe;if(e.copy(t.box),t.dynamic){const i=S(o,Me);e.applyMatrix4(i.value.matrixWorld)}const s=new me(e);s.visible=l,y.scene.add(s),n.box.get(o).push(s)}for(const o of w.exit())n.box.get(o).forEach(e=>{y.scene.remove(e)}),n.box.delete(o);for(const o of x.enter()){const t=S(o,Q),e=new O(new _,new _(0,0,0),.5,t.color);e.visible=l,y.scene.add(e),n.helperArrow.set(o,e)}for(const o of x.exit()){const t=n.helperArrow.get(o);y.scene.remove(t),n.helperArrow.delete(o)}for(const o of x()){const t=S(o,Q),e=n.helperArrow.get(o);e!=null&&(e.setDirection(t.direction.clone().normalize()),e.setLength(t.direction.length()),e.position.copy(t.position))}for(const o of b.enter()){console.log("add navmesh helper!");const t=S(o,oe)?.yukaNavMesh,e=Ee(t),s=Ce(t.graph,.2),i=new Z;i.add(e),i.add(s),console.log("navhelper",i),y.scene.add(i),n.navmesh.set(o,i)}for(const o of b()){const t=n.navmesh.get(o),e=S(o,U);t.position.copy(e.position)}for(const o of b.exit()){const t=n.navmesh.get(o);y.scene.remove(t),n.navmesh.delete(o)}h(f,l)}}export{ke as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
