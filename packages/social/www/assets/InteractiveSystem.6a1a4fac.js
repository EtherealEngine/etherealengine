import{ag as E,c2 as q,V as y,ak as A,a3 as z,aq as J,G as K,Q as Y,a9 as Z}from"./three.module.0404e109.js";import{O as l,v as P,i as $,A as ee,w as j,C as V,u as oe,L as te,x as H,y as ne,c as se,f as ae,z as re,e as k}from"./[projectId].d5e44847.js";import{c as G,g as t,h as f,r as g,a as C,d as w,A as ie,E as M,b as N}from"./avatarFunctions.c7a0e273.js";import{H as U}from"./HighlightComponent.61714f9c.js";import{T as I}from"./SystemUpdateType.4e88f289.js";import{B}from"./BoundingBoxComponent.dd52b507.js";import{T as L,E as X}from"./tween.esm.78508545.js";import{T as d}from"./TweenComponent.6854cb48.js";import"./WebXRFunctions.c1f81cbf.js";import"./index.0040ebb6.js";import"./vendor.c8b8cc93.js";import"./_app.009e96ac.js";import"./AuthService.6db25508.js";import"./AlertService.bfed2141.js";import"./feathers.081246a7.js";import"./index.9af95596.js";import"./upload.38e3baaf.js";import"./XRHandsInputComponent.9ef816f1.js";import"./addControllerModels.086e1687.js";const F=G("InteractiveFocusedComponent"),Q=G("SubFocusedComponent"),ce=(e,c)=>{const o=t(e,I),{value:p}=t(e,l);let m=0;const a=t(c,B);if(a)a.box.getCenter(o.position),m=a.box.max.y;else{const r=t(c,l).value;o.position.copy(r.position),r.geometry&&(m=r.geometry.boundingBox?.max.y??0)}f(e,d)&&(t(e,d).tween.stop(),g(e,d)),p.visible=!0,C(e,d,{tween:new L(o).to({position:{y:m+.5},scale:{x:1,y:1,z:1}},1500).easing(X.Exponential.Out).start().onComplete(()=>{g(e,d)})})},me=e=>{const c=t(e,I),{value:o}=t(e,l);f(e,d)&&(t(e,d).tween.stop(),g(e,d)),C(e,d,{tween:new L(c).to({position:{y:c.position.y-.5},scale:{x:0,y:0,z:0}},1500).easing(X.Exponential.In).start().onComplete(()=>{o.visible=!1,g(e,d)})})},pe=2,_=new E,ue=new E().makePerspective(-.1,.1,-.1,.1,.1,2),R=new q;new y;const le=(e,c)=>{const o=t(e,P);if(!$(e)){o.subFocusedArray=[],o.focusedInteractive=null;return}const p=t(e,I);if(!t(e,ee)||!c.length)return;o.frustumCamera.updateMatrixWorld(),o.frustumCamera.matrixWorldInverse.copy(o.frustumCamera.matrixWorld).invert(),_.multiplyMatrices(ue,o.frustumCamera.matrixWorldInverse),R.setFromProjectionMatrix(_);const a=c.map(s=>{const b=t(s,B);if(!b.box)return[s,!1,0];if(b.dynamic){const O=t(s,l),v=new A;return v.copy(b.box),v.applyMatrix4(O.value.matrixWorld),[s,R.intersectsBox(v),v.distanceToPoint(p.position)]}else return[s,R.intersectsBox(b.box),b.box.distanceToPoint(p.position)]}).filter(s=>s[1]);if(!a.length){o.subFocusedArray=[],o.focusedInteractive=null;return}o.subFocusedArray=a.map(s=>[t(s[0],l).value,s[3]]);const[r,h,S]=a.sort((s,b)=>s[2]-b[2])[0],T=t(r,j).data?.interactionDistance??pe;S<T&&(o.focusedInteractive=r)},fe=e=>{const c=f(e,V)&&oe(t(e,V).body),o=C(e,B,{dynamic:c,box:new A}),p=t(e,l).value,m=t(e,I);p.position.copy(m.position),p.rotation.setFromQuaternion(m.rotation),o.dynamic||p.updateMatrixWorld();let a=!1;p.traverse(r=>{if(r instanceof z){r.geometry.boundingBox||r.geometry.computeBoundingBox();const h=new A().copy(r.geometry.boundingBox);o.dynamic||h.applyMatrix4(r.matrixWorld),a?o.box.union(h):(o.box.copy(h),a=!0)}}),a||(o.box=new A(new y(-.05,-.05,-.05).add(m.position),new y(.05,.05,.05).add(m.position)))},de=new y(0,1,0);async function Pe(e){const c=w([P]),o=w([j]),p=w([B]),m=w([j,F]),a=w([j,Q]),r=w([te,ie]),h=w([H]),S=ne.instance.create3dText("INTERACT",new y(.8,1,.2)),D=.1,T=new z(S,new J({color:13938487,emissive:13938487,emissiveIntensity:1}));T.scale.setScalar(D);const x=se(),s=new K().add(T);return C(x,l,{value:s}),M.scene.add(s),C(x,ae,{}),C(x,I,{position:new y,rotation:new Y,scale:new y(1,1,1)}).scale.setScalar(0),s.visible=!1,()=>{const{elapsedTime:O}=e;for(const n of o.enter(e))!f(n,B)&&f(n,l)&&fe(n);const v=o(e);for(const n of c(e))if(v.length){le(n,p(e));const i=t(n,P);i.focusedInteractive&&(f(i.focusedInteractive,F)||C(i.focusedInteractive,F,{interacts:n}));for(const u of v)u!==i.focusedInteractive&&f(u,F)&&g(u,F),i.subFocusedArray.some(W=>W[0].entity===u)?f(u,Q)||C(u,Q,{subInteracts:u}):g(u,Q)}for(const n of m.exit())me(x);for(const n of m.enter())ce(x,n);for(const n of a.enter())C(n,U,{color:16711680,hiddenColor:255,edgeStrength:1});for(const n of a.exit())g(n,U);for(const n of h.enter()){const i=t(n,j);f(n,re)?t(n,l).value?.toggle():N.instance.dispatchEvent({type:N.EVENTS.OBJECT_ACTIVATION,...i.data}),g(n,H)}for(const n of r()){const i=t(x,l).value;if(!!i.visible)if(i.children[0].position.y=Math.sin(O*1.8)*.05,M.activeCameraFollowTarget&&f(M.activeCameraFollowTarget,k))i.children[0].setRotationFromAxisAngle(de,Z.degToRad(t(M.activeCameraFollowTarget,k).theta));else{const{x:u,z:W}=t(n,I).position;i.lookAt(u,i.position.y,W)}}}}export{Pe as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
