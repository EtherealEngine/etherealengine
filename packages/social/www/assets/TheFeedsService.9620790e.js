import{A as d}from"./AlertService.5d8abaff.js";import{c as o}from"./feathers.32f4d4e8.js";import{u as c}from"./upload.bd537b46.js";const s={thefeedsRetrieved:e=>({type:"THEFEEDS_RETRIEVED",thefeeds:e}),fetchingTheFeeds:()=>({type:"THEFEEDS_FETCH"}),deleteTheFeeds:e=>({type:"REMOVE_THEFEEDS",thefeeds:e}),addTheFeeds:e=>({type:"ADD_THEFEEDS",thefeeds:e}),updateTheFeedsInList:e=>({type:"UPDATE_THEFEEDS",thefeeds:e}),addTheFeedsFire:e=>({type:"ADD_THEFEEDS_FIRES",thefeeds:e}),removeTheFeedsFire:e=>({type:"REMOVE_THEFEEDS_FIRES",thefeeds:e})},l={getTheFeedsNew:()=>async e=>{try{e(s.fetchingTheFeeds());const r=await o.service("thefeeds").find();e(s.thefeedsRetrieved(r.data))}catch(r){console.log(r),d.dispatchAlertError(e,r.message)}},createTheFeedsNew:e=>async r=>{try{const t=await c(e.video,null);console.log("storedVideo",t);const i=await o.service("thefeeds").create({title:e.title,videoId:t.file_id,description:e.description});r(s.addTheFeeds(i))}catch(t){console.log(t),d.dispatchAlertError(r,t.message)}},updateTheFeedsAsAdmin:e=>async r=>{try{let t={id:e.id,title:e.title,videoId:e.video,description:e.description};if(typeof e.video=="object"){const n=await c(e.video,null);t.videoId=n.file_id}const i=await o.service("thefeeds").patch(t.id,t);r(s.updateTheFeedsInList(i))}catch(t){console.log(t),d.dispatchAlertError(r,t.message)}},removeTheFeeds:e=>async r=>{try{await o.service("thefeeds").remove(e),r(s.deleteTheFeeds(e))}catch(t){console.log(t),d.dispatchAlertError(r,t.message)}}};export{s as T,l as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhlRmVlZHNTZXJ2aWNlLjk2MjA3OTBlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jbGllbnQtY29yZS9zcmMvc29jaWFsL3JlZHVjZXJzL3RoZWZlZWRzL1RoZUZlZWRzQWN0aW9ucy50cyIsIi4uLy4uLy4uL2NsaWVudC1jb3JlL3NyYy9zb2NpYWwvcmVkdWNlcnMvdGhlZmVlZHMvVGhlRmVlZHNTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIjBcbi8qKlxuICogQGF1dGhvciBHbGViIE9yZGluc2t5IDxnbGVib3JkaW5za2lqakBnbWFpbC5jb20+XG4gKi9cblxuaW1wb3J0IHsgVGhlRmVlZHNTaG9ydCwgVGhlRmVlZHMgfSBmcm9tICdAeHJlbmdpbmUvY29tbW9uL3NyYy9pbnRlcmZhY2VzL0ZlZWRzJ1xuXG5leHBvcnQgY29uc3QgVGhlRmVlZHNBY3Rpb24gPSB7XG4gIHRoZWZlZWRzUmV0cmlldmVkOiAodGhlZmVlZHM6IFRoZUZlZWRzW10pID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZygnYWN0aW9ucycsdGhlZmVlZHMpXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdUSEVGRUVEU19SRVRSSUVWRUQnIGFzIGNvbnN0LFxuICAgICAgdGhlZmVlZHM6IHRoZWZlZWRzXG4gICAgfVxuICB9LFxuICBmZXRjaGluZ1RoZUZlZWRzOiAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdUSEVGRUVEU19GRVRDSCcgYXMgY29uc3RcbiAgICB9XG4gIH0sXG4gIGRlbGV0ZVRoZUZlZWRzOiAodGhlZmVlZHNJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdSRU1PVkVfVEhFRkVFRFMnIGFzIGNvbnN0LFxuICAgICAgdGhlZmVlZHM6IHRoZWZlZWRzSWRcbiAgICB9XG4gIH0sXG4gIGFkZFRoZUZlZWRzOiAodGhlZmVlZHM6IFRoZUZlZWRzKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdBRERfVEhFRkVFRFMnIGFzIGNvbnN0LFxuICAgICAgdGhlZmVlZHM6IHRoZWZlZWRzXG4gICAgfVxuICB9LFxuICB1cGRhdGVUaGVGZWVkc0luTGlzdDogKHRoZWZlZWRzOiBUaGVGZWVkcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnVVBEQVRFX1RIRUZFRURTJyBhcyBjb25zdCxcbiAgICAgIHRoZWZlZWRzOiB0aGVmZWVkc1xuICAgIH1cbiAgfSxcbiAgYWRkVGhlRmVlZHNGaXJlOiAodGhlZmVlZHM6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQUREX1RIRUZFRURTX0ZJUkVTJyBhcyBjb25zdCxcbiAgICAgIHRoZWZlZWRzOiB0aGVmZWVkc1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlVGhlRmVlZHNGaXJlOiAodGhlZmVlZHM6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnUkVNT1ZFX1RIRUZFRURTX0ZJUkVTJyBhcyBjb25zdCxcbiAgICAgIHRoZWZlZWRzOiB0aGVmZWVkc1xuICAgIH1cbiAgfVxufVxuLy9UaGUgY29kZSBiZWxvdyBpcyBub3QgaW4gdXNlIEVORFxuXG5leHBvcnQgdHlwZSBUaGVGZWVkc0FjdGlvblR5cGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBUaGVGZWVkc0FjdGlvbltrZXlvZiB0eXBlb2YgVGhlRmVlZHNBY3Rpb25dPlxuIiwiLyoqXG4gKiBAYXV0aG9yIEdsZWIgT3JkaW5za3kgPGdsZWJvcmRpbnNraWpqQGdtYWlsLmNvbT5cbiAqL1xuXG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9jb21tb24vcmVkdWNlcnMvYWxlcnQvQWxlcnRTZXJ2aWNlJ1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnQHhyZW5naW5lL2NsaWVudC1jb3JlL3NyYy9mZWF0aGVycydcbmltcG9ydCB7IHVwbG9hZCB9IGZyb20gJ0B4cmVuZ2luZS9lbmdpbmUvc3JjL3NjZW5lL2Z1bmN0aW9ucy91cGxvYWQnXG5pbXBvcnQgeyBUaGVGZWVkc0FjdGlvbiB9IGZyb20gJy4vVGhlRmVlZHNBY3Rpb25zJ1xuXG5leHBvcnQgY29uc3QgVGhlRmVlZHNTZXJ2aWNlID0ge1xuICBnZXRUaGVGZWVkc05ldzogKCkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpc3BhdGNoKFRoZUZlZWRzQWN0aW9uLmZldGNoaW5nVGhlRmVlZHMoKSlcbiAgICAgICAgY29uc3QgdGhlZmVlZHMgPSBhd2FpdCBjbGllbnQuc2VydmljZSgndGhlZmVlZHMnKS5maW5kKClcbiAgICAgICAgZGlzcGF0Y2goVGhlRmVlZHNBY3Rpb24udGhlZmVlZHNSZXRyaWV2ZWQodGhlZmVlZHMuZGF0YSkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNyZWF0ZVRoZUZlZWRzTmV3OiAoZGF0YSkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0b3JlZFZpZGVvID0gYXdhaXQgdXBsb2FkKGRhdGEudmlkZW8sIG51bGwpXG4gICAgICAgIGNvbnNvbGUubG9nKCdzdG9yZWRWaWRlbycsIHN0b3JlZFZpZGVvKVxuICAgICAgICBjb25zdCB0aGVmZWVkcyA9IGF3YWl0IGNsaWVudC5zZXJ2aWNlKCd0aGVmZWVkcycpLmNyZWF0ZSh7XG4gICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgdmlkZW9JZDogKHN0b3JlZFZpZGVvIGFzIGFueSkuZmlsZV9pZCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvblxuICAgICAgICB9KVxuICAgICAgICBkaXNwYXRjaChUaGVGZWVkc0FjdGlvbi5hZGRUaGVGZWVkcyh0aGVmZWVkcykpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHVwZGF0ZVRoZUZlZWRzQXNBZG1pbjogKGRhdGE6IGFueSkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2g6IERpc3BhdGNoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCB0aGVmZWVkcyA9IHsgaWQ6IGRhdGEuaWQsIHRpdGxlOiBkYXRhLnRpdGxlLCB2aWRlb0lkOiBkYXRhLnZpZGVvLCBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbiB9XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS52aWRlbyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjb25zdCBzdG9yZWRWaWRlbyA9IGF3YWl0IHVwbG9hZChkYXRhLnZpZGVvLCBudWxsKVxuICAgICAgICAgIHRoZWZlZWRzWyd2aWRlb0lkJ10gPSAoc3RvcmVkVmlkZW8gYXMgYW55KS5maWxlX2lkXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXBkYXRlZEl0ZW0gPSBhd2FpdCBjbGllbnQuc2VydmljZSgndGhlZmVlZHMnKS5wYXRjaCh0aGVmZWVkcy5pZCwgdGhlZmVlZHMpXG4gICAgICAgIGRpc3BhdGNoKFRoZUZlZWRzQWN0aW9uLnVwZGF0ZVRoZUZlZWRzSW5MaXN0KHVwZGF0ZWRJdGVtKSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIEFsZXJ0U2VydmljZS5kaXNwYXRjaEFsZXJ0RXJyb3IoZGlzcGF0Y2gsIGVyci5tZXNzYWdlKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVtb3ZlVGhlRmVlZHM6ICh0aGVmZWVkc0lkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjbGllbnQuc2VydmljZSgndGhlZmVlZHMnKS5yZW1vdmUodGhlZmVlZHNJZClcbiAgICAgICAgZGlzcGF0Y2goVGhlRmVlZHNBY3Rpb24uZGVsZXRlVGhlRmVlZHModGhlZmVlZHNJZCkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoid0lBT2EsR0FBaUIsQ0FDNUIsa0JBQW1CLEFBQUMsR0FFWCxFQUNMLEtBQU0scUJBQ04sYUFHSixpQkFBa0IsSUFDVCxFQUNMLEtBQU0sbUJBR1YsZUFBZ0IsQUFBQyxHQUNSLEVBQ0wsS0FBTSxrQkFDTixTQUFVLElBR2QsWUFBYSxBQUFDLEdBQ0wsRUFDTCxLQUFNLGVBQ04sYUFHSixxQkFBc0IsQUFBQyxHQUNkLEVBQ0wsS0FBTSxrQkFDTixhQUdKLGdCQUFpQixBQUFDLEdBQ1QsRUFDTCxLQUFNLHFCQUNOLGFBR0osbUJBQW9CLEFBQUMsR0FDWixFQUNMLEtBQU0sd0JBQ04sY0NyQ08sRUFBa0IsQ0FDN0IsZUFBZ0IsSUFDUCxLQUFPLElBQXFDLElBQzdDLEdBQ08sRUFBZSx5QkFDbEIsR0FBVyxLQUFNLEdBQU8sUUFBUSxZQUFZLFNBQ3pDLEVBQWUsa0JBQWtCLEVBQVMsYUFDNUMsV0FDQyxJQUFJLEtBQ0MsbUJBQW1CLEVBQVUsRUFBSSxXQUlwRCxrQkFBbUIsQUFBQyxHQUNYLEtBQU8sSUFBcUMsSUFDN0MsTUFDSSxHQUFjLEtBQU0sR0FBTyxFQUFLLE1BQU8sY0FDckMsSUFBSSxjQUFlLFFBQ3JCLEdBQVcsS0FBTSxHQUFPLFFBQVEsWUFBWSxPQUFPLENBQ3ZELE1BQU8sRUFBSyxNQUNaLFFBQVUsRUFBb0IsUUFDOUIsWUFBYSxFQUFLLGdCQUVYLEVBQWUsWUFBWSxVQUM3QixXQUNDLElBQUksS0FDQyxtQkFBbUIsRUFBVSxFQUFJLFdBSXBELHNCQUF1QixBQUFDLEdBQ2YsS0FBTyxJQUFxQyxJQUM3QyxJQUNFLEdBQVcsQ0FBRSxHQUFJLEVBQUssR0FBSSxNQUFPLEVBQUssTUFBTyxRQUFTLEVBQUssTUFBTyxZQUFhLEVBQUssZ0JBQ3BGLE1BQU8sR0FBSyxPQUFVLFNBQVUsTUFDNUIsR0FBYyxLQUFNLEdBQU8sRUFBSyxNQUFPLFFBQ3BDLFFBQWMsRUFBb0IsYUFFdkMsR0FBYyxLQUFNLEdBQU8sUUFBUSxZQUFZLE1BQU0sRUFBUyxHQUFJLEtBQy9ELEVBQWUscUJBQXFCLFVBQ3RDLFdBQ0MsSUFBSSxLQUNDLG1CQUFtQixFQUFVLEVBQUksV0FJcEQsZUFBZ0IsQUFBQyxHQUNSLEtBQU8sSUFBcUMsSUFDN0MsTUFDSSxHQUFPLFFBQVEsWUFBWSxPQUFPLEtBQy9CLEVBQWUsZUFBZSxVQUNoQyxXQUNDLElBQUksS0FDQyxtQkFBbUIsRUFBVSxFQUFJIn0=
