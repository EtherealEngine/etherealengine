import{ap as C}from"./three.module.0404e109.js";import{c as l,d as p,g as e,h as F,r as P}from"./avatarFunctions.c7a0e273.js";import{o as y,O as f}from"./[projectId].d5e44847.js";import{T as s}from"./SystemUpdateType.4e88f289.js";import{T as j}from"./TweenComponent.6854cb48.js";import"./index.0040ebb6.js";import"./vendor.c8b8cc93.js";import"./_app.009e96ac.js";import"./AuthService.6db25508.js";import"./AlertService.bfed2141.js";import"./feathers.081246a7.js";import"./index.9af95596.js";import"./upload.38e3baaf.js";const h=l("DesiredTransformComponent"),b=l("TransformChildComponent"),v=l("TransformParentComponent"),m=new C;m.order="YXZ";const c=new C;c.order="YXZ";async function W(i){const Q=p([v,s]),x=p([b,s]),D=p([y]),S=p([h]),A=p([j]),R=p([s,f]);return()=>{const{fixedDelta:T}=i;for(const n of Q(i)){const o=e(n,s),t=e(n,v);for(const r of t.children){if(!F(r,f))continue;const{value:{position:a,quaternion:u}}=e(r,f),d=e(r,s);d?(a.copy(d.position),u.copy(d.rotation)):(a.setScalar(0),u.set(0,0,0,0)),a.add(o.position),u.multiply(o.rotation)}}for(const n of x(i)){const o=e(n,b),t=o.parent,r=e(t,s),a=e(n,s);a&&r&&(a.position.setScalar(0).add(r.position).add(o.offsetPosition),a.rotation.set(0,0,0,1).multiply(r.rotation).multiply(o.offsetQuaternion))}for(const n of D(i)){const o=e(n,y)?.input,t=e(n,s),r=e(o,s);!r||!t||(t.position.copy(r.position),t.rotation.copy(r.rotation),P(n,y))}for(const n of S(i)){const o=e(n,h),t=e(n,s);t.position.lerp(o.position,o.positionRate*T),m.setFromQuaternion(t.rotation),t.rotation.slerp(o.rotation,o.rotationRate*T),c.setFromQuaternion(t.rotation),o.lockRotationAxis[0]&&(c.x=m.x),o.lockRotationAxis[2]&&(c.y=m.y),o.lockRotationAxis[1]&&(c.z=m.z),t.rotation.setFromEuler(c)}for(const n of A(i))e(n,j).tween.update();for(const n of R(i)){const o=e(n,s),t=e(n,f);if(!t.value){console.warn("object3D component on entity",n," is undefined");continue}t.value.position.copy(o.position),t.value.quaternion.copy(o.rotation),t.value.scale.copy(o.scale),t.value.updateMatrixWorld()}}}export{W as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNmb3JtU3lzdGVtLjAwYjRlNmUwLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9lbmdpbmUvc3JjL3RyYW5zZm9ybS9jb21wb25lbnRzL0Rlc2lyZWRUcmFuc2Zvcm1Db21wb25lbnQudHMiLCIuLi8uLi8uLi9lbmdpbmUvc3JjL3RyYW5zZm9ybS9jb21wb25lbnRzL1RyYW5zZm9ybUNoaWxkQ29tcG9uZW50LnRzIiwiLi4vLi4vLi4vZW5naW5lL3NyYy90cmFuc2Zvcm0vY29tcG9uZW50cy9UcmFuc2Zvcm1QYXJlbnRDb21wb25lbnQudHMiLCIuLi8uLi8uLi9lbmdpbmUvc3JjL3RyYW5zZm9ybS9zeXN0ZW1zL1RyYW5zZm9ybVN5c3RlbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IzLCBRdWF0ZXJuaW9uIH0gZnJvbSAndGhyZWUnXG5pbXBvcnQgeyBjcmVhdGVNYXBwZWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9lY3MvZnVuY3Rpb25zL0NvbXBvbmVudEZ1bmN0aW9ucydcblxuZXhwb3J0IHR5cGUgRGVzaXJlZFRyYW5zZm9ybUNvbXBvbmVudFR5cGUgPSB7XG4gIHBvc2l0aW9uOiBWZWN0b3IzXG4gIHJvdGF0aW9uOiBRdWF0ZXJuaW9uXG4gIHBvc2l0aW9uUmF0ZTogbnVtYmVyXG4gIHJvdGF0aW9uUmF0ZTogbnVtYmVyXG4gIGxvY2tSb3RhdGlvbkF4aXM6IFtib29sZWFuLCBib29sZWFuLCBib29sZWFuXVxufVxuXG5leHBvcnQgY29uc3QgRGVzaXJlZFRyYW5zZm9ybUNvbXBvbmVudCA9XG4gIGNyZWF0ZU1hcHBlZENvbXBvbmVudDxEZXNpcmVkVHJhbnNmb3JtQ29tcG9uZW50VHlwZT4oJ0Rlc2lyZWRUcmFuc2Zvcm1Db21wb25lbnQnKVxuIiwiaW1wb3J0IHsgUXVhdGVybmlvbiwgVmVjdG9yMyB9IGZyb20gJ3RocmVlJ1xuaW1wb3J0IHsgY3JlYXRlTWFwcGVkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZWNzL2Z1bmN0aW9ucy9Db21wb25lbnRGdW5jdGlvbnMnXG5cbmV4cG9ydCB0eXBlIFRyYW5zZm9ybUNoaWxkQ29tcG9uZW50VHlwZSA9IHtcbiAgcGFyZW50OiBhbnlcbiAgb2Zmc2V0UG9zaXRpb246IFZlY3RvcjNcbiAgb2Zmc2V0UXVhdGVybmlvbjogUXVhdGVybmlvblxufVxuXG5leHBvcnQgY29uc3QgVHJhbnNmb3JtQ2hpbGRDb21wb25lbnQgPSBjcmVhdGVNYXBwZWRDb21wb25lbnQ8VHJhbnNmb3JtQ2hpbGRDb21wb25lbnRUeXBlPignVHJhbnNmb3JtQ2hpbGRDb21wb25lbnQnKVxuIiwiaW1wb3J0IHsgY3JlYXRlTWFwcGVkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZWNzL2Z1bmN0aW9ucy9Db21wb25lbnRGdW5jdGlvbnMnXG5cbmV4cG9ydCB0eXBlIFRyYW5zZm9ybVBhcmVudENvbXBvbmVudFR5cGUgPSB7XG4gIGNoaWxkcmVuOiBhbnlbXVxufVxuXG5leHBvcnQgY29uc3QgVHJhbnNmb3JtUGFyZW50Q29tcG9uZW50ID0gY3JlYXRlTWFwcGVkQ29tcG9uZW50PFRyYW5zZm9ybVBhcmVudENvbXBvbmVudFR5cGU+KCdUcmFuc2Zvcm1QYXJlbnRDb21wb25lbnQnKVxuIiwiaW1wb3J0IHsgRXVsZXIsIFF1YXRlcm5pb24gfSBmcm9tICd0aHJlZSdcbmltcG9ydCB7IFN5c3RlbSB9IGZyb20gJy4uLy4uL2Vjcy9jbGFzc2VzL1N5c3RlbSdcbmltcG9ydCB7IFdvcmxkIH0gZnJvbSAnLi4vLi4vZWNzL2NsYXNzZXMvV29ybGQnXG5pbXBvcnQgeyBkZWZpbmVRdWVyeSwgZ2V0Q29tcG9uZW50LCBoYXNDb21wb25lbnQsIHJlbW92ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Vjcy9mdW5jdGlvbnMvQ29tcG9uZW50RnVuY3Rpb25zJ1xuaW1wb3J0IHsgT2JqZWN0M0RDb21wb25lbnQgfSBmcm9tICcuLi8uLi9zY2VuZS9jb21wb25lbnRzL09iamVjdDNEQ29tcG9uZW50J1xuaW1wb3J0IHsgQ29weVRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29weVRyYW5zZm9ybUNvbXBvbmVudCdcbmltcG9ydCB7IERlc2lyZWRUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL0Rlc2lyZWRUcmFuc2Zvcm1Db21wb25lbnQnXG5pbXBvcnQgeyBUcmFuc2Zvcm1DaGlsZENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvVHJhbnNmb3JtQ2hpbGRDb21wb25lbnQnXG5pbXBvcnQgeyBUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL1RyYW5zZm9ybUNvbXBvbmVudCdcbmltcG9ydCB7IFRyYW5zZm9ybVBhcmVudENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvVHJhbnNmb3JtUGFyZW50Q29tcG9uZW50J1xuaW1wb3J0IHsgVHdlZW5Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL1R3ZWVuQ29tcG9uZW50J1xuXG5jb25zdCBldWxlcjFZWFogPSBuZXcgRXVsZXIoKVxuZXVsZXIxWVhaLm9yZGVyID0gJ1lYWidcbmNvbnN0IGV1bGVyMllYWiA9IG5ldyBFdWxlcigpXG5ldWxlcjJZWFoub3JkZXIgPSAnWVhaJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBUcmFuc2Zvcm1TeXN0ZW0od29ybGQ6IFdvcmxkKTogUHJvbWlzZTxTeXN0ZW0+IHtcbiAgY29uc3QgcGFyZW50UXVlcnkgPSBkZWZpbmVRdWVyeShbVHJhbnNmb3JtUGFyZW50Q29tcG9uZW50LCBUcmFuc2Zvcm1Db21wb25lbnRdKVxuICBjb25zdCBjaGlsZFF1ZXJ5ID0gZGVmaW5lUXVlcnkoW1RyYW5zZm9ybUNoaWxkQ29tcG9uZW50LCBUcmFuc2Zvcm1Db21wb25lbnRdKVxuICBjb25zdCBjb3B5VHJhbnNmb3JtUXVlcnkgPSBkZWZpbmVRdWVyeShbQ29weVRyYW5zZm9ybUNvbXBvbmVudF0pXG4gIGNvbnN0IGRlc2lyZWRUcmFuc2Zvcm1RdWVyeSA9IGRlZmluZVF1ZXJ5KFtEZXNpcmVkVHJhbnNmb3JtQ29tcG9uZW50XSlcbiAgY29uc3QgdHdlZW5RdWVyeSA9IGRlZmluZVF1ZXJ5KFtUd2VlbkNvbXBvbmVudF0pXG4gIGNvbnN0IHRyYW5zZm9ybU9iamVjdFF1ZXJ5ID0gZGVmaW5lUXVlcnkoW1RyYW5zZm9ybUNvbXBvbmVudCwgT2JqZWN0M0RDb21wb25lbnRdKVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgeyBmaXhlZERlbHRhIH0gPSB3b3JsZFxuICAgIGZvciAoY29uc3QgZW50aXR5IG9mIHBhcmVudFF1ZXJ5KHdvcmxkKSkge1xuICAgICAgY29uc3QgcGFyZW50VHJhbnNmb3JtID0gZ2V0Q29tcG9uZW50KGVudGl0eSwgVHJhbnNmb3JtQ29tcG9uZW50KVxuICAgICAgY29uc3QgcGFyZW50aW5nQ29tcG9uZW50ID0gZ2V0Q29tcG9uZW50KGVudGl0eSwgVHJhbnNmb3JtUGFyZW50Q29tcG9uZW50KVxuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBwYXJlbnRpbmdDb21wb25lbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFoYXNDb21wb25lbnQoY2hpbGQsIE9iamVjdDNEQ29tcG9uZW50KSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHZhbHVlOiB7IHBvc2l0aW9uOiBjaGlsZFBvc2l0aW9uLCBxdWF0ZXJuaW9uOiBjaGlsZFF1YXRlcm5pb24gfVxuICAgICAgICB9ID0gZ2V0Q29tcG9uZW50KGNoaWxkLCBPYmplY3QzRENvbXBvbmVudClcbiAgICAgICAgY29uc3QgY2hpbGRUcmFuc2Zvcm1Db21wb25lbnQgPSBnZXRDb21wb25lbnQoY2hpbGQsIFRyYW5zZm9ybUNvbXBvbmVudClcbiAgICAgICAgLy8gcmVzZXQgdG8gXCJsb2NhbFwiXG4gICAgICAgIGlmIChjaGlsZFRyYW5zZm9ybUNvbXBvbmVudCkge1xuICAgICAgICAgIGNoaWxkUG9zaXRpb24uY29weShjaGlsZFRyYW5zZm9ybUNvbXBvbmVudC5wb3NpdGlvbilcbiAgICAgICAgICBjaGlsZFF1YXRlcm5pb24uY29weShjaGlsZFRyYW5zZm9ybUNvbXBvbmVudC5yb3RhdGlvbilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGlsZFBvc2l0aW9uLnNldFNjYWxhcigwKVxuICAgICAgICAgIGNoaWxkUXVhdGVybmlvbi5zZXQoMCwgMCwgMCwgMClcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgcGFyZW50XG4gICAgICAgIGNoaWxkUG9zaXRpb24uYWRkKHBhcmVudFRyYW5zZm9ybS5wb3NpdGlvbilcbiAgICAgICAgY2hpbGRRdWF0ZXJuaW9uLm11bHRpcGx5KHBhcmVudFRyYW5zZm9ybS5yb3RhdGlvbilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiBjaGlsZFF1ZXJ5KHdvcmxkKSkge1xuICAgICAgY29uc3QgY2hpbGRDb21wb25lbnQgPSBnZXRDb21wb25lbnQoZW50aXR5LCBUcmFuc2Zvcm1DaGlsZENvbXBvbmVudClcbiAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkQ29tcG9uZW50LnBhcmVudFxuICAgICAgY29uc3QgcGFyZW50VHJhbnNmb3JtID0gZ2V0Q29tcG9uZW50KHBhcmVudCwgVHJhbnNmb3JtQ29tcG9uZW50KVxuICAgICAgY29uc3QgY2hpbGRUcmFuc2Zvcm1Db21wb25lbnQgPSBnZXRDb21wb25lbnQoZW50aXR5LCBUcmFuc2Zvcm1Db21wb25lbnQpXG4gICAgICBpZiAoY2hpbGRUcmFuc2Zvcm1Db21wb25lbnQgJiYgcGFyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIGNoaWxkVHJhbnNmb3JtQ29tcG9uZW50LnBvc2l0aW9uLnNldFNjYWxhcigwKS5hZGQocGFyZW50VHJhbnNmb3JtLnBvc2l0aW9uKS5hZGQoY2hpbGRDb21wb25lbnQub2Zmc2V0UG9zaXRpb24pXG4gICAgICAgIGNoaWxkVHJhbnNmb3JtQ29tcG9uZW50LnJvdGF0aW9uXG4gICAgICAgICAgLnNldCgwLCAwLCAwLCAxKVxuICAgICAgICAgIC5tdWx0aXBseShwYXJlbnRUcmFuc2Zvcm0ucm90YXRpb24pXG4gICAgICAgICAgLm11bHRpcGx5KGNoaWxkQ29tcG9uZW50Lm9mZnNldFF1YXRlcm5pb24pXG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgY29weVRyYW5zZm9ybVF1ZXJ5KHdvcmxkKSkge1xuICAgICAgY29uc3QgaW5wdXRFbnRpdHkgPSBnZXRDb21wb25lbnQoZW50aXR5LCBDb3B5VHJhbnNmb3JtQ29tcG9uZW50KT8uaW5wdXRcbiAgICAgIGNvbnN0IG91dHB1dFRyYW5zZm9ybSA9IGdldENvbXBvbmVudChlbnRpdHksIFRyYW5zZm9ybUNvbXBvbmVudClcbiAgICAgIGNvbnN0IGlucHV0VHJhbnNmb3JtID0gZ2V0Q29tcG9uZW50KGlucHV0RW50aXR5LCBUcmFuc2Zvcm1Db21wb25lbnQpXG5cbiAgICAgIGlmICghaW5wdXRUcmFuc2Zvcm0gfHwgIW91dHB1dFRyYW5zZm9ybSkge1xuICAgICAgICAvLyB3YWl0IGZvciBib3RoIHRyYW5zZm9ybXMgdG8gYXBwZWFyP1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBvdXRwdXRUcmFuc2Zvcm0ucG9zaXRpb24uY29weShpbnB1dFRyYW5zZm9ybS5wb3NpdGlvbilcbiAgICAgIG91dHB1dFRyYW5zZm9ybS5yb3RhdGlvbi5jb3B5KGlucHV0VHJhbnNmb3JtLnJvdGF0aW9uKVxuXG4gICAgICByZW1vdmVDb21wb25lbnQoZW50aXR5LCBDb3B5VHJhbnNmb3JtQ29tcG9uZW50KVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGRlc2lyZWRUcmFuc2Zvcm1RdWVyeSh3b3JsZCkpIHtcbiAgICAgIGNvbnN0IGRlc2lyZWRUcmFuc2Zvcm0gPSBnZXRDb21wb25lbnQoZW50aXR5LCBEZXNpcmVkVHJhbnNmb3JtQ29tcG9uZW50KVxuXG4gICAgICBjb25zdCBtdXRhYmxlVHJhbnNmb3JtID0gZ2V0Q29tcG9uZW50KGVudGl0eSwgVHJhbnNmb3JtQ29tcG9uZW50KVxuICAgICAgbXV0YWJsZVRyYW5zZm9ybS5wb3NpdGlvbi5sZXJwKGRlc2lyZWRUcmFuc2Zvcm0ucG9zaXRpb24sIGRlc2lyZWRUcmFuc2Zvcm0ucG9zaXRpb25SYXRlICogZml4ZWREZWx0YSlcblxuICAgICAgLy8gc3RvcmUgcm90YXRpb24gYmVmb3JlIGludGVycG9sYXRpb25cbiAgICAgIGV1bGVyMVlYWi5zZXRGcm9tUXVhdGVybmlvbihtdXRhYmxlVHJhbnNmb3JtLnJvdGF0aW9uKVxuICAgICAgLy8gbGVycCB0byBkZXNpcmVkIHJvdGF0aW9uXG5cbiAgICAgIG11dGFibGVUcmFuc2Zvcm0ucm90YXRpb24uc2xlcnAoZGVzaXJlZFRyYW5zZm9ybS5yb3RhdGlvbiwgZGVzaXJlZFRyYW5zZm9ybS5yb3RhdGlvblJhdGUgKiBmaXhlZERlbHRhKVxuICAgICAgZXVsZXIyWVhaLnNldEZyb21RdWF0ZXJuaW9uKG11dGFibGVUcmFuc2Zvcm0ucm90YXRpb24pXG4gICAgICAvLyB1c2UgYXhpcyBsb2NrcyAtIHllcyB0aGlzIGlzIGNvcnJlY3QsIHRoZSBheGlzIG9yZGVyIGlzIHdlaXJkIGJlY2F1c2UgcXVhdGVybmlvbnNcbiAgICAgIGlmIChkZXNpcmVkVHJhbnNmb3JtLmxvY2tSb3RhdGlvbkF4aXNbMF0pIHtcbiAgICAgICAgZXVsZXIyWVhaLnggPSBldWxlcjFZWFoueFxuICAgICAgfVxuICAgICAgaWYgKGRlc2lyZWRUcmFuc2Zvcm0ubG9ja1JvdGF0aW9uQXhpc1syXSkge1xuICAgICAgICBldWxlcjJZWFoueSA9IGV1bGVyMVlYWi55XG4gICAgICB9XG4gICAgICBpZiAoZGVzaXJlZFRyYW5zZm9ybS5sb2NrUm90YXRpb25BeGlzWzFdKSB7XG4gICAgICAgIGV1bGVyMllYWi56ID0gZXVsZXIxWVhaLnpcbiAgICAgIH1cbiAgICAgIG11dGFibGVUcmFuc2Zvcm0ucm90YXRpb24uc2V0RnJvbUV1bGVyKGV1bGVyMllYWilcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiB0d2VlblF1ZXJ5KHdvcmxkKSkge1xuICAgICAgY29uc3QgdHdlZW4gPSBnZXRDb21wb25lbnQoZW50aXR5LCBUd2VlbkNvbXBvbmVudClcbiAgICAgIHR3ZWVuLnR3ZWVuLnVwZGF0ZSgpXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgdHJhbnNmb3JtT2JqZWN0UXVlcnkod29ybGQpKSB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBnZXRDb21wb25lbnQoZW50aXR5LCBUcmFuc2Zvcm1Db21wb25lbnQpXG4gICAgICBjb25zdCBvYmplY3QzRENvbXBvbmVudCA9IGdldENvbXBvbmVudChlbnRpdHksIE9iamVjdDNEQ29tcG9uZW50KVxuXG4gICAgICBpZiAoIW9iamVjdDNEQ29tcG9uZW50LnZhbHVlKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybignb2JqZWN0M0QgY29tcG9uZW50IG9uIGVudGl0eScsIGVudGl0eSwgJyBpcyB1bmRlZmluZWQnKVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBvYmplY3QzRENvbXBvbmVudC52YWx1ZS5wb3NpdGlvbi5jb3B5KHRyYW5zZm9ybS5wb3NpdGlvbilcbiAgICAgIG9iamVjdDNEQ29tcG9uZW50LnZhbHVlLnF1YXRlcm5pb24uY29weSh0cmFuc2Zvcm0ucm90YXRpb24pXG4gICAgICBvYmplY3QzRENvbXBvbmVudC52YWx1ZS5zY2FsZS5jb3B5KHRyYW5zZm9ybS5zY2FsZSlcbiAgICAgIG9iamVjdDNEQ29tcG9uZW50LnZhbHVlLnVwZGF0ZU1hdHJpeFdvcmxkKClcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiNmdCQVdhLEdBQ1gsRUFBcUQsNkJDSDFDLEVBQTBCLEVBQW1ELDJCQ0g3RSxFQUEyQixFQUFvRCw0QkNNdEYsRUFBWSxHQUFJLEdBQ3RCLEVBQVUsTUFBUSxNQUNsQixLQUFNLEdBQVksR0FBSSxHQUN0QixFQUFVLE1BQVEsdUJBRTRCLEVBQStCLE1BQ3JFLEdBQWMsRUFBWSxDQUFDLEVBQTBCLElBQ3JELEVBQWEsRUFBWSxDQUFDLEVBQXlCLElBQ25ELEVBQXFCLEVBQVksQ0FBQyxJQUNsQyxFQUF3QixFQUFZLENBQUMsSUFDckMsRUFBYSxFQUFZLENBQUMsSUFDMUIsRUFBdUIsRUFBWSxDQUFDLEVBQW9CLFVBRXZELElBQU0sTUFDTCxDQUFFLGNBQWUsV0FDWixLQUFVLEdBQVksR0FBUSxNQUNqQyxHQUFrQixFQUFhLEVBQVEsR0FDdkMsRUFBcUIsRUFBYSxFQUFRLFlBQ3JDLEtBQVMsR0FBbUIsU0FBVSxJQUMzQyxDQUFDLEVBQWEsRUFBTyxpQkFHbkIsQ0FDSixNQUFPLENBQUUsU0FBVSxFQUFlLFdBQVksSUFDNUMsRUFBYSxFQUFPLEdBQ2xCLEVBQTBCLEVBQWEsRUFBTyxHQUVoRCxLQUNZLEtBQUssRUFBd0IsWUFDM0IsS0FBSyxFQUF3QixjQUUvQixVQUFVLEtBQ1IsSUFBSSxFQUFHLEVBQUcsRUFBRyxNQUdqQixJQUFJLEVBQWdCLFlBQ2xCLFNBQVMsRUFBZ0Isb0JBSWxDLEtBQVUsR0FBVyxHQUFRLE1BQ2hDLEdBQWlCLEVBQWEsRUFBUSxHQUN0QyxFQUFTLEVBQWUsT0FDeEIsRUFBa0IsRUFBYSxFQUFRLEdBQ3ZDLEVBQTBCLEVBQWEsRUFBUSxHQUNqRCxHQUEyQixNQUNMLFNBQVMsVUFBVSxHQUFHLElBQUksRUFBZ0IsVUFBVSxJQUFJLEVBQWUsa0JBQ3ZFLFNBQ3JCLElBQUksRUFBRyxFQUFHLEVBQUcsR0FDYixTQUFTLEVBQWdCLFVBQ3pCLFNBQVMsRUFBZSw0QkFJcEIsS0FBVSxHQUFtQixHQUFRLE1BQ3hDLEdBQWMsRUFBYSxFQUFRLElBQXlCLE1BQzVELEVBQWtCLEVBQWEsRUFBUSxHQUN2QyxFQUFpQixFQUFhLEVBQWEsR0FFN0MsQ0FBQyxHQUFrQixDQUFDLE1BS1IsU0FBUyxLQUFLLEVBQWUsWUFDN0IsU0FBUyxLQUFLLEVBQWUsWUFFN0IsRUFBUSxhQUdmLEtBQVUsR0FBc0IsR0FBUSxNQUMzQyxHQUFtQixFQUFhLEVBQVEsR0FFeEMsRUFBbUIsRUFBYSxFQUFRLEtBQzdCLFNBQVMsS0FBSyxFQUFpQixTQUFVLEVBQWlCLGFBQWUsS0FHaEYsa0JBQWtCLEVBQWlCLFlBRzVCLFNBQVMsTUFBTSxFQUFpQixTQUFVLEVBQWlCLGFBQWUsS0FDakYsa0JBQWtCLEVBQWlCLFVBRXpDLEVBQWlCLGlCQUFpQixPQUMxQixFQUFJLEVBQVUsR0FFdEIsRUFBaUIsaUJBQWlCLE9BQzFCLEVBQUksRUFBVSxHQUV0QixFQUFpQixpQkFBaUIsT0FDMUIsRUFBSSxFQUFVLEtBRVQsU0FBUyxhQUFhLFlBRzlCLEtBQVUsR0FBVyxHQUNoQixFQUFhLEVBQVEsR0FDN0IsTUFBTSxrQkFHSCxLQUFVLEdBQXFCLEdBQVEsTUFDMUMsR0FBWSxFQUFhLEVBQVEsR0FDakMsRUFBb0IsRUFBYSxFQUFRLE1BRTNDLENBQUMsRUFBa0IsTUFBTyxTQUNwQixLQUFLLCtCQUFnQyxFQUFRLDRCQUlyQyxNQUFNLFNBQVMsS0FBSyxFQUFVLFlBQzlCLE1BQU0sV0FBVyxLQUFLLEVBQVUsWUFDaEMsTUFBTSxNQUFNLEtBQUssRUFBVSxTQUMzQixNQUFNIn0=
