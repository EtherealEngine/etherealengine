import{A as i}from"./AlertService.5d8abaff.js";import{c}from"./feathers.32f4d4e8.js";import{al as s,am as E}from"./_app.f0a72417.js";const n={locationsRetrieved:e=>({type:"ADMIN_LOCATIONS_RETRIEVED",locations:e}),locationRetrieved:e=>({type:"ADMIN_LOCATION_RETRIEVED",location:e}),locationCreated:e=>({type:"ADMIN_LOCATION_CREATED",location:e}),locationPatched:e=>({type:"ADMIN_LOCATION_PATCHED",location:e}),locationRemoved:e=>({type:"ADMIN_LOCATION_REMOVED",location:e}),locationBanCreated:()=>({type:"ADMIN_LOCATION_BAN_CREATED"}),fetchingCurrentLocation:()=>({type:"ADMIN_FETCH_CURRENT_LOCATION"}),locationNotFound:()=>({type:"ADMIN_LOCATION_NOT_FOUND"}),locationTypesRetrieved:e=>({type:"ADMIN_LOCATION_TYPES_RETRIEVED",locationTypesResult:e})},A={setReadScopeError:(e,t)=>({type:"SET_SCOPE_READ_ERROR",message:e,statusCode:t}),setWriteScopeError:(e,t)=>({type:"SET_SCOPE_WRITE_ERROR",message:e,statusCode:t})},R={fetchLocationTypes:()=>async e=>{const t=await c.service("location-type").find();e(n.locationTypesRetrieved(t))},patchLocation:(e,t)=>async r=>{try{const o=await c.service("location").patch(e,t);r(n.locationPatched(o))}catch(o){console.error(o),i.dispatchAlertError(r,o.message)}},removeLocation:e=>async t=>{const r=await c.service("location").remove(e);t(n.locationRemoved(r))},createLocation:e=>async t=>{try{const r=await c.service("location").create(e);t(n.locationCreated(r))}catch(r){console.error(r),i.dispatchAlertError(t,r.message)}},fetchAdminLocations:e=>async t=>{try{const r=await c.service("location").find({query:{$sort:{name:1},$skip:s().locations.skip.value,$limit:s().locations.limit.value,adminnedLocations:!0}});t(n.locationsRetrieved(r))}catch(r){console.error(r),t(A.setReadScopeError(r.message,r.statusCode))}}},p={collectionsFetched:e=>{debugger;return{type:"ADMIN_SCENES_RETRIEVED",sceneDataResult:e}}},y={fetchAdminScenes:e=>async t=>{const r=E(),o=r.scenes.skip.value,a=r.scenes.limit.value,l=await c.service("collection").find({query:{$skip:e==="increment"?o+a:e==="decrement"?o-a:o,$limit:e==="all"?1e3:a,$sort:{name:1}}});t(p.collectionsFetched(l))},deleteScene:e=>async t=>{}};export{R as L,y as S};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
