import{E as e,u as d,r as f,a as i,h as y,g as c,A as X}from"./avatarFunctions.6d66cf01.js";import{Q as g,V as l,G as R}from"./three.module.493739a3.js";import{X as p,d as m,F as H,e as I,P as h,N as u}from"./[projectId].a008d20c.js";import{T as v}from"./SystemUpdateType.772fc25d.js";import{X as x}from"./XRHandsInputComponent.3d76e9a2.js";import{i as j}from"./addControllerModels.14512c2e.js";const F=new g().setFromAxisAngle(new l(0,1,0),Math.PI),b=()=>{const o=e.xrRenderer.getController(0),a=e.xrRenderer.getController(1),r=e.xrRenderer.getControllerGrip(0),n=e.xrRenderer.getControllerGrip(1),t=new R;e.scene.remove(e.camera),t.add(e.camera);const s=new R,C=d();f(C.localClientEntity,I),i(C.localClientEntity,p,{head:s,container:t,controllerLeft:o,controllerRight:a,controllerGripLeft:r,controllerGripRight:n}),S(),m(e.userId,()=>u.setXRMode({userId:e.userId,enabled:!0}))},N=()=>{e.xrSession.end(),e.xrSession=null,e.scene.add(e.camera),i(d().localClientEntity,I,H),f(d().localClientEntity,p),m(e.userId,()=>u.setXRMode({userId:e.userId,enabled:!1}))},S=()=>{const o=d(),a=[e.xrRenderer.getHand(0),e.xrRenderer.getHand(1)];let r=!1;a.forEach(n=>{n.addEventListener("connected",t=>{const s=t.data;!s.hand||n.userData.mesh||(y(o.localClientEntity,x)||i(o.localClientEntity,x,{hands:a}),j(n,s.handedness),r||(m(e.userId,()=>u.xrHandsConnected({userId:e.userId})),r=!0))})})},w=new l;new l;new l(1,1,1);const E=new g,P=(o,a=h.NONE)=>{c(o,X);const r=c(o,v),n=c(o,p);if(n){const t=a===h.LEFT?n.controllerLeft:n.controllerRight;if(t)return t.updateMatrixWorld(!0),{position:t.getWorldPosition(w),rotation:t.getWorldQuaternion(E)}}return{position:w.set(-.35,1,0).applyQuaternion(r.rotation).add(r.position),rotation:E.copy(r.rotation).multiply(F)}};export{N as e,P as g,b as s};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
