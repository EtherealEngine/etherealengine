import{A as d}from"./AlertService.bfed2141.js";import{c as o}from"./feathers.081246a7.js";import{u as c}from"./upload.38e3baaf.js";const s={thefeedsRetrieved:e=>({type:"THEFEEDS_RETRIEVED",thefeeds:e}),fetchingTheFeeds:()=>({type:"THEFEEDS_FETCH"}),deleteTheFeeds:e=>({type:"REMOVE_THEFEEDS",thefeeds:e}),addTheFeeds:e=>({type:"ADD_THEFEEDS",thefeeds:e}),updateTheFeedsInList:e=>({type:"UPDATE_THEFEEDS",thefeeds:e}),addTheFeedsFire:e=>({type:"ADD_THEFEEDS_FIRES",thefeeds:e}),removeTheFeedsFire:e=>({type:"REMOVE_THEFEEDS_FIRES",thefeeds:e})},l={getTheFeedsNew:()=>async e=>{try{e(s.fetchingTheFeeds());const r=await o.service("thefeeds").find();e(s.thefeedsRetrieved(r.data))}catch(r){console.log(r),d.dispatchAlertError(e,r.message)}},createTheFeedsNew:e=>async r=>{try{const t=await c(e.video,null);console.log("storedVideo",t);const i=await o.service("thefeeds").create({title:e.title,videoId:t.file_id,description:e.description});r(s.addTheFeeds(i))}catch(t){console.log(t),d.dispatchAlertError(r,t.message)}},updateTheFeedsAsAdmin:e=>async r=>{try{let t={id:e.id,title:e.title,videoId:e.video,description:e.description};if(typeof e.video=="object"){const n=await c(e.video,null);t.videoId=n.file_id}const i=await o.service("thefeeds").patch(t.id,t);r(s.updateTheFeedsInList(i))}catch(t){console.log(t),d.dispatchAlertError(r,t.message)}},removeTheFeeds:e=>async r=>{try{await o.service("thefeeds").remove(e),r(s.deleteTheFeeds(e))}catch(t){console.log(t),d.dispatchAlertError(r,t.message)}}};export{s as T,l as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhlRmVlZHNTZXJ2aWNlLjI3OTNlMTFjLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVkdWNlcnMvdGhlZmVlZHMvVGhlRmVlZHNBY3Rpb25zLnRzIiwiLi4vLi4vc3JjL3JlZHVjZXJzL3RoZWZlZWRzL1RoZUZlZWRzU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBhdXRob3IgR2xlYiBPcmRpbnNreSA8Z2xlYm9yZGluc2tpampAZ21haWwuY29tPlxuICovXG5cbmltcG9ydCB7IFRoZUZlZWRzU2hvcnQsIFRoZUZlZWRzIH0gZnJvbSAnQHhyZW5naW5lL2NvbW1vbi9zcmMvaW50ZXJmYWNlcy9GZWVkcydcblxuZXhwb3J0IGNvbnN0IFRoZUZlZWRzQWN0aW9uID0ge1xuICB0aGVmZWVkc1JldHJpZXZlZDogKHRoZWZlZWRzOiBUaGVGZWVkc1tdKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ2FjdGlvbnMnLHRoZWZlZWRzKVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnVEhFRkVFRFNfUkVUUklFVkVEJyBhcyBjb25zdCxcbiAgICAgIHRoZWZlZWRzOiB0aGVmZWVkc1xuICAgIH1cbiAgfSxcbiAgZmV0Y2hpbmdUaGVGZWVkczogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnVEhFRkVFRFNfRkVUQ0gnIGFzIGNvbnN0XG4gICAgfVxuICB9LFxuICBkZWxldGVUaGVGZWVkczogKHRoZWZlZWRzSWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnUkVNT1ZFX1RIRUZFRURTJyBhcyBjb25zdCxcbiAgICAgIHRoZWZlZWRzOiB0aGVmZWVkc0lkXG4gICAgfVxuICB9LFxuICBhZGRUaGVGZWVkczogKHRoZWZlZWRzOiBUaGVGZWVkcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnQUREX1RIRUZFRURTJyBhcyBjb25zdCxcbiAgICAgIHRoZWZlZWRzOiB0aGVmZWVkc1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlVGhlRmVlZHNJbkxpc3Q6ICh0aGVmZWVkczogVGhlRmVlZHMpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ1VQREFURV9USEVGRUVEUycgYXMgY29uc3QsXG4gICAgICB0aGVmZWVkczogdGhlZmVlZHNcbiAgICB9XG4gIH0sXG4gIGFkZFRoZUZlZWRzRmlyZTogKHRoZWZlZWRzOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0FERF9USEVGRUVEU19GSVJFUycgYXMgY29uc3QsXG4gICAgICB0aGVmZWVkczogdGhlZmVlZHNcbiAgICB9XG4gIH0sXG4gIHJlbW92ZVRoZUZlZWRzRmlyZTogKHRoZWZlZWRzOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ1JFTU9WRV9USEVGRUVEU19GSVJFUycgYXMgY29uc3QsXG4gICAgICB0aGVmZWVkczogdGhlZmVlZHNcbiAgICB9XG4gIH1cbn1cbi8vVGhlIGNvZGUgYmVsb3cgaXMgbm90IGluIHVzZSBFTkRcblxuZXhwb3J0IHR5cGUgVGhlRmVlZHNBY3Rpb25UeXBlID0gUmV0dXJuVHlwZTx0eXBlb2YgVGhlRmVlZHNBY3Rpb25ba2V5b2YgdHlwZW9mIFRoZUZlZWRzQWN0aW9uXT5cbiIsIi8qKlxuICogQGF1dGhvciBHbGViIE9yZGluc2t5IDxnbGVib3JkaW5za2lqakBnbWFpbC5jb20+XG4gKi9cblxuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvY29tbW9uL3JlZHVjZXJzL2FsZXJ0L0FsZXJ0U2VydmljZSdcbmltcG9ydCB7IGNsaWVudCB9IGZyb20gJ0B4cmVuZ2luZS9jbGllbnQtY29yZS9zcmMvZmVhdGhlcnMnXG5pbXBvcnQgeyB1cGxvYWQgfSBmcm9tICdAeHJlbmdpbmUvZW5naW5lL3NyYy9zY2VuZS9mdW5jdGlvbnMvdXBsb2FkJ1xuaW1wb3J0IHsgVGhlRmVlZHNBY3Rpb24gfSBmcm9tICcuL1RoZUZlZWRzQWN0aW9ucydcblxuZXhwb3J0IGNvbnN0IFRoZUZlZWRzU2VydmljZSA9IHtcbiAgZ2V0VGhlRmVlZHNOZXc6ICgpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBkaXNwYXRjaChUaGVGZWVkc0FjdGlvbi5mZXRjaGluZ1RoZUZlZWRzKCkpXG4gICAgICAgIGNvbnN0IHRoZWZlZWRzID0gYXdhaXQgY2xpZW50LnNlcnZpY2UoJ3RoZWZlZWRzJykuZmluZCgpXG4gICAgICAgIGRpc3BhdGNoKFRoZUZlZWRzQWN0aW9uLnRoZWZlZWRzUmV0cmlldmVkKHRoZWZlZWRzLmRhdGEpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjcmVhdGVUaGVGZWVkc05ldzogKGRhdGEpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzdG9yZWRWaWRlbyA9IGF3YWl0IHVwbG9hZChkYXRhLnZpZGVvLCBudWxsKVxuICAgICAgICBjb25zb2xlLmxvZygnc3RvcmVkVmlkZW8nLCBzdG9yZWRWaWRlbylcbiAgICAgICAgY29uc3QgdGhlZmVlZHMgPSBhd2FpdCBjbGllbnQuc2VydmljZSgndGhlZmVlZHMnKS5jcmVhdGUoe1xuICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgIHZpZGVvSWQ6IChzdG9yZWRWaWRlbyBhcyBhbnkpLmZpbGVfaWQsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb25cbiAgICAgICAgfSlcbiAgICAgICAgZGlzcGF0Y2goVGhlRmVlZHNBY3Rpb24uYWRkVGhlRmVlZHModGhlZmVlZHMpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB1cGRhdGVUaGVGZWVkc0FzQWRtaW46IChkYXRhOiBhbnkpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKGRpc3BhdGNoOiBEaXNwYXRjaCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgdGhlZmVlZHMgPSB7IGlkOiBkYXRhLmlkLCB0aXRsZTogZGF0YS50aXRsZSwgdmlkZW9JZDogZGF0YS52aWRlbywgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24gfVxuICAgICAgICBpZiAodHlwZW9mIGRhdGEudmlkZW8gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgY29uc3Qgc3RvcmVkVmlkZW8gPSBhd2FpdCB1cGxvYWQoZGF0YS52aWRlbywgbnVsbClcbiAgICAgICAgICB0aGVmZWVkc1sndmlkZW9JZCddID0gKHN0b3JlZFZpZGVvIGFzIGFueSkuZmlsZV9pZFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRJdGVtID0gYXdhaXQgY2xpZW50LnNlcnZpY2UoJ3RoZWZlZWRzJykucGF0Y2godGhlZmVlZHMuaWQsIHRoZWZlZWRzKVxuICAgICAgICBkaXNwYXRjaChUaGVGZWVkc0FjdGlvbi51cGRhdGVUaGVGZWVkc0luTGlzdCh1cGRhdGVkSXRlbSkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICBBbGVydFNlcnZpY2UuZGlzcGF0Y2hBbGVydEVycm9yKGRpc3BhdGNoLCBlcnIubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlbW92ZVRoZUZlZWRzOiAodGhlZmVlZHNJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaDogRGlzcGF0Y2gpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2xpZW50LnNlcnZpY2UoJ3RoZWZlZWRzJykucmVtb3ZlKHRoZWZlZWRzSWQpXG4gICAgICAgIGRpc3BhdGNoKFRoZUZlZWRzQWN0aW9uLmRlbGV0ZVRoZUZlZWRzKHRoZWZlZWRzSWQpKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgQWxlcnRTZXJ2aWNlLmRpc3BhdGNoQWxlcnRFcnJvcihkaXNwYXRjaCwgZXJyLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IndJQU1hLEdBQWlCLENBQzVCLGtCQUFtQixBQUFDLEdBRVgsRUFDTCxLQUFNLHFCQUNOLGFBR0osaUJBQWtCLElBQ1QsRUFDTCxLQUFNLG1CQUdWLGVBQWdCLEFBQUMsR0FDUixFQUNMLEtBQU0sa0JBQ04sU0FBVSxJQUdkLFlBQWEsQUFBQyxHQUNMLEVBQ0wsS0FBTSxlQUNOLGFBR0oscUJBQXNCLEFBQUMsR0FDZCxFQUNMLEtBQU0sa0JBQ04sYUFHSixnQkFBaUIsQUFBQyxHQUNULEVBQ0wsS0FBTSxxQkFDTixhQUdKLG1CQUFvQixBQUFDLEdBQ1osRUFDTCxLQUFNLHdCQUNOLGNDcENPLEVBQWtCLENBQzdCLGVBQWdCLElBQ1AsS0FBTyxJQUFxQyxJQUM3QyxHQUNPLEVBQWUseUJBQ2xCLEdBQVcsS0FBTSxHQUFPLFFBQVEsWUFBWSxTQUN6QyxFQUFlLGtCQUFrQixFQUFTLGFBQzVDLFdBQ0MsSUFBSSxLQUNDLG1CQUFtQixFQUFVLEVBQUksV0FJcEQsa0JBQW1CLEFBQUMsR0FDWCxLQUFPLElBQXFDLElBQzdDLE1BQ0ksR0FBYyxLQUFNLEdBQU8sRUFBSyxNQUFPLGNBQ3JDLElBQUksY0FBZSxRQUNyQixHQUFXLEtBQU0sR0FBTyxRQUFRLFlBQVksT0FBTyxDQUN2RCxNQUFPLEVBQUssTUFDWixRQUFVLEVBQW9CLFFBQzlCLFlBQWEsRUFBSyxnQkFFWCxFQUFlLFlBQVksVUFDN0IsV0FDQyxJQUFJLEtBQ0MsbUJBQW1CLEVBQVUsRUFBSSxXQUlwRCxzQkFBdUIsQUFBQyxHQUNmLEtBQU8sSUFBcUMsSUFDN0MsSUFDRSxHQUFXLENBQUUsR0FBSSxFQUFLLEdBQUksTUFBTyxFQUFLLE1BQU8sUUFBUyxFQUFLLE1BQU8sWUFBYSxFQUFLLGdCQUNwRixNQUFPLEdBQUssT0FBVSxTQUFVLE1BQzVCLEdBQWMsS0FBTSxHQUFPLEVBQUssTUFBTyxRQUNwQyxRQUFjLEVBQW9CLGFBRXZDLEdBQWMsS0FBTSxHQUFPLFFBQVEsWUFBWSxNQUFNLEVBQVMsR0FBSSxLQUMvRCxFQUFlLHFCQUFxQixVQUN0QyxXQUNDLElBQUksS0FDQyxtQkFBbUIsRUFBVSxFQUFJLFdBSXBELGVBQWdCLEFBQUMsR0FDUixLQUFPLElBQXFDLElBQzdDLE1BQ0ksR0FBTyxRQUFRLFlBQVksT0FBTyxLQUMvQixFQUFlLGVBQWUsVUFDaEMsV0FDQyxJQUFJLEtBQ0MsbUJBQW1CLEVBQVUsRUFBSSJ9
