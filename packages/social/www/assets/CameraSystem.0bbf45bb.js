import{V as d,Q as w,c1 as E,ag as I,a9 as u}from"./three.module.493739a3.js";import{c as S,d as b,A as T,a as y,E as c,g as i,C as j,r as F}from"./avatarFunctions.6d66cf01.js";import{e as p,T as M,c as P,f as Q,O as L}from"./[projectId].a008d20c.js";import{T as h,$ as v,a0 as R}from"./SystemUpdateType.772fc25d.js";import"./index.7b02be28.js";import"./vendor.475cb2ff.js";import"./_app.f0a72417.js";import"./AuthService.e8999ddc.js";import"./AlertService.5d8abaff.js";import"./feathers.32f4d4e8.js";import"./index.81138b53.js";import"./upload.bd537b46.js";const H=S("CameraComponent");function k(a,e){const t=a.toArray(),o=t.indexOf(Math.max(...t)),s=t.indexOf(Math.min(...t)),n=t.findIndex((m,l)=>l!=s&&l!=o);let r=t[n];t[n]=-t[o],t[o]=r,t[s]=0,e.fromArray(t).normalize()}const g=new d,A=new d;function q(a,e,t){if(e.length<1)return;const o=a.length(),s=2*Math.PI/e.length,n=Math.tan(t)*o;k(a,g),A.crossVectors(a,g).normalize();for(let r=0;r<e.length;r++)e[r].addScaledVector(g,Math.cos(s*r)).addScaledVector(A,Math.sin(s*r)).multiplyScalar(n).add(a).normalize()}const D=new d,U=new w,O=new d(0,1,0),X=new d,V=new I,C=new d,Z=new d,$=6,x=[],W=Math.PI/6,_=[],B=!1,pt=(a,e,t)=>{t&&(e=e*Math.PI/180);const o=Math.atan2(a.x,a.z),s=o-e;return Math.abs(s)%Math.PI>1e-4&&(a.setX(Math.sin(o-s)),a.setZ(Math.cos(o-s))),a},z=(a,e)=>{i(a,L).value.traverse(o=>{const s=o.material;!s||(s.opacity=e,s.transparent=e<.95)})},G=a=>{if(!a)return;const e=i(a,p),t=Math.min(e.distance/e.minDistance,1);z(a,t)},J=(a,e)=>{if(!a)return;const t=i(a,p),o=i(a,M),s=.001;if(Math.abs(o.phi-t.phi)<s&&Math.abs(o.theta-t.theta)<s){F(a,M);return}t.phi=v(t.phi,o.phi,o.phiVelocity,o.time,e),t.theta=v(t.theta,o.theta,o.thetaVelocity,o.time,e)},K=(a,e)=>{const t=i(a,p),o=i(c.activeCameraEntity,h),s=Z.subVectors(o.position,e);q(s,x,W);let n=t.maxDistance;t.raycaster.set(e,s.normalize());const r=t.raycaster.intersectObjects(c.scene.children,!0);return r[0]&&r[0].distance<n&&(n=r[0].distance),x.forEach((m,l)=>{t.raycaster.set(e,m);const f=t.raycaster.intersectObjects(c.scene.children,!0);f[0]&&f[0].distance<n&&(n=f[0].distance)}),n},N=(a,e)=>{const t=i(a,T),o=i(a,h),s=i(a,p),n=Math.min(s.distance/s.minDistance,1),r=s.shoulderSide?-1:1,m=R(0,.2,n)*r,l=R(0,.25,n);e.set(m,t.avatarHeight+l,0),e.applyQuaternion(o.rotation),e.add(o.position)},Y=(a,e)=>{if(!a)return;const t=i(a,p);t.phi=Math.min(85,Math.max(-70,t.phi)),N(a,C);let o=t.zoomLevel;t.zoomLevel>=t.minDistance&&(o=K(a,C)),t.distance=v(t.distance,Math.min(t.zoomLevel,o),t.zoomVelocity,.3,e);const s=t.theta,n=u.degToRad(s),r=u.degToRad(t.phi),m=i(c.activeCameraEntity,h);m.position.set(C.x+t.distance*Math.sin(n)*Math.cos(r),C.y+t.distance*Math.sin(r),C.z+t.distance*Math.cos(n)*Math.cos(r)),D.copy(m.position).sub(C).normalize(),V.lookAt(D,X,O),m.rotation.setFromRotationMatrix(V);const l=i(a,h);if(t.locked){const f=u.degToRad(s+180)%(Math.PI*2);l.rotation.slerp(U.setFromAxisAngle(O,f),e*4)}};async function ft(a){const e=b([p,h,T]),t=b([p,M]),o=P();return y(o,H,{}),y(o,h,{position:new d,rotation:new w,scale:new d(1,1,1)}),y(o,Q,{}),c.activeCameraEntity=o,()=>{const{delta:s}=a;for(const n of e.enter()){const r=i(n,p);r.raycaster.layers.set(j.Scene),r.raycaster.firstHitOnly=!0,r.raycaster.far=r.maxDistance,c.activeCameraFollowTarget=n;for(let m=0;m<$;m++)if(x.push(new d),B){const l=new E;_.push(l),l.traverse(f=>{f.layers.set(j.Avatar)}),c.scene.add(l)}}for(const n of e.exit())z(n,1),c.activeCameraFollowTarget=null;for(const n of e(a))Y(n,s),G(n);for(const n of t(a))J(n,s);if(c.xrRenderer?.isPresenting)c.xrRenderer.updateCamera(c.camera);else if(typeof c.activeCameraEntity!="undefined"){const n=i(c.activeCameraEntity,h);c.camera.position.copy(n.position),c.camera.quaternion.copy(n.rotation),c.camera.scale.copy(n.scale),c.camera.updateMatrixWorld()}}}export{ft as default,pt as rotateViewVectorXZ};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
