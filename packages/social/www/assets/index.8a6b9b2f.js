import{r as s,u as N,R as e}from"./vendor.c8b8cc93.js";import{a as I,v as Q,h as ue,d as pe,c as ve}from"./_app.009e96ac.js";import{d as fe}from"./ArrowBackIos.b66b83b5.js";import{a as j,F as w}from"./FeedService.1e1a3393.js";import{P}from"./PopupsStateService.d6dc4710.js";import{a as O,d as Ce,b as _e,F as Ee}from"./index.64cdcbaf.js";import{c as R,i as T,a as D}from"./createSvgIcon.43fd6609.js";import{d as X,S as Fe,a as ge,b as he}from"./index.8221d0c2.js";import{A as u}from"./AlertService.bfed2141.js";import{c as p}from"./feathers.081246a7.js";import{S as Se}from"./index.683a8168.js";import{C as Y,a as Z}from"./CardContent.33751f6e.js";import{A as ee}from"./Avatar.42349c47.js";import{T as y}from"./Typography.52db5622.js";import{G as k}from"./Grid.7f9f57eb.js";import{T as ye}from"./TextField.556bc809.js";import{C as ke}from"./CardMedia.1681aab5.js";import{S as xe}from"./Snackbar.ed7a56d5.js";import{M as be}from"./Alert.702d7c18.js";import{B as z}from"./Button.9f6477a8.js";import{P as Re}from"./Select.f8860986.js";var V={},Te=T.exports,De=D.exports;Object.defineProperty(V,"__esModule",{value:!0});var te=V.default=void 0,Ae=De(s.exports),Le=Te(R),$e=(0,Le.default)(Ae.createElement("path",{d:"M9.78 18.65l.28-4.23 7.68-6.92c.34-.31-.07-.46-.52-.19L7.74 13.3 3.64 12c-.88-.25-.89-.86.2-1.3l15.97-6.16c.73-.33 1.43.18 1.15 1.3l-2.72 12.81c-.19.91-.74 1.13-1.5.71L12.6 16.3l-1.99 1.93c-.23.23-.42.42-.83.42z"}),"Telegram");te=V.default=$e;var B={},Me=T.exports,Ne=D.exports;Object.defineProperty(B,"__esModule",{value:!0});var re=B.default=void 0,Ie=Ne(s.exports),je=Me(R),we=(0,je.default)(Ie.createElement("path",{d:"M22 4c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4zm-2 13.17L18.83 16H4V4h16v13.17zM13 5h-2v4H7v2h4v4h2v-4h4V9h-4z"}),"AddCommentOutlined");re=B.default=we;var H={},Oe=T.exports,qe=D.exports;Object.defineProperty(H,"__esModule",{value:!0});var ae=H.default=void 0,Pe=qe(s.exports),ze=Oe(R),Ve=(0,ze.default)(Pe.createElement("path",{d:"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"}),"FavoriteBorderOutlined");ae=H.default=Ve;var U={},Be=T.exports,He=D.exports;Object.defineProperty(U,"__esModule",{value:!0});var oe=U.default=void 0,A=He(s.exports),Ue=Be(R),We=(0,Ue.default)(A.createElement(A.Fragment,null,A.createElement("path",{d:"M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM19 14.9L14.9 19H9.1L5 14.9V9.1L9.1 5h5.8L19 9.1v5.8z"}),A.createElement("circle",{cx:"12",cy:"16",r:"1"}),A.createElement("path",{d:"M11 7h2v7h-2z"})),"ReportOutlined");oe=U.default=We;const Ge="_tipItem_tb2iv_1",Ke="_previewImage_tb2iv_6",Je="_eyeLine_tb2iv_15",Qe="_popover_tb2iv_30",Xe="_iconSubContainer_tb2iv_38",Ye="_iconSubContainerVertical_tb2iv_38",Ze="_counter_tb2iv_47",et="_cardContent_tb2iv_51",tt="_iconsContainer_tb2iv_57",rt="_titleContainer_tb2iv_62",at="_flamesCount_tb2iv_66",ot="_cartText_tb2iv_70",nt="_avatar_tb2iv_73";var m={tipItem:Ge,previewImage:Ke,eyeLine:Je,popover:Qe,iconSubContainer:Xe,iconSubContainerVertical:Ye,counter:Ze,cardContent:et,iconsContainer:tt,titleContainer:rt,flamesCount:at,cartText:ot,avatar:nt};const ne={feedFiresRetrieved:t=>({type:"FEED_FIRES_RETRIEVED",feedFires:t}),fetchingFeedFires:()=>({type:"FEED_FIRES_FETCH"})},W={getFeedFires:t=>async(r,a)=>{try{r(ne.fetchingFeedFires());const n=await p.service("feed-fires").find({query:{feedId:t}});r(ne.feedFiresRetrieved(n.data))}catch(n){console.log(n),u.dispatchAlertError(r,n.message)}},addFireToFeed:t=>async r=>{try{await p.service("feed-fires").create({feedId:t}),r(j.addFeedFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}},removeFireToFeed:t=>async r=>{try{await p.service("feed-fires").remove(t),r(j.removeFeedFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}}},se={feedLikesRetrieved:t=>({type:"FEED_LIKES_RETRIEVED",feedLikes:t}),fetchingFeedLikes:()=>({type:"FEED_LIKES_FETCH"})},ce={getFeedLikes:t=>async(r,a)=>{try{r(se.fetchingFeedLikes());const n=await p.service("feed-likes").find({query:{feedId:t}});r(se.feedLikesRetrieved(n.data))}catch(n){u.dispatchAlertError(r,n.message)}},addLikeToFeed:t=>async r=>{try{await p.service("feed-likes").create({feedId:t}),r(j.addFeedLike(t))}catch(a){u.dispatchAlertError(r,a.message)}},removeLikeToFeed:t=>async r=>{try{await p.service("feed-likes").remove(t),r(j.removeFeedLike(t))}catch(a){u.dispatchAlertError(r,a.message)}}},st={addReportToFeed:t=>async r=>{try{await p.service("feed-report").create({feedId:t})}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}}},x={fetchingFeedComments:()=>({type:"FEED_COMMENTS_FETCH"}),feedsCommentsRetrieved:t=>({type:"FEED_COMMENTS_RETRIEVED",comments:t}),addFeedCommentFire:t=>({type:"ADD_FEED_COMMENT_FIRES",commentId:t}),removeFeedCommentFire:t=>({type:"REMOVE_FEED_COMMENT_FIRES",commentId:t}),addFeedComment:t=>({type:"ADD_FEED_COMMENT",comment:t}),commentFires:t=>({type:"COMMENT_FIRES",creators:t})},L={getFeedComments:(t,r)=>async(a,n)=>{try{a(x.fetchingFeedComments());const c=await p.service("comments").find({query:{feedId:t}});a(x.feedsCommentsRetrieved(c.data))}catch(c){console.log(c),u.dispatchAlertError(a,c.message)}},addCommentToFeed:(t,r)=>async a=>{try{const n=await p.service("comments").create({feedId:t,text:r});a(x.addFeedComment(n))}catch(n){console.log(n),u.dispatchAlertError(a,n.message)}},addFireToFeedComment:t=>async r=>{try{await p.service("comments-fires").create({commentId:t}),r(x.addFeedCommentFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}},removeFireToFeedComment:t=>async r=>{try{await p.service("comments-fires").remove(t),r(x.removeFeedCommentFire(t))}catch(a){console.log(a),u.dispatchAlertError(r,a.message)}},getCommentFires:(t,r)=>async(a,n)=>{try{const c=await p.service("comments-fires").find({query:{action:"comment-fires",commentId:t}});a(x.commentFires(c.data))}catch(c){console.log(c),u.dispatchAlertError(a,c.message)}}};var G={},ct=T.exports,it=D.exports;Object.defineProperty(G,"__esModule",{value:!0});var ie=G.default=void 0,lt=it(s.exports),mt=ct(R),dt=(0,mt.default)(lt.createElement("path",{d:"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"}),"Send");ie=G.default=dt;const ut="_commentItem_1757p_1",pt="_commentCard_1757p_10",vt="_flamesCount_1757p_13",ft="_authorAvatar_1757p_17",Ct="_fire_1757p_20";var $={commentItem:ut,commentCard:pt,flamesCount:vt,authorAvatar:ft,fire:Ct};const _t="_popup_umgpk_1",Et="_popup_inner_umgpk_13",Ft="_close_btn_umgpk_21";var K={popup:_t,popup_inner:Et,close_btn:Ft};const gt=t=>{const{t:r}=N();return t.trigger?e.createElement("div",{className:K.popup},t.children,e.createElement("div",{className:K.popup_inner},e.createElement("button",{type:"button",className:K.close_btn,onClick:()=>t.setTrigger(!1)},r("social:cancel")))):""},ht=({comment:t})=>{const{id:r,creator:a,fires:n,text:c,isFired:f}=t,[l,i]=s.exports.useState(!1),o=I(),E=g=>{o(L.addFireToFeedComment(g))},h=g=>{o(L.removeFireToFeedComment(g))},C=Q(),F=g=>{o(L.getCommentFires(g)),i(!0)},[b,d]=s.exports.useState(!1),_=ue().authUser?.identityProvider?.type?.value==="guest",{t:S}=N();return e.createElement(e.Fragment,null,e.createElement(Y,{className:$.commentItem,square:!1,elevation:0,key:r},e.createElement(ee,{className:$.authorAvatar,src:a.avatar}),e.createElement(Z,{className:$.commentCard},e.createElement(y,{variant:"h6"},a.username,a.verified&&e.createElement(X,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}})),e.createElement(y,{variant:"body1",paragraph:!0},c),n&&n>0?e.createElement(y,{variant:"subtitle1",onClick:()=>_?d(!0):F(r)},e.createElement("span",{className:$.flamesCount},n),S("social:flames")):null),e.createElement("section",{className:$.fire},f?e.createElement(O,{htmlColor:"#FF6201",onClick:()=>_?d(!0):h(r)}):e.createElement(O,{htmlColor:"#DDDDDD",onClick:()=>_?d(!0):E(r)}))),e.createElement(Fe,{type:"comment-fires",list:C.feeds.commentFires.value,open:l,onClose:()=>_?d(!0):i(!1)}),e.createElement(gt,{trigger:b,setTrigger:d}))},St="_commentsContainer_29854_1";var yt={commentsContainer:St};const kt=({feedId:t})=>{const r=I();s.exports.useEffect(()=>{r(L.getFeedComments(t))},[]);const[a,n]=s.exports.useState(""),c=Q(),f=(l,i)=>{r(L.addCommentToFeed(l,i)),n("")};return e.createElement("section",{className:yt.commentsContainer},e.createElement(k,{container:!0,spacing:1,alignItems:"flex-end",style:{margin:"20px 0px"}},e.createElement(k,{item:!0,xs:10,sm:10,md:4,lg:3},e.createElement(ye,{value:a,multiline:!0,placeholder:"Add comment",style:{width:"100%"},onChange:l=>n(l.target.value)})),e.createElement(k,{item:!0,xs:2},e.createElement(ie,{style:{fontSize:28},onClick:()=>f(t,a)}))),e.createElement(e.Fragment,null,c.feeds.feedComments.value&&c.feeds.fetching.value===!1&&c.feeds.feedComments.value.map((l,i)=>e.createElement(ht,{key:i,comment:l}))))},xt=t=>{const[r,a]=s.exports.useState(!1);s.exports.useState(!1);const[n,c]=s.exports.useState(!1),[f,l]=s.exports.useState(!1),i=I(),{feed:o}=t,[E,h]=s.exports.useState(o.fires),[C,F]=s.exports.useState(o.likes),[b,d]=s.exports.useState(!1);s.exports.useState(null),s.exports.useState(null);const _=v=>{i(W.addFireToFeed(v)),h(E+1),c(!0),r&&J(v)},S=v=>{i(W.removeFireToFeed(v)),h(E-1),c(!1)},g=v=>{i(ce.addLikeToFeed(v)),F(C+1),a(!0),n&&S(v)},J=v=>{i(ce.removeLikeToFeed(v)),F(C-1),a(!1)},le=v=>{i(st.addReportToFeed(v)),l(!0)};s.exports.useEffect(()=>{i(W.getFeedFires(o.id))},[]);const{t:M}=N(),me=()=>{Se.share({title:M("social:shareForm.arcMedia"),text:M("social:shareForm.videoCreated"),url:encodeURI(o.videoUrl),dialogTitle:M("social:shareForm.shareWithBuddies")})};s.exports.useEffect(()=>{d(!0),c(o.isFired),a(o.isLiked)},[o.id]);const de=()=>{d(!0),i(w.addViewToFeed(o.id))};return s.exports.useEffect(()=>{console.log("Feed Card Feed:",o)}),o?e.createElement(e.Fragment,null,e.createElement(Y,{className:m.tipItem,square:!1,elevation:0,key:o.id},e.createElement(k,{container:!0,alignItems:"flex-end"},e.createElement(k,{xs:!0,item:!0},b?e.createElement(ke,{className:m.previewImage,component:"video",src:o.videoUrl,title:o.title,controls:!0}):e.createElement("img",{src:o.previewUrl,className:m.previewImage,alt:o.title,onClick:de}),e.createElement("span",{className:m.eyeLine},o.viewsCount,e.createElement(Ce,{style:{fontSize:"16px"}}))),e.createElement(k,{item:!0},e.createElement("div",{className:m.iconSubContainerVertical},e.createElement("div",null,r?e.createElement(_e,{htmlColor:"red",onClick:()=>J(o.id)}):e.createElement(ae,{htmlColor:"#DDDDDD",onClick:()=>g(o.id)}),e.createElement("span",{className:m.counter},C)),e.createElement("div",null,n?e.createElement(O,{className:m.fireIcon,htmlColor:"#FF6201",onClick:()=>S(o.id)}):e.createElement(O,{className:m.fireIcon,htmlColor:"#DDDDDD",onClick:()=>_(o.id)}),e.createElement("span",{className:m.counter},E))))),e.createElement(Z,{className:m.cardContent},e.createElement("section",{className:m.iconsContainer},e.createElement(ge,{avatar:e.createElement(ee,{src:o.creator.avatar?o.creator.avatar:"/assets/userpic.png",alt:o.creator.username,onClick:()=>i(P.updateCreatorPageState(!0,o.creator.id)),className:m.avatar}),title:e.createElement(y,{variant:"h6"},o.creator.name,e.createElement("p",null,"@",o.creator.username," \xB7 ",o.fires," flames"),o.creator.verified===!0&&e.createElement(X,{htmlColor:"#007AFF",style:{fontSize:"13px",margin:"0 0 0 5px"}}))}),e.createElement("section",{className:m.iconSubContainer},e.createElement(te,{onClick:me}),e.createElement(re,{onClick:null}),e.createElement(oe,{htmlColor:"#FF0000",onClick:()=>le(o.id)}))),e.createElement(y,{className:m.cartText,variant:"h6"},o.description),e.createElement(kt,{feedId:o.id}))),e.createElement(xe,{open:f,autoHideDuration:2e3,anchorOrigin:{vertical:"top",horizontal:"center"},onClose:()=>l(!1)},e.createElement(be,{severity:"error"},M("social:feed.is-repoted-message")))):e.createElement(e.Fragment,null)},bt="_feedContainer_72oy1_1",Rt="_backButton_72oy1_9",Tt="_popover_72oy1_22";var q={feedContainer:bt,backButton:Rt,popover:Tt};const Dt=t=>{let r=null;const{t:a}=N(),n=I(),c=pe(),f=ve(),l=f.feeds.feed.creator.value;s.exports.useEffect(()=>{n(w.getFeed(c.popups.feedId?.value))},[c.popups.feedId?.value]),r=f.feeds.fetching.value===!1&&f.feeds.feed,s.exports.useEffect(()=>{l&&n(w.getFeeds("creator",l.id))},[JSON.stringify(l)]);const[i,o]=e.useState(null),E=d=>{o(d.currentTarget)},h=()=>{o(null)},C=Boolean(i),F=C?"simple-popover":void 0,b=(d,_,S)=>{n(w.removeFeed(d,_,S)),n(P.updateFeedPageState(!1))};return e.createElement("section",{className:q.feedContainer},e.createElement("section",{className:q.controls},e.createElement(z,{variant:"text",className:q.backButton,onClick:()=>{n(P.updateFeedPageState(!1))}},e.createElement(fe,null),a("social:feed.back")),e.createElement("div",{className:q.popover},e.createElement(z,{"aria-describedby":F,variant:"contained",onClick:E,tabIndex:0},e.createElement(he,null)),e.createElement(Re,{id:F,open:C,anchorEl:i,onClose:h,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},e.createElement(z,{variant:"outlined",onClick:()=>b(r.id,r.previewUrl,r.videoUrl)},"Delete")))),r.id.value&&e.createElement(xt,{feed:r.value}),r.id.value&&e.createElement(e.Fragment,null,e.createElement(y,{variant:"h5"},a("social:feed.related")),e.createElement(Ee,{thisData:f.feeds.feedsCreator.value})))};var Xt=Dt;export{Xt as F,te as d};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
