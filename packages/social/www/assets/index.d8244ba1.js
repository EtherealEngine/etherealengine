import{g as yt,n as Ve,r as ne,f as gt}from"./vendor.475cb2ff.js";import{M as bt,p as he}from"./_app.f0a72417.js";import{b as wt}from"./index.81138b53.js";import{c as kt}from"./index.ebe70c7a.js";var je={},He={},ie=yt(bt),de={},Pe={},fe={},Ae={};(function(n){(function(t){var e="undefined",i=e!==typeof Buffer&&Buffer,a=e!==typeof Uint8Array&&Uint8Array,c=e!==typeof ArrayBuffer&&ArrayBuffer,k=[0,0,0,0,0,0,0,0],y=Array.isArray||I,b=4294967296,E=16777216,H;W("Uint64BE",!0,!0),W("Int64BE",!0,!1),W("Uint64LE",!1,!0),W("Int64LE",!1,!1);function W(o,u,f){var p=u?0:4,s=u?4:0,d=u?0:3,l=u?1:2,x=u?2:1,V=u?3:0,F=u?X:Z,$=u?q:h,j=_.prototype,ee="is"+o,m="_"+ee;return j.buffer=void 0,j.offset=0,j[m]=!0,j.toNumber=R,j.toString=J,j.toJSON=R,j.toArray=U,i&&(j.toBuffer=z),a&&(j.toArrayBuffer=w),_[ee]=D,t[o]=_,_;function _(v,g,C,S){return this instanceof _?r(this,v,g,C,S):new _(v,g,C,S)}function D(v){return!!(v&&v[m])}function r(v,g,C,S,P){if(a&&c&&(g instanceof c&&(g=new a(g)),S instanceof c&&(S=new a(S))),!g&&!C&&!S&&!H){v.buffer=N(k,0);return}if(!O(g,C)){var G=H||Array;P=C,S=g,C=0,g=new G(8)}v.buffer=g,v.offset=C|=0,e!==typeof S&&(typeof S=="string"?A(g,C,S,P||10):O(S,P)?B(g,C,S,P):typeof P=="number"?(T(g,C+p,S),T(g,C+s,P)):S>0?F(g,C,S):S<0?$(g,C,S):B(g,C,k,0))}function A(v,g,C,S){var P=0,G=C.length,Y=0,L=0;C[0]==="-"&&P++;for(var oe=P;P<G;){var K=parseInt(C[P++],S);if(!(K>=0))break;L=L*S+K,Y=Y*S+Math.floor(L/b),L%=b}oe&&(Y=~Y,L?L=b-L:Y++),T(v,g+p,Y),T(v,g+s,L)}function R(){var v=this.buffer,g=this.offset,C=M(v,g+p),S=M(v,g+s);return f||(C|=0),C?C*b+S:S}function J(v){var g=this.buffer,C=this.offset,S=M(g,C+p),P=M(g,C+s),G="",Y=!f&&S&2147483648;for(Y&&(S=~S,P=b-P),v=v||10;;){var L=S%v*b+P;if(S=Math.floor(S/v),P=Math.floor(L/v),G=(L%v).toString(v)+G,!S&&!P)break}return Y&&(G="-"+G),G}function T(v,g,C){v[g+V]=C&255,C=C>>8,v[g+x]=C&255,C=C>>8,v[g+l]=C&255,C=C>>8,v[g+d]=C&255}function M(v,g){return v[g+d]*E+(v[g+l]<<16)+(v[g+x]<<8)+v[g+V]}}function U(o){var u=this.buffer,f=this.offset;return H=null,o!==!1&&f===0&&u.length===8&&y(u)?u:N(u,f)}function z(o){var u=this.buffer,f=this.offset;if(H=i,o!==!1&&f===0&&u.length===8&&Buffer.isBuffer(u))return u;var p=new i(8);return B(p,0,u,f),p}function w(o){var u=this.buffer,f=this.offset,p=u.buffer;if(H=a,o!==!1&&f===0&&p instanceof c&&p.byteLength===8)return p;var s=new a(8);return B(s,0,u,f),s.buffer}function O(o,u){var f=o&&o.length;return u|=0,f&&u+8<=f&&typeof o[u]!="string"}function B(o,u,f,p){u|=0,p|=0;for(var s=0;s<8;s++)o[u++]=f[p++]&255}function N(o,u){return Array.prototype.slice.call(o,u,u+8)}function X(o,u,f){for(var p=u+8;p>u;)o[--p]=f&255,f/=256}function q(o,u,f){var p=u+8;for(f++;p>u;)o[--p]=-f&255^255,f/=256}function Z(o,u,f){for(var p=u+8;u<p;)o[u++]=f&255,f/=256}function h(o,u,f){var p=u+8;for(f++;u<p;)o[u++]=-f&255^255,f/=256}function I(o){return!!o&&Object.prototype.toString.call(o)=="[object Array]"}})(typeof n.nodeName!="string"?n:Ve||{})})(Ae);var Ee={},Me={128:{name:"ChapterDisplay",level:4,type:"m",multiple:!0,minver:1,webm:!0,description:"Contains all possible strings to use for the chapter display."},131:{name:"TrackType",level:3,type:"u",mandatory:!0,minver:1,range:"1-254",description:"A set of track types coded on 8 bits (1: video, 2: audio, 3: complex, 0x10: logo, 0x11: subtitle, 0x12: buttons, 0x20: control)."},133:{name:"ChapString",cppname:"ChapterString",level:5,type:"8",mandatory:!0,minver:1,webm:!0,description:"Contains the string to use as the chapter atom."},134:{name:"CodecID",level:3,type:"s",mandatory:!0,minver:1,description:"An ID corresponding to the codec, see the codec page for more info."},136:{name:"FlagDefault",cppname:"TrackFlagDefault",level:3,type:"u",mandatory:!0,minver:1,default:1,range:"0-1",description:"Set if that track (audio, video or subs) SHOULD be active if no language found matches the user preference. (1 bit)"},137:{name:"ChapterTrackNumber",level:5,type:"u",mandatory:!0,multiple:!0,minver:1,webm:!1,range:"not 0",description:"UID of the Track to apply this chapter too. In the absense of a control track, choosing this chapter will select the listed Tracks and deselect unlisted tracks. Absense of this element indicates that the Chapter should be applied to any currently used Tracks."},145:{name:"ChapterTimeStart",level:4,type:"u",mandatory:!0,minver:1,webm:!0,description:"Timestamp of the start of Chapter (not scaled)."},146:{name:"ChapterTimeEnd",level:4,type:"u",minver:1,webm:!1,description:"Timestamp of the end of Chapter (timestamp excluded, not scaled)."},150:{name:"CueRefTime",level:5,type:"u",mandatory:!0,minver:2,webm:!1,description:"Timestamp of the referenced Block."},151:{name:"CueRefCluster",level:5,type:"u",mandatory:!0,webm:!1,description:"The Position of the Cluster containing the referenced Block."},152:{name:"ChapterFlagHidden",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If a chapter is hidden (1), it should not be available to the user interface (but still to Control Tracks; see flag notes). (1 bit)"},16980:{name:"ContentCompAlgo",level:6,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The compression algorithm used. Algorithms that have been specified so far are: 0 - zlib,   3 - Header Stripping"},16981:{name:"ContentCompSettings",level:6,type:"b",minver:1,webm:!1,description:"Settings that might be needed by the decompressor. For Header Stripping (ContentCompAlgo=3), the bytes that were removed from the beggining of each frames of the track."},17026:{name:"DocType",level:1,type:"s",mandatory:!0,default:"matroska",minver:1,description:"A string that describes the type of document that follows this EBML header. 'matroska' in our case or 'webm' for webm files."},17029:{name:"DocTypeReadVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The minimum DocType version an interpreter has to support to read this file."},17030:{name:"EBMLVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The version of EBML parser used to create the file."},17031:{name:"DocTypeVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The version of DocType interpreter used to create the file."},17476:{name:"SegmentFamily",level:2,type:"b",multiple:!0,minver:1,webm:!1,bytesize:16,description:"A randomly generated unique ID that all segments related to each other must use (128 bits)."},17505:{name:"DateUTC",level:2,type:"d",minver:1,description:"Date of the origin of timestamp (value 0), i.e. production date."},17540:{name:"TagDefault",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"0-1",description:"Indication to know if this is the default/original language to use for the given tag. (1 bit)"},17541:{name:"TagBinary",level:4,type:"b",minver:1,webm:!1,description:"The values of the Tag if it is binary. Note that this cannot be used in the same SimpleTag as TagString."},17543:{name:"TagString",level:4,type:"8",minver:1,webm:!1,description:"The value of the Element."},17545:{name:"Duration",level:2,type:"f",minver:1,range:"> 0",description:"Duration of the segment (based on TimecodeScale)."},17816:{name:"ChapterFlagEnabled",level:4,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"0-1",description:"Specify wether the chapter is enabled. It can be enabled/disabled by a Control Track. When disabled, the movie should skip all the content between the TimeStart and TimeEnd of this chapter (see flag notes). (1 bit)"},18016:{name:"FileMimeType",level:3,type:"s",mandatory:!0,minver:1,webm:!1,description:"MIME type of the file."},18017:{name:"FileUsedStartTime",level:3,type:"u",divx:!0,description:"DivX font extension"},18018:{name:"FileUsedEndTime",level:3,type:"u",divx:!0,description:"DivX font extension"},18037:{name:"FileReferral",level:3,type:"b",webm:!1,description:"A binary value that a track/codec can refer to when the attachment is needed."},20529:{name:"ContentEncodingOrder",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"Tells when this modification was used during encoding/muxing starting with 0 and counting upwards. The decoder/demuxer has to start with the highest order number it finds and work its way down. This value has to be unique over all ContentEncodingOrder elements in the segment."},20530:{name:"ContentEncodingScope",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"not 0",description:"A bit field that describes which elements have been modified in this way. Values (big endian) can be OR'ed. Possible values: 1 - all frame contents, 2 - the track's private data, 4 - the next ContentEncoding (next ContentEncodingOrder. Either the data inside ContentCompression and/or ContentEncryption)"},20531:{name:"ContentEncodingType",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"A value describing what kind of transformation has been done. Possible values: 0 - compression, 1 - encryption"},20532:{name:"ContentCompression",level:5,type:"m",minver:1,webm:!1,description:"Settings describing the compression used. Must be present if the value of ContentEncodingType is 0 and absent otherwise. Each block must be decompressable even if no previous block is available in order not to prevent seeking."},20533:{name:"ContentEncryption",level:5,type:"m",minver:1,webm:!1,description:"Settings describing the encryption used. Must be present if the value of ContentEncodingType is 1 and absent otherwise."},21368:{name:"CueBlockNumber",level:4,type:"u",minver:1,default:1,range:"not 0",description:"Number of the Block in the specified Cluster."},22100:{name:"ChapterStringUID",level:4,type:"8",mandatory:!1,minver:3,webm:!0,description:"A unique string ID to identify the Chapter. Use for WebVTT cue identifier storage."},22337:{name:"WritingApp",level:2,type:"8",mandatory:!0,minver:1,description:'Writing application ("mkvmerge-0.3.3").'},22612:{name:"SilentTracks",cppname:"ClusterSilentTracks",level:2,type:"m",minver:1,webm:!1,description:"The list of tracks that are not used in that part of the stream. It is useful when using overlay tracks on seeking. Then you should decide what track to use."},25152:{name:"ContentEncoding",level:4,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Settings for one content encoding like compression or encryption."},25188:{name:"BitDepth",cppname:"AudioBitDepth",level:4,type:"u",minver:1,range:"not 0",description:"Bits per sample, mostly used for PCM."},25906:{name:"SignedElement",level:3,type:"b",multiple:!0,webm:!1,description:"An element ID whose data will be used to compute the signature."},26148:{name:"TrackTranslate",level:3,type:"m",multiple:!0,minver:1,webm:!1,description:"The track identification for the given Chapter Codec."},26897:{name:"ChapProcessCommand",cppname:"ChapterProcessCommand",level:5,type:"m",multiple:!0,minver:1,webm:!1,description:"Contains all the commands associated to the Atom."},26914:{name:"ChapProcessTime",cppname:"ChapterProcessTime",level:6,type:"u",mandatory:!0,minver:1,webm:!1,description:"Defines when the process command should be handled (0: during the whole chapter, 1: before starting playback, 2: after playback of the chapter)."},26916:{name:"ChapterTranslate",level:2,type:"m",multiple:!0,minver:1,webm:!1,description:"A tuple of corresponding ID used by chapter codecs to represent this segment."},26931:{name:"ChapProcessData",cppname:"ChapterProcessData",level:6,type:"b",mandatory:!0,minver:1,webm:!1,description:"Contains the command information. The data should be interpreted depending on the ChapProcessCodecID value. For ChapProcessCodecID = 1, the data correspond to the binary DVD cell pre/post commands."},26948:{name:"ChapProcess",cppname:"ChapterProcess",level:4,type:"m",multiple:!0,minver:1,webm:!1,description:"Contains all the commands associated to the Atom."},26965:{name:"ChapProcessCodecID",cppname:"ChapterProcessCodecID",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"Contains the type of the codec used for the processing. A value of 0 means native Matroska processing (to be defined), a value of 1 means the DVD command set is used. More codec IDs can be added later."},29555:{name:"Tag",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Element containing elements specific to Tracks/Chapters."},29572:{name:"SegmentFilename",level:2,type:"8",minver:1,webm:!1,description:"A filename corresponding to this segment."},29766:{name:"AttachmentLink",cppname:"TrackAttachmentLink",level:3,type:"u",minver:1,webm:!1,range:"not 0",description:"The UID of an attachment that is used by this codec."},2459272:{name:"CodecName",level:3,type:"8",minver:1,description:"A human-readable string specifying the codec."},408125543:{name:"Segment",level:"0",type:"m",mandatory:!0,multiple:!0,minver:1,description:"This element contains all other top-level (level 1) elements. Typically a Matroska file is composed of 1 segment."},17530:{name:"TagLanguage",level:4,type:"s",mandatory:!0,minver:1,webm:!1,default:"und",description:"Specifies the language of the tag specified, in the Matroska languages form."},17827:{name:"TagName",level:4,type:"8",mandatory:!0,minver:1,webm:!1,description:"The name of the Tag that is going to be stored."},26568:{name:"SimpleTag",cppname:"TagSimple",level:3,recursive:"1",type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Contains general information about the target."},25542:{name:"TagAttachmentUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Attachment(s) the tags belong to. If the value is 0 at this level, the tags apply to all the attachments in the Segment."},25540:{name:"TagChapterUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Chapter(s) the tags belong to. If the value is 0 at this level, the tags apply to all chapters in the Segment."},25545:{name:"TagEditionUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the EditionEntry(s) the tags belong to. If the value is 0 at this level, the tags apply to all editions in the Segment."},25541:{name:"TagTrackUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,default:0,description:"A unique ID to identify the Track(s) the tags belong to. If the value is 0 at this level, the tags apply to all tracks in the Segment."},25546:{name:"TargetType",cppname:"TagTargetType",level:4,type:"s",minver:1,webm:!1,strong:"informational",description:'An  string that can be used to display the logical level of the target like "ALBUM", "TRACK", "MOVIE", "CHAPTER", etc (see TargetType).'},26826:{name:"TargetTypeValue",cppname:"TagTargetTypeValue",level:4,type:"u",minver:1,webm:!1,default:50,description:"A number to indicate the logical level of the target (see TargetType)."},25536:{name:"Targets",cppname:"TagTargets",level:3,type:"m",mandatory:!0,minver:1,webm:!1,description:"Contain all UIDs where the specified meta data apply. It is empty to describe everything in the segment."},307544935:{name:"Tags",level:1,type:"m",multiple:!0,minver:1,webm:!1,description:"Element containing elements specific to Tracks/Chapters. A list of valid tags can be found here."},17677:{name:"ChapProcessPrivate",cppname:"ChapterProcessPrivate",level:5,type:"b",minver:1,webm:!1,description:'Some optional data attached to the ChapProcessCodecID information. For ChapProcessCodecID = 1, it is the "DVD level" equivalent.'},17278:{name:"ChapCountry",cppname:"ChapterCountry",level:5,type:"s",multiple:!0,minver:1,webm:!1,description:"The countries corresponding to the string, same 2 octets as in Internet domains."},17276:{name:"ChapLanguage",cppname:"ChapterLanguage",level:5,type:"s",mandatory:!0,multiple:!0,minver:1,webm:!0,default:"eng",description:"The languages corresponding to the string, in the bibliographic ISO-639-2 form."},143:{name:"ChapterTrack",level:4,type:"m",minver:1,webm:!1,description:"List of tracks on which the chapter applies. If this element is not present, all tracks apply"},25539:{name:"ChapterPhysicalEquiv",level:4,type:"u",minver:1,webm:!1,description:'Specify the physical equivalent of this ChapterAtom like "DVD" (60) or "SIDE" (50), see complete list of values.'},28348:{name:"ChapterSegmentEditionUID",level:4,type:"u",minver:1,webm:!1,range:"not 0",description:"The EditionUID to play from the segment linked in ChapterSegmentUID."},28263:{name:"ChapterSegmentUID",level:4,type:"b",minver:1,webm:!1,range:">0",bytesize:16,description:"A segment to play in place of this chapter. Edition ChapterSegmentEditionUID should be used for this segment, otherwise no edition is used."},29636:{name:"ChapterUID",level:4,type:"u",mandatory:!0,minver:1,webm:!0,range:"not 0",description:"A unique ID to identify the Chapter."},182:{name:"ChapterAtom",level:3,recursive:"1",type:"m",mandatory:!0,multiple:!0,minver:1,webm:!0,description:"Contains the atom information to use as the chapter atom (apply to all tracks)."},17885:{name:"EditionFlagOrdered",level:3,type:"u",minver:1,webm:!1,default:0,range:"0-1",description:"Specify if the chapters can be defined multiple times and the order to play them is enforced. (1 bit)"},17883:{name:"EditionFlagDefault",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If a flag is set (1) the edition should be used as the default one. (1 bit)"},17853:{name:"EditionFlagHidden",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,range:"0-1",description:"If an edition is hidden (1), it should not be available to the user interface (but still to Control Tracks; see flag notes). (1 bit)"},17852:{name:"EditionUID",level:3,type:"u",minver:1,webm:!1,range:"not 0",description:"A unique ID to identify the edition. It's useful for tagging an edition."},17849:{name:"EditionEntry",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!0,description:"Contains all information about a segment edition."},272869232:{name:"Chapters",level:1,type:"m",minver:1,webm:!0,description:"A system to define basic menus and partition data. For more detailed information, look at the Chapters Explanation."},18094:{name:"FileUID",level:3,type:"u",mandatory:!0,minver:1,webm:!1,range:"not 0",description:"Unique ID representing the file, as random as possible."},18012:{name:"FileData",level:3,type:"b",mandatory:!0,minver:1,webm:!1,description:"The data of the file."},18030:{name:"FileName",level:3,type:"8",mandatory:!0,minver:1,webm:!1,description:"Filename of the attached file."},18046:{name:"FileDescription",level:3,type:"8",minver:1,webm:!1,description:"A human-friendly name for the attached file."},24999:{name:"AttachedFile",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"An attached file."},423732329:{name:"Attachments",level:1,type:"m",minver:1,webm:!1,description:"Contain attached files."},235:{name:"CueRefCodecState",level:5,type:"u",webm:!1,default:0,description:"The position of the Codec State corresponding to this referenced element. 0 means that the data is taken from the initial Track Entry."},21343:{name:"CueRefNumber",level:5,type:"u",webm:!1,default:1,range:"not 0",description:"Number of the referenced Block of Track X in the specified Cluster."},219:{name:"CueReference",level:4,type:"m",multiple:!0,minver:2,webm:!1,description:"The Clusters containing the required referenced Blocks."},234:{name:"CueCodecState",level:4,type:"u",minver:2,webm:!1,default:0,description:"The position of the Codec State corresponding to this Cue element. 0 means that the data is taken from the initial Track Entry."},178:{name:"CueDuration",level:4,type:"u",mandatory:!1,minver:4,webm:!1,description:"The duration of the block according to the segment time base. If missing the track's DefaultDuration does not apply and no duration information is available in terms of the cues."},240:{name:"CueRelativePosition",level:4,type:"u",mandatory:!1,minver:4,webm:!1,description:"The relative position of the referenced block inside the cluster with 0 being the first possible position for an element inside that cluster.",position:"clusterRelative"},241:{name:"CueClusterPosition",level:4,type:"u",mandatory:!0,minver:1,description:"The position of the Cluster containing the required Block.",position:"segment"},247:{name:"CueTrack",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"The track for which a position is given."},183:{name:"CueTrackPositions",level:3,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contain positions for different tracks corresponding to the timestamp."},179:{name:"CueTime",level:3,type:"u",mandatory:!0,minver:1,description:"Absolute timestamp according to the segment time base."},187:{name:"CuePoint",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains all information relative to a seek point in the segment."},475249515:{name:"Cues",level:1,type:"m",minver:1,description:'A top-level element to speed seeking access. All entries are local to the segment. Should be mandatory for non "live" streams.'},18406:{name:"ContentSigHashAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The hash algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values: 1 - SHA1-160 2 - MD5"},18405:{name:"ContentSigAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The algorithm used for the signature. A value of '0' means that the contents have not been signed but only encrypted. Predefined values: 1 - RSA"},18404:{name:"ContentSigKeyID",level:6,type:"b",minver:1,webm:!1,description:"This is the ID of the private key the data was signed with."},18403:{name:"ContentSignature",level:6,type:"b",minver:1,webm:!1,description:"A cryptographic signature of the contents."},18402:{name:"ContentEncKeyID",level:6,type:"b",minver:1,webm:!1,description:"For public key algorithms this is the ID of the public key the the data was encrypted with."},18401:{name:"ContentEncAlgo",level:6,type:"u",minver:1,webm:!1,default:0,description:"The encryption algorithm used. The value '0' means that the contents have not been encrypted but only signed. Predefined values: 1 - DES, 2 - 3DES, 3 - Twofish, 4 - Blowfish, 5 - AES"},28032:{name:"ContentEncodings",level:3,type:"m",minver:1,webm:!1,description:"Settings for several content encoding mechanisms like compression or encryption."},196:{name:"TrickMasterTrackSegmentUID",level:3,type:"b",divx:!0,bytesize:16,description:"DivX trick track extenstions"},199:{name:"TrickMasterTrackUID",level:3,type:"u",divx:!0,description:"DivX trick track extenstions"},198:{name:"TrickTrackFlag",level:3,type:"u",divx:!0,default:0,description:"DivX trick track extenstions"},193:{name:"TrickTrackSegmentUID",level:3,type:"b",divx:!0,bytesize:16,description:"DivX trick track extenstions"},192:{name:"TrickTrackUID",level:3,type:"u",divx:!0,description:"DivX trick track extenstions"},237:{name:"TrackJoinUID",level:5,type:"u",mandatory:!0,multiple:!0,minver:3,webm:!1,range:"not 0",description:"The trackUID number of a track whose blocks are used to create this virtual track."},233:{name:"TrackJoinBlocks",level:4,type:"m",minver:3,webm:!1,description:"Contains the list of all tracks whose Blocks need to be combined to create this virtual track"},230:{name:"TrackPlaneType",level:6,type:"u",mandatory:!0,minver:3,webm:!1,description:"The kind of plane this track corresponds to (0: left eye, 1: right eye, 2: background)."},229:{name:"TrackPlaneUID",level:6,type:"u",mandatory:!0,minver:3,webm:!1,range:"not 0",description:"The trackUID number of the track representing the plane."},228:{name:"TrackPlane",level:5,type:"m",mandatory:!0,multiple:!0,minver:3,webm:!1,description:"Contains a video plane track that need to be combined to create this 3D track"},227:{name:"TrackCombinePlanes",level:4,type:"m",minver:3,webm:!1,description:"Contains the list of all video plane tracks that need to be combined to create this 3D track"},226:{name:"TrackOperation",level:3,type:"m",minver:3,webm:!1,description:"Operation that needs to be applied on tracks to create this virtual track. For more details look at the Specification Notes on the subject."},32123:{name:"ChannelPositions",cppname:"AudioPosition",level:4,type:"b",webm:!1,description:"Table of horizontal angles for each successive channel, see appendix."},159:{name:"Channels",cppname:"AudioChannels",level:4,type:"u",mandatory:!0,minver:1,default:1,range:"not 0",description:"Numbers of channels in the track."},30901:{name:"OutputSamplingFrequency",cppname:"AudioOutputSamplingFreq",level:4,type:"f",minver:1,default:"Sampling Frequency",range:"> 0",description:"Real output sampling frequency in Hz (used for SBR techniques)."},181:{name:"SamplingFrequency",cppname:"AudioSamplingFreq",level:4,type:"f",mandatory:!0,minver:1,default:8e3,range:"> 0",description:"Sampling frequency in Hz."},225:{name:"Audio",cppname:"TrackAudio",level:3,type:"m",minver:1,description:"Audio settings."},2327523:{name:"FrameRate",cppname:"VideoFrameRate",level:4,type:"f",range:"> 0",strong:"Informational",description:"Number of frames per second.  only."},3126563:{name:"GammaValue",cppname:"VideoGamma",level:4,type:"f",webm:!1,range:"> 0",description:"Gamma Value."},3061028:{name:"ColourSpace",cppname:"VideoColourSpace",level:4,type:"b",minver:1,webm:!1,bytesize:4,description:"Same value as in AVI (32 bits)."},21683:{name:"AspectRatioType",cppname:"VideoAspectRatio",level:4,type:"u",minver:1,default:0,description:"Specify the possible modifications to the aspect ratio (0: free resizing, 1: keep aspect ratio, 2: fixed)."},21682:{name:"DisplayUnit",cppname:"VideoDisplayUnit",level:4,type:"u",minver:1,default:0,description:"How DisplayWidth & DisplayHeight should be interpreted (0: pixels, 1: centimeters, 2: inches, 3: Display Aspect Ratio)."},21690:{name:"DisplayHeight",cppname:"VideoDisplayHeight",level:4,type:"u",minver:1,default:"PixelHeight",range:"not 0",description:"Height of the video frames to display. The default value is only valid when DisplayUnit is 0."},21680:{name:"DisplayWidth",cppname:"VideoDisplayWidth",level:4,type:"u",minver:1,default:"PixelWidth",range:"not 0",description:"Width of the video frames to display. The default value is only valid when DisplayUnit is 0."},21725:{name:"PixelCropRight",cppname:"VideoPixelCropRight",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove on the right of the image."},21708:{name:"PixelCropLeft",cppname:"VideoPixelCropLeft",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove on the left of the image."},21691:{name:"PixelCropTop",cppname:"VideoPixelCropTop",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove at the top of the image."},21674:{name:"PixelCropBottom",cppname:"VideoPixelCropBottom",level:4,type:"u",minver:1,default:0,description:"The number of video pixels to remove at the bottom of the image (for HDTV content)."},186:{name:"PixelHeight",cppname:"VideoPixelHeight",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"Height of the encoded video frames in pixels."},176:{name:"PixelWidth",cppname:"VideoPixelWidth",level:4,type:"u",mandatory:!0,minver:1,range:"not 0",description:"Width of the encoded video frames in pixels."},21433:{name:"OldStereoMode",level:4,type:"u",maxver:"0",webm:!1,divx:!1,description:"DEPRECATED, DO NOT USE. Bogus StereoMode value used in old versions of libmatroska. (0: mono, 1: right eye, 2: left eye, 3: both eyes)."},21440:{name:"AlphaMode",cppname:"VideoAlphaMode",level:4,type:"u",minver:3,webm:!0,default:0,description:"Alpha Video Mode. Presence of this element indicates that the BlockAdditional element could contain Alpha data."},21432:{name:"StereoMode",cppname:"VideoStereoMode",level:4,type:"u",minver:3,webm:!0,default:0,description:"Stereo-3D video mode (0: mono, 1: side by side (left eye is first), 2: top-bottom (right eye is first), 3: top-bottom (left eye is first), 4: checkboard (right is first), 5: checkboard (left is first), 6: row interleaved (right is first), 7: row interleaved (left is first), 8: column interleaved (right is first), 9: column interleaved (left is first), 10: anaglyph (cyan/red), 11: side by side (right eye is first), 12: anaglyph (green/magenta), 13 both eyes laced in one Block (left eye is first), 14 both eyes laced in one Block (right eye is first)) . There are some more details on 3D support in the Specification Notes."},154:{name:"FlagInterlaced",cppname:"VideoFlagInterlaced",level:4,type:"u",mandatory:!0,minver:2,webm:!0,default:0,range:"0-1",description:"Set if the video is interlaced. (1 bit)"},224:{name:"Video",cppname:"TrackVideo",level:3,type:"m",minver:1,description:"Video settings."},26277:{name:"TrackTranslateTrackID",level:4,type:"b",mandatory:!0,minver:1,webm:!1,description:"The binary value used to represent this track in the chapter codec data. The format depends on the ChapProcessCodecID used."},26303:{name:"TrackTranslateCodec",level:4,type:"u",mandatory:!0,minver:1,webm:!1,description:"The chapter codec using this ID (0: Matroska Script, 1: DVD-menu)."},26364:{name:"TrackTranslateEditionUID",level:4,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify an edition UID on which this translation applies. When not specified, it means for all editions found in the segment."},22203:{name:"SeekPreRoll",level:3,type:"u",mandatory:!0,multiple:!1,default:0,minver:4,webm:!0,description:"After a discontinuity, SeekPreRoll is the duration in nanoseconds of the data the decoder must decode before the decoded data is valid."},22186:{name:"CodecDelay",level:3,type:"u",multiple:!1,default:0,minver:4,webm:!0,description:"CodecDelay is The codec-built-in delay in nanoseconds. This value must be subtracted from each block timestamp in order to get the actual timestamp. The value should be small so the muxing of tracks with the same actual timestamp are in the same Cluster."},28587:{name:"TrackOverlay",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify that this track is an overlay track for the Track specified (in the u-integer). That means when this track has a gap (see SilentTracks) the overlay track should be used instead. The order of multiple TrackOverlay matters, the first one is the one that should be used. If not found it should be the second, etc."},170:{name:"CodecDecodeAll",level:3,type:"u",mandatory:!0,minver:2,webm:!1,default:1,range:"0-1",description:"The codec can decode potentially damaged data (1 bit)."},2536e3:{name:"CodecDownloadURL",level:3,type:"s",multiple:!0,webm:!1,description:"A URL to download about the codec used."},3883072:{name:"CodecInfoURL",level:3,type:"s",multiple:!0,webm:!1,description:"A URL to find information about the codec used."},3839639:{name:"CodecSettings",level:3,type:"8",webm:!1,description:"A string describing the encoding setting used."},25506:{name:"CodecPrivate",level:3,type:"b",minver:1,description:"Private data only known to the codec."},2274716:{name:"Language",cppname:"TrackLanguage",level:3,type:"s",minver:1,default:"eng",description:"Specifies the language of the track in the Matroska languages form."},21358:{name:"Name",cppname:"TrackName",level:3,type:"8",minver:1,description:"A human-readable track name."},21998:{name:"MaxBlockAdditionID",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The maximum value of BlockAdditions for this track."},21375:{name:"TrackOffset",level:3,type:"i",webm:!1,default:0,description:"A value to add to the Block's Timestamp. This can be used to adjust the playback offset of a track."},2306383:{name:"TrackTimecodeScale",level:3,type:"f",mandatory:!0,minver:1,maxver:"3",webm:!1,default:1,range:"> 0",description:"DEPRECATED, DO NOT USE. The scale to apply on this track to work at normal speed in relation with other tracks (mostly used to adjust video speed when the audio length differs)."},2313850:{name:"DefaultDecodedFieldDuration",cppname:"TrackDefaultDecodedFieldDuration",level:3,type:"u",minver:4,range:"not 0",description:`The period in nanoseconds (not scaled by TimcodeScale)
between two successive fields at the output of the decoding process (see the notes)`},2352003:{name:"DefaultDuration",cppname:"TrackDefaultDuration",level:3,type:"u",minver:1,range:"not 0",description:"Number of nanoseconds (not scaled via TimecodeScale) per frame ('frame' in the Matroska sense -- one element put into a (Simple)Block)."},28152:{name:"MaxCache",cppname:"TrackMaxCache",level:3,type:"u",minver:1,webm:!1,description:"The maximum cache size required to store referenced frames in and the current frame. 0 means no cache is needed."},28135:{name:"MinCache",cppname:"TrackMinCache",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"The minimum number of frames a player should be able to cache during playback. If set to 0, the reference pseudo-cache system is not used."},156:{name:"FlagLacing",cppname:"TrackFlagLacing",level:3,type:"u",mandatory:!0,minver:1,default:1,range:"0-1",description:"Set if the track may contain blocks using lacing. (1 bit)"},21930:{name:"FlagForced",cppname:"TrackFlagForced",level:3,type:"u",mandatory:!0,minver:1,default:0,range:"0-1",description:"Set if that track MUST be active during playback. There can be many forced track for a kind (audio, video or subs), the player should select the one which language matches the user preference or the default + forced track. Overlay MAY happen between a forced and non-forced track of the same kind. (1 bit)"},185:{name:"FlagEnabled",cppname:"TrackFlagEnabled",level:3,type:"u",mandatory:!0,minver:2,webm:!0,default:1,range:"0-1",description:"Set if the track is usable. (1 bit)"},29637:{name:"TrackUID",level:3,type:"u",mandatory:!0,minver:1,range:"not 0",description:"A unique ID to identify the Track. This should be kept the same when making a direct stream copy of the Track to another file."},215:{name:"TrackNumber",level:3,type:"u",mandatory:!0,minver:1,range:"not 0",description:"The track number as used in the Block Header (using more than 127 tracks is not encouraged, though the design allows an unlimited number)."},174:{name:"TrackEntry",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Describes a track with all elements."},374648427:{name:"Tracks",level:1,type:"m",multiple:!0,minver:1,description:"A top-level block of information with many tracks described."},175:{name:"EncryptedBlock",level:2,type:"b",multiple:!0,webm:!1,description:"Similar to EncryptedBlock Structure)"},202:{name:"ReferenceTimeCode",level:4,type:"u",multiple:!1,mandatory:!0,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},201:{name:"ReferenceOffset",level:4,type:"u",multiple:!1,mandatory:!0,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},200:{name:"ReferenceFrame",level:3,type:"m",multiple:!1,minver:0,webm:!1,divx:!0,description:"DivX trick track extenstions"},207:{name:"SliceDuration",level:5,type:"u",default:0,description:"The (scaled) duration to apply to the element."},206:{name:"Delay",cppname:"SliceDelay",level:5,type:"u",default:0,description:"The (scaled) delay to apply to the element."},203:{name:"BlockAdditionID",cppname:"SliceBlockAddID",level:5,type:"u",default:0,description:"The ID of the BlockAdditional element (0 is the main Block)."},205:{name:"FrameNumber",cppname:"SliceFrameNumber",level:5,type:"u",default:0,description:"The number of the frame to generate from this lace with this delay (allow you to generate many frames from the same Block/Frame)."},204:{name:"LaceNumber",cppname:"SliceLaceNumber",level:5,type:"u",minver:1,default:0,divx:!1,description:"The reverse number of the frame in the lace (0 is the last frame, 1 is the next to last, etc). While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback."},232:{name:"TimeSlice",level:4,type:"m",multiple:!0,minver:1,divx:!1,description:"Contains extra time information about the data contained in the Block. While there are a few files in the wild with this element, it is no longer in use and has been deprecated. Being able to interpret this element is not required for playback."},142:{name:"Slices",level:3,type:"m",minver:1,divx:!1,description:"Contains slices description."},30114:{name:"DiscardPadding",level:3,type:"i",minver:4,webm:!0,description:"Duration in nanoseconds of the silent data added to the Block (padding at the end of the Block for positive value, at the beginning of the Block for negative value). The duration of DiscardPadding is not calculated in the duration of the TrackEntry and should be discarded during playback."},164:{name:"CodecState",level:3,type:"b",minver:2,webm:!1,description:"The new codec state to use. Data interpretation is private to the codec. This information should always be referenced by a seek entry."},253:{name:"ReferenceVirtual",level:3,type:"i",webm:!1,description:"Relative position of the data that should be in position of the virtual block."},251:{name:"ReferenceBlock",level:3,type:"i",multiple:!0,minver:1,description:"Timestamp of another frame used as a reference (ie: B or P frame). The timestamp is relative to the block it's attached to."},250:{name:"ReferencePriority",cppname:"FlagReferenced",level:3,type:"u",mandatory:!0,minver:1,webm:!1,default:0,description:"This frame is referenced and has the specified cache priority. In cache only a frame of the same or higher priority can replace this frame. A value of 0 means the frame is not referenced."},155:{name:"BlockDuration",level:3,type:"u",minver:1,default:"TrackDuration",description:'The duration of the Block (based on TimecodeScale). This element is mandatory when DefaultDuration is set for the track (but can be omitted as other default values). When not written and with no DefaultDuration, the value is assumed to be the difference between the timestamp of this Block and the timestamp of the next Block in "display" order (not coding order). This element can be useful at the end of a Track (as there is not other Block available), or when there is a break in a track like for subtitle tracks. When set to 0 that means the frame is not a keyframe.'},165:{name:"BlockAdditional",level:5,type:"b",mandatory:!0,minver:1,webm:!1,description:"Interpreted by the codec as it wishes (using the BlockAddID)."},238:{name:"BlockAddID",level:5,type:"u",mandatory:!0,minver:1,webm:!1,default:1,range:"not 0",description:"An ID to identify the BlockAdditional level."},166:{name:"BlockMore",level:4,type:"m",mandatory:!0,multiple:!0,minver:1,webm:!1,description:"Contain the BlockAdditional and some parameters."},30113:{name:"BlockAdditions",level:3,type:"m",minver:1,webm:!1,description:"Contain additional blocks to complete the main one. An EBML parser that has no knowledge of the Block structure could still see and use/skip these data."},162:{name:"BlockVirtual",level:3,type:"b",webm:!1,description:"A Block with no data. It must be stored in the stream at the place the real Block should be in display order. (see Block Virtual)"},161:{name:"Block",level:3,type:"b",mandatory:!0,minver:1,description:"Block containing the actual data to be rendered and a timestamp relative to the Cluster Timecode. (see Block Structure)"},160:{name:"BlockGroup",level:2,type:"m",multiple:!0,minver:1,description:"Basic container of information containing a single Block or BlockVirtual, and information specific to that Block/VirtualBlock."},163:{name:"SimpleBlock",level:2,type:"b",multiple:!0,minver:2,webm:!0,divx:!0,description:"Similar to SimpleBlock Structure"},171:{name:"PrevSize",cppname:"ClusterPrevSize",level:2,type:"u",minver:1,description:"Size of the previous Cluster, in octets. Can be useful for backward playing.",position:"prevCluster"},167:{name:"Position",cppname:"ClusterPosition",level:2,type:"u",minver:1,webm:!1,description:"The Position of the Cluster in the segment (0 in live broadcast streams). It might help to resynchronise offset on damaged streams.",position:"segment"},22743:{name:"SilentTrackNumber",cppname:"ClusterSilentTrackNumber",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"One of the track number that are not used from now on in the stream. It could change later if not specified as silent in a further Cluster."},231:{name:"Timecode",cppname:"ClusterTimecode",level:2,type:"u",mandatory:!0,minver:1,description:"Absolute timestamp of the cluster (based on TimecodeScale)."},524531317:{name:"Cluster",level:1,type:"m",multiple:!0,minver:1,description:"The lower level element containing the (monolithic) Block structure."},19840:{name:"MuxingApp",level:2,type:"8",mandatory:!0,minver:1,description:'Muxing application or library ("libmatroska-0.4.3").'},31657:{name:"Title",level:2,type:"8",minver:1,webm:!1,description:"General name of the segment."},2807730:{name:"TimecodeScaleDenominator",level:2,type:"u",mandatory:!0,minver:4,default:"1000000000",description:"Timestamp scale numerator, see TimecodeScale."},2807729:{name:"TimecodeScale",level:2,type:"u",mandatory:!0,minver:1,default:"1000000",description:"Timestamp scale in nanoseconds (1.000.000 means all timestamps in the segment are expressed in milliseconds)."},27045:{name:"ChapterTranslateID",level:3,type:"b",mandatory:!0,minver:1,webm:!1,description:"The binary value used to represent this segment in the chapter codec data. The format depends on the ChapProcessCodecID used."},27071:{name:"ChapterTranslateCodec",level:3,type:"u",mandatory:!0,minver:1,webm:!1,description:"The chapter codec using this ID (0: Matroska Script, 1: DVD-menu)."},27132:{name:"ChapterTranslateEditionUID",level:3,type:"u",multiple:!0,minver:1,webm:!1,description:"Specify an edition UID on which this correspondance applies. When not specified, it means for all editions found in the segment."},4096955:{name:"NextFilename",level:2,type:"8",minver:1,webm:!1,description:"An escaped filename corresponding to the next segment."},4110627:{name:"NextUID",level:2,type:"b",minver:1,webm:!1,bytesize:16,description:"A unique ID to identify the next chained segment (128 bits)."},3965867:{name:"PrevFilename",level:2,type:"8",minver:1,webm:!1,description:"An escaped filename corresponding to the previous segment."},3979555:{name:"PrevUID",level:2,type:"b",minver:1,webm:!1,bytesize:16,description:"A unique ID to identify the previous chained segment (128 bits)."},29604:{name:"SegmentUID",level:2,type:"b",minver:1,webm:!1,range:"not 0",bytesize:16,description:"A randomly generated unique ID to identify the current segment between many others (128 bits)."},357149030:{name:"Info",level:1,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains miscellaneous general information and statistics on the file."},21420:{name:"SeekPosition",level:3,type:"u",mandatory:!0,minver:1,description:"The position of the element in the segment in octets (0 = first level 1 element).",position:"segment"},21419:{name:"SeekID",level:3,type:"b",mandatory:!0,minver:1,description:"The binary ID corresponding to the element name.",type2:"ebmlID"},19899:{name:"Seek",cppname:"SeekPoint",level:2,type:"m",mandatory:!0,multiple:!0,minver:1,description:"Contains a single seek entry to an EBML element."},290298740:{name:"SeekHead",cppname:"SeekHeader",level:1,type:"m",multiple:!0,minver:1,description:"Contains the position of other level 1 elements."},32379:{name:"SignatureElementList",level:2,type:"m",multiple:!0,webm:!1,i:"Cluster|Block|BlockAdditional",description:"A list consists of a number of consecutive elements that represent one case where data is used in signature. Ex:  means that the BlockAdditional of all Blocks in all Clusters is used for encryption."},32347:{name:"SignatureElements",level:1,type:"m",webm:!1,description:"Contains elements that will be used to compute the signature."},32437:{name:"Signature",level:1,type:"b",webm:!1,description:"The signature of the data (until a new."},32421:{name:"SignaturePublicKey",level:1,type:"b",webm:!1,description:"The public key to use with the algorithm (in the case of a PKI-based signature)."},32410:{name:"SignatureHash",level:1,type:"u",webm:!1,description:"Hash algorithm used (1=SHA1-160, 2=MD5)."},32394:{name:"SignatureAlgo",level:1,type:"u",webm:!1,description:"Signature algorithm used (1=RSA, 2=elliptic)."},458458727:{name:"SignatureSlot",level:-1,type:"m",multiple:!0,webm:!1,description:"Contain signature of some (coming) elements in the stream."},191:{name:"CRC-32",level:-1,type:"b",minver:1,webm:!1,description:"The CRC is computed on all the data of the Master element it's in. The CRC element should be the first in it's parent master for easier reading. All level 1 elements should include a CRC-32. The CRC in use is the IEEE CRC32 Little Endian",crc:!0},236:{name:"Void",level:-1,type:"b",minver:1,description:"Used to void damaged data, to avoid unexpected behaviors when using damaged data. The content is discarded. Also used to reserve space in a sub-element for later use."},17139:{name:"EBMLMaxSizeLength",level:1,type:"u",mandatory:!0,default:8,minver:1,description:"The maximum length of the sizes you'll find in this file (8 or less in Matroska). This does not override the element size indicated at the beginning of an element. Elements that have an indicated size which is larger than what is allowed by EBMLMaxSizeLength shall be considered invalid."},17138:{name:"EBMLMaxIDLength",level:1,type:"u",mandatory:!0,default:4,minver:1,description:"The maximum length of the IDs you'll find in this file (4 or less in Matroska)."},17143:{name:"EBMLReadVersion",level:1,type:"u",mandatory:!0,default:1,minver:1,description:"The minimum EBML version a parser has to support to read this file."},440786851:{name:"EBML",level:"0",type:"m",mandatory:!0,multiple:!0,minver:1,description:"Set the EBML characteristics of the data to follow. Each EBML document has to start with this."}},$e={},Tt={byEbmlID:Me,byName:$e};for(var Ge in Me){var _t=Me[Ge];$e[_t.name.replace("-","_")]=parseInt(Ge,10)}var Xe=Tt;Object.defineProperty(Ee,"__esModule",{value:!0});var ve=fe,Ze=fe,Ct=Xe,St=Ct.byEbmlID,Et=function(){function n(){this._schema=St,this._buffers=[],this._stack=[]}return n.prototype.encode=function(t){var e=this;return ve.concat(t.reduce(function(i,a){return i.concat(e.encodeChunk(a))},[])).buffer},n.prototype.encodeChunk=function(t){return t.type==="m"?t.isEnd?this.endTag(t):this.startTag(t):this.writeTag(t),this.flush()},n.prototype.flush=function(){var t=this._buffers;return this._buffers=[],t},n.prototype.getSchemaInfo=function(t){for(var e=Object.keys(this._schema).map(Number),i=0;i<e.length;i++){var a=e[i];if(this._schema[a].name===t)return new Ze.Buffer(a.toString(16),"hex")}return null},n.prototype.writeTag=function(t){var e=t.name,i=this.getSchemaInfo(e),a=t.data;if(i==null)throw new Error("No schema entry found for "+e);var c=ve.encodeTag(i,a);if(this._stack.length>0){var k=this._stack[this._stack.length-1];k.children.push({tagId:i,elm:t,children:[],data:c});return}this._buffers=this._buffers.concat(c)},n.prototype.startTag=function(t){var e=t.name,i=this.getSchemaInfo(e);if(i==null)throw new Error("No schema entry found for "+e);if(t.unknownSize){var a=ve.encodeTag(i,new Ze.Buffer(0),t.unknownSize);this._buffers=this._buffers.concat(a);return}var c={tagId:i,elm:t,children:[],data:null};this._stack.length>0&&this._stack[this._stack.length-1].children.push(c),this._stack.push(c)},n.prototype.endTag=function(t){t.name;var e=this._stack.pop();if(e==null)throw new Error("EBML structure is broken");if(e.elm.name!==t.name)throw new Error("EBML structure is broken");var i=e.children.reduce(function(c,k){if(k.data===null)throw new Error("EBML structure is broken");return c.concat(k.data)},[]),a=ve.concat(i);e.elm.type==="m"?e.data=ve.encodeTag(e.tagId,a,e.elm.unknownSize):e.data=ve.encodeTag(e.tagId,a),this._stack.length<1&&(this._buffers=this._buffers.concat(e.data))},n}();Ee.default=Et;var xt={readVint:function(n,t){t=t||0;for(var e=1;e<=8&&!(n[t]>=Math.pow(2,8-e));e++);if(e>8)throw new Error("Unrepresentable length: "+e+" "+n.toString("hex",t,t+e));if(t+e>n.length)return null;for(var i=n[t]&(1<<8-e)-1,a=1;a<e;a++){if(a===7&&i>=Math.pow(2,53-8)&&n[t+7]>0)return{length:e,value:-1};i*=Math.pow(2,8),i+=n[t+a]}return{length:e,value:i}},writeVint:function(n){if(n<0||n>Math.pow(2,53))throw new Error("Unrepresentable value: "+n);for(var t=1;t<=8&&!(n<Math.pow(2,7*t)-1);t++);for(var e=new Buffer(t),i=1;i<=t;i++){var a=n&255;e[t-i]=a,n-=a,n/=Math.pow(2,8)}return e[0]=e[0]|1<<8-t,e}},Rt=xt,It=function(n,t,e){t=t||0;for(var i=1;i<=8&&!(n[t]>=Math.pow(2,8-i));i++);if(i>8)throw new Error("Unrepresentable length: "+i+" "+n.toString("hex",t,t+i));if(t+i>n.length)return null;var a,c=n[t]&(1<<8-i)-1;for(a=1;a<i;a++){if(a===7&&c>=Math.pow(2,53-8)&&n[t+7]>0)return{length:i,value:-1};c*=Math.pow(2,8),c+=n[t+a]}return e&&(c-=Math.pow(2,i*7-1)-1),{length:i,value:c}},Ke=It;function pe(n){this.buffer=n,this.offset=0}pe.prototype.nextInt16BE=function(){var n=this.buffer.readInt16BE(this.offset);return this.offset+=2,n};pe.prototype.nextUInt8=function(){var n=this.buffer.readUInt8(this.offset);return this.offset+=1,n};pe.prototype.nextUIntV=function(){var n=Ke(this.buffer,this.offset);return this.offset+=n.length,n.value};pe.prototype.nextIntV=function(){var n=Ke(this.buffer,this.offset,!0);return this.offset+=n.length,n.value};pe.prototype.nextBuffer=function(n){var t=n?this.buffer.slice(this.offset,this.offset+n):this.buffer.slice(this.offset);return this.offset+=n||this.length,t};Object.defineProperty(pe.prototype,"length",{get:function(){return this.buffer.length-this.offset}});var Dt=pe,Bt=Dt,Ot=1,Vt=3,Pt=2,At=function(n){var t={},e=new Bt(n);t.trackNumber=e.nextUIntV(),t.timecode=e.nextInt16BE();var i=e.nextUInt8();t.invisible=!!(i&8),t.keyframe=!!(i&128),t.discardable=!!(i&1);var a=(i&6)>>1;return t.frames=Mt(e,a),t};function Mt(n,t){if(!t)return[n.nextBuffer()];var e,i,a=[],c=n.nextUInt8()+1;if(t===Pt){if(n.length%c!=0)throw new Error("Fixed-Size Lacing Error");for(i=n.length/c,e=0;e<c;e++)a.push(n.nextBuffer(i));return a}var k=[];if(t===Ot)for(e=0;e<c-1;e++){var y;i=0;do y=n.nextUInt8(),i+=y;while(y===255);k.push(i)}else if(t===Vt)for(i=n.nextUIntV(),k.push(i),e=1;e<c-1;e++)i+=n.nextIntV(),k.push(i);for(e=0;e<c-1;e++)a.push(n.nextBuffer(k[e]));return a.push(n.nextBuffer()),a}(function(n){Object.defineProperty(n,"__esModule",{value:!0});var t=Ae,e=Ee,i=wt,a=Rt,c=At;n.Buffer=i.Buffer,n.readVint=a.readVint,n.writeVint=a.writeVint,n.ebmlBlock=c;function k(s){return n.ebmlBlock(new n.Buffer(s))}n.readBlock=k;function y(s,d,l){return l===void 0&&(l=!1),h([s,l?new n.Buffer("01ffffffffffffff","hex"):n.writeVint(d.length),d])}n.encodeTag=y;function b(s){return E(s).reduce(function(d,l){var x=n.ebmlBlock(l.data);return x.frames.reduce(function(V,F){var $=H(F),j=new Blob([$],{type:"image/webp"});return V.concat(j)},d)},[])}n.WebPFrameFilter=b;function E(s){return s.reduce(function(d,l){if(l.type!=="b"||l.name!=="SimpleBlock")return d;var x=n.ebmlBlock(l.data),V=x.frames.some(function(F){var $=F.slice(3,6).toString("hex");return $==="9d012a"});return V?d.concat(l):d},[])}n.WebPBlockFilter=E;function H(s){var d=W("VP8 ",s),l=h([new n.Buffer("WEBP","ascii"),d]);return W("RIFF",l)}n.VP8BitStreamToRiffWebPBuffer=H;function W(s,d){var l=new n.Buffer(4);return l.writeUInt32LE(d.byteLength,0),h([new n.Buffer(s.substr(0,4),"ascii"),l,d,new n.Buffer(d.byteLength%2==0?0:1)])}n.createRIFFChunk=W;function U(s,d,l){var x=w("EBML",s),V=B(x),F=V+12,$=s[s.length-1].dataEnd-F,j=w("Info",s);z("Duration",j),j.splice(1,0,{name:"Duration",type:"f",data:f(d,8)});for(var ee=B(j),m=w("Tracks",s),_=B(m),D=47,r=[],A=5+l.length*15,R=[],J=-1,T=10,M=function(P){var G=D,Y=G+ee,L=Y+_,oe=L+A,K=oe-$;if(r=[],r.push({name:"SeekHead",type:"m",isEnd:!1}),r.push({name:"Seek",type:"m",isEnd:!1}),r.push({name:"SeekID",type:"b",data:new n.Buffer([21,73,169,102])}),r.push({name:"SeekPosition",type:"u",data:o(G)}),r.push({name:"Seek",type:"m",isEnd:!0}),r.push({name:"Seek",type:"m",isEnd:!1}),r.push({name:"SeekID",type:"b",data:new n.Buffer([22,84,174,107])}),r.push({name:"SeekPosition",type:"u",data:o(Y)}),r.push({name:"Seek",type:"m",isEnd:!0}),r.push({name:"Seek",type:"m",isEnd:!1}),r.push({name:"SeekID",type:"b",data:new n.Buffer([28,83,187,107])}),r.push({name:"SeekPosition",type:"u",data:o(L)}),r.push({name:"Seek",type:"m",isEnd:!0}),r.push({name:"SeekHead",type:"m",isEnd:!0}),D=B(r),R=[],R.push({name:"Cues",type:"m",isEnd:!1}),l.forEach(function(se){var le=se.CueTrack,ce=se.CueClusterPosition,ye=se.CueTime;R.push({name:"CuePoint",type:"m",isEnd:!1}),R.push({name:"CueTime",type:"u",data:o(ye)}),R.push({name:"CueTrackPositions",type:"m",isEnd:!1}),R.push({name:"CueTrack",type:"u",data:o(le)}),ce-=F,ce+=K,R.push({name:"CueClusterPosition",type:"u",data:o(ce)}),R.push({name:"CueTrackPositions",type:"m",isEnd:!0}),R.push({name:"CuePoint",type:"m",isEnd:!0})}),R.push({name:"Cues",type:"m",isEnd:!0}),A=B(R),J!==K){if(J=K,P===T-1)throw new Error("Failed to converge to a stable metadata size")}else return"break"},v=0;v<T;v++){var g=M(v);if(g==="break")break}var C=[].concat.apply([],[x,{name:"Segment",type:"m",isEnd:!1,unknownSize:!0},r,j,m,R]),S=new e.default().encode(C);return S}n.makeMetadataSeekable=U;function z(s,d){for(var l=-1,x=0;x<d.length;x++){var V=d[x];if(V.name===s)if(V.type==="m")if(!V.isEnd)l=x;else{if(l==-1)throw new Error("Detected "+s+" closing element before finding the start");d.splice(l,x-l+1);return}else{d.splice(x,1);return}}}n.removeElement=z;function w(s,d){for(var l=[],x=-1,V=0;V<d.length;V++){var F=d[V];if(F.name===s)if(F.type==="m")if(!F.isEnd)x=V;else{if(x==-1)throw new Error("Detected "+s+" closing element before finding the start");l=d.slice(x,V+1);break}else{l.push(d[V]);break}}return l}n.extractElement=w;function O(s,d){Array.isArray(d.cueInfos)&&!Array.isArray(d.cues)&&(console.warn("putRefinedMetaData: info.cueInfos property is deprecated. please use info.cues"),d.cues=d.cueInfos);for(var l=[],x=[],V=0;V<s.length;V++){var F=s[V];if(F.type==="m"&&F.name==="Segment"){if(l=s.slice(0,V),x=s.slice(V),F.unknownSize){x.shift();break}throw new Error("this metadata is not streaming webm file")}}if(!(x[x.length-1].dataEnd>0))throw new Error("metadata dataEnd has wrong number");var $=x[x.length-1].dataEnd,j=l[l.length-1].dataEnd,ee=new e.default().encode(l).byteLength,m=ee-j,_=$-x[0].tagStart;x[0].tagStart-j,x[0].tagStart;var D=new n.Buffer([24,83,128,103]),r=new n.Buffer("01ffffffffffffff","hex"),A=D.byteLength+r.byteLength,R=_,J;for(J=1;J<20;J++){var T=j+A+R,M=T-$,v=m+M,g=N(x,v,d),C=new e.default().encode(g).byteLength;if(C===R)return new e.default().encode([].concat(l,[{type:"m",name:"Segment",isEnd:!1,unknownSize:!0}],g));R=C}throw new Error("unable to refine metadata, stable size could not be found in "+J+" iterations!")}n.putRefinedMetaData=O;function B(s){var d=new e.default;return s.reduce(function(l,x){return l.concat(d.encode([x]))},[]).reduce(function(l,x){return l+x.byteLength},0)}function N(s,d,l){var x=l.duration,V=l.clusterPtrs,F=l.cues,$=s.slice(0);if(typeof x=="number"){var j=!1;$.forEach(function(m){m.type==="f"&&m.name==="Duration"&&(j=!0,m.data=f(x,8))}),j||Z($,"Info",[{name:"Duration",type:"f",data:f(x,8)}])}Array.isArray(F)&&Z($,"Cues",q(F,d));var ee=[];return Array.isArray(V)&&(console.warn("append cluster pointers to seekhead is deprecated. please use cues"),ee=X(V,d)),Z($,"SeekHead",ee,!0),$}function X(s,d){var l=[];return s.forEach(function(x){l.push({name:"Seek",type:"m",isEnd:!1}),l.push({name:"SeekID",type:"b",data:new n.Buffer([31,67,182,117])}),l.push({name:"SeekPosition",type:"u",data:o(x+d)}),l.push({name:"Seek",type:"m",isEnd:!0})}),l}function q(s,d){var l=[];return s.forEach(function(x){var V=x.CueTrack,F=x.CueClusterPosition,$=x.CueTime;l.push({name:"CuePoint",type:"m",isEnd:!1}),l.push({name:"CueTime",type:"u",data:o($)}),l.push({name:"CueTrackPositions",type:"m",isEnd:!1}),l.push({name:"CueTrack",type:"u",data:o(V)}),l.push({name:"CueClusterPosition",type:"u",data:o(F+d)}),l.push({name:"CueTrackPositions",type:"m",isEnd:!0}),l.push({name:"CuePoint",type:"m",isEnd:!0})}),l}function Z(s,d,l,x){x===void 0&&(x=!1);for(var V=-1,F=0;F<s.length;F++){var $=s[F];if($.type==="m"&&$.name===d&&$.isEnd===!1){V=F;break}}V>=0?Array.prototype.splice.apply(s,[V+1,0].concat(l)):x?[].concat([{name:d,type:"m",isEnd:!1}],l,[{name:d,type:"m",isEnd:!0}]).reverse().forEach(function(j){s.unshift(j)}):(s.push({name:d,type:"m",isEnd:!1}),l.forEach(function(j){s.push(j)}),s.push({name:d,type:"m",isEnd:!0}))}function h(s){for(var d=0,l=0;d<s.length;++d)l+=s[d].length;var x=n.Buffer.allocUnsafe(l),V=0;for(d=0;d<s.length;++d){var F=s[d];F.copy(x,V),V+=F.length}return x}n.concat=h;function I(s){var d=new n.Buffer(0);if(s.type==="m")return s;switch(s.type){case"u":d=o(s.value);break;case"i":d=u(s.value);break;case"f":d=f(s.value);break;case"s":d=new n.Buffer(s.value,"ascii");break;case"8":d=new n.Buffer(s.value,"utf8");break;case"b":d=s.value;break;case"d":d=new t.Int64BE(s.value.getTime().toString()).toBuffer();break}return Object.assign({},s,{data:d})}n.encodeValueToBuffer=I;function o(s){for(var d=1;s>=Math.pow(2,8*d);d++);if(d>=7)return console.warn("7bit or more bigger uint not supported."),new t.Uint64BE(s).toBuffer();var l=new n.Buffer(d);return l.writeUIntBE(s,0,d),l}n.createUIntBuffer=o;function u(s){for(var d=1;s>=Math.pow(2,8*d);d++);if(d>=7)return console.warn("7bit or more bigger uint not supported."),new t.Int64BE(s).toBuffer();var l=new n.Buffer(d);return l.writeIntBE(s,0,d),l}n.createIntBuffer=u;function f(s,d){if(d===void 0&&(d=8),d===8){var l=new n.Buffer(8);return l.writeDoubleBE(s,0),l}else if(d===4){var l=new n.Buffer(4);return l.writeFloatBE(s,0),l}else throw new Error("float type bits must 4bytes or 8bytes")}n.createFloatBuffer=f;function p(s){return s instanceof Date?s:new Date(new Date("2001-01-01T00:00:00.000Z").getTime()+Number(s)/1e3/1e3)}n.convertEBMLDateToJSDate=p})(fe);Object.defineProperty(Pe,"__esModule",{value:!0});var ge=fe,Lt=Ae,Ut=fe,Nt=Xe,zt=Nt.byEbmlID,ae;(function(n){n[n.STATE_TAG=1]="STATE_TAG",n[n.STATE_SIZE=2]="STATE_SIZE",n[n.STATE_CONTENT=3]="STATE_CONTENT"})(ae||(ae={}));var Ft=function(){function n(){this._buffer=new ge.Buffer(0),this._tag_stack=[],this._state=ae.STATE_TAG,this._cursor=0,this._total=0,this._schema=zt,this._result=[]}return n.prototype.decode=function(t){this.readChunk(t);var e=this._result;return this._result=[],e},n.prototype.readChunk=function(t){for(this._buffer=Ut.concat([this._buffer,new ge.Buffer(t)]);this._cursor<this._buffer.length&&!(this._state===ae.STATE_TAG&&!this.readTag()||this._state===ae.STATE_SIZE&&!this.readSize()||this._state===ae.STATE_CONTENT&&!this.readContent()););},n.prototype.getSchemaInfo=function(t){return this._schema[t]||{name:"unknown",level:-1,type:"unknown",description:"unknown"}},n.prototype.readTag=function(){if(this._cursor>=this._buffer.length)return!1;var t=ge.readVint(this._buffer,this._cursor);if(t==null)return!1;var e=this._buffer.slice(this._cursor,this._cursor+t.length),i=e.reduce(function(k,y,b,E){return k+y*Math.pow(16,2*(E.length-1-b))},0),a=this.getSchemaInfo(i),c={EBML_ID:i.toString(16),schema:a,type:a.type,name:a.name,level:a.level,tagStart:this._total,tagEnd:this._total+t.length,sizeStart:this._total+t.length,sizeEnd:null,dataStart:null,dataEnd:null,dataSize:null,data:null};return this._tag_stack.push(c),this._cursor+=t.length,this._total+=t.length,this._state=ae.STATE_SIZE,!0},n.prototype.readSize=function(){if(this._cursor>=this._buffer.length)return!1;var t=ge.readVint(this._buffer,this._cursor);if(t==null)return!1;var e=this._tag_stack[this._tag_stack.length-1];return e.sizeEnd=e.sizeStart+t.length,e.dataStart=e.sizeEnd,e.dataSize=t.value,t.value===-1?(e.dataEnd=-1,e.type==="m"&&(e.unknownSize=!0)):e.dataEnd=e.sizeEnd+t.value,this._cursor+=t.length,this._total+=t.length,this._state=ae.STATE_CONTENT,!0},n.prototype.readContent=function(){var t=this._tag_stack[this._tag_stack.length-1];if(t.type==="m"){if(t.isEnd=!1,this._result.push(t),this._state=ae.STATE_TAG,t.dataSize===0){var e=Object.assign({},t,{isEnd:!0});this._result.push(e),this._tag_stack.pop()}return!0}if(this._buffer.length<this._cursor+t.dataSize)return!1;var i=this._buffer.slice(this._cursor,this._cursor+t.dataSize);switch(this._buffer=this._buffer.slice(this._cursor+t.dataSize),t.data=i,t.type){case"u":t.value=i.readUIntBE(0,i.length);break;case"i":t.value=i.readIntBE(0,i.length);break;case"f":t.value=t.dataSize===4?i.readFloatBE(0):t.dataSize===8?i.readDoubleBE(0):(console.warn("cannot read "+t.dataSize+" octets float. failback to 0"),0);break;case"s":t.value=i.toString("ascii");break;case"8":t.value=i.toString("utf8");break;case"b":t.value=i;break;case"d":t.value=ge.convertEBMLDateToJSDate(new Lt.Int64BE(i).toNumber());break}if(t.value===null)throw new Error("unknown tag type:"+t.type);for(this._result.push(t),this._total+=t.dataSize,this._state=ae.STATE_TAG,this._cursor=0,this._tag_stack.pop();this._tag_stack.length>0;){var a=this._tag_stack[this._tag_stack.length-1];if(a.dataEnd<0)return this._tag_stack.pop(),!0;if(this._total<a.dataEnd)break;if(a.type!=="m")throw new Error("parent element is not master element");var e=Object.assign({},a,{isEnd:!0});this._result.push(e),this._tag_stack.pop()}return!0},n}();Pe.default=Ft;var Le={};function Q(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}var Wt=Q;Q.EventEmitter=Q;Q.prototype._events=void 0;Q.prototype._maxListeners=void 0;Q.defaultMaxListeners=10;Q.prototype.setMaxListeners=function(n){if(!qt(n)||n<0||isNaN(n))throw TypeError("n must be a positive number");return this._maxListeners=n,this};Q.prototype.emit=function(n){var t,e,i,a,c,k;if(this._events||(this._events={}),n==="error"&&(!this._events.error||be(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;var y=new Error('Uncaught, unspecified "error" event. ('+t+")");throw y.context=t,y}if(e=this._events[n],Je(e))return!1;if(ue(e))switch(arguments.length){case 1:e.call(this);break;case 2:e.call(this,arguments[1]);break;case 3:e.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),e.apply(this,a)}else if(be(e))for(a=Array.prototype.slice.call(arguments,1),k=e.slice(),i=k.length,c=0;c<i;c++)k[c].apply(this,a);return!0};Q.prototype.addListener=function(n,t){var e;if(!ue(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",n,ue(t.listener)?t.listener:t),this._events[n]?be(this._events[n])?this._events[n].push(t):this._events[n]=[this._events[n],t]:this._events[n]=t,be(this._events[n])&&!this._events[n].warned&&(Je(this._maxListeners)?e=Q.defaultMaxListeners:e=this._maxListeners,e&&e>0&&this._events[n].length>e&&(this._events[n].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[n].length),typeof console.trace=="function"&&console.trace())),this};Q.prototype.on=Q.prototype.addListener;Q.prototype.once=function(n,t){if(!ue(t))throw TypeError("listener must be a function");var e=!1;function i(){this.removeListener(n,i),e||(e=!0,t.apply(this,arguments))}return i.listener=t,this.on(n,i),this};Q.prototype.removeListener=function(n,t){var e,i,a,c;if(!ue(t))throw TypeError("listener must be a function");if(!this._events||!this._events[n])return this;if(e=this._events[n],a=e.length,i=-1,e===t||ue(e.listener)&&e.listener===t)delete this._events[n],this._events.removeListener&&this.emit("removeListener",n,t);else if(be(e)){for(c=a;c-- >0;)if(e[c]===t||e[c].listener&&e[c].listener===t){i=c;break}if(i<0)return this;e.length===1?(e.length=0,delete this._events[n]):e.splice(i,1),this._events.removeListener&&this.emit("removeListener",n,t)}return this};Q.prototype.removeAllListeners=function(n){var t,e;if(!this._events)return this;if(!this._events.removeListener)return arguments.length===0?this._events={}:this._events[n]&&delete this._events[n],this;if(arguments.length===0){for(t in this._events)t!=="removeListener"&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(e=this._events[n],ue(e))this.removeListener(n,e);else if(e)for(;e.length;)this.removeListener(n,e[e.length-1]);return delete this._events[n],this};Q.prototype.listeners=function(n){var t;return!this._events||!this._events[n]?t=[]:ue(this._events[n])?t=[this._events[n]]:t=this._events[n].slice(),t};Q.prototype.listenerCount=function(n){if(this._events){var t=this._events[n];if(ue(t))return 1;if(t)return t.length}return 0};Q.listenerCount=function(n,t){return n.listenerCount(t)};function ue(n){return typeof n=="function"}function qt(n){return typeof n=="number"}function be(n){return typeof n=="object"&&n!==null}function Je(n){return n===void 0}var jt=Ve&&Ve.__extends||function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])};return function(t,e){n(t,e);function i(){this.constructor=t}t.prototype=e===null?Object.create(e):(i.prototype=e.prototype,new i)}}();Object.defineProperty(Le,"__esModule",{value:!0});var Ht=Wt,Ye=fe,$t=function(n){jt(t,n);function t(){var e=n.call(this)||this;return e.logGroup="",e.hasLoggingStarted=!1,e.metadataloaded=!1,e.chunks=[],e.stack=[],e.segmentOffset=0,e.last2SimpleBlockVideoTrackTimecode=[0,0],e.last2SimpleBlockAudioTrackTimecode=[0,0],e.lastClusterTimecode=0,e.lastClusterPosition=0,e.timecodeScale=1e6,e.metadataSize=0,e.metadatas=[],e.cues=[],e.firstVideoBlockRead=!1,e.firstAudioBlockRead=!1,e.currentTrack={TrackNumber:-1,TrackType:-1,DefaultDuration:null,CodecDelay:null},e.trackTypes=[],e.trackDefaultDuration=[],e.trackCodecDelay=[],e.trackInfo={type:"nothing"},e.ended=!1,e.logging=!1,e.use_duration_every_simpleblock=!1,e.use_webp=!1,e.use_segment_info=!0,e.drop_default_duration=!0,e}return t.prototype.stop=function(){for(this.ended=!0,this.emit_segment_info();this.stack.length;)this.stack.pop(),this.logging&&console.groupEnd();this.logging&&this.hasLoggingStarted&&this.logGroup&&console.groupEnd()},t.prototype.emit_segment_info=function(){var e=this.chunks;if(this.chunks=[],this.metadataloaded){if(!this.use_segment_info)return;var c=this.lastClusterTimecode,k=this.duration,y=this.timecodeScale;this.emit("cluster",{timecode:c,data:e}),this.emit("duration",{timecodeScale:y,duration:k})}else{this.metadataloaded=!0,this.metadatas=e;var i=this.trackTypes.indexOf(1),a=this.trackTypes.indexOf(2);if(this.trackInfo=i>=0&&a>=0?{type:"both",trackNumber:i}:i>=0?{type:"video",trackNumber:i}:a>=0?{type:"audio",trackNumber:a}:{type:"nothing"},!this.use_segment_info)return;this.emit("metadata",{data:e,metadataSize:this.metadataSize})}},t.prototype.read=function(e){var i=this,a=!1;if(!this.ended){if(e.type==="m")if(e.isEnd)this.stack.pop();else{var c=this.stack[this.stack.length-1];if(c!=null&&c.level>=e.level){this.stack.pop(),this.logging&&console.groupEnd(),c.dataEnd=e.dataEnd,c.dataSize=e.dataEnd-c.dataStart,c.unknownSize=!1;var k=Object.assign({},c,{name:c.name,type:c.type,isEnd:!0});this.chunks.push(k)}this.stack.push(e)}if(e.type==="m"&&e.name=="Segment")this.segmentOffset!=0&&console.warn("Multiple segments detected!"),this.segmentOffset=e.dataStart,this.emit("segment_offset",this.segmentOffset);else if(e.type==="b"&&e.name==="SimpleBlock"){var y=Ye.ebmlBlock(e.data),b=y.timecode,E=y.trackNumber,H=y.frames;if(this.trackTypes[E]===1){if(!this.firstVideoBlockRead&&(this.firstVideoBlockRead=!0,this.trackInfo.type==="both"||this.trackInfo.type==="video")){var W=this.lastClusterTimecode+b;this.cues.push({CueTrack:E,CueClusterPosition:this.lastClusterPosition,CueTime:W}),this.emit("cue_info",{CueTrack:E,CueClusterPosition:this.lastClusterPosition,CueTime:this.lastClusterTimecode}),this.emit("cue",{CueTrack:E,CueClusterPosition:this.lastClusterPosition,CueTime:W})}this.last2SimpleBlockVideoTrackTimecode=[this.last2SimpleBlockVideoTrackTimecode[1],b]}else if(this.trackTypes[E]===2){if(!this.firstAudioBlockRead&&(this.firstAudioBlockRead=!0,this.trackInfo.type==="audio")){var W=this.lastClusterTimecode+b;this.cues.push({CueTrack:E,CueClusterPosition:this.lastClusterPosition,CueTime:W}),this.emit("cue_info",{CueTrack:E,CueClusterPosition:this.lastClusterPosition,CueTime:this.lastClusterTimecode}),this.emit("cue",{CueTrack:E,CueClusterPosition:this.lastClusterPosition,CueTime:W})}this.last2SimpleBlockAudioTrackTimecode=[this.last2SimpleBlockAudioTrackTimecode[1],b]}this.use_duration_every_simpleblock&&this.emit("duration",{timecodeScale:this.timecodeScale,duration:this.duration}),this.use_webp&&H.forEach(function(U){var z=U.slice(3,6).toString("hex");if(z==="9d012a"){var w=Ye.VP8BitStreamToRiffWebPBuffer(U),O=new Blob([w],{type:"image/webp"}),B=i.duration;i.emit("webp",{currentTime:B,webp:O})}})}else e.type==="m"&&e.name==="Cluster"&&e.isEnd===!1?(this.firstVideoBlockRead=!1,this.firstAudioBlockRead=!1,this.emit_segment_info(),this.emit("cluster_ptr",e.tagStart),this.lastClusterPosition=e.tagStart):e.type==="u"&&e.name==="Timecode"?this.lastClusterTimecode=e.value:e.type==="u"&&e.name==="TimecodeScale"?this.timecodeScale=e.value:e.type==="m"&&e.name==="TrackEntry"?e.isEnd?(this.trackTypes[this.currentTrack.TrackNumber]=this.currentTrack.TrackType,this.trackDefaultDuration[this.currentTrack.TrackNumber]=this.currentTrack.DefaultDuration,this.trackCodecDelay[this.currentTrack.TrackNumber]=this.currentTrack.CodecDelay):this.currentTrack={TrackNumber:-1,TrackType:-1,DefaultDuration:null,CodecDelay:null}:e.type==="u"&&e.name==="TrackType"?this.currentTrack.TrackType=e.value:e.type==="u"&&e.name==="TrackNumber"?this.currentTrack.TrackNumber=e.value:e.type==="u"&&e.name==="CodecDelay"?this.currentTrack.CodecDelay=e.value:e.type==="u"&&e.name==="DefaultDuration"?this.drop_default_duration?(console.warn("DefaultDuration detected!, remove it"),a=!0):this.currentTrack.DefaultDuration=e.value:e.name==="unknown"&&console.warn(e);!this.metadataloaded&&e.dataEnd>0&&(this.metadataSize=e.dataEnd),a||this.chunks.push(e),this.logging&&this.put(e)}},Object.defineProperty(t.prototype,"duration",{get:function(){if(this.trackInfo.type==="nothing")return console.warn("no video, no audio track"),0;var e=0,i=0,a=0,c=this.trackDefaultDuration[this.trackInfo.trackNumber];if(typeof c=="number")e=c;else if(this.trackInfo.type==="both")if(this.last2SimpleBlockAudioTrackTimecode[1]>this.last2SimpleBlockVideoTrackTimecode[1]){e=(this.last2SimpleBlockAudioTrackTimecode[1]-this.last2SimpleBlockAudioTrackTimecode[0])*this.timecodeScale;var k=this.trackCodecDelay[this.trackTypes.indexOf(2)];typeof k=="number"&&(i=k),a=this.last2SimpleBlockAudioTrackTimecode[1]}else{e=(this.last2SimpleBlockVideoTrackTimecode[1]-this.last2SimpleBlockVideoTrackTimecode[0])*this.timecodeScale;var k=this.trackCodecDelay[this.trackTypes.indexOf(1)];typeof k=="number"&&(i=k),a=this.last2SimpleBlockVideoTrackTimecode[1]}else if(this.trackInfo.type==="video"){e=(this.last2SimpleBlockVideoTrackTimecode[1]-this.last2SimpleBlockVideoTrackTimecode[0])*this.timecodeScale;var k=this.trackCodecDelay[this.trackInfo.trackNumber];typeof k=="number"&&(i=k),a=this.last2SimpleBlockVideoTrackTimecode[1]}else if(this.trackInfo.type==="audio"){e=(this.last2SimpleBlockAudioTrackTimecode[1]-this.last2SimpleBlockAudioTrackTimecode[0])*this.timecodeScale;var k=this.trackCodecDelay[this.trackInfo.trackNumber];typeof k=="number"&&(i=k),a=this.last2SimpleBlockAudioTrackTimecode[1]}var y=(this.lastClusterTimecode+a)*this.timecodeScale+e-i,b=y/this.timecodeScale;return Math.floor(b)},enumerable:!0,configurable:!0}),t.prototype.addListener=function(e,i){return n.prototype.addListener.call(this,e,i)},t.prototype.put=function(e){this.hasLoggingStarted||(this.hasLoggingStarted=!0,this.logging&&this.logGroup&&console.groupCollapsed(this.logGroup)),e.type==="m"?e.isEnd?console.groupEnd():console.group(e.name+":"+e.tagStart):e.type==="b"?console.log(e.name,e.type):console.log(e.name,e.tagStart,e.type,e.value)},t}(Ht.EventEmitter);Le.default=$t;const Gt="ts-ebml",Xt="2.0.2",Zt="ebml decoder and encoder",Kt={setup:"npm install -g http-server;",init:"npm run update; npm run mkdir; npm run build",update:"npm run reset; npm update",reset:"rm -rf node_modules",mkdir:"mkdir lib dist 2>/dev/null",clean:"rm -rf lib/* dist/* test/*.js; mkdir -p dist",build:"npm run clean   && tsc    -p .; npm run browserify",start:"http-server . -s & tsc -w -p .& watchify lib/example_seekable.js -o test/example_seekable.js",stop:"killall -- node */tsc -w -p",browserify:"browserify lib/index.js --standalone EBML -o dist/EBML.js",watchify:"watchify lib/index.js --standalone EBML -o dist/EBMl.js -v",test:"tsc; espower lib/test.js > lib/test.tmp; mv -f lib/test.tmp lib/test.js; browserify lib/test.js -o test/test.js",example:"tsc; browserify lib/example_seekable.js -o test/example_seekable.js",examples:"tsc; for file in `find lib -name 'example_*.js' -type f -printf '%f\\n'`; do browserify lib/$file -o test/$file; done",examples_bsd:"tsc; for file in `find lib -name 'example_*.js' -type f -print`; do browserify lib/$(basename $file) -o test/$(basename $file); done",check:"tsc -w --noEmit -p ./",lint:"tslint -c ./tslint.json --project ./tsconfig.json --type-check",doc:"typedoc --mode modules --out doc --disableOutputCheck"},Jt={type:"git",url:"git+https://github.com/legokichi/ts-ebml.git"},Yt=["ebml","webm","mkv","matrosika","webp"],Qt="legokichi duckscallion",en="MIT",tn={url:"https://github.com/legokichi/ts-ebml/issues"},nn="https://github.com/legokichi/ts-ebml#readme",rn={buffer:"^5.0.7",commander:"^2.11.0",ebml:"^2.2.1","ebml-block":"^1.1.0",events:"^1.1.1","int64-buffer":"^0.1.9",matroska:"^2.2.3"},an={"@types/commander":"^2.9.1","@types/qunit":"^2.0.31",browserify:"^13.1.0",empower:"^1.2.3","espower-cli":"^1.1.0","power-assert":"^1.4.4","power-assert-formatter":"^1.4.1","qunit-tap":"^1.5.1",qunitjs:"^2.4.0",tslint:"^3.15.1",typedoc:"^0.5.3",typescript:"^2.4.2",watchify:"^3.7.0"},on="./lib/cli.js",sn="./lib/index.js",ln="./lib/index.d.ts";var un={name:Gt,version:Xt,description:Zt,scripts:Kt,repository:Jt,keywords:Yt,author:Qt,license:en,bugs:tn,homepage:nn,dependencies:rn,devDependencies:an,bin:on,main:sn,typings:ln};Object.defineProperty(de,"__esModule",{value:!0});var cn=Pe;de.Decoder=cn.default;var dn=Ee;de.Encoder=dn.default;var fn=Le;de.Reader=fn.default;var pn=fe;de.tools=pn;var mn=un.version;de.version=mn;var Qe={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=e(ne.exports);function e(c){return c&&c.__esModule?c:{default:c}}var i=function(){return t.default.createElement("div",null,"This browser is uncapable of recording video")},a=i;n.default=a})(Qe);var et={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=e(ne.exports);function e(c){return c&&c.__esModule?c:{default:c}}var i=function(){return t.default.createElement("div",null,"Oh snap! Your browser failed to record your video.",t.default.createElement("br",null),t.default.createElement("br",null),"Please restart it and try again \u{1F44D}")},a=i;n.default=a})(et);var tt={},xe={};Object.defineProperty(xe,"__esModule",{value:!0});var hn=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i])}return n},vn=function(){function n(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}}(),nt=ne.exports,yn=Ue(nt),gn=he.exports,te=Ue(gn),bn=kt.exports,wn=Ue(bn);function Ue(n){return n&&n.__esModule?n:{default:n}}function kn(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function Tn(n,t){var e={};for(var i in n)t.indexOf(i)>=0||!Object.prototype.hasOwnProperty.call(n,i)||(e[i]=n[i]);return e}function _n(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function Cn(n,t){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:n}function Sn(n,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(n,t):n.__proto__=t)}var Ne={title:/<title>.*<\/title>/gi,desc:/<desc>.*<\/desc>/gi,comment:/<!--.*-->/gi,defs:/<defs>.*<\/defs>/gi,width:/ +width="\d+(\.\d+)?(px)?"/gi,height:/ +height="\d+(\.\d+)?(px)?"/gi,fill:/ +fill="(none|#[0-9a-f]+)"/gi,sketchMSShapeGroup:/ +sketch:type="MSShapeGroup"/gi,sketchMSPage:/ +sketch:type="MSPage"/gi,sketchMSLayerGroup:/ +sketch:type="MSLayerGroup"/gi},we=function(n){Sn(t,n);function t(){return _n(this,t),Cn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return vn(t,[{key:"render",value:function(){var i=this.props,a=i.className,c=i.component,k=i.svg,y=i.fill,b=i.width,E=i.accessibilityLabel,H=i.accessibilityDesc,W=i.classSuffix,U=i.cleanupExceptions,z=Tn(i,["className","component","svg","fill","width","accessibilityLabel","accessibilityDesc","classSuffix","cleanupExceptions"]),w=this.props,O=w.cleanup,B=w.height;(O===!0||O.length===0&&U.length>0)&&(O=Object.keys(Ne)),O=O.filter(function(u){return!(U.indexOf(u)>-1)}),b&&B===void 0&&(B=b),delete z.cleanup,delete z.height;var N=(0,wn.default)(kn({SVGInline:!0,"SVGInline--cleaned":O.length},a,a)),X=N.split(" ").join(W+" ")+W,q=t.cleanupSvg(k,O).replace(/<svg/,'<svg class="'+X+'"'+(y?' fill="'+y+'"':"")+(b||B?' style="'+(b?"width: "+b+";":"")+(B?"height: "+B+";":"")+'"':"")),Z=void 0;if(H){Z=/<svg(.|\n|\r\n)*?>/.exec(q);var h=Z.index+Z[0].length;q=q.substr(0,h)+("<desc>"+H+"</desc>")+q.substr(h)}if(E){Z=Z||/<svg(.|\n|\r\n)*?>/.exec(q);var I=Z.index+Z[0].length-1,o="SVGInline-"+t.idCount+++"-title";q=q.substr(0,I)+(' role="img" aria-labelledby="'+o+'"')+q.substr(I,1)+('<title id="'+o+'">'+E+"</title>")+q.substr(I+1)}return yn.default.createElement(c,hn({},z,{className:N,dangerouslySetInnerHTML:{__html:q}}))}}]),t}(nt.Component);we.propTypes={className:te.default.string,classSuffix:te.default.string,component:te.default.oneOfType([te.default.string,te.default.func]),svg:te.default.string.isRequired,fill:te.default.string,cleanup:te.default.oneOfType([te.default.bool,te.default.array]),cleanupExceptions:te.default.array,width:te.default.string,height:te.default.string,accessibilityLabel:te.default.string,accessibilityDesc:te.default.string};we.defaultProps={component:"span",classSuffix:"-svg",cleanup:[],cleanupExceptions:[]};we.idCount=0;we.cleanupSvg=function(n){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return Object.keys(Ne).filter(function(e){return t.indexOf(e)>-1}).reduce(function(e,i){return e.replace(Ne[i],"")},n).trim()};xe.default=we;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=a(ne.exports),e=a(xe),i=a(ie);function a(E){return E&&E.__esModule?E:{default:E}}var c=i.default.div.withConfig({displayName:"disconnected-view__SVGWrapper",componentId:"sc-1hdjm8z-0"})(["max-height:100%;max-width:100%;margin-bottom:140px;"]),k=`
<svg width="210px" height="150px" viewBox="0 0 210 150" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
    <g transform="translate(-915.000000, -356.000000)" fill="#4D4D4D" fill-rule="nonzero">
      <path d="M1117.31284,419.636364 C1117.31284,417.512192 1119.03367,415.79021 1121.15642,415.79021 C1123.27917,415.79021 1125,417.512192 1125,419.636364 C1125,447.023515 1111.3017,469.453876 1087.80267,485.191015 C1067.98313,498.464025 1042.15567,506 1019.49682,506 C996.229145,506 970.976604,499.222345 951.727522,486.61975 C928.403996,471.349569 915,448.691655 915,419.636364 C915,417.512192 916.720828,415.79021 918.843578,415.79021 C920.966327,415.79021 922.687155,417.512192 922.687155,419.636364 C922.687155,445.976297 934.696662,466.276987 955.936236,480.18278 C973.867198,491.922388 997.657898,498.307692 1019.49682,498.307692 C1040.66212,498.307692 1064.99852,491.20678 1083.52721,478.798245 C1105.01628,464.407157 1117.31284,444.272084 1117.31284,419.636364 Z M1079.57501,381.174825 C1072.62783,381.174825 1066.99602,375.539249 1066.99602,368.587413 C1066.99602,361.635577 1072.62783,356 1079.57501,356 C1086.52218,356 1092.15399,361.635577 1092.15399,368.587413 C1092.15399,375.539249 1086.52218,381.174825 1079.57501,381.174825 Z M962.870012,381.174825 C955.922833,381.174825 950.291031,375.539249 950.291031,368.587413 C950.291031,361.635577 955.922833,356 962.870012,356 C969.817192,356 975.448993,361.635577 975.448993,368.587413 C975.448993,375.539249 969.817192,381.174825 962.870012,381.174825 Z"></path>
    </g>
  </g>
</svg>
`,y=function(){return t.default.createElement(c,null,t.default.createElement(e.default,{svg:k}))},b=y;n.default=b})(tt);var rt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=i(ne.exports),e=i(ie);function i(y){return y&&y.__esModule?y:{default:y}}var a=e.default.div.withConfig({displayName:"loading-view__LoadingMessage",componentId:"uxy82i-0"})(["font-family:Arial;"]),c=function(){return t.default.createElement(a,null,"Loading...")},k=c;n.default=k})(rt);var it={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=a(ne.exports),e=a(xe),i=a(ie);function a(E){return E&&E.__esModule?E:{default:E}}var c=i.default.div.withConfig({displayName:"switch-camera-view__SVGWrapper",componentId:"sc-13l3hbu-0"})(["width:80px;height:80px;bottom:4px;right:4px;z-index:10;background-color:rgba(0,0,0,0.3);border-radius:50%;padding-left:8px;padding-top:10px;position:absolute;cursor:pointer;"]),k=`
<svg width="64px" height="64px" viewBox="0 0 1300 1300" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <path d="M1000.809 230.795h-136l-32.4-90.8a32.07 32.07 0 0 0-30.2-21.2h-306.8a31.945 31.945 0 0 0-30.1 21.2l-32.5 90.8h-136a79.978 79.978 0 0 0-80 80v456a79.978 79.978 0 0 0 80 80h704a79.978 79.978 0 0 0 80-80v-456a79.978 79.978 0 0 0-80-80zm8 536a8.023 8.023 0 0 1-8 8h-704a8.024 8.024 0 0 1-8-8v-456a8.024 8.024 0 0 1 8-8h186.7l17.1-47.8 22.9-64.2h250.5l22.9 64.2 17.1 47.8h186.8a8.024 8.024 0 0 1 8 8zm-360-400a160 160 0 1 0 160 160 159.956 159.956 0 0 0-160-160zm0 256a96 96 0 1 1 96-96 96.025 96.025 0 0 1-96 96z"/>
  <path d="M646.53 1051.072L510.64 972.616a23.18 23.18 0 0 0-34.769 20.074v28.335c-209.332-23.19-359.49-86.314-359.49-160.553 0-19.125 9.968-37.511 28.341-54.668V710.41a317.567 317.567 0 0 0-32.93 21.447c-60.674 45.451-73.41 95.028-73.41 128.615s12.736 83.164 73.41 128.615c34.059 25.513 80.563 47.712 138.22 65.98 64.915 20.568 142.076 35.611 225.86 44.406v50.128a23.18 23.18 0 0 0 34.769 20.074l135.888-78.456a23.18 23.18 0 0 0 0-40.147zM1194.334 731.857a330.209 330.209 0 0 0-41.61-26.256v92.688c23.895 19.26 37.02 40.236 37.02 62.183 0 76.572-159.746 141.32-379.404 162.621v78.34c91.47-8.42 175.747-24.178 245.774-46.366 57.658-18.268 104.162-40.467 138.22-65.98 60.675-45.451 73.41-95.028 73.41-128.615s-12.735-83.164-73.41-128.615z"/>
</svg>
`,y=function(H){return t.default.createElement(c,H,t.default.createElement(e.default,{svg:k,fill:"white"}))},b=y;n.default=b})(it);var at={},ot={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=e(ie);function e(c){return c&&c.__esModule?c:{default:c}}var i=t.default.button.withConfig({displayName:"button__Button",componentId:"hkteey-0"})(["background:",";color:",";border-radius:4px;height:40px;padding:0px 18px;border:none;margin:-8px;font-size:14px;font-weight:bold;outline:none;cursor:pointer;:hover{background:#eee;}"],function(c){return c.backgroundColor},function(c){return c.color});i.defaultProps={color:"black",backgroundColor:"white"};var a=i;n.default=a})(ot);var st={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=a(ne.exports),e=a(ie),i=a(he.exports);function a(w){return w&&w.__esModule?w:{default:w}}function c(w,O){if(w==null)return{};var B=k(w,O),N,X;if(Object.getOwnPropertySymbols){var q=Object.getOwnPropertySymbols(w);for(X=0;X<q.length;X++)N=q[X],!(O.indexOf(N)>=0)&&(!Object.prototype.propertyIsEnumerable.call(w,N)||(B[N]=w[N]))}return B}function k(w,O){if(w==null)return{};var B={},N=Object.keys(w),X,q;for(q=0;q<N.length;q++)X=N[q],!(O.indexOf(X)>=0)&&(B[X]=w[X]);return B}var y=e.default.button.withConfig({displayName:"record-button__Button",componentId:"sc-1n5amwk-0"})(["background:",";color:",";border-radius:50%;width:64px;height:64px;background:rgba(227,73,28,0.8);outline:none;border:none;cursor:pointer;z-index:5;:hover{background:#fb6d42;}"],function(w){return w.backgroundColor},function(w){return w.color}),b=e.default.div.withConfig({displayName:"record-button__RecWrapper",componentId:"sc-1n5amwk-1"})(["display:flex;flex-direction:column;align-items:center;"]),E=e.default.div.withConfig({displayName:"record-button__ButtonBorder",componentId:"sc-1n5amwk-2"})(["border:8px solid rgba(255,255,255,0.4);height:80px;width:80px;border-radius:50%;"]),H=e.default.div.withConfig({displayName:"record-button__Instructions",componentId:"sc-1n5amwk-3"})(["font-family:Arial;font-size:14px;color:#ffffff;letter-spacing:1.75px;display:flex;margin-bottom:20px;"]),W=e.default.div.withConfig({displayName:"record-button__InstuctionsHighlight",componentId:"sc-1n5amwk-4"})(["font-weight:700;color:#dc6547;padding:0 5px;"]);y.defaultProps={color:"black",backgroundColor:"white"};var U=function(O){var B=O.t,N=c(O,["t"]);return t.default.createElement(b,null,t.default.createElement(H,null,t.default.createElement("div",null,B("PRESS")," "),t.default.createElement(W,null," ",B("REC")," "),B("WHEN READY")),t.default.createElement(E,null,t.default.createElement(y,N)))};U.propTypes={t:i.default.func};var z=U;n.default=z})(st);var lt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=i(ne.exports),e=i(ie);function i(y){return y&&y.__esModule?y:{default:y}}var a=e.default.button.withConfig({displayName:"stop-button__Button",componentId:"sc-1h536gx-0"})(["background:",";color:",";border-radius:4px;width:40px;height:40px;background:rgba(227,73,28,0.8);outline:none;border:none;cursor:pointer;margin:20px;:hover{background:#fb6d42;}"],function(y){return y.backgroundColor},function(y){return y.color}),c=e.default.div.withConfig({displayName:"stop-button__Border",componentId:"sc-1h536gx-1"})(["background:rgba(255,255,255,0.4);height:80px;width:80px;border-radius:50%;"]);a.defaultProps={color:"black",backgroundColor:"white"};var k=function(b){return t.default.createElement(c,null,t.default.createElement(a,b))};n.default=k})(lt);var ut={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=k(ne.exports),e=a(he.exports),i=a(ie);function a(o){return o&&o.__esModule?o:{default:o}}function c(){if(typeof WeakMap!="function")return null;var o=new WeakMap;return c=function(){return o},o}function k(o){if(o&&o.__esModule)return o;if(o===null||y(o)!=="object"&&typeof o!="function")return{default:o};var u=c();if(u&&u.has(o))return u.get(o);var f={},p=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in o)if(Object.prototype.hasOwnProperty.call(o,s)){var d=p?Object.getOwnPropertyDescriptor(o,s):null;d&&(d.get||d.set)?Object.defineProperty(f,s,d):f[s]=o[s]}return f.default=o,u&&u.set(o,f),f}function y(o){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?y=function(f){return typeof f}:y=function(f){return f&&typeof Symbol=="function"&&f.constructor===Symbol&&f!==Symbol.prototype?"symbol":typeof f},y(o)}function b(o,u){if(!(o instanceof u))throw new TypeError("Cannot call a class as a function")}function E(o,u){for(var f=0;f<u.length;f++){var p=u[f];p.enumerable=p.enumerable||!1,p.configurable=!0,"value"in p&&(p.writable=!0),Object.defineProperty(o,p.key,p)}}function H(o,u,f){return u&&E(o.prototype,u),f&&E(o,f),o}function W(o,u){if(typeof u!="function"&&u!==null)throw new TypeError("Super expression must either be null or a function");o.prototype=Object.create(u&&u.prototype,{constructor:{value:o,writable:!0,configurable:!0}}),u&&U(o,u)}function U(o,u){return U=Object.setPrototypeOf||function(p,s){return p.__proto__=s,p},U(o,u)}function z(o){var u=B();return function(){var p=N(o),s;if(u){var d=N(this).constructor;s=Reflect.construct(p,arguments,d)}else s=p.apply(this,arguments);return w(this,s)}}function w(o,u){return u&&(y(u)==="object"||typeof u=="function")?u:O(o)}function O(o){if(o===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o}function B(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(o){return!1}}function N(o){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(f){return f.__proto__||Object.getPrototypeOf(f)},N(o)}function X(o,u,f){return u in o?Object.defineProperty(o,u,{value:f,enumerable:!0,configurable:!0,writable:!0}):o[u]=f,o}var q=i.default.div.withConfig({displayName:"timer__Text",componentId:"avqbub-0"})(["position:absolute;top:50px;right:50px;font-family:Menlo,monospace;font-size:28px;text-shadow:1px 2px rgba(0,0,0,0.5);"]),Z=i.default.div.withConfig({displayName:"timer__RecIcon",componentId:"avqbub-1"})(["width:16px;height:16px;background:#e55226;border-radius:50%;float:left;margin:2px 8px;margin-left:0;"]),h=function(o){W(f,o);var u=z(f);function f(p){var s;b(this,f),s=u.call(this,p);var d=p.timeLimit?p.timeLimit/1e3:0;return s.state=s.getState(d),s}return H(f,[{key:"componentWillUnmount",value:function(){clearInterval(this.timer)}},{key:"componentDidMount",value:function(){var s=this,d=this.props.timeLimit;this.timer=setInterval(function(){var l=s.state.seconds,x=d?l-1:l+1,V=s.getState(x);s.setState(V)},1e3)}},{key:"pad",value:function(s){var d=""+s,l="00";return l.substring(0,l.length-d.length)+d}},{key:"getState",value:function(s){var d=Math.floor(s/60),l=d!==0?"".concat(d,":").concat(this.pad(s-d*60)):"".concat(s-d*60,"s");return{seconds:s,human:l}}},{key:"render",value:function(){var s=this.props.defaultText||"0:00";return t.default.createElement(q,this.props,t.default.createElement(Z,null),this.state.human||s)}}]),f}(t.Component);X(h,"propTypes",{timeLimit:e.default.number,defaultText:e.default.string});var I=h;n.default=I})(ut);var ct={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=k(ne.exports),e=a(he.exports),i=a(ie);function a(h){return h&&h.__esModule?h:{default:h}}function c(){if(typeof WeakMap!="function")return null;var h=new WeakMap;return c=function(){return h},h}function k(h){if(h&&h.__esModule)return h;if(h===null||y(h)!=="object"&&typeof h!="function")return{default:h};var I=c();if(I&&I.has(h))return I.get(h);var o={},u=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var f in h)if(Object.prototype.hasOwnProperty.call(h,f)){var p=u?Object.getOwnPropertyDescriptor(h,f):null;p&&(p.get||p.set)?Object.defineProperty(o,f,p):o[f]=h[f]}return o.default=h,I&&I.set(h,o),o}function y(h){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?y=function(o){return typeof o}:y=function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},y(h)}function b(h,I){if(!(h instanceof I))throw new TypeError("Cannot call a class as a function")}function E(h,I){for(var o=0;o<I.length;o++){var u=I[o];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(h,u.key,u)}}function H(h,I,o){return I&&E(h.prototype,I),o&&E(h,o),h}function W(h,I){if(typeof I!="function"&&I!==null)throw new TypeError("Super expression must either be null or a function");h.prototype=Object.create(I&&I.prototype,{constructor:{value:h,writable:!0,configurable:!0}}),I&&U(h,I)}function U(h,I){return U=Object.setPrototypeOf||function(u,f){return u.__proto__=f,u},U(h,I)}function z(h){var I=B();return function(){var u=N(h),f;if(I){var p=N(this).constructor;f=Reflect.construct(u,arguments,p)}else f=u.apply(this,arguments);return w(this,f)}}function w(h,I){return I&&(y(I)==="object"||typeof I=="function")?I:O(h)}function O(h){if(h===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return h}function B(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(h){return!1}}function N(h){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)},N(h)}function X(h,I,o){return I in h?Object.defineProperty(h,I,{value:o,enumerable:!0,configurable:!0,writable:!0}):h[I]=o,h}var q=i.default.div.withConfig({displayName:"countdown__Root",componentId:"sc-19d3j7o-0"})(["position:absolute;top:0;bottom:0;left:0;right:0;display:flex;justify-content:center;align-items:center;font-family:Menlo,monospace;font-size:100px;text-shadow:1px 2px rgba(0,0,0,0.5);"]),Z=function(h){W(o,h);var I=z(o);function o(u){var f;return b(this,o),f=I.call(this,u),X(O(f),"updateNumber",function(){var p=f.state.number-1;f.setState({number:p}),p!==0&&(f.timeout=setTimeout(f.updateNumber,1e3))}),f.state={number:u.countdownTime/1e3},f}return H(o,[{key:"componentDidMount",value:function(){this.timeout=setTimeout(this.updateNumber,1e3)}},{key:"componentWillUnmount",value:function(){clearInterval(this.timeout)}},{key:"render",value:function(){return t.default.createElement(q,null,this.state.number!==0?this.state.number:null)}}]),o}(t.Component);n.default=Z,X(Z,"propTypes",{countdownTime:e.default.number})})(ct);(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=E(ne.exports),e=E(he.exports),i=E(ie),a=E(ot),c=E(st),k=E(lt),y=E(ut),b=E(ct);function E(z){return z&&z.__esModule?z:{default:z}}var H=i.default.div.withConfig({displayName:"render-actions__ActionsWrapper",componentId:"dp6lnv-0"})(["position:absolute;left:0;right:0;top:50%;display:flex;align-items:center;justify-content:center;"]),W=function(w){var O=w.t,B=w.isVideoInputSupported,N=w.isInlineRecordingSupported,X=w.thereWasAnError,q=w.isRecording,Z=w.isCameraOn,h=w.streamIsReady,I=w.isConnecting,o=w.isRunningCountdown,u=w.isReplayingVideo,f=w.countdownTime,p=w.timeLimit;w.showReplayControls,w.replayVideoAutoplayAndLoopOff;var s=w.useVideoInput,d=w.onTurnOnCamera;w.onTurnOffCamera;var l=w.onOpenVideoInput,x=w.onStartRecording,V=w.onStopRecording;w.onPauseRecording,w.onResumeRecording;var F=w.onStopReplaying;w.onConfirm;var $=function(){var ee=!N&&B;return!N&&!B||X||I||o?null:u?t.default.createElement(a.default,{type:"button",onClick:F,"data-qa":"start-replaying"},O("Use another video")):q?t.default.createElement(k.default,{type:"button",onClick:V,"data-qa":"stop-recording"}):Z&&h?t.default.createElement(c.default,{t:O,type:"button",onClick:x,"data-qa":"start-recording"}):s?t.default.createElement(a.default,{type:"button",onClick:l,"data-qa":"open-input"},O("Upload a video")):ee?t.default.createElement(a.default,{type:"button",onClick:l,"data-qa":"open-input"},O("Record a video")):t.default.createElement(a.default,{type:"button",onClick:d,"data-qa":"turn-on-camera"},O("Turn my camera ON"))};return t.default.createElement("div",null,q&&t.default.createElement(y.default,{timeLimit:p}),o&&t.default.createElement(b.default,{countdownTime:f}),t.default.createElement(H,null,$()))};W.propTypes={t:e.default.func,isVideoInputSupported:e.default.bool,isInlineRecordingSupported:e.default.bool,thereWasAnError:e.default.bool,isRecording:e.default.bool,isCameraOn:e.default.bool,streamIsReady:e.default.bool,isConnecting:e.default.bool,isRunningCountdown:e.default.bool,countdownTime:e.default.number,timeLimit:e.default.number,showReplayControls:e.default.bool,replayVideoAutoplayAndLoopOff:e.default.bool,isReplayingVideo:e.default.bool,useVideoInput:e.default.bool,onTurnOnCamera:e.default.func,onTurnOffCamera:e.default.func,onOpenVideoInput:e.default.func,onStartRecording:e.default.func,onStopRecording:e.default.func,onPauseRecording:e.default.func,onResumeRecording:e.default.func,onStopReplaying:e.default.func,onConfirm:e.default.func};var U=W;n.default=U})(at);var dt={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.captureThumb=void 0;var t=function(c){return new Promise(function(k,y){var b=document.createElement("canvas");b.width=c.videoWidth,b.height=c.videoHeight,b.getContext("2d").drawImage(c,0,0,c.videoWidth,c.videoHeight),b.toBlob(function(E){k(E)},"image/jpeg")})};n.captureThumb=t;var e=function(c){return new Promise(function(k,y){var b=document.createElement("video");b.preload="metadata",b.muted=!0,b.defaultMuted=!0,b.playsInline=!0,b.autoplay=!0;var E=!1,H=function(){E=!0,k({duration:null,thumbnail:null}),b.removeEventListener&&b.removeEventListener("loadeddata",z),window.URL.revokeObjectURL(b.src)},W=setTimeout(H,1e3),U=function(O){t(b).then(function(B){b.pause(),E||(clearTimeout(W),E=!0,k({duration:O,thumbnail:B})),window.URL.revokeObjectURL(b.src)}).catch(function(B){E||(clearTimeout(W),E=!0,y(B))})},z=function(){var O=b.duration*1e3;b.duration===1/0?(b.currentTime=Number.MAX_SAFE_INTEGER,b.ontimeupdate=function(){b.ontimeupdate=null,O=b.duration*1e3,b.currentTime=0,U(O)}):U(O)};b.addEventListener("loadeddata",z),b.src=window.URL.createObjectURL(c)})},i=e;n.default=i})(dt);var re={};Object.defineProperty(re,"__esModule",{value:!0});re.ReactVideoRecorderDeviceUnavailableError=re.ReactVideoRecorderMediaRecorderUnavailableError=re.ReactVideoRecorderDataAvailableTimeoutError=re.ReactVideoRecorderRecordedBlobsUnavailableError=re.ReactVideoRecorderDataIssueError=void 0;function Re(n){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Re=function(e){return typeof e}:Re=function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Re(n)}function ke(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function Te(n,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&Ce(n,t)}function _e(n){var t=ft();return function(){var i=Se(n),a;if(t){var c=Se(this).constructor;a=Reflect.construct(i,arguments,c)}else a=i.apply(this,arguments);return En(this,a)}}function En(n,t){return t&&(Re(t)==="object"||typeof t=="function")?t:xn(n)}function xn(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function me(n){var t=typeof Map=="function"?new Map:void 0;return me=function(i){if(i===null||!Rn(i))return i;if(typeof i!="function")throw new TypeError("Super expression must either be null or a function");if(typeof t!="undefined"){if(t.has(i))return t.get(i);t.set(i,a)}function a(){return Ie(i,arguments,Se(this).constructor)}return a.prototype=Object.create(i.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),Ce(a,i)},me(n)}function Ie(n,t,e){return ft()?Ie=Reflect.construct:Ie=function(a,c,k){var y=[null];y.push.apply(y,c);var b=Function.bind.apply(a,y),E=new b;return k&&Ce(E,k.prototype),E},Ie.apply(null,arguments)}function ft(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(n){return!1}}function Rn(n){return Function.toString.call(n).indexOf("[native code]")!==-1}function Ce(n,t){return Ce=Object.setPrototypeOf||function(i,a){return i.__proto__=a,i},Ce(n,t)}function Se(n){return Se=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Se(n)}var In=function(n){Te(e,n);var t=_e(e);function e(i){var a;return ke(this,e),a=t.call(this,"Couldn't get data from event"),a.name="ReactVideoRecorderDataIssueError",a.event=i,a}return e}(me(Error));re.ReactVideoRecorderDataIssueError=In;var Dn=function(n){Te(e,n);var t=_e(e);function e(i){var a;return ke(this,e),a=t.call(this,"Couldn't get recordedBlobs"),a.name="ReactVideoRecorderRecordedBlobsUnavailableError",a.event=i,a}return e}(me(Error));re.ReactVideoRecorderRecordedBlobsUnavailableError=Dn;var Bn=function(n){Te(e,n);var t=_e(e);function e(i){var a;return ke(this,e),a=t.call(this,"Method mediaRecorder.ondataavailable wasn't called after ".concat(i,"ms")),a.name="ReactVideoRecorderDataAvailableTimeoutError",a.dataAvailableTimeout=i,a}return e}(me(Error));re.ReactVideoRecorderDataAvailableTimeoutError=Bn;var On=function(n){Te(e,n);var t=_e(e);function e(){var i;return ke(this,e),i=t.call(this,"Couldn't get mediaRecorder"),i.name="ReactVideoRecorderMediaRecorderUnavailableError",i}return e}(me(Error));re.ReactVideoRecorderMediaRecorderUnavailableError=On;var Vn=function(n){Te(e,n);var t=_e(e);function e(){var i;return ke(this,e),i=t.call(this,"Couldn't get selected device"),i.name="ReactVideoRecorderDeviceUnavailableError",i}return e}(me(Error));re.ReactVideoRecorderDeviceUnavailableError=Vn;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=O(ne.exports),e=z(he.exports),i=O(ie),a=de,c=z(Qe),k=z(et),y=z(tt),b=z(rt),E=z(it),H=z(at),W=O(dt),U=re;function z(m){return m&&m.__esModule?m:{default:m}}function w(){if(typeof WeakMap!="function")return null;var m=new WeakMap;return w=function(){return m},m}function O(m){if(m&&m.__esModule)return m;if(m===null||B(m)!=="object"&&typeof m!="function")return{default:m};var _=w();if(_&&_.has(m))return _.get(m);var D={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var A in m)if(Object.prototype.hasOwnProperty.call(m,A)){var R=r?Object.getOwnPropertyDescriptor(m,A):null;R&&(R.get||R.set)?Object.defineProperty(D,A,R):D[A]=m[A]}return D.default=m,_&&_.set(m,D),D}function B(m){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?B=function(D){return typeof D}:B=function(D){return D&&typeof Symbol=="function"&&D.constructor===Symbol&&D!==Symbol.prototype?"symbol":typeof D},B(m)}function N(m,_){var D=Object.keys(m);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(m);_&&(r=r.filter(function(A){return Object.getOwnPropertyDescriptor(m,A).enumerable})),D.push.apply(D,r)}return D}function X(m){for(var _=1;_<arguments.length;_++){var D=arguments[_]!=null?arguments[_]:{};_%2?N(Object(D),!0).forEach(function(r){l(m,r,D[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(m,Object.getOwnPropertyDescriptors(D)):N(Object(D)).forEach(function(r){Object.defineProperty(m,r,Object.getOwnPropertyDescriptor(D,r))})}return m}function q(m,_){if(!(m instanceof _))throw new TypeError("Cannot call a class as a function")}function Z(m,_){for(var D=0;D<_.length;D++){var r=_[D];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(m,r.key,r)}}function h(m,_,D){return _&&Z(m.prototype,_),D&&Z(m,D),m}function I(m,_){if(typeof _!="function"&&_!==null)throw new TypeError("Super expression must either be null or a function");m.prototype=Object.create(_&&_.prototype,{constructor:{value:m,writable:!0,configurable:!0}}),_&&o(m,_)}function o(m,_){return o=Object.setPrototypeOf||function(r,A){return r.__proto__=A,r},o(m,_)}function u(m){var _=s();return function(){var r=d(m),A;if(_){var R=d(this).constructor;A=Reflect.construct(r,arguments,R)}else A=r.apply(this,arguments);return f(this,A)}}function f(m,_){return _&&(B(_)==="object"||typeof _=="function")?_:p(m)}function p(m){if(m===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return m}function s(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(m){return!1}}function d(m){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(D){return D.__proto__||Object.getPrototypeOf(D)},d(m)}function l(m,_,D){return _ in m?Object.defineProperty(m,_,{value:D,enumerable:!0,configurable:!0,writable:!0}):m[_]=D,m}var x=['video/webm;codecs="vp8,opus"',"video/webm;codecs=h264","video/webm;codecs=vp9","video/webm","video/mp4"],V={audio:!0,video:!0},F=i.default.div.withConfig({displayName:"video-recorder__Wrapper",componentId:"sc-7k20rv-0"})(["position:relative;display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;height:100%;overflow:hidden;min-height:300px;background-color:#000;color:white;box-sizing:border-box;*{box-sizing:inherit;}"]),$=i.default.div.withConfig({displayName:"video-recorder__CameraView",componentId:"sc-7k20rv-1"})(["width:100%;height:100%;"]),j=i.default.video.withConfig({displayName:"video-recorder__Video",componentId:"sc-7k20rv-2"})(["position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);min-height:100%;min-width:100%;width:100%;height:100%;object-fit:cover;",";",";"],function(m){return m.isFlipped&&(0,i.css)(["transform:translate(-50%,-50%) scaleX(-1);"])},function(m){return m.onClick&&(0,i.css)(["cursor:pointer;"])}),ee=function(m){I(D,m);var _=u(D);function D(){var r;q(this,D);for(var A=arguments.length,R=new Array(A),J=0;J<A;J++)R[J]=arguments[J];return r=_.call.apply(_,[this].concat(R)),l(p(r),"videoInput",t.default.createRef()),l(p(r),"isComponentUnmounted",!1),l(p(r),"timeSinceInactivity",0),l(p(r),"state",{isRecording:!1,isCameraOn:!1,isConnecting:!1,isReplayingVideo:!1,isReplayVideoMuted:!0,thereWasAnError:!1,error:null,streamIsReady:!1,isInlineRecordingSupported:null,isVideoInputSupported:null,stream:void 0,currentDeviceId:null,availableDeviceIds:[]}),l(p(r),"turnOnCamera",function(){var T=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;r.props.onTurnOnCamera&&r.props.onTurnOnCamera(),navigator.mediaDevices.enumerateDevices().then(function(M){var v=M.filter(function(P){return P.kind==="videoinput"});if(T&&v[0]&&v.find(function(P){return P.deviceId})===void 0)return r.handleError(new U.ReactVideoRecorderDeviceUnavailableError);var g=typeof T=="string"?T:v[0].deviceId;r.setState({isConnecting:!0,isReplayingVideo:!1,thereWasAnError:!1,currentDeviceId:g,availableDeviceIds:v.map(function(P){return P.deviceId}),error:null});var C={audio:!0,video:!0},S=X(X({},r.props.constraints),{},{video:{deviceId:{exact:g}}});navigator.mediaDevices.getUserMedia(S).catch(function(P){if(P.name==="NotReadableError"||P.name==="OverconstrainedError")return console.warn("Got ".concat(P.name,", trying getUserMedia again with fallback constraints")),navigator.mediaDevices.getUserMedia(C);throw P}).then(r.handleSuccess).catch(r.handleError)}).catch(r.handleError)}),l(p(r),"handleSwitchCamera",function(){r.props.onSwitchCamera&&r.props.onSwitchCamera();var T=r.state,M=T.currentDeviceId,v=T.availableDeviceIds;r.stream&&r.stream.getTracks().forEach(function(S){return S.stop()});var g=v.findIndex(function(S){return S===M}),C=v.length-1;return g<0?r.handleError(new U.ReactVideoRecorderDeviceUnavailableError):g+1>C?r.turnOnCamera(v[0]):r.turnOnCamera(v[g+1])}),l(p(r),"turnOffCamera",function(){r.props.onTurnOffCamera&&r.props.onTurnOffCamera(),r.stream&&r.stream.getTracks().forEach(function(T){return T.stop()}),r.setState({isCameraOn:!1}),clearInterval(r.inactivityTimer)}),l(p(r),"handleSuccess",function(T){r.isComponentUnmounted||(r.stream=T,r.setState({isCameraOn:!0,stream:T}),r.props.onCameraOn&&r.props.onCameraOn(),window.URL?r.cameraVideo.srcObject=T:r.cameraVideo.src=T,setTimeout(function(){r.setState({isConnecting:!1,streamIsReady:!0})},200))}),l(p(r),"handleError",function(T){var M=r.props.onError;M&&M(T),!r.isComponentUnmounted&&(console.error("Captured error",T),clearTimeout(r.timeLimitTimeout),r.setState({isConnecting:r.state.isConnecting&&!1,isRecording:!1,thereWasAnError:!0,error:T}),r.state.isCameraOn&&r.turnOffCamera())}),l(p(r),"handleDataIssue",function(T){var M=new U.ReactVideoRecorderDataIssueError(T);return console.error(M.message,T),r.handleError(M),!1}),l(p(r),"getMimeType",function(){if(r.props.mimeType)return r.props.mimeType;var T=window.MediaRecorder.isTypeSupported?x.find(window.MediaRecorder.isTypeSupported):"video/webm";return r.mediaRecorder&&r.mediaRecorder.mimeType||T||""}),l(p(r),"isDataHealthOK",function(T){if(!T.data)return r.handleDataIssue(T);var M=r.props.chunkSize,v=2e3/M,g=r.recordedBlobs.length;if(g>v&&g%v==0){var C=new window.Blob(r.recordedBlobs,{type:r.getMimeType()});if(C.size<=0)return r.handleDataIssue(T)}return!0}),l(p(r),"tryToUnmuteReplayVideo",function(){var T=r.replayVideo;T.muted=!1;var M=T.play();if(!M){T.muted=!0;return}M.then(function(){r.setState({isReplayVideoMuted:!1}),r.props.replayVideoAutoplayAndLoopOff&&(T.pause(),T.loop=!1)}).catch(function(v){return console.warn("Could not autoplay replay video",v),T.muted=!0,T.play()}).catch(function(v){console.warn("Could play muted replay video after failed autoplay",v)})}),l(p(r),"handleDataAvailable",function(T){r.isDataHealthOK(T)&&r.recordedBlobs.push(T.data)}),l(p(r),"handleStopRecording",function(){if(r.props.onStopRecording&&r.props.onStopRecording(),!r.mediaRecorder){r.handleError(new U.ReactVideoRecorderMediaRecorderUnavailableError);return}r.mediaRecorder.stop()}),l(p(r),"handlePauseRecording",function(){if(r.props.onPauseRecording&&r.props.onPauseRecording(),!r.mediaRecorder){r.handleError(new U.ReactVideoRecorderMediaRecorderUnavailableError);return}r.mediaRecorder.pause()}),l(p(r),"handleResumeRecording",function(){if(r.props.onResumeRecording&&r.props.onResumeRecording(),!r.mediaRecorder){r.handleError(new U.ReactVideoRecorderMediaRecorderUnavailableError);return}r.mediaRecorder.resume()}),l(p(r),"handleStartRecording",function(){r.props.onStartRecording&&r.props.onStartRecording(),r.setState({isRunningCountdown:!0,isReplayingVideo:!1}),setTimeout(function(){return r.startRecording()},r.props.countdownTime)}),l(p(r),"startRecording",function(){(0,W.captureThumb)(r.cameraVideo).then(function(T){r.thumbnail=T,r.recordedBlobs=[];var M={mimeType:r.getMimeType()};try{r.setState({isRunningCountdown:!1,isRecording:!0}),r.startedAt=new Date().getTime(),r.mediaRecorder=new window.MediaRecorder(r.stream,M),r.mediaRecorder.addEventListener("stop",r.handleStop),r.mediaRecorder.addEventListener("error",r.handleError),r.mediaRecorder.addEventListener("dataavailable",r.handleDataAvailable);var v=r.props,g=v.timeLimit,C=v.chunkSize,S=v.dataAvailableTimeout;r.mediaRecorder.start(C),g&&(r.timeLimitTimeout=setTimeout(function(){r.handleStopRecording()},g)),Number.isInteger(S)&&setTimeout(function(){r.recordedBlobs.length===0&&r.handleError(new U.ReactVideoRecorderDataAvailableTimeoutError(S))},S)}catch(P){console.error("Couldn't create MediaRecorder",P,M),r.handleError(P)}})}),l(p(r),"handleStop",function(T){var M=new Date().getTime();if(!r.recordedBlobs||r.recordedBlobs.length<=0){var v=new U.ReactVideoRecorderRecordedBlobsUnavailableError(T);console.error(v.message,T),r.handleError(v);return}clearTimeout(r.timeLimitTimeout);var g=r.recordedBlobs.length===1?r.recordedBlobs[0]:new window.Blob(r.recordedBlobs,{type:r.getMimeType()}),C=r.thumbnail,S=r.startedAt,P=M-S;r.mediaRecorder.ondataavailable=null,r.fixVideoMetadata(g).then(function(G){r.setState({isRecording:!1,isReplayingVideo:!0,isReplayVideoMuted:!0,fixedVideoBlob:G,videoUrl:window.URL.createObjectURL(G)}),r.turnOffCamera(),r.props.onRecordingComplete(G,S,C,P)})}),l(p(r),"fixVideoMetadata",function(T){var M,v,g=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);return g?Promise.resolve(T):((v=(M=Blob.prototype).arrayBuffer)!==null&&v!==void 0||(M.arrayBuffer=function(){return new Response(this).arrayBuffer()}),T.arrayBuffer().then(function(C){var S,P=new a.Decoder,G=P.decode(C),Y=["m","u","i","f","s","8","b","d"];G=(S=G)===null||S===void 0?void 0:S.filter(function(le){return Y.includes(le.type)});var L=new a.Reader;L.logging=!1,L.drop_default_duration=!1,G.forEach(function(le){return L.read(le)}),L.stop();var oe=a.tools.makeMetadataSeekable(L.metadatas,L.duration,L.cues),K=C.slice(L.metadataSize),se=new Blob([oe,K],{type:T.type});return se}))}),l(p(r),"handleVideoSelected",function(T){r.state.isReplayingVideo&&r.setState({isReplayingVideo:!1});var M=T.target.files||T.dataTransfer.files;if(M.length!==0){var v=new Date().getTime(),g=M[0];T.target.value=null;var C=g.type==="video/quicktime"?"mov":void 0;(0,W.default)(g).then(function(S){var P=S.duration,G=S.thumbnail;r.setState({isRecording:!1,isReplayingVideo:!0,isReplayVideoMuted:!0,videoBlob:g,videoUrl:window.URL.createObjectURL(g)}),r.props.onRecordingComplete(g,v,G,P,C)}).catch(function(S){r.handleError(S)})}}),l(p(r),"handleOpenVideoInput",function(){r.props.onOpenVideoInput&&r.props.onOpenVideoInput(),r.videoInput.current.value=null,r.videoInput.current.click(),r.videoInput.current.addEventListener("change",r.handleVideoSelected)}),l(p(r),"handleStopReplaying",function(){if(r.props.onStopReplaying&&r.props.onStopReplaying(),r.props.useVideoInput&&r.props.isOnInitially)return r.handleOpenVideoInput();r.setState({isReplayingVideo:!1}),r.state.isInlineRecordingSupported&&r.props.isOnInitially?r.turnOnCamera():r.state.isVideoInputSupported&&r.props.isOnInitially&&r.handleOpenVideoInput()}),l(p(r),"handleReplayVideoClick",function(){r.replayVideo.paused&&!r.props.showReplayControls&&r.replayVideo.play(),r.props.replayVideoAutoplayAndLoopOff||r.setState({isReplayVideoMuted:!r.state.isReplayVideoMuted})}),r}return h(D,[{key:"componentDidMount",value:function(){var A=this,R=!!window.MediaRecorder&&!!navigator.mediaDevices,J=document.createElement("input").capture!==void 0;this.setState({isInlineRecordingSupported:R,isVideoInputSupported:J},function(){A.props.useVideoInput&&A.props.isOnInitially?A.handleOpenVideoInput():A.state.isInlineRecordingSupported&&A.props.isOnInitially?A.turnOnCamera():A.state.isVideoInputSupported&&A.props.isOnInitially&&A.handleOpenVideoInput()})}},{key:"componentDidUpdate",value:function(A,R){this.replayVideo&&this.state.isReplayingVideo&&!R.isReplayingVideo&&this.tryToUnmuteReplayVideo()}},{key:"componentWillUnmount",value:function(){this.turnOffCamera(),this.isComponentUnmounted=!0}},{key:"renderCameraView",value:function(){var A=this,R=this.props,J=R.cameraViewClassName,T=R.showReplayControls,M=R.videoControlsList,v=R.disablePictureInPicture,g=R.replayVideoAutoplayAndLoopOff,C=R.renderDisconnectedView,S=R.renderVideoInputView,P=R.renderUnsupportedView,G=R.renderErrorView,Y=R.renderLoadingView,L=R.useVideoInput,oe=R.videoClassName,K=this.state,se=K.isVideoInputSupported,le=K.isReplayingVideo,ce=K.isInlineRecordingSupported,ye=K.thereWasAnError,De=K.error,Be=K.isCameraOn,ze=K.isConnecting,pt=K.isReplayVideoMuted,mt=K.isRecording,Fe=K.availableDeviceIds,We=L||!ce&&se,qe=We?t.default.createElement("input",{ref:this.videoInput,key:"videoInput",type:"file",accept:"video/*",capture:L?void 0:"user",style:{display:"none"},onChange:this.handleVideoSelected}):null;if(le)return t.default.createElement($,{key:"replay",className:J},t.default.createElement(j,{ref:function(Oe){return A.replayVideo=Oe},className:oe,src:this.state.videoUrl,loop:!0,muted:pt,playsInline:!0,autoPlay:!g,controls:T,onClick:this.handleReplayVideoClick,onDurationChange:this.handleDurationChange,controlsList:M,disablePictureInPicture:v}),qe);if(We)return S({videoInput:qe});if(!ce)return P();if(ye)return G({error:De});if(Be){var ht=Fe&&Fe.length>=2&&!mt?t.default.createElement(E.default,{onClick:this.handleSwitchCamera}):null;return t.default.createElement($,{key:"camera"},t.default.createElement(j,{isFlipped:this.props.isFlipped,ref:function(Oe){return A.cameraVideo=Oe},autoPlay:!0,muted:!0,playsInline:!0}),ht)}return ze?Y():C()}},{key:"render",value:function(){var A=this,R=this.state,J=R.isVideoInputSupported,T=R.isInlineRecordingSupported,M=R.thereWasAnError,v=R.isRecording,g=R.isCameraOn,C=R.streamIsReady,S=R.isConnecting,P=R.isRunningCountdown,G=R.isReplayingVideo,Y=R.isReplayVideoMuted,L=this.props,oe=L.countdownTime,K=L.timeLimit,se=L.showReplayControls,le=L.replayVideoAutoplayAndLoopOff,ce=L.renderActions,ye=L.t,De=L.useVideoInput,Be=L.wrapperClassName;return t.default.createElement(F,{className:Be},this.renderCameraView(),ce({t:ye,isVideoInputSupported:J,isInlineRecordingSupported:T,thereWasAnError:M,isRecording:v,isCameraOn:g,streamIsReady:C,isConnecting:S,isRunningCountdown:P,isReplayingVideo:G,isReplayVideoMuted:Y,countdownTime:oe,timeLimit:K,showReplayControls:se,replayVideoAutoplayAndLoopOff:le,useVideoInput:De,onTurnOnCamera:function(){return A.turnOnCamera()},onSwitchCamera:this.handleSwitchCamera,onTurnOffCamera:this.turnOffCamera,onOpenVideoInput:this.handleOpenVideoInput,onStartRecording:this.handleStartRecording,onStopRecording:this.handleStopRecording,onPauseRecording:this.handlePauseRecording,onResumeRecording:this.handleResumeRecording,onStopReplaying:this.handleStopReplaying}))}}]),D}(t.Component);n.default=ee,l(ee,"propTypes",{isOnInitially:e.default.bool,isFlipped:e.default.bool,mimeType:e.default.string,countdownTime:e.default.number,timeLimit:e.default.number,showReplayControls:e.default.bool,replayVideoAutoplayAndLoopOff:e.default.bool,constraints:e.default.shape({audio:e.default.any,video:e.default.any}),chunkSize:e.default.number,dataAvailableTimeout:e.default.number,useVideoInput:e.default.bool,videoControlsList:e.default.string,disablePictureInPicture:e.default.bool,renderDisconnectedView:e.default.func,renderLoadingView:e.default.func,renderVideoInputView:e.default.func,renderUnsupportedView:e.default.func,renderErrorView:e.default.func,renderActions:e.default.func,cameraViewClassName:e.default.string,videoClassName:e.default.string,wrapperClassName:e.default.string,t:e.default.func,onCameraOn:e.default.func,onTurnOnCamera:e.default.func,onSwitchCamera:e.default.func,onTurnOffCamera:e.default.func,onStartRecording:e.default.func,onStopRecording:e.default.func,onPauseRecording:e.default.func,onResumeRecording:e.default.func,onRecordingComplete:e.default.func,onOpenVideoInput:e.default.func,onStopReplaying:e.default.func,onError:e.default.func}),l(ee,"defaultProps",{renderUnsupportedView:function(){return t.default.createElement(c.default,null)},renderErrorView:function(){return t.default.createElement(k.default,null)},renderVideoInputView:function(_){var D=_.videoInput;return t.default.createElement(t.default.Fragment,null,D)},renderDisconnectedView:function(){return t.default.createElement(y.default,null)},renderLoadingView:function(){return t.default.createElement(b.default,null)},t:function(_){return _},renderActions:H.default,isFlipped:!0,countdownTime:3e3,constraints:V,chunkSize:250,dataAvailableTimeout:500})})(He);(function(n){Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return t.default}});var t=e(He);function e(i){return i&&i.__esModule?i:{default:i}}})(je);var Un=gt(je);export{Un as V};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
