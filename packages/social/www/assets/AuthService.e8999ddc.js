import{A as v}from"./AlertService.5d8abaff.js";import{k as L,r as re,A as l,l as et,m as tt,j as rt,n as ne,o as nt,S as Ae}from"./_app.f0a72417.js";import{c as d}from"./feathers.32f4d4e8.js";import{C as S,v as Se,a as at}from"./index.7b02be28.js";import{E as $,c as B,i as it,u as Pe,h as ae,a as ie,g as ot,s as Ie}from"./avatarFunctions.6d66cf01.js";class O{static fromArray(e,r=0){const n=new O(r);return n.fromArray(e,r===0),n}buffer=[];size;pos=0;copy(){const e=new O(this.getBufferLength());return e.buffer=this.buffer,e}clone(){const e=new O(this.getBufferLength());return e.buffer=this.buffer,e}constructor(e){if(e<0)throw new RangeError("The size does not allow negative values.");this.size=e}getSize(){return this.size}getPos(){return this.pos}getBufferLength(){return this.buffer.length}add(...e){e.forEach(r=>{this.buffer[this.pos]=r,this.pos=(this.pos+1)%this.size})}get(e){if(e<0&&(e+=this.buffer.length),!(e<0||e>this.buffer.length))return this.buffer.length<this.size?this.buffer[e]:this.buffer[(this.pos+e)%this.size]}getFirst(){return this.get(0)}getLast(){return this.get(-1)}remove(e,r=1){if(e<0&&(e+=this.buffer.length),e<0||e>this.buffer.length)return[];const n=this.toArray(),a=n.splice(e,r);return this.fromArray(n),a}pop(){return this.remove(0)[0]}popLast(){return this.remove(-1)[0]}toArray(){return this.buffer.slice(this.pos).concat(this.buffer.slice(0,this.pos))}fromArray(e,r=!1){if(!Array.isArray(e))throw new TypeError("Input value is not an array.");r&&this.resize(e.length),this.size!==0&&(this.buffer=e.slice(-this.size),this.pos=this.buffer.length%this.size)}clear(){this.buffer=[],this.pos=0}resize(e){if(e<0)throw new RangeError("The size does not allow negative values.");if(e===0)this.clear();else if(e!==this.size){const r=this.toArray();this.fromArray(r.slice(-e)),this.pos=this.buffer.length%e}this.size=e}full(){return this.buffer.length===this.size}empty(){return this.buffer.length===0}}class N{static instance=new N;isInitialized;packetCompression=!0;transport;transports=[];schema;dataProducers=new Map;dataConsumers=new Map;instanceSocketId;channelSocketId;accessToken;static _schemas=new Map;incomingMessageQueueUnreliableIDs=new O(100);incomingMessageQueueUnreliable=new O(100);incomingMessageQueueReliable=new O(100);mediasoupOperationQueue=new O(1e3);static availableNetworkId=0;static getNetworkId(){return++this.availableNetworkId}dispose(){this.transport&&typeof this.transport.close=="function"&&this.transport.close(),this.transport=null,N.instance=null}}var H;(function(t){t[t.Heartbeat=0]="Heartbeat",t[t.ClientConnected=1]="ClientConnected",t[t.ClientDisconnected=2]="ClientDisconnected",t[t.Initialization=3]="Initialization",t[t.JoinWorld=4]="JoinWorld",t[t.LeaveWorld=5]="LeaveWorld",t[t.WebRTCTransportCreate=6]="WebRTCTransportCreate",t[t.WebRTCTransportConnect=7]="WebRTCTransportConnect",t[t.WebRTCTransportClose=8]="WebRTCTransportClose",t[t.WebRTCSendTrack=9]="WebRTCSendTrack",t[t.WebRTCReceiveTrack=10]="WebRTCReceiveTrack",t[t.WebRTCPauseConsumer=11]="WebRTCPauseConsumer",t[t.WebRTCResumeConsumer=12]="WebRTCResumeConsumer",t[t.WebRTCCloseConsumer=13]="WebRTCCloseConsumer",t[t.WebRTCPauseProducer=14]="WebRTCPauseProducer",t[t.WebRTCResumeProducer=15]="WebRTCResumeProducer",t[t.WebRTCCloseProducer=16]="WebRTCCloseProducer",t[t.WebRTCMuteOtherProducer=17]="WebRTCMuteOtherProducer",t[t.WebRTCUnmuteOtherProducer=18]="WebRTCUnmuteOtherProducer",t[t.WebRTCConsumerSetLayers=19]="WebRTCConsumerSetLayers",t[t.WebRTCConsumeData=20]="WebRTCConsumeData",t[t.WebRTCProduceData=21]="WebRTCProduceData",t[t.ReliableMessage=22]="ReliableMessage",t[t.WebRTCCreateProducer=23]="WebRTCCreateProducer",t[t.Authorization=24]="Authorization",t[t.Kick=26]="Kick",t[t.Ban=27]="Ban",t[t.ConnectToWorld=28]="ConnectToWorld",t[t.WebRTCRequestCurrentProducers=29]="WebRTCRequestCurrentProducers",t[t.UpdateNetworkState=30]="UpdateNetworkState",t[t.InitializeRouter=31]="InitializeRouter",t[t.WebRTCRequestNearbyUsers=32]="WebRTCRequestNearbyUsers",t[t.ActionData=42]="ActionData",t[t.Synchronization=100]="Synchronization",t[t.ClientInput=101]="ClientInput",t[t.StateUpdate=102]="StateUpdate",t[t.Test=250]="Test",t[t.AvatarUpdated=254]="AvatarUpdated"})(H||(H={}));var oe={exports:{}},Le=function(e,r){return function(){for(var a=new Array(arguments.length),i=0;i<a.length;i++)a[i]=arguments[i];return e.apply(r,a)}},st=Le,D=Object.prototype.toString;function se(t){return D.call(t)==="[object Array]"}function ue(t){return typeof t=="undefined"}function ut(t){return t!==null&&!ue(t)&&t.constructor!==null&&!ue(t.constructor)&&typeof t.constructor.isBuffer=="function"&&t.constructor.isBuffer(t)}function lt(t){return D.call(t)==="[object ArrayBuffer]"}function ct(t){return typeof FormData!="undefined"&&t instanceof FormData}function dt(t){var e;return typeof ArrayBuffer!="undefined"&&ArrayBuffer.isView?e=ArrayBuffer.isView(t):e=t&&t.buffer&&t.buffer instanceof ArrayBuffer,e}function ft(t){return typeof t=="string"}function ht(t){return typeof t=="number"}function Oe(t){return t!==null&&typeof t=="object"}function V(t){if(D.call(t)!=="[object Object]")return!1;var e=Object.getPrototypeOf(t);return e===null||e===Object.prototype}function mt(t){return D.call(t)==="[object Date]"}function pt(t){return D.call(t)==="[object File]"}function vt(t){return D.call(t)==="[object Blob]"}function ke(t){return D.call(t)==="[object Function]"}function yt(t){return Oe(t)&&ke(t.pipe)}function wt(t){return typeof URLSearchParams!="undefined"&&t instanceof URLSearchParams}function gt(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function bt(){return typeof navigator!="undefined"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window!="undefined"&&typeof document!="undefined"}function le(t,e){if(!(t===null||typeof t=="undefined"))if(typeof t!="object"&&(t=[t]),se(t))for(var r=0,n=t.length;r<n;r++)e.call(null,t[r],r,t);else for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&e.call(null,t[a],a,t)}function ce(){var t={};function e(a,i){V(t[i])&&V(a)?t[i]=ce(t[i],a):V(a)?t[i]=ce({},a):se(a)?t[i]=a.slice():t[i]=a}for(var r=0,n=arguments.length;r<n;r++)le(arguments[r],e);return t}function Ct(t,e,r){return le(e,function(a,i){r&&typeof a=="function"?t[i]=st(a,r):t[i]=a}),t}function Rt(t){return t.charCodeAt(0)===65279&&(t=t.slice(1)),t}var C={isArray:se,isArrayBuffer:lt,isBuffer:ut,isFormData:ct,isArrayBufferView:dt,isString:ft,isNumber:ht,isObject:Oe,isPlainObject:V,isUndefined:ue,isDate:mt,isFile:pt,isBlob:vt,isFunction:ke,isStream:yt,isURLSearchParams:wt,isStandardBrowserEnv:bt,forEach:le,merge:ce,extend:Ct,trim:gt,stripBOM:Rt},T=C;function Ne(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var De=function(e,r,n){if(!r)return e;var a;if(n)a=n(r);else if(T.isURLSearchParams(r))a=r.toString();else{var i=[];T.forEach(r,function(c,h){c===null||typeof c=="undefined"||(T.isArray(c)?h=h+"[]":c=[c],T.forEach(c,function(f){T.isDate(f)?f=f.toISOString():T.isObject(f)&&(f=JSON.stringify(f)),i.push(Ne(h)+"="+Ne(f))}))}),a=i.join("&")}if(a){var o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+a}return e},Ut=C;function J(){this.handlers=[]}J.prototype.use=function(e,r,n){return this.handlers.push({fulfilled:e,rejected:r,synchronous:n?n.synchronous:!1,runWhen:n?n.runWhen:null}),this.handlers.length-1};J.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)};J.prototype.forEach=function(e){Ut.forEach(this.handlers,function(n){n!==null&&e(n)})};var Et=J,At=C,St=function(e,r){At.forEach(e,function(a,i){i!==r&&i.toUpperCase()===r.toUpperCase()&&(e[r]=a,delete e[i])})},xe=function(e,r,n,a,i){return e.config=r,n&&(e.code=n),e.request=a,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e},Pt=xe,$e=function(e,r,n,a,i){var o=new Error(e);return Pt(o,r,n,a,i)},It=$e,Lt=function(e,r,n){var a=n.config.validateStatus;!n.status||!a||a(n.status)?e(n):r(It("Request failed with status code "+n.status,n.config,null,n.request,n))},K=C,Ot=K.isStandardBrowserEnv()?function(){return{write:function(r,n,a,i,o,s){var c=[];c.push(r+"="+encodeURIComponent(n)),K.isNumber(a)&&c.push("expires="+new Date(a).toGMTString()),K.isString(i)&&c.push("path="+i),K.isString(o)&&c.push("domain="+o),s===!0&&c.push("secure"),document.cookie=c.join("; ")},read:function(r){var n=document.cookie.match(new RegExp("(^|;\\s*)("+r+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(r){this.write(r,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),kt=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)},Nt=function(e,r){return r?e.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):e},Dt=kt,xt=Nt,$t=function(e,r){return e&&!Dt(r)?xt(e,r):r},de=C,Tt=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],_t=function(e){var r={},n,a,i;return e&&de.forEach(e.split(`
`),function(s){if(i=s.indexOf(":"),n=de.trim(s.substr(0,i)).toLowerCase(),a=de.trim(s.substr(i+1)),n){if(r[n]&&Tt.indexOf(n)>=0)return;n==="set-cookie"?r[n]=(r[n]?r[n]:[]).concat([a]):r[n]=r[n]?r[n]+", "+a:a}}),r},Te=C,Wt=Te.isStandardBrowserEnv()?function(){var e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a"),n;function a(i){var o=i;return e&&(r.setAttribute("href",o),o=r.href),r.setAttribute("href",o),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:r.pathname.charAt(0)==="/"?r.pathname:"/"+r.pathname}}return n=a(window.location.href),function(o){var s=Te.isString(o)?a(o):o;return s.protocol===n.protocol&&s.host===n.host}}():function(){return function(){return!0}}();function fe(t){this.message=t}fe.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")};fe.prototype.__CANCEL__=!0;var X=fe,Y=C,Bt=Lt,jt=Ot,qt=De,zt=$t,Ft=_t,Ht=Wt,he=$e,Vt=G,Jt=X,_e=function(e){return new Promise(function(n,a){var i=e.data,o=e.headers,s=e.responseType,c;function h(){e.cancelToken&&e.cancelToken.unsubscribe(c),e.signal&&e.signal.removeEventListener("abort",c)}Y.isFormData(i)&&delete o["Content-Type"];var u=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.Authorization="Basic "+btoa(f+":"+m)}var p=zt(e.baseURL,e.url);u.open(e.method.toUpperCase(),qt(p,e.params,e.paramsSerializer),!0),u.timeout=e.timeout;function U(){if(!!u){var y="getAllResponseHeaders"in u?Ft(u.getAllResponseHeaders()):null,I=!s||s==="text"||s==="json"?u.responseText:u.response,A={data:I,status:u.status,statusText:u.statusText,headers:y,config:e,request:u};Bt(function(b){n(b),h()},function(b){a(b),h()},A),u=null}}if("onloadend"in u?u.onloadend=U:u.onreadystatechange=function(){!u||u.readyState!==4||u.status===0&&!(u.responseURL&&u.responseURL.indexOf("file:")===0)||setTimeout(U)},u.onabort=function(){!u||(a(he("Request aborted",e,"ECONNABORTED",u)),u=null)},u.onerror=function(){a(he("Network Error",e,null,u)),u=null},u.ontimeout=function(){var I=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",A=e.transitional||Vt.transitional;e.timeoutErrorMessage&&(I=e.timeoutErrorMessage),a(he(I,e,A.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",u)),u=null},Y.isStandardBrowserEnv()){var x=(e.withCredentials||Ht(p))&&e.xsrfCookieName?jt.read(e.xsrfCookieName):void 0;x&&(o[e.xsrfHeaderName]=x)}"setRequestHeader"in u&&Y.forEach(o,function(I,A){typeof i=="undefined"&&A.toLowerCase()==="content-type"?delete o[A]:u.setRequestHeader(A,I)}),Y.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),s&&s!=="json"&&(u.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&u.addEventListener("progress",e.onDownloadProgress),typeof e.onUploadProgress=="function"&&u.upload&&u.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(c=function(y){!u||(a(!y||y&&y.type?new Jt("canceled"):y),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(c),e.signal&&(e.signal.aborted?c():e.signal.addEventListener("abort",c))),i||(i=null),u.send(i)})},w=C,We=St,Kt=xe,Xt={"Content-Type":"application/x-www-form-urlencoded"};function Be(t,e){!w.isUndefined(t)&&w.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}function Yt(){var t;return(typeof XMLHttpRequest!="undefined"||typeof process!="undefined"&&Object.prototype.toString.call(process)==="[object process]")&&(t=_e),t}function Qt(t,e,r){if(w.isString(t))try{return(e||JSON.parse)(t),w.trim(t)}catch(n){if(n.name!=="SyntaxError")throw n}return(r||JSON.stringify)(t)}var Q={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:Yt(),transformRequest:[function(e,r){return We(r,"Accept"),We(r,"Content-Type"),w.isFormData(e)||w.isArrayBuffer(e)||w.isBuffer(e)||w.isStream(e)||w.isFile(e)||w.isBlob(e)?e:w.isArrayBufferView(e)?e.buffer:w.isURLSearchParams(e)?(Be(r,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):w.isObject(e)||r&&r["Content-Type"]==="application/json"?(Be(r,"application/json"),Qt(e)):e}],transformResponse:[function(e){var r=this.transitional||Q.transitional,n=r&&r.silentJSONParsing,a=r&&r.forcedJSONParsing,i=!n&&this.responseType==="json";if(i||a&&w.isString(e)&&e.length)try{return JSON.parse(e)}catch(o){if(i)throw o.name==="SyntaxError"?Kt(o,this,"E_JSON_PARSE"):o}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};w.forEach(["delete","get","head"],function(e){Q.headers[e]={}});w.forEach(["post","put","patch"],function(e){Q.headers[e]=w.merge(Xt)});var G=Q,Gt=C,Zt=G,Mt=function(e,r,n){var a=this||Zt;return Gt.forEach(n,function(o){e=o.call(a,e,r)}),e},je=function(e){return!!(e&&e.__CANCEL__)},qe=C,me=Mt,er=je,tr=G,rr=X;function pe(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new rr("canceled")}var nr=function(e){pe(e),e.headers=e.headers||{},e.data=me.call(e,e.data,e.headers,e.transformRequest),e.headers=qe.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),qe.forEach(["delete","get","head","post","put","patch","common"],function(a){delete e.headers[a]});var r=e.adapter||tr.adapter;return r(e).then(function(a){return pe(e),a.data=me.call(e,a.data,a.headers,e.transformResponse),a},function(a){return er(a)||(pe(e),a&&a.response&&(a.response.data=me.call(e,a.response.data,a.response.headers,e.transformResponse))),Promise.reject(a)})},R=C,ze=function(e,r){r=r||{};var n={};function a(u,f){return R.isPlainObject(u)&&R.isPlainObject(f)?R.merge(u,f):R.isPlainObject(f)?R.merge({},f):R.isArray(f)?f.slice():f}function i(u){if(R.isUndefined(r[u])){if(!R.isUndefined(e[u]))return a(void 0,e[u])}else return a(e[u],r[u])}function o(u){if(!R.isUndefined(r[u]))return a(void 0,r[u])}function s(u){if(R.isUndefined(r[u])){if(!R.isUndefined(e[u]))return a(void 0,e[u])}else return a(void 0,r[u])}function c(u){if(u in r)return a(e[u],r[u]);if(u in e)return a(void 0,e[u])}var h={url:o,method:o,data:o,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:c};return R.forEach(Object.keys(e).concat(Object.keys(r)),function(f){var m=h[f]||i,p=m(f);R.isUndefined(p)&&m!==c||(n[f]=p)}),n},Fe={version:"0.23.0"},ar=Fe.version,ve={};["object","boolean","number","function","string","symbol"].forEach(function(t,e){ve[t]=function(n){return typeof n===t||"a"+(e<1?"n ":" ")+t}});var He={};ve.transitional=function(e,r,n){function a(i,o){return"[Axios v"+ar+"] Transitional option '"+i+"'"+o+(n?". "+n:"")}return function(i,o,s){if(e===!1)throw new Error(a(o," has been removed"+(r?" in "+r:"")));return r&&!He[o]&&(He[o]=!0,console.warn(a(o," has been deprecated since v"+r+" and will be removed in the near future"))),e?e(i,o,s):!0}};function ir(t,e,r){if(typeof t!="object")throw new TypeError("options must be an object");for(var n=Object.keys(t),a=n.length;a-- >0;){var i=n[a],o=e[i];if(o){var s=t[i],c=s===void 0||o(s,i,t);if(c!==!0)throw new TypeError("option "+i+" must be "+c);continue}if(r!==!0)throw Error("Unknown option "+i)}}var or={assertOptions:ir,validators:ve},Ve=C,sr=De,Je=Et,Ke=nr,Z=ze,Xe=or,_=Xe.validators;function j(t){this.defaults=t,this.interceptors={request:new Je,response:new Je}}j.prototype.request=function(e){typeof e=="string"?(e=arguments[1]||{},e.url=arguments[0]):e=e||{},e=Z(this.defaults,e),e.method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var r=e.transitional;r!==void 0&&Xe.assertOptions(r,{silentJSONParsing:_.transitional(_.boolean),forcedJSONParsing:_.transitional(_.boolean),clarifyTimeoutError:_.transitional(_.boolean)},!1);var n=[],a=!0;this.interceptors.request.forEach(function(m){typeof m.runWhen=="function"&&m.runWhen(e)===!1||(a=a&&m.synchronous,n.unshift(m.fulfilled,m.rejected))});var i=[];this.interceptors.response.forEach(function(m){i.push(m.fulfilled,m.rejected)});var o;if(!a){var s=[Ke,void 0];for(Array.prototype.unshift.apply(s,n),s=s.concat(i),o=Promise.resolve(e);s.length;)o=o.then(s.shift(),s.shift());return o}for(var c=e;n.length;){var h=n.shift(),u=n.shift();try{c=h(c)}catch(f){u(f);break}}try{o=Ke(c)}catch(f){return Promise.reject(f)}for(;i.length;)o=o.then(i.shift(),i.shift());return o};j.prototype.getUri=function(e){return e=Z(this.defaults,e),sr(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")};Ve.forEach(["delete","get","head","options"],function(e){j.prototype[e]=function(r,n){return this.request(Z(n||{},{method:e,url:r,data:(n||{}).data}))}});Ve.forEach(["post","put","patch"],function(e){j.prototype[e]=function(r,n,a){return this.request(Z(a||{},{method:e,url:r,data:n}))}});var ur=j,lr=X;function W(t){if(typeof t!="function")throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(a){e=a});var r=this;this.promise.then(function(n){if(!!r._listeners){var a,i=r._listeners.length;for(a=0;a<i;a++)r._listeners[a](n);r._listeners=null}}),this.promise.then=function(n){var a,i=new Promise(function(o){r.subscribe(o),a=o}).then(n);return i.cancel=function(){r.unsubscribe(a)},i},t(function(a){r.reason||(r.reason=new lr(a),e(r.reason))})}W.prototype.throwIfRequested=function(){if(this.reason)throw this.reason};W.prototype.subscribe=function(e){if(this.reason){e(this.reason);return}this._listeners?this._listeners.push(e):this._listeners=[e]};W.prototype.unsubscribe=function(e){if(!!this._listeners){var r=this._listeners.indexOf(e);r!==-1&&this._listeners.splice(r,1)}};W.source=function(){var e,r=new W(function(a){e=a});return{token:r,cancel:e}};var cr=W,dr=function(e){return function(n){return e.apply(null,n)}},fr=function(e){return typeof e=="object"&&e.isAxiosError===!0},Ye=C,hr=Le,M=ur,mr=ze,pr=G;function Qe(t){var e=new M(t),r=hr(M.prototype.request,e);return Ye.extend(r,M.prototype,e),Ye.extend(r,e),r.create=function(a){return Qe(mr(t,a))},r}var P=Qe(pr);P.Axios=M;P.Cancel=X;P.CancelToken=cr;P.isCancel=je;P.VERSION=Fe.version;P.all=function(e){return Promise.all(e)};P.spread=dr;P.isAxiosError=fr;oe.exports=P;oe.exports.default=P;var q=oe.exports,z={};function vr(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var yr=function(t,e,r,n){e=e||"&",r=r||"=";var a={};if(typeof t!="string"||t.length===0)return a;var i=/\+/g;t=t.split(e);var o=1e3;n&&typeof n.maxKeys=="number"&&(o=n.maxKeys);var s=t.length;o>0&&s>o&&(s=o);for(var c=0;c<s;++c){var h=t[c].replace(i,"%20"),u=h.indexOf(r),f,m,p,U;u>=0?(f=h.substr(0,u),m=h.substr(u+1)):(f=h,m=""),p=decodeURIComponent(f),U=decodeURIComponent(m),vr(a,p)?Array.isArray(a[p])?a[p].push(U):a[p]=[a[p],U]:a[p]=U}return a},F=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}},wr=function(t,e,r,n){return e=e||"&",r=r||"=",t===null&&(t=void 0),typeof t=="object"?Object.keys(t).map(function(a){var i=encodeURIComponent(F(a))+r;return Array.isArray(t[a])?t[a].map(function(o){return i+encodeURIComponent(F(o))}).join(e):i+encodeURIComponent(F(t[a]))}).join(e):n?encodeURIComponent(F(n))+r+encodeURIComponent(F(t)):""};z.decode=z.parse=yr;z.encode=z.stringify=wr;var ee,gr=new Uint8Array(16);function br(){if(!ee&&(ee=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto!="undefined"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!ee))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return ee(gr)}var Cr=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function Rr(t){return typeof t=="string"&&Cr.test(t)}var g=[];for(var ye=0;ye<256;++ye)g.push((ye+256).toString(16).substr(1));function Ur(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,r=(g[t[e+0]]+g[t[e+1]]+g[t[e+2]]+g[t[e+3]]+"-"+g[t[e+4]]+g[t[e+5]]+"-"+g[t[e+6]]+g[t[e+7]]+"-"+g[t[e+8]]+g[t[e+9]]+"-"+g[t[e+10]]+g[t[e+11]]+g[t[e+12]]+g[t[e+13]]+g[t[e+14]]+g[t[e+15]]).toLowerCase();if(!Rr(r))throw TypeError("Stringified UUID is invalid");return r}var Ge,we,ge=0,be=0;function Ce(t,e,r){var n=e&&r||0,a=e||new Array(16);t=t||{};var i=t.node||Ge,o=t.clockseq!==void 0?t.clockseq:we;if(i==null||o==null){var s=t.random||(t.rng||br)();i==null&&(i=Ge=[s[0]|1,s[1],s[2],s[3],s[4],s[5]]),o==null&&(o=we=(s[6]<<8|s[7])&16383)}var c=t.msecs!==void 0?t.msecs:Date.now(),h=t.nsecs!==void 0?t.nsecs:be+1,u=c-ge+(h-be)/1e4;if(u<0&&t.clockseq===void 0&&(o=o+1&16383),(u<0||c>ge)&&t.nsecs===void 0&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");ge=c,be=h,we=o,c+=122192928e5;var f=((c&268435455)*1e4+h)%4294967296;a[n++]=f>>>24&255,a[n++]=f>>>16&255,a[n++]=f>>>8&255,a[n++]=f&255;var m=c/4294967296*1e4&268435455;a[n++]=m>>>8&255,a[n++]=m&255,a[n++]=m>>>24&15|16,a[n++]=m>>>16&255,a[n++]=o>>>8|128,a[n++]=o&255;for(var p=0;p<6;++p)a[n+p]=i[p];return e||Ur(a)}const k={userPatched:t=>({type:"USER_PATCHED",user:t}),loadedUserRelationship:t=>({type:"LOADED_RELATIONSHIP",relationship:t}),loadedUsers:t=>({type:"ADMIN_LOADED_USERS",users:t}),changedRelation:()=>({type:"CHANGED_RELATION"}),loadedLayerUsers:t=>({type:"LOADED_LAYER_USERS",users:t}),clearLayerUsers:()=>({type:"CLEAR_LAYER_USERS"}),addedLayerUser:t=>({type:"ADDED_LAYER_USER",user:t}),removedLayerUser:t=>({type:"REMOVED_LAYER_USER",user:t}),loadedChannelLayerUsers:t=>({type:"LOADED_CHANNEL_LAYER_USERS",users:t}),clearChannelLayerUsers:()=>({type:"CLEAR_CHANNEL_LAYER_USERS"}),addedChannelLayerUser:t=>({type:"ADDED_CHANNEL_LAYER_USER",user:t}),removedChannelLayerUser:t=>({type:"REMOVED_CHANNEL_LAYER_USER",user:t}),displayUserToast:(t,e)=>({type:"USER_TOAST",message:{user:t,args:e}})};async function Er(t,e){for(let[r,n]of $.defaultWorld.clients)if(n.userId===t){n.name=e;return}}const Ze=B("WebCamInputComponent");function Ar(t){if(!it)return!1;const e=t.location.search;return new URLSearchParams(e).get("bot")!==null}const Me=B("ProximityComponent"),Tr=B("AfkCheckComponent"),Re=B("UserNameComponent"),_r=B("NetworkObjectComponent");function Sr(t){for(let[e,r]of $.defaultWorld.clients)if(r.userId==t)return Pe().getUserAvatarEntity(r.userId)}const E={doLoginAuto:(t,e)=>async r=>{try{const n=rt();let a=e!==!0&&n&&n.authUser?n.authUser.accessToken:void 0;if(t!==!0&&a==null)return;e===!0&&await d.authentication.reset(),t===!0&&(a==null||a.length===0)&&(a=(await d.service("identity-provider").create({type:"guest",token:Ce()})).accessToken),await d.authentication.setAccessToken(a);let i;try{i=await d.reAuthenticate()}catch(o){if(o.className==="not-found"||o.className==="not-authenticated"&&o.message==="jwt expired")await r(l.didLogout()),await d.authentication.reset(),a=(await d.service("identity-provider").create({type:"guest",token:Ce()})).accessToken,await d.authentication.setAccessToken(a),i=await d.reAuthenticate();else throw o}if(i){i["identity-provider"]?.id==null&&(await r(l.didLogout()),await d.authentication.reset(),a=(await d.service("identity-provider").create({type:"guest",token:Ce()})).accessToken,await d.authentication.setAccessToken(a),i=await d.reAuthenticate());const o=ne(i);r(l.loginUserSuccess(o)),await E.loadUserData(r,o.identityProvider.userId)}else console.log("****************")}catch(n){console.error(n),r(l.didLogout())}},loadUserData:(t,e)=>d.service("user").get(e).then(r=>r.user_setting==null?d.service("user-settings").find({query:{userId:e}}).then(n=>n.total===0?d.service("user-settings").create({userId:e}).then(a=>(r.user_setting=a,Promise.resolve(r))):(r.user_setting=n.data[0],Promise.resolve(r))):Promise.resolve(r)).then(r=>{const n=re(r);t(l.loadedUserData(n))}).catch(r=>{console.log(r),v.dispatchAlertError(t,"Failed to load user data")}),loginUserByPassword:t=>e=>{if(!Se(t.email)){v.dispatchAlertError(e,"Please input valid email address");return}e(l.actionProcessing(!0)),d.authenticate({strategy:"local",email:t.email,password:t.password}).then(r=>{const n=ne(r);if(!n.identityProvider.isVerified){d.logout(),e(l.registerUserByEmailSuccess(n.identityProvider)),window.location.href="/auth/confirm";return}e(l.loginUserSuccess(n)),E.loadUserData(e,n.identityProvider.userId).then(()=>window.location.href="/")}).catch(r=>{console.log(r),e(l.loginUserError("Failed to login")),v.dispatchAlertError(e,r.message)}).finally(()=>e(l.actionProcessing(!1)))},loginUserByXRWallet:t=>(e,r)=>{try{e(l.actionProcessing(!0));const n=Pr(t);console.log(n);const a=nt(n),i=L().user.id.value;a.id=i,Lr(a),e(l.loadedUserData(a))}catch(n){console.log(n),e(l.loginUserError("Failed to login")),v.dispatchAlertError(e,n.message)}finally{e(l.actionProcessing(!1))}},loginUserByOAuth:t=>e=>{e(l.actionProcessing(!0));const r=L().authUser.accessToken.value,n=window.location.pathname,a=z.parse(window.location.search.slice(1)),i={path:n};a.instanceId&&a.instanceId.length>0&&(i.instanceId=a.instanceId);let o=`${S.publicRuntimeConfig.apiServer}/oauth/${t}?feathers_token=${r}&redirect=${JSON.stringify(i)}`;window.location.href=o},loginUserByJwt:(t,e,r)=>async n=>{try{n(l.actionProcessing(!0)),await d.authentication.setAccessToken(t);const a=await d.authenticate({strategy:"jwt",accessToken:t}),i=ne(a);n(l.loginUserSuccess(i)),await E.loadUserData(n,i.identityProvider.userId),n(l.actionProcessing(!1)),window.location.href=e}catch(a){console.log(a),n(l.loginUserError("Failed to login")),v.dispatchAlertError(n,a.message),window.location.href=`${r}?error=${a.message}`,n(l.actionProcessing(!1))}},logoutUser:()=>t=>{t(l.actionProcessing(!0)),d.logout().then(()=>t(l.didLogout())).catch(()=>t(l.didLogout())).finally(()=>{t(l.actionProcessing(!1)),E.doLoginAuto(!0,!0)(t)})},registerUserByEmail:t=>(console.log("1 registerUserByEmail"),e=>{console.log("2 dispatch",e),e(l.actionProcessing(!0)),d.service("identity-provider").create({token:t.email,password:t.password,type:"password"}).then(r=>{console.log("3 ",r),e(l.registerUserByEmailSuccess(r)),window.location.href="/auth/confirm"}).catch(r=>{console.log("error",r),e(l.registerUserByEmailError(r.message)),v.dispatchAlertError(e,r.message)}).finally(()=>{console.log("4 finally",e),e(l.actionProcessing(!1))})}),verifyEmail:t=>e=>{e(l.actionProcessing(!0)),d.service("authManagement").create({action:"verifySignupLong",value:t}).then(r=>{e(l.didVerifyEmail(!0)),E.loginUserByJwt(r.accessToken,"/","/")(e)}).catch(r=>{console.log(r),e(l.didVerifyEmail(!1)),v.dispatchAlertError(e,r.message)}).finally(()=>e(l.actionProcessing(!1)))},resendVerificationEmail:t=>e=>{e(l.actionProcessing(!0)),d.service("authManagement").create({action:"resendVerifySignup",value:{token:t,type:"password"}}).then(()=>e(l.didResendVerificationEmail(!0))).catch(()=>e(l.didResendVerificationEmail(!1))).finally(()=>e(l.actionProcessing(!1)))},forgotPassword:t=>e=>{e(l.actionProcessing(!0)),console.log("forgotPassword",t),d.service("authManagement").create({action:"sendResetPwd",value:{token:t,type:"password"}}).then(()=>e(l.didForgotPassword(!0))).catch(()=>e(l.didForgotPassword(!1))).finally(()=>e(l.actionProcessing(!1)))},resetPassword:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("authManagement").create({action:"resetPwdLong",value:{token:t,password:e}}).then(n=>{console.log(n),r(l.didResetPassword(!0)),window.location.href="/"}).catch(n=>{console.log(n),r(l.didResetPassword(!1)),window.location.href="/"}).finally(()=>r(l.actionProcessing(!1)))},createMagicLink:(t,e)=>r=>{r(l.actionProcessing(!0));let n="email",a="email";const i=(S.publicRuntimeConfig.auth&&S.publicRuntimeConfig.auth.enableEmailMagicLink)??!0,o=(S.publicRuntimeConfig.auth&&S.publicRuntimeConfig.auth.enableSmsMagicLink)??!1;if(e==="email")n="email",a="email";else if(e==="sms")n="sms",a="mobile";else{const s=t.replace(/-/g,"");if(at(s)){if(!o){v.dispatchAlertError(r,"Please input valid email address");return}n="sms",a="mobile",t="+1"+s}else if(Se(t)){if(!i){v.dispatchAlertError(r,"Please input valid phone number");return}n="email"}else{v.dispatchAlertError(r,"Please input valid email or phone number");return}}d.service("magic-link").create({type:n,[a]:t}).then(s=>{console.log(s),r(l.didCreateMagicLink(!0)),v.dispatchAlertSuccess(r,"Login Magic Link was sent. Please check your Email or SMS.")}).catch(s=>{console.log(s),r(l.didCreateMagicLink(!1)),v.dispatchAlertError(r,s.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionByPassword:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("identity-provider").create({token:t.email,password:t.password,type:"password",userId:e}).then(n=>{const a=n;return E.loadUserData(r,a.userId)}).catch(n=>{console.log(n),v.dispatchAlertError(r,n.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionByEmail:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("magic-link").create({email:t,type:"email",userId:e}).then(n=>{const a=n;if(a.userId!=null)return E.loadUserData(r,a.userId)}).catch(n=>{console.log(n),v.dispatchAlertError(r,n.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionBySms:(t,e)=>r=>{r(l.actionProcessing(!0));let n=t.replace(/-/g,"");n.length===10&&(n="1"+n),d.service("magic-link").create({mobile:n,type:"sms",userId:e}).then(a=>{const i=a;if(i.userId!=null)return E.loadUserData(r,i.userId)}).catch(a=>{console.log(a),v.dispatchAlertError(r,a.message)}).finally(()=>r(l.actionProcessing(!1)))},addConnectionByOauth:(t,e)=>()=>{window.open(`${S.publicRuntimeConfig.apiServer}/auth/oauth/${t}?userId=${e}`,"_blank")},removeConnection:(t,e)=>r=>{r(l.actionProcessing(!0)),d.service("identity-provider").remove(t).then(()=>E.loadUserData(r,e)).catch(n=>{console.log(n),v.dispatchAlertError(r,n.message)}).finally(()=>r(l.actionProcessing(!1)))},refreshConnections:t=>{},updateUserSettings:(t,e)=>async r=>{const n=await d.service("user-settings").patch(t,e);r(l.updatedUserSettingsAction(n))},uploadAvatar:t=>async(e,r)=>{const n=L().authUser.accessToken.value,a=L().user,i=await q.post(`${S.publicRuntimeConfig.apiServer}/upload`,t,{headers:{"Content-Type":"multipart/form-data",Authorization:"Bearer "+n}});await d.service("user").patch(a.id.value,{name:a.name.value});const o=i.data;v.dispatchAlertSuccess(e,"Avatar updated"),e(l.avatarUpdated(o))},uploadAvatarModel:(t,e,r,n)=>async(a,i)=>{const o=L().authUser.accessToken.value,s=r||t.name.substring(0,t.name.lastIndexOf(".")),[c,h]=await Promise.all([d.service("upload-presigned").get("",{query:{type:"avatar",fileName:s+".glb",fileSize:t.size,isPublicAvatar:n}}),d.service("upload-presigned").get("",{query:{type:"user-thumbnail",fileName:s+".png",fileSize:e.size,mimeType:e.type,isPublicAvatar:n}})]),u=new FormData;if(Object.keys(c.fields).forEach(m=>u.append(m,c.fields[m])),u.append("acl","public-read"),u.append(c.local?"media":"file",t),c.local){let m="avatars";c.fields.Key&&(m=c.fields.Key,m=m.substring(0,m.lastIndexOf("/"))),u.append("uploadPath",m),u.append("id",`${s}.glb`),u.append("skipStaticResource","true")}return console.log("modelData",u),(c.local===!0?q.post(`${S.publicRuntimeConfig.apiServer}/media`,u,{headers:{"Content-Type":"multipart/form-data",Authorization:"Bearer "+o}}):q.post(c.url,u)).then(async m=>{const p=new FormData;if(Object.keys(h.fields).forEach(b=>p.append(b,h.fields[b])),p.append("acl","public-read"),p.append(h.local===!0?"media":"file",e),h.local){let b="avatars";h.fields.Key&&(b=h.fields.Key,b=b.substring(0,b.lastIndexOf("/"))),p.append("uploadPath",b),p.append("name",`${s}.png`),p.append("skipStaticResource","true")}const U=`https://${c.cacheDomain}/${c.fields.Key}`,x=`https://${h.cacheDomain}/${h.fields.Key}`,y=L().user,I=await d.service("static-resource").find({query:{name:s,staticResourceType:"avatar",userId:n?null:y.id.value}}),A=await d.service("static-resource").find({query:{name:s,staticResourceType:"user-thumbnail",userId:n?null:y.id.value}});await(h.local===!0?q.post(`${S.publicRuntimeConfig.apiServer}/media`,p,{headers:{"Content-Type":"multipart/form-data",Authorization:"Bearer "+o}}):q.post(h.url,p)).then(b=>{Promise.all([I.total>0?d.service("static-resource").patch(I.data[0].id,{url:U,key:c.fields.Key}):d.service("static-resource").create({name:s,staticResourceType:"avatar",url:U,key:c.fields.Key,userId:n?null:y.id.value}),A.total>0?d.service("static-resource").patch(A.data[0].id,{url:x,key:h.fields.Key}):d.service("static-resource").create({name:s,staticResourceType:"user-thumbnail",url:x,mimeType:"image/png",key:h.fields.Key,userId:n?null:y.id.value})]).then(Ee=>{n!==!0&&(a(l.userAvatarIdUpdated(b)),d.service("user").patch(y.id.value,{avatarId:s}).then(Or=>{v.dispatchAlertSuccess(a,"Avatar Uploaded Successfully."),N?.instance?.transport&&N.instance.transport.sendNetworkStatUpdateMessage({type:H.AvatarUpdated,userId:y.id.value,avatarId:s,avatarURL:U,thumbnailURL:x})}))}).catch(Ee=>{console.error("Error occurred while saving Avatar.",Ee),d.service("upload-presigned").remove("",{query:{keys:[c.fields.Key,h.fields.Key]}})})}).catch(b=>{console.error("Error occurred while uploading thumbnail.",b),d.service("upload-presigned").remove("",{query:{keys:[c.fields.Key]}})})}).catch(m=>{console.error("Error occurred while uploading model.",m)})},removeAvatar:t=>async(e,r)=>{await d.service("upload-presigned").remove("",{query:{keys:t}}).then(n=>{v.dispatchAlertSuccess(e,"Avatar Removed Successfully."),E.fetchAvatarList()(e)})},fetchAvatarList:()=>{const t=L().user;return async e=>{const r=await d.service("static-resource").find({query:{$select:["id","key","name","url","staticResourceType","userId"],staticResourceType:{$in:["avatar","user-thumbnail"]},$or:[{userId:t.id.value},{userId:null}],$limit:1e3}});e(l.updateAvatarList(r.data))}},updateUsername:(t,e)=>r=>{d.service("user").patch(t,{name:e}).then(n=>{v.dispatchAlertSuccess(r,"Username updated"),r(l.usernameUpdated(n))})},updateUserAvatarId:(t,e,r,n)=>a=>{d.service("user").patch(t,{avatarId:e}).then(i=>{a(l.userAvatarIdUpdated(i)),N?.instance?.transport&&N.instance.transport.sendNetworkStatUpdateMessage({type:H.AvatarUpdated,userId:t,avatarId:e,avatarURL:r,thumbnailURL:n})})},removeUser:t=>async e=>{await d.service("user").remove(t),await d.service("identity-provider").remove(null,{where:{userId:t}}),E.logoutUser()(e)}},Pr=t=>({user:{id:"did:web:example.com",displayName:"alice",icon:"https://material-ui.com/static/images/avatar/1.jpg"}}),Ir=t=>d.service("static-resource").find({query:{name:t.avatarId,staticResourceType:{$in:["user-thumbnail","avatar"]},$or:[{userId:null},{userId:t.id}],$sort:{userId:-1},$limit:2}}),te=async t=>{if(t.instanceId==null&&t.channelInstanceId==null)return Promise.resolve(!0);const e=Pe();return new Promise(async r=>{const n=e?.clients?.get(t.id);if(!n){setTimeout(async()=>{await te(t),r(!0)},200);return}if(n?.avatarDetail?.avatarId===t.avatarId){r(!0);return}const a=await Ir(t);if(a?.data&&a.data.length===2){const i=a?.data[0].staticResourceType==="avatar"?a?.data[0].url:a?.data[1].url,o=a?.data[0].staticResourceType==="user-thumbnail"?a?.data[0].url:a?.data[1].url;n.avatarDetail={avatarURL:i,thumbnailURL:o,avatarId:t.avatarId};const c=$.defaultWorld.getUserAvatarEntity(t.id);Ie(c,t.avatarId,i)}else await te(t);r(!0)})},Lr=async t=>((!t||!t.id)&&Promise.resolve(!0),new Promise(async e=>{const r=$.defaultWorld.clients.get(t.id);if(!r){setTimeout(async()=>{await te(t),e(!0)},200);return}const n=t.avatarUrl,a=t.avatarUrl;r.avatarDetail={avatarURL:n,thumbnailURL:a,avatarId:t.avatarId};const o=$.defaultWorld.getUserAvatarEntity(t.id);Ie(o,t.avatarId,n),e(!0)}));S.publicRuntimeConfig.offlineMode||(d.service("user").on("patched",async t=>{const e=Ae.store,r=L().user,n=re(t.userRelationship);console.log("User patched",n),await te(n),Er(n.id,n.name);const a=Sr(n.id);if(console.log("adding username component to user: "+n.name+" eid: "+a),a!==void 0&&(ae(a,Re)?ot(a,Re).username=n.name:ie(a,Re,{username:n.name})),r.id.value===n.id){if(e.dispatch(k.clearLayerUsers()),r.channelInstanceId.value!==n.channelInstanceId&&e.dispatch(k.clearChannelLayerUsers()),e.dispatch(l.userUpdated(n)),n.partyId,n.instanceId!==r.instanceId.value){const o=new URL(window.location.href);let s=o.searchParams;s.set("instanceId",n?.instanceId||""),o.search=s.toString(),history.pushState&&window.history.replaceState({},"",o.toString())}const i=$.defaultWorld;typeof i.localClientEntity!="undefined"&&(!ae(i.localClientEntity,Me,i)&&Ar(window)&&ie(i.localClientEntity,Me,{usersInRange:[],usersInIntimateRange:[],usersInHarassmentRange:[],usersLookingTowards:[]},i),ae(i.localClientEntity,Ze,i)||ie(i.localClientEntity,Ze,{emotions:[]},i),console.log("added web cam input component to local client"))}else n.channelInstanceId!=null&&n.channelInstanceId===r.channelInstanceId.value&&e.dispatch(k.addedChannelLayerUser(n)),n.instanceId!=null&&n.instanceId===r.instanceId.value&&(e.dispatch(k.addedLayerUser(n)),e.dispatch(k.displayUserToast(n,{userAdded:!0}))),n.instanceId!==r.instanceId.value&&(e.dispatch(k.removedLayerUser(n)),e.dispatch(k.displayUserToast(n,{userRemoved:!0}))),n.channelInstanceId!==r.channelInstanceId.value&&e.dispatch(k.removedChannelLayerUser(n))}),d.service("location-ban").on("created",async t=>{const e=Ae.store;e.getState();const r=L().user,n=et().party.value,a=n&&n.partyUsers?n.partyUsers.find(s=>s.id===r.id.value):{},i=tt().currentLocation.location,o=t.locationBan;if(r.id.value===o.userId&&i.id.value===o.locationId){a!=null&&a?.id!=null&&await d.service("party-user").remove(a.id);const s=re(await d.service("user").get(r.id.value));e.dispatch(l.userUpdated(s))}}));export{E as A,H as M,N,_r as a,Tr as b};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
