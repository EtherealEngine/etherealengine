import{ap as p}from"./_app.f0a72417.js";import"./vendor.475cb2ff.js";import"./index.7b02be28.js";var n=function(l,o,e,t){function u(s){return s instanceof e?s:new e(function(i){i(s)})}return new(e||(e=Promise))(function(s,i){function r(c){try{d(t.next(c))}catch(a){i(a)}}function v(c){try{d(t.throw(c))}catch(a){i(a)}}function d(c){c.done?s(c.value):u(c.value).then(r,v)}d((t=t.apply(l,o||[])).next())})};class h extends p{constructor(){super({name:"XRPlugin",platforms:["web"]})}initialize(o){return n(this,void 0,void 0,function*(){return console.log("Initialize called to plugin on web"),new Promise((e,t)=>{e({status:"web"})})})}start(o){return n(this,void 0,void 0,function*(){return new Promise((e,t)=>{navigator.mediaDevices.getUserMedia({audio:!o.disableAudio,video:!0});const u=document.getElementById("video"),s=o.parent?document.getElementById(o.parent):document.body;if(u)t({message:"camera already started"});else{const i=document.createElement("video");i.id="video",i.setAttribute("class",o.className||""),i.setAttribute("style","-webkit-transform: scaleX(-1); transform: scaleX(-1);"),s.appendChild(i),navigator.mediaDevices&&navigator.mediaDevices.getUserMedia&&navigator.mediaDevices.getUserMedia({video:!0}).then(function(r){i.srcObject=r,i.play(),e({})},r=>{t(r)})}})})}handleTap(){return n(this,void 0,void 0,function*(){})}stop(){return n(this,void 0,void 0,function*(){const o=document.getElementById("video");if(o){o.pause();const s=o.srcObject.getTracks();for(var e=0;e<s.length;e++){var t=s[e];t.stop()}o.remove()}})}transcodeVideo(o){return n(this,void 0,void 0,function*(){return new Promise((e,t)=>{e({status:"success",path:""})})})}createThumbnail(o){return n(this,void 0,void 0,function*(){return new Promise((e,t)=>{e({status:"success",path:""})})})}trim(o){return n(this,void 0,void 0,function*(){return new Promise((e,t)=>{e({status:"success",path:""})})})}getVideoInfo(){return n(this,void 0,void 0,function*(){return new Promise((o,e)=>{o({status:"success"})})})}execFFMPEG(o){return n(this,void 0,void 0,function*(){return console.log("execFFMPEG called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}execFFPROBE(o){return n(this,void 0,void 0,function*(){return console.log("execFFPROBE called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}getXRDataForFrame(o){return n(this,void 0,void 0,function*(){return console.log("getXRDataForFrame called to plugin on web"),new Promise((e,t)=>{e({data:{hasData:!1}})})})}startRecording(o,e,t,u,s,i){return n(this,void 0,void 0,function*(){return console.log("startRecording called to plugin on web"),new Promise((r,v)=>{r({status:"success"})})})}stopRecording(o){return n(this,void 0,void 0,function*(){return console.log("stopRecording called to plugin on web"),new Promise((e,t)=>{e({result:"success",filePath:""})})})}getRecordingStatus(o){return n(this,void 0,void 0,function*(){return console.log("getRecordingStatus called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}takePhoto(o){return n(this,void 0,void 0,function*(){return console.log("takePhoto called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}saveRecordingToVideo(o){return n(this,void 0,void 0,function*(){return console.log("saveRecordingToVideo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}shareMedia(o){return n(this,void 0,void 0,function*(){return console.log("shareMedia called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}showVideo(o){return n(this,void 0,void 0,function*(){return console.log("showVideo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}hideVideo(o){return n(this,void 0,void 0,function*(){return console.log("showVideo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}playVideo(o){return n(this,void 0,void 0,function*(){return console.log("playVideo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}pauseVideo(o){return n(this,void 0,void 0,function*(){return console.log("pauseVideo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}scrubTo(o){return n(this,void 0,void 0,function*(){return console.log("scrubTo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}deleteVideo(o){return n(this,void 0,void 0,function*(){return console.log("deleteVideo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}saveVideoTo(o){return n(this,void 0,void 0,function*(){return console.log("saveVideoTo called to plugin on web"),new Promise((e,t)=>{e({status:"success"})})})}clearAnchors(){}}export{h as XRPluginWeb};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
