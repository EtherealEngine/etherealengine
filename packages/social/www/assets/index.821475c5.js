import{r as K,n as ce,f as le,R as c,u as de}from"./vendor.c8b8cc93.js";import{u as V,a as ee,h as ue}from"./_app.009e96ac.js";import{C as te}from"./CreatorService.2fe5442c.js";import{P as H}from"./PopupsStateService.d6dc4710.js";import{m as fe,S as pe}from"./Slide.c23656e9.js";import{D as me}from"./Dialog.869ec0a3.js";import{B as Q}from"./Button.9f6477a8.js";import{A as ve}from"./Avatar.42349c47.js";const he="_footerContainer_11rex_1",we="_footerItem_11rex_21",ge="_footerAvatar_11rex_27";var X={footerContainer:he,footerItem:we,footerAvatar:ge},F={exports:{}};(function(r,n){(function(a,i){i(n,K.exports)})(ce,function(a,i){var f="default"in i?i.default:i;function _(l){return(_=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(o){return typeof o}:function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o})(l)}function S(l,o){for(var d=0;d<o.length;d++){var p=o[d];p.enumerable=p.enumerable||!1,p.configurable=!0,"value"in p&&(p.writable=!0),Object.defineProperty(l,p.key,p)}}function s(l,o,d){return o in l?Object.defineProperty(l,o,{value:d,enumerable:!0,configurable:!0,writable:!0}):l[o]=d,l}function R(l){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(l)}function w(l,o){return(w=Object.setPrototypeOf||function(d,p){return d.__proto__=p,d})(l,o)}function h(l){if(l===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l}function M(l){var o=function(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(d){return!1}}();return function(){var d,p=R(l);return d=o?(d=R(this).constructor,Reflect.construct(p,arguments,d)):p.apply(this,arguments),p=this,!(d=d)||typeof d!="object"&&typeof d!="function"?h(p):d}}function $(l,o){var d,p=(o=o===void 0?{}:o).insertAt;l&&typeof document!="undefined"&&(d=document.head||document.getElementsByTagName("head")[0],(o=document.createElement("style")).type="text/css",p==="top"&&d.firstChild?d.insertBefore(o,d.firstChild):d.appendChild(o),o.styleSheet?o.styleSheet.cssText=l:o.appendChild(document.createTextNode(l)))}var E={animated:"rsw_1z",fadeInRight:"rsw_1M",fadeInLeft:"rsw_19",fadeOutRight:"rsw_3C",fadeOutLeft:"rsw_1u"};$(`/**
 * Snippets from animate.css
 * Credit goes to https://github.com/daneden
 * github.com/daneden/animate.css
*/
.rsw_1z {
  -webkit-animation-duration: .8192s;
  animation-duration: .8192s;
  -webkit-animation-fill-mode: backwards;
  animation-fill-mode: backwards;
}

/** fadeInRight */
@-webkit-keyframes rsw_1M {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: none;
    transform: none;
  }
}

@keyframes rsw_1M {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: none;
    transform: none;
  }
}

.rsw_1M {
  -webkit-animation-name: rsw_1M;
  animation-name: rsw_1M;
}

/** fadeInLeft */
@-webkit-keyframes rsw_19 {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: none;
    transform: none;
  }
}

@keyframes rsw_19 {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: none;
    transform: none;
  }
}

.rsw_19 {
  -webkit-animation-name: rsw_19;
  animation-name: rsw_19;
}

/** fadeOutRight */
@-webkit-keyframes rsw_3C {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }
}

@keyframes rsw_3C {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }
}

.rsw_3C {
  -webkit-animation-name: rsw_3C;
  animation-name: rsw_3C;
}

/** fadeOutLeft */
@-webkit-keyframes rsw_1u {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }
}

@keyframes rsw_1u {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }
}

.rsw_1u {
  -webkit-animation-name: rsw_1u;
  animation-name: rsw_1u;
}
`);var U="rsw_2Y",W="rsw_2f",j="rsw_3G";$(`/** Step Wizard */
.rsw_2Y {
    position: relative;
}

.rsw_2f {
    opacity: 0;
    pointer-events: none;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 0;
}

.rsw_3G {
    opacity: 1;
    pointer-events: inherit;
    position: relative;
    z-index: 1;
}
`);var A=function(){(function(u,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function");u.prototype=Object.create(e&&e.prototype,{constructor:{value:u,writable:!0,configurable:!0}}),e&&w(u,e)})(p,i.PureComponent);var l,o,d=M(p);function p(u){var e;return function(t,m){if(!(t instanceof m))throw new TypeError("Cannot call a class as a function")}(this,p),s(h(e=d.call(this,u)),"initialState",function(){var t={activeStep:0,classes:{},hashKeys:{},namedSteps:{}},m=(typeof window=="undefined"?"undefined":_(window))==="object"?e.getHash():"",g=e.getSteps();g.forEach(function(N,x){t.hashKeys[x]=N.props&&N.props.hashKey||"step".concat(x+1),t.hashKeys[t.hashKeys[x]]=x,t.namedSteps[x]=N.props&&N.props.stepName||"step".concat(x+1),t.namedSteps[t.namedSteps[x]]=x});var v=e.props.initialStep-1;return v&&g[v]&&(t.activeStep=v),e.props.isHashEnabled&&m&&t.hashKeys[m]!==void 0&&(t.activeStep=t.hashKeys[m]),e.props.transitions&&(t.classes[t.activeStep]=e.props.transitions.intro||""),t}),s(h(e),"getHash",function(){return decodeURI(window.location.hash).replace(/^#/,"")}),s(h(e),"getTransitions",function(){return e.props.transitions||{enterRight:"".concat(E.animated," ").concat(E.fadeInRight),enterLeft:"".concat(E.animated," ").concat(E.fadeInLeft),exitRight:"".concat(E.animated," ").concat(E.fadeOutRight),exitLeft:"".concat(E.animated," ").concat(E.fadeOutLeft)}}),s(h(e),"onHashChange",function(){var t=e.state.hashKeys[e.getHash()];t!==void 0&&e.setActiveStep(t)}),s(h(e),"isInvalidStep",function(t){return t<0||t>=e.totalSteps}),s(h(e),"setActiveStep",function(t){var m,g,v=e.state.activeStep;v!==t&&(e.isInvalidStep(t)?console.error("".concat(t+1," is an invalid step")):(m=e.state.classes,g=e.getTransitions(),v<t?(m[v]=g.exitLeft,m[t]=g.enterRight):(m[v]=g.exitRight,m[t]=g.enterLeft),e.setState({activeStep:t,classes:m},function(){e.onStepChange({previousStep:v+1,activeStep:t+1})})))}),s(h(e),"onStepChange",function(t){e.props.onStepChange(t),e.props.isHashEnabled&&e.updateHash(e.state.activeStep)}),s(h(e),"getSteps",function(){return f.Children.toArray(e.props.children)}),s(h(e),"firstStep",function(){return e.goToStep(1)}),s(h(e),"lastStep",function(){return e.goToStep(e.totalSteps)}),s(h(e),"nextStep",function(){return e.setActiveStep(e.state.activeStep+1)}),s(h(e),"previousStep",function(){return e.setActiveStep(e.state.activeStep-1)}),s(h(e),"goToStep",function(t){e.props.isHashEnabled&&typeof t=="string"&&e.state.hashKeys[t]!==void 0?e.setActiveStep(e.state.hashKeys[t]):e.setActiveStep(t-1)}),s(h(e),"goToNamedStep",function(t){typeof t=="string"&&e.state.namedSteps[t]!==void 0?e.setActiveStep(e.state.namedSteps[t]):console.error('Cannot find step with name "'.concat(t,'"'))}),s(h(e),"updateHash",function(t){window.location.hash=e.state.hashKeys[t]}),s(h(e),"isReactComponent",function(t){return t=t.type,typeof t=="function"||_(t)==="object"}),e.state=e.initialState(),e}return l=p,(o=[{key:"componentDidMount",value:function(){this.props.isHashEnabled&&window.addEventListener("hashchange",this.onHashChange),this.props.instance(this)}},{key:"componentWillUnmount",value:function(){this.props.isHashEnabled&&window.removeEventListener("hashchange",this.onHashChange)}},{key:"currentStep",get:function(){return this.state.activeStep+1}},{key:"totalSteps",get:function(){return this.getSteps().length}},{key:"render",value:function(){var u=this,e={currentStep:this.currentStep,totalSteps:this.totalSteps,nextStep:this.nextStep,previousStep:this.previousStep,goToStep:this.goToStep,goToNamedStep:this.goToNamedStep,firstStep:this.firstStep,lastStep:this.lastStep},t=this.state.classes,m=f.Children.map(this.getSteps(),function(g,v){return g?(e.isActive=v===u.state.activeStep,e.transitions=t[v],!u.props.isLazyMount||u.props.isLazyMount&&e.isActive?f.createElement(P,e,u.isReactComponent(g)?f.cloneElement(g,e):g):null):null});return f.createElement("div",{className:this.props.className},this.props.nav&&f.cloneElement(this.props.nav,e),f.createElement("div",{className:U},m))}}])&&S(l.prototype,o),p}();A.defaultProps={children:[],className:null,initialStep:1,instance:function(){},isHashEnabled:!1,isLazyMount:!1,nav:null,onStepChange:function(){},transitions:void 0};var P=function(l){var o=l.children,d=l.isActive,l=l.transitions;return f.createElement("div",{className:"".concat(W," ").concat(l," ").concat(d?j:"").trim()},o)};P.defaultProps={children:[],isActive:!1,transitions:""},a.Step=P,a.default=A,Object.defineProperty(a,"__esModule",{value:!0})})})(F,F.exports);var _e=le(F.exports);/*! Capacitor: https://capacitorjs.com/ - MIT License */const be=r=>{const n=new Map;n.set("web",{name:"web"});const a=r.CapacitorPlatforms||{currentPlatform:{name:"web"},platforms:n},i=(_,S)=>{a.platforms.set(_,S)},f=_=>{a.platforms.has(_)&&(a.currentPlatform=a.platforms.get(_))};return a.addPlatform=i,a.setPlatform=f,a},ye=r=>r.CapacitorPlatforms=be(r),ne=ye(typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{});ne.addPlatform;ne.setPlatform;var O;(function(r){r.Unimplemented="UNIMPLEMENTED",r.Unavailable="UNAVAILABLE"})(O||(O={}));class J extends Error{constructor(n,a){super(n);this.message=n,this.code=a}}const Se=r=>{var n,a;return(r==null?void 0:r.androidBridge)?"android":((a=(n=r==null?void 0:r.webkit)===null||n===void 0?void 0:n.messageHandlers)===null||a===void 0?void 0:a.bridge)?"ios":"web"},Pe=r=>{var n,a,i,f,_;const S=r.CapacitorCustomPlatform||null,s=r.Capacitor||{},R=s.Plugins=s.Plugins||{},w=r.CapacitorPlatforms,h=()=>S!==null?S.name:Se(r),M=((n=w==null?void 0:w.currentPlatform)===null||n===void 0?void 0:n.getPlatform)||h,$=()=>M()!=="web",E=((a=w==null?void 0:w.currentPlatform)===null||a===void 0?void 0:a.isNativePlatform)||$,U=u=>{const e=o.get(u);return!!((e==null?void 0:e.platforms.has(M()))||A(u))},W=((i=w==null?void 0:w.currentPlatform)===null||i===void 0?void 0:i.isPluginAvailable)||U,j=u=>{var e;return(e=s.PluginHeaders)===null||e===void 0?void 0:e.find(t=>t.name===u)},A=((f=w==null?void 0:w.currentPlatform)===null||f===void 0?void 0:f.getPluginHeader)||j,P=u=>r.console.error(u),l=(u,e,t)=>Promise.reject(`${t} does not have an implementation of "${e}".`),o=new Map,d=(u,e={})=>{const t=o.get(u);if(t)return console.warn(`Capacitor plugin "${u}" already registered. Cannot register plugins twice.`),t.proxy;const m=M(),g=A(u);let v;const N=async()=>(!v&&m in e?v=typeof e[m]=="function"?v=await e[m]():v=e[m]:S!==null&&!v&&"web"in e&&(v=typeof e.web=="function"?v=await e.web():v=e.web),v),x=(y,C)=>{var k,T;if(g){const I=g==null?void 0:g.methods.find(L=>C===L.name);if(I)return I.rtype==="promise"?L=>s.nativePromise(u,C.toString(),L):(L,B)=>s.nativeCallback(u,C.toString(),L,B);if(y)return(k=y[C])===null||k===void 0?void 0:k.bind(y)}else{if(y)return(T=y[C])===null||T===void 0?void 0:T.bind(y);throw new J(`"${u}" plugin is not implemented on ${m}`,O.Unimplemented)}},Y=y=>{let C;const k=(...T)=>{const I=N().then(L=>{const B=x(L,y);if(B){const G=B(...T);return C=G==null?void 0:G.remove,G}else throw new J(`"${u}.${y}()" is not implemented on ${m}`,O.Unimplemented)});return y==="addListener"&&(I.remove=async()=>C()),I};return k.toString=()=>`${y.toString()}() { [capacitor code] }`,Object.defineProperty(k,"name",{value:y,writable:!1,configurable:!1}),k},q=Y("addListener"),Z=Y("removeListener"),ie=(y,C)=>{const k=q({eventName:y},C),T=async()=>{const L=await k;Z({eventName:y,callbackId:L},C)},I=new Promise(L=>k.then(()=>L({remove:T})));return I.remove=async()=>{console.warn("Using addListener() without 'await' is deprecated."),await T()},I},z=new Proxy({},{get(y,C){switch(C){case"$$typeof":return;case"toJSON":return()=>({});case"addListener":return g?ie:q;case"removeListener":return Z;default:return Y(C)}}});return R[u]=z,o.set(u,{name:u,proxy:z,platforms:new Set([...Object.keys(e),...g?[m]:[]])}),z},p=((_=w==null?void 0:w.currentPlatform)===null||_===void 0?void 0:_.registerPlugin)||d;return s.convertFileSrc||(s.convertFileSrc=u=>u),s.getPlatform=M,s.handleError=P,s.isNativePlatform=E,s.isPluginAvailable=W,s.pluginMethodNoop=l,s.registerPlugin=p,s.Exception=J,s.DEBUG=!!s.DEBUG,s.isLoggingEnabled=!!s.isLoggingEnabled,s.platform=s.getPlatform(),s.isNative=s.isNativePlatform(),s},Ce=r=>r.Capacitor=Pe(r),D=Ce(typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{}),Ee=D.registerPlugin;D.Plugins;class rt{constructor(n){this.listeners={},this.windowListeners={},n&&(console.warn(`Capacitor WebPlugin "${n.name}" config object was deprecated in v3 and will be removed in v4.`),this.config=n)}addListener(n,a){this.listeners[n]||(this.listeners[n]=[]),this.listeners[n].push(a);const f=this.windowListeners[n];f&&!f.registered&&this.addWindowListener(f);const _=async()=>this.removeListener(n,a),S=Promise.resolve({remove:_});return Object.defineProperty(S,"remove",{value:async()=>{console.warn("Using addListener() without 'await' is deprecated."),await _()}}),S}async removeAllListeners(){this.listeners={};for(const n in this.windowListeners)this.removeWindowListener(this.windowListeners[n]);this.windowListeners={}}notifyListeners(n,a){const i=this.listeners[n];i&&i.forEach(f=>f(a))}hasListeners(n){return!!this.listeners[n].length}registerWindowListener(n,a){this.windowListeners[a]={registered:!1,windowEventName:n,pluginEventName:a,handler:i=>{this.notifyListeners(a,i)}}}unimplemented(n="not implemented"){return new D.Exception(n,O.Unimplemented)}unavailable(n="not available"){return new D.Exception(n,O.Unavailable)}async removeListener(n,a){const i=this.listeners[n];if(!i)return;const f=i.indexOf(a);this.listeners[n].splice(f,1),this.listeners[n].length||this.removeWindowListener(this.windowListeners[n])}addWindowListener(n){window.addEventListener(n.windowEventName,n.handler),n.registered=!0}removeWindowListener(n){!n||(window.removeEventListener(n.windowEventName,n.handler),n.registered=!1)}}var re;(function(r){r[r.HIGH_QUALITY=0]="HIGH_QUALITY",r[r.MEDIUM_QUALITY=1]="MEDIUM_QUALITY",r[r.LOW_QUALITY=2]="LOW_QUALITY"})(re||(re={}));var ae;(function(r){r[r.NO=0]="NO",r[r.YES=1]="YES"})(ae||(ae={}));var oe;(function(r){r[r.M4V=0]="M4V",r[r.MPEG4=1]="MPEG4",r[r.M4A=2]="M4A",r[r.QUICK_TIME=3]="QUICK_TIME"})(oe||(oe={}));const se=Ee("XRPlugin",{web:()=>import("./web.fcb34c11.js").then(r=>new r.XRPluginWeb)}),Le="_mainBlock_19w53_1",xe="_popup_19w53_5",ke="_media_19w53_12",Ae="_media2_19w53_23",Re="_title_19w53_35",Me="_box_19w53_53",Te="_btn_start_19w53_56",Ie="_btn_dont_19w53_69",He="_btn_cancel_19w53_82",$e="_dialogWindow_19w53_140",Ne="_nav_19w53_196",Oe="_dot_19w53_201",Ue="_active_19w53_213",We="_animated_19w53_219",je="_intro_19w53_236",Be="_enterRight_19w53_251",Ge="_enterLeft_19w53_266",Ke="_exitRight_19w53_280",De="_exitLeft_19w53_294",Ye="_ldsring_19w53_1";var b={mainBlock:Le,popup:xe,media:ke,media2:Ae,title:Re,box:Me,btn_start:Te,btn_dont:Ie,btn_cancel:He,dialogWindow:$e,nav:Ne,dot:Oe,active:Ue,animated:We,intro:je,enterRight:Be,enterLeft:Ge,exitRight:Ke,exitLeft:De,ldsring:Ye};fe({});const ze=c.forwardRef((r,n)=>c.createElement(pe,{direction:"up",ref:n,...r})),Qe=({onGoRegistration:r})=>{const[n,a]=K.exports.useState(!1),{t:i}=de(),f=V(),_=f.creators.currentCreator.value,S=ee(),s=()=>{se.accessPermission!==void 0&&se.accessPermission({}),_.steps==!0?A():a(!0)},R=()=>{a(!1)},w=P=>c.createElement("div",null,c.createElement("p",null,i("social:view.welcome"))),h=P=>c.createElement("div",null,c.createElement("h3",{className:"text-center"},i("social:view.step",{step:"1"})),c.createElement("p",null,i("social:view.text-step-1"))),M=P=>c.createElement("div",null,c.createElement("h3",{className:"text-center"},i("social:view.step",{step:"2"})),c.createElement("p",null,i("social:view.text-step-2"))),$=P=>c.createElement("div",null,c.createElement("h3",{className:"text-center"},i("social:view.step",{step:"3"})),c.createElement("p",null,i("social:view.text-step-3-part-1")),c.createElement("p",null,i("social:view.text-step-3-part-2")),c.createElement("p",null,i("social:view.text-step-3-part-3"))),E=P=>c.createElement("div",null,c.createElement("h3",{className:"text-center"},i("social:view.step",{step:"4"})),c.createElement("p",null,i("social:view.text-step-4-part-1")),c.createElement("p",null,i("social:view.text-step-4-part-2"))),U=P=>{const l=[];for(let o=1;o<=P.totalSteps;o+=1){const d=P.currentStep===o;l.push(c.createElement("span",{key:`step-${o}`,className:`${b.dot} ${d?b.active:""}`,onClick:()=>P.goToStep(o)},"\u2022"))}return c.createElement("div",{className:b.nav},l)},[W]=K.exports.useState({form:{},transitions:{enterRight:`${b.animated} ${b.enterRight}`,enterLeft:`${b.animated} ${b.enterLeft}`,exitRight:`${b.animated} ${b.exitRight}`,exitLeft:`${b.animated} ${b.exitLeft}`,intro:`${b.animated} ${b.intro}`}}),j=()=>{S(te.updateCreator({id:f.creators.currentCreator?.id?.value,steps:!0,name:f.creators.currentCreator?.name?.value,username:f.creators.currentCreator?.username?.value})),A()},A=()=>{a(!1),S(H.updateArMediaState(!0))};return c.createElement("div",{onClick:()=>{r()},className:b.mainBlock},c.createElement("img",{src:"/assets/tabBar(1).svg",onClick:s}),c.createElement(me,{open:n,TransitionComponent:ze,keepMounted:!0,onClose:R,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description",className:b.dialogWindow,PaperProps:{style:{width:"100%",maxWidth:"100%",height:"max-content",borderRadius:"12px"}}},c.createElement("div",{className:b.popup},c.createElement(Q,{onClick:R,color:"primary",className:b.btn_cancel},i("social:cancel")),c.createElement("div",null,c.createElement(_e,{nav:c.createElement(U,null),transitions:W.transitions},c.createElement(w,null),c.createElement(h,null),c.createElement(M,null),c.createElement($,null),c.createElement(E,null))),c.createElement(Q,{color:"primary",className:b.btn_dont,onClick:j},i("social:view.not-show")),c.createElement(Q,{onClick:()=>{A()},color:"primary",className:b.btn_start},i("social:view.start")))))},Xe=({setView:r,onGoRegistration:n})=>{const a=ee(),i=V(),f=ue();K.exports.useEffect(()=>{f.user.id.value&&a(te.getLoggedCreator())},[]);const _=s=>{a(H.updateCreatorPageState(!0,s))},S=()=>{a(H.updateCreatorPageState(!1)),a(H.updateCreatorFormState(!1)),a(H.updateFeedPageState(!1)),a(H.updateNewFeedPageState(!1)),a(H.updateArMediaState(!1)),a(H.updateShareFormState(!1)),r("featured")};return c.createElement("nav",{className:X.footerContainer},c.createElement("img",{src:"/assets/tabBar.png",onClick:()=>S(),className:X.footerItem}),c.createElement(Qe,{onGoRegistration:n}),c.createElement(ve,{onClick:()=>{_(i.creators.currentCreator?.id?.value)},alt:i.creators.currentCreator?.username?.value,className:X.footerAvatar,src:i.creators.currentCreator?.avatar?.value?i.creators.currentCreator?.avatar?.value:"/assets/userpic.png"}))};var at=Xe;export{at as A,rt as W,se as X};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
