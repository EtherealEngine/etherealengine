var Br={},b={};b.byteLength=Ur;b.toByteArray=Ir;b.fromByteArray=dr;var S=[],T=[],Ar=typeof Uint8Array!="undefined"?Uint8Array:Array,X="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var M=0,gr=X.length;M<gr;++M)S[M]=X[M],T[X.charCodeAt(M)]=M;T["-".charCodeAt(0)]=62;T["_".charCodeAt(0)]=63;function rr(p){var h=p.length;if(h%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var c=p.indexOf("=");c===-1&&(c=h);var x=c===h?0:4-c%4;return[c,x]}function Ur(p){var h=rr(p),c=h[0],x=h[1];return(c+x)*3/4-x}function vr(p,h,c){return(h+c)*3/4-c}function Ir(p){var h,c=rr(p),x=c[0],y=c[1],l=new Ar(vr(p,x,y)),f=0,u=y>0?x-4:x,E;for(E=0;E<u;E+=4)h=T[p.charCodeAt(E)]<<18|T[p.charCodeAt(E+1)]<<12|T[p.charCodeAt(E+2)]<<6|T[p.charCodeAt(E+3)],l[f++]=h>>16&255,l[f++]=h>>8&255,l[f++]=h&255;return y===2&&(h=T[p.charCodeAt(E)]<<2|T[p.charCodeAt(E+1)]>>4,l[f++]=h&255),y===1&&(h=T[p.charCodeAt(E)]<<10|T[p.charCodeAt(E+1)]<<4|T[p.charCodeAt(E+2)]>>2,l[f++]=h>>8&255,l[f++]=h&255),l}function Tr(p){return S[p>>18&63]+S[p>>12&63]+S[p>>6&63]+S[p&63]}function Cr(p,h,c){for(var x,y=[],l=h;l<c;l+=3)x=(p[l]<<16&16711680)+(p[l+1]<<8&65280)+(p[l+2]&255),y.push(Tr(x));return y.join("")}function dr(p){for(var h,c=p.length,x=c%3,y=[],l=16383,f=0,u=c-x;f<u;f+=l)y.push(Cr(p,f,f+l>u?u:f+l));return x===1?(h=p[c-1],y.push(S[h>>2]+S[h<<4&63]+"==")):x===2&&(h=(p[c-2]<<8)+p[c-1],y.push(S[h>>10]+S[h>>4&63]+S[h<<2&63]+"=")),y.join("")}var G={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */G.read=function(p,h,c,x,y){var l,f,u=y*8-x-1,E=(1<<u)-1,C=E>>1,A=-7,g=c?y-1:0,R=c?-1:1,v=p[h+g];for(g+=R,l=v&(1<<-A)-1,v>>=-A,A+=u;A>0;l=l*256+p[h+g],g+=R,A-=8);for(f=l&(1<<-A)-1,l>>=-A,A+=x;A>0;f=f*256+p[h+g],g+=R,A-=8);if(l===0)l=1-C;else{if(l===E)return f?NaN:(v?-1:1)*(1/0);f=f+Math.pow(2,x),l=l-C}return(v?-1:1)*f*Math.pow(2,l-x)};G.write=function(p,h,c,x,y,l){var f,u,E,C=l*8-y-1,A=(1<<C)-1,g=A>>1,R=y===23?Math.pow(2,-24)-Math.pow(2,-77):0,v=x?0:l-1,k=x?1:-1,D=h<0||h===0&&1/h<0?1:0;for(h=Math.abs(h),isNaN(h)||h===1/0?(u=isNaN(h)?1:0,f=A):(f=Math.floor(Math.log(h)/Math.LN2),h*(E=Math.pow(2,-f))<1&&(f--,E*=2),f+g>=1?h+=R/E:h+=R*Math.pow(2,1-g),h*E>=2&&(f++,E/=2),f+g>=A?(u=0,f=A):f+g>=1?(u=(h*E-1)*Math.pow(2,y),f=f+g):(u=h*Math.pow(2,g-1)*Math.pow(2,y),f=0));y>=8;p[c+v]=u&255,v+=k,u/=256,y-=8);for(f=f<<y|u,C+=y;C>0;p[c+v]=f&255,v+=k,f/=256,C-=8);p[c+v-k]|=D*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(p){var h=b,c=G,x=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;p.Buffer=u,p.SlowBuffer=ir,p.INSPECT_MAX_BYTES=50;var y=2147483647;p.kMaxLength=y,u.TYPED_ARRAY_SUPPORT=l(),!u.TYPED_ARRAY_SUPPORT&&typeof console!="undefined"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function l(){try{var i=new Uint8Array(1),r={foo:function(){return 42}};return Object.setPrototypeOf(r,Uint8Array.prototype),Object.setPrototypeOf(i,r),i.foo()===42}catch(t){return!1}}Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(!!u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(!!u.isBuffer(this))return this.byteOffset}});function f(i){if(i>y)throw new RangeError('The value "'+i+'" is invalid for option "size"');var r=new Uint8Array(i);return Object.setPrototypeOf(r,u.prototype),r}function u(i,r,t){if(typeof i=="number"){if(typeof r=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return g(i)}return E(i,r,t)}u.poolSize=8192;function E(i,r,t){if(typeof i=="string")return R(i,r);if(ArrayBuffer.isView(i))return k(i);if(i==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof i);if(d(i,ArrayBuffer)||i&&d(i.buffer,ArrayBuffer)||typeof SharedArrayBuffer!="undefined"&&(d(i,SharedArrayBuffer)||i&&d(i.buffer,SharedArrayBuffer)))return D(i,r,t);if(typeof i=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');var n=i.valueOf&&i.valueOf();if(n!=null&&n!==i)return u.from(n,r,t);var e=tr(i);if(e)return e;if(typeof Symbol!="undefined"&&Symbol.toPrimitive!=null&&typeof i[Symbol.toPrimitive]=="function")return u.from(i[Symbol.toPrimitive]("string"),r,t);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof i)}u.from=function(i,r,t){return E(i,r,t)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array);function C(i){if(typeof i!="number")throw new TypeError('"size" argument must be of type number');if(i<0)throw new RangeError('The value "'+i+'" is invalid for option "size"')}function A(i,r,t){return C(i),i<=0?f(i):r!==void 0?typeof t=="string"?f(i).fill(r,t):f(i).fill(r):f(i)}u.alloc=function(i,r,t){return A(i,r,t)};function g(i){return C(i),f(i<0?0:W(i)|0)}u.allocUnsafe=function(i){return g(i)},u.allocUnsafeSlow=function(i){return g(i)};function R(i,r){if((typeof r!="string"||r==="")&&(r="utf8"),!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var t=J(i,r)|0,n=f(t),e=n.write(i,r);return e!==t&&(n=n.slice(0,e)),n}function v(i){for(var r=i.length<0?0:W(i.length)|0,t=f(r),n=0;n<r;n+=1)t[n]=i[n]&255;return t}function k(i){if(d(i,Uint8Array)){var r=new Uint8Array(i);return D(r.buffer,r.byteOffset,r.byteLength)}return v(i)}function D(i,r,t){if(r<0||i.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(i.byteLength<r+(t||0))throw new RangeError('"length" is outside of buffer bounds');var n;return r===void 0&&t===void 0?n=new Uint8Array(i):t===void 0?n=new Uint8Array(i,r):n=new Uint8Array(i,r,t),Object.setPrototypeOf(n,u.prototype),n}function tr(i){if(u.isBuffer(i)){var r=W(i.length)|0,t=f(r);return t.length===0||i.copy(t,0,0,r),t}if(i.length!==void 0)return typeof i.length!="number"||H(i.length)?f(0):v(i);if(i.type==="Buffer"&&Array.isArray(i.data))return v(i.data)}function W(i){if(i>=y)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+y.toString(16)+" bytes");return i|0}function ir(i){return+i!=i&&(i=0),u.alloc(+i)}u.isBuffer=function(r){return r!=null&&r._isBuffer===!0&&r!==u.prototype},u.compare=function(r,t){if(d(r,Uint8Array)&&(r=u.from(r,r.offset,r.byteLength)),d(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(r)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(r===t)return 0;for(var n=r.length,e=t.length,o=0,a=Math.min(n,e);o<a;++o)if(r[o]!==t[o]){n=r[o],e=t[o];break}return n<e?-1:e<n?1:0},u.isEncoding=function(r){switch(String(r).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(r,t){if(!Array.isArray(r))throw new TypeError('"list" argument must be an Array of Buffers');if(r.length===0)return u.alloc(0);var n;if(t===void 0)for(t=0,n=0;n<r.length;++n)t+=r[n].length;var e=u.allocUnsafe(t),o=0;for(n=0;n<r.length;++n){var a=r[n];if(d(a,Uint8Array))o+a.length>e.length?u.from(a).copy(e,o):Uint8Array.prototype.set.call(e,a,o);else if(u.isBuffer(a))a.copy(e,o);else throw new TypeError('"list" argument must be an Array of Buffers');o+=a.length}return e};function J(i,r){if(u.isBuffer(i))return i.length;if(ArrayBuffer.isView(i)||d(i,ArrayBuffer))return i.byteLength;if(typeof i!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof i);var t=i.length,n=arguments.length>2&&arguments[2]===!0;if(!n&&t===0)return 0;for(var e=!1;;)switch(r){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return Y(i).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return t*2;case"hex":return t>>>1;case"base64":return Q(i).length;default:if(e)return n?-1:Y(i).length;r=(""+r).toLowerCase(),e=!0}}u.byteLength=J;function nr(i,r,t){var n=!1;if((r===void 0||r<0)&&(r=0),r>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||(t>>>=0,r>>>=0,t<=r))return"";for(i||(i="utf8");;)switch(i){case"hex":return wr(this,r,t);case"utf8":case"utf-8":return q(this,r,t);case"ascii":return cr(this,r,t);case"latin1":case"binary":return lr(this,r,t);case"base64":return fr(this,r,t);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return yr(this,r,t);default:if(n)throw new TypeError("Unknown encoding: "+i);i=(i+"").toLowerCase(),n=!0}}u.prototype._isBuffer=!0;function L(i,r,t){var n=i[r];i[r]=i[t],i[t]=n}u.prototype.swap16=function(){var r=this.length;if(r%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<r;t+=2)L(this,t,t+1);return this},u.prototype.swap32=function(){var r=this.length;if(r%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<r;t+=4)L(this,t,t+3),L(this,t+1,t+2);return this},u.prototype.swap64=function(){var r=this.length;if(r%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<r;t+=8)L(this,t,t+7),L(this,t+1,t+6),L(this,t+2,t+5),L(this,t+3,t+4);return this},u.prototype.toString=function(){var r=this.length;return r===0?"":arguments.length===0?q(this,0,r):nr.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(r){if(!u.isBuffer(r))throw new TypeError("Argument must be a Buffer");return this===r?!0:u.compare(this,r)===0},u.prototype.inspect=function(){var r="",t=p.INSPECT_MAX_BYTES;return r=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(r+=" ... "),"<Buffer "+r+">"},x&&(u.prototype[x]=u.prototype.inspect),u.prototype.compare=function(r,t,n,e,o){if(d(r,Uint8Array)&&(r=u.from(r,r.offset,r.byteLength)),!u.isBuffer(r))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof r);if(t===void 0&&(t=0),n===void 0&&(n=r?r.length:0),e===void 0&&(e=0),o===void 0&&(o=this.length),t<0||n>r.length||e<0||o>this.length)throw new RangeError("out of range index");if(e>=o&&t>=n)return 0;if(e>=o)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,e>>>=0,o>>>=0,this===r)return 0;for(var a=o-e,w=n-t,s=Math.min(a,w),F=this.slice(e,o),U=r.slice(t,n),m=0;m<s;++m)if(F[m]!==U[m]){a=F[m],w=U[m];break}return a<w?-1:w<a?1:0};function z(i,r,t,n,e){if(i.length===0)return-1;if(typeof t=="string"?(n=t,t=0):t>2147483647?t=2147483647:t<-2147483648&&(t=-2147483648),t=+t,H(t)&&(t=e?0:i.length-1),t<0&&(t=i.length+t),t>=i.length){if(e)return-1;t=i.length-1}else if(t<0)if(e)t=0;else return-1;if(typeof r=="string"&&(r=u.from(r,n)),u.isBuffer(r))return r.length===0?-1:V(i,r,t,n,e);if(typeof r=="number")return r=r&255,typeof Uint8Array.prototype.indexOf=="function"?e?Uint8Array.prototype.indexOf.call(i,r,t):Uint8Array.prototype.lastIndexOf.call(i,r,t):V(i,[r],t,n,e);throw new TypeError("val must be string, number or Buffer")}function V(i,r,t,n,e){var o=1,a=i.length,w=r.length;if(n!==void 0&&(n=String(n).toLowerCase(),n==="ucs2"||n==="ucs-2"||n==="utf16le"||n==="utf-16le")){if(i.length<2||r.length<2)return-1;o=2,a/=2,w/=2,t/=2}function s(j,P){return o===1?j[P]:j.readUInt16BE(P*o)}var F;if(e){var U=-1;for(F=t;F<a;F++)if(s(i,F)===s(r,U===-1?0:F-U)){if(U===-1&&(U=F),F-U+1===w)return U*o}else U!==-1&&(F-=F-U),U=-1}else for(t+w>a&&(t=a-w),F=t;F>=0;F--){for(var m=!0,_=0;_<w;_++)if(s(i,F+_)!==s(r,_)){m=!1;break}if(m)return F}return-1}u.prototype.includes=function(r,t,n){return this.indexOf(r,t,n)!==-1},u.prototype.indexOf=function(r,t,n){return z(this,r,t,n,!0)},u.prototype.lastIndexOf=function(r,t,n){return z(this,r,t,n,!1)};function er(i,r,t,n){t=Number(t)||0;var e=i.length-t;n?(n=Number(n),n>e&&(n=e)):n=e;var o=r.length;n>o/2&&(n=o/2);for(var a=0;a<n;++a){var w=parseInt(r.substr(a*2,2),16);if(H(w))return a;i[t+a]=w}return a}function ur(i,r,t,n){return N(Y(r,i.length-t),i,t,n)}function or(i,r,t,n){return N(Er(r),i,t,n)}function ar(i,r,t,n){return N(Q(r),i,t,n)}function hr(i,r,t,n){return N(Fr(r,i.length-t),i,t,n)}u.prototype.write=function(r,t,n,e){if(t===void 0)e="utf8",n=this.length,t=0;else if(n===void 0&&typeof t=="string")e=t,n=this.length,t=0;else if(isFinite(t))t=t>>>0,isFinite(n)?(n=n>>>0,e===void 0&&(e="utf8")):(e=n,n=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var o=this.length-t;if((n===void 0||n>o)&&(n=o),r.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");e||(e="utf8");for(var a=!1;;)switch(e){case"hex":return er(this,r,t,n);case"utf8":case"utf-8":return ur(this,r,t,n);case"ascii":case"latin1":case"binary":return or(this,r,t,n);case"base64":return ar(this,r,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return hr(this,r,t,n);default:if(a)throw new TypeError("Unknown encoding: "+e);e=(""+e).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function fr(i,r,t){return r===0&&t===i.length?h.fromByteArray(i):h.fromByteArray(i.slice(r,t))}function q(i,r,t){t=Math.min(i.length,t);for(var n=[],e=r;e<t;){var o=i[e],a=null,w=o>239?4:o>223?3:o>191?2:1;if(e+w<=t){var s,F,U,m;switch(w){case 1:o<128&&(a=o);break;case 2:s=i[e+1],(s&192)==128&&(m=(o&31)<<6|s&63,m>127&&(a=m));break;case 3:s=i[e+1],F=i[e+2],(s&192)==128&&(F&192)==128&&(m=(o&15)<<12|(s&63)<<6|F&63,m>2047&&(m<55296||m>57343)&&(a=m));break;case 4:s=i[e+1],F=i[e+2],U=i[e+3],(s&192)==128&&(F&192)==128&&(U&192)==128&&(m=(o&15)<<18|(s&63)<<12|(F&63)<<6|U&63,m>65535&&m<1114112&&(a=m))}}a===null?(a=65533,w=1):a>65535&&(a-=65536,n.push(a>>>10&1023|55296),a=56320|a&1023),n.push(a),e+=w}return pr(n)}var K=4096;function pr(i){var r=i.length;if(r<=K)return String.fromCharCode.apply(String,i);for(var t="",n=0;n<r;)t+=String.fromCharCode.apply(String,i.slice(n,n+=K));return t}function cr(i,r,t){var n="";t=Math.min(i.length,t);for(var e=r;e<t;++e)n+=String.fromCharCode(i[e]&127);return n}function lr(i,r,t){var n="";t=Math.min(i.length,t);for(var e=r;e<t;++e)n+=String.fromCharCode(i[e]);return n}function wr(i,r,t){var n=i.length;(!r||r<0)&&(r=0),(!t||t<0||t>n)&&(t=n);for(var e="",o=r;o<t;++o)e+=mr[i[o]];return e}function yr(i,r,t){for(var n=i.slice(r,t),e="",o=0;o<n.length-1;o+=2)e+=String.fromCharCode(n[o]+n[o+1]*256);return e}u.prototype.slice=function(r,t){var n=this.length;r=~~r,t=t===void 0?n:~~t,r<0?(r+=n,r<0&&(r=0)):r>n&&(r=n),t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),t<r&&(t=r);var e=this.subarray(r,t);return Object.setPrototypeOf(e,u.prototype),e};function B(i,r,t){if(i%1!=0||i<0)throw new RangeError("offset is not uint");if(i+r>t)throw new RangeError("Trying to access beyond buffer length")}u.prototype.readUintLE=u.prototype.readUIntLE=function(r,t,n){r=r>>>0,t=t>>>0,n||B(r,t,this.length);for(var e=this[r],o=1,a=0;++a<t&&(o*=256);)e+=this[r+a]*o;return e},u.prototype.readUintBE=u.prototype.readUIntBE=function(r,t,n){r=r>>>0,t=t>>>0,n||B(r,t,this.length);for(var e=this[r+--t],o=1;t>0&&(o*=256);)e+=this[r+--t]*o;return e},u.prototype.readUint8=u.prototype.readUInt8=function(r,t){return r=r>>>0,t||B(r,1,this.length),this[r]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(r,t){return r=r>>>0,t||B(r,2,this.length),this[r]|this[r+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(r,t){return r=r>>>0,t||B(r,2,this.length),this[r]<<8|this[r+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(r,t){return r=r>>>0,t||B(r,4,this.length),(this[r]|this[r+1]<<8|this[r+2]<<16)+this[r+3]*16777216},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(r,t){return r=r>>>0,t||B(r,4,this.length),this[r]*16777216+(this[r+1]<<16|this[r+2]<<8|this[r+3])},u.prototype.readIntLE=function(r,t,n){r=r>>>0,t=t>>>0,n||B(r,t,this.length);for(var e=this[r],o=1,a=0;++a<t&&(o*=256);)e+=this[r+a]*o;return o*=128,e>=o&&(e-=Math.pow(2,8*t)),e},u.prototype.readIntBE=function(r,t,n){r=r>>>0,t=t>>>0,n||B(r,t,this.length);for(var e=t,o=1,a=this[r+--e];e>0&&(o*=256);)a+=this[r+--e]*o;return o*=128,a>=o&&(a-=Math.pow(2,8*t)),a},u.prototype.readInt8=function(r,t){return r=r>>>0,t||B(r,1,this.length),this[r]&128?(255-this[r]+1)*-1:this[r]},u.prototype.readInt16LE=function(r,t){r=r>>>0,t||B(r,2,this.length);var n=this[r]|this[r+1]<<8;return n&32768?n|4294901760:n},u.prototype.readInt16BE=function(r,t){r=r>>>0,t||B(r,2,this.length);var n=this[r+1]|this[r]<<8;return n&32768?n|4294901760:n},u.prototype.readInt32LE=function(r,t){return r=r>>>0,t||B(r,4,this.length),this[r]|this[r+1]<<8|this[r+2]<<16|this[r+3]<<24},u.prototype.readInt32BE=function(r,t){return r=r>>>0,t||B(r,4,this.length),this[r]<<24|this[r+1]<<16|this[r+2]<<8|this[r+3]},u.prototype.readFloatLE=function(r,t){return r=r>>>0,t||B(r,4,this.length),c.read(this,r,!0,23,4)},u.prototype.readFloatBE=function(r,t){return r=r>>>0,t||B(r,4,this.length),c.read(this,r,!1,23,4)},u.prototype.readDoubleLE=function(r,t){return r=r>>>0,t||B(r,8,this.length),c.read(this,r,!0,52,8)},u.prototype.readDoubleBE=function(r,t){return r=r>>>0,t||B(r,8,this.length),c.read(this,r,!1,52,8)};function I(i,r,t,n,e,o){if(!u.isBuffer(i))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>e||r<o)throw new RangeError('"value" argument is out of bounds');if(t+n>i.length)throw new RangeError("Index out of range")}u.prototype.writeUintLE=u.prototype.writeUIntLE=function(r,t,n,e){if(r=+r,t=t>>>0,n=n>>>0,!e){var o=Math.pow(2,8*n)-1;I(this,r,t,n,o,0)}var a=1,w=0;for(this[t]=r&255;++w<n&&(a*=256);)this[t+w]=r/a&255;return t+n},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(r,t,n,e){if(r=+r,t=t>>>0,n=n>>>0,!e){var o=Math.pow(2,8*n)-1;I(this,r,t,n,o,0)}var a=n-1,w=1;for(this[t+a]=r&255;--a>=0&&(w*=256);)this[t+a]=r/w&255;return t+n},u.prototype.writeUint8=u.prototype.writeUInt8=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,1,255,0),this[t]=r&255,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,2,65535,0),this[t]=r&255,this[t+1]=r>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,2,65535,0),this[t]=r>>>8,this[t+1]=r&255,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,4,4294967295,0),this[t+3]=r>>>24,this[t+2]=r>>>16,this[t+1]=r>>>8,this[t]=r&255,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,4,4294967295,0),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4},u.prototype.writeIntLE=function(r,t,n,e){if(r=+r,t=t>>>0,!e){var o=Math.pow(2,8*n-1);I(this,r,t,n,o-1,-o)}var a=0,w=1,s=0;for(this[t]=r&255;++a<n&&(w*=256);)r<0&&s===0&&this[t+a-1]!==0&&(s=1),this[t+a]=(r/w>>0)-s&255;return t+n},u.prototype.writeIntBE=function(r,t,n,e){if(r=+r,t=t>>>0,!e){var o=Math.pow(2,8*n-1);I(this,r,t,n,o-1,-o)}var a=n-1,w=1,s=0;for(this[t+a]=r&255;--a>=0&&(w*=256);)r<0&&s===0&&this[t+a+1]!==0&&(s=1),this[t+a]=(r/w>>0)-s&255;return t+n},u.prototype.writeInt8=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,1,127,-128),r<0&&(r=255+r+1),this[t]=r&255,t+1},u.prototype.writeInt16LE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,2,32767,-32768),this[t]=r&255,this[t+1]=r>>>8,t+2},u.prototype.writeInt16BE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,2,32767,-32768),this[t]=r>>>8,this[t+1]=r&255,t+2},u.prototype.writeInt32LE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,4,2147483647,-2147483648),this[t]=r&255,this[t+1]=r>>>8,this[t+2]=r>>>16,this[t+3]=r>>>24,t+4},u.prototype.writeInt32BE=function(r,t,n){return r=+r,t=t>>>0,n||I(this,r,t,4,2147483647,-2147483648),r<0&&(r=4294967295+r+1),this[t]=r>>>24,this[t+1]=r>>>16,this[t+2]=r>>>8,this[t+3]=r&255,t+4};function O(i,r,t,n,e,o){if(t+n>i.length)throw new RangeError("Index out of range");if(t<0)throw new RangeError("Index out of range")}function Z(i,r,t,n,e){return r=+r,t=t>>>0,e||O(i,r,t,4),c.write(i,r,t,n,23,4),t+4}u.prototype.writeFloatLE=function(r,t,n){return Z(this,r,t,!0,n)},u.prototype.writeFloatBE=function(r,t,n){return Z(this,r,t,!1,n)};function $(i,r,t,n,e){return r=+r,t=t>>>0,e||O(i,r,t,8),c.write(i,r,t,n,52,8),t+8}u.prototype.writeDoubleLE=function(r,t,n){return $(this,r,t,!0,n)},u.prototype.writeDoubleBE=function(r,t,n){return $(this,r,t,!1,n)},u.prototype.copy=function(r,t,n,e){if(!u.isBuffer(r))throw new TypeError("argument should be a Buffer");if(n||(n=0),!e&&e!==0&&(e=this.length),t>=r.length&&(t=r.length),t||(t=0),e>0&&e<n&&(e=n),e===n||r.length===0||this.length===0)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("sourceEnd out of bounds");e>this.length&&(e=this.length),r.length-t<e-n&&(e=r.length-t+n);var o=e-n;return this===r&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(t,n,e):Uint8Array.prototype.set.call(r,this.subarray(n,e),t),o},u.prototype.fill=function(r,t,n,e){if(typeof r=="string"){if(typeof t=="string"?(e=t,t=0,n=this.length):typeof n=="string"&&(e=n,n=this.length),e!==void 0&&typeof e!="string")throw new TypeError("encoding must be a string");if(typeof e=="string"&&!u.isEncoding(e))throw new TypeError("Unknown encoding: "+e);if(r.length===1){var o=r.charCodeAt(0);(e==="utf8"&&o<128||e==="latin1")&&(r=o)}}else typeof r=="number"?r=r&255:typeof r=="boolean"&&(r=Number(r));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;t=t>>>0,n=n===void 0?this.length:n>>>0,r||(r=0);var a;if(typeof r=="number")for(a=t;a<n;++a)this[a]=r;else{var w=u.isBuffer(r)?r:u.from(r,e),s=w.length;if(s===0)throw new TypeError('The value "'+r+'" is invalid for argument "value"');for(a=0;a<n-t;++a)this[a+t]=w[a%s]}return this};var sr=/[^+/0-9A-Za-z-_]/g;function xr(i){if(i=i.split("=")[0],i=i.trim().replace(sr,""),i.length<2)return"";for(;i.length%4!=0;)i=i+"=";return i}function Y(i,r){r=r||1/0;for(var t,n=i.length,e=null,o=[],a=0;a<n;++a){if(t=i.charCodeAt(a),t>55295&&t<57344){if(!e){if(t>56319){(r-=3)>-1&&o.push(239,191,189);continue}else if(a+1===n){(r-=3)>-1&&o.push(239,191,189);continue}e=t;continue}if(t<56320){(r-=3)>-1&&o.push(239,191,189),e=t;continue}t=(e-55296<<10|t-56320)+65536}else e&&(r-=3)>-1&&o.push(239,191,189);if(e=null,t<128){if((r-=1)<0)break;o.push(t)}else if(t<2048){if((r-=2)<0)break;o.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;o.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;o.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else throw new Error("Invalid code point")}return o}function Er(i){for(var r=[],t=0;t<i.length;++t)r.push(i.charCodeAt(t)&255);return r}function Fr(i,r){for(var t,n,e,o=[],a=0;a<i.length&&!((r-=2)<0);++a)t=i.charCodeAt(a),n=t>>8,e=t%256,o.push(e),o.push(n);return o}function Q(i){return h.toByteArray(xr(i))}function N(i,r,t,n){for(var e=0;e<n&&!(e+t>=r.length||e>=i.length);++e)r[e+t]=i[e];return e}function d(i,r){return i instanceof r||i!=null&&i.constructor!=null&&i.constructor.name!=null&&i.constructor.name===r.name}function H(i){return i!==i}var mr=function(){for(var i="0123456789abcdef",r=new Array(256),t=0;t<16;++t)for(var n=t*16,e=0;e<16;++e)r[n+e]=i[t]+i[e];return r}()})(Br);export{Br as b,G as i};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOWFmOTU1OTYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgdmFyIHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIHZhciBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG4gIHJldHVybiBidWZcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlWaWV3KHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAoaXNJbnN0YW5jZSh2YWx1ZSwgU2hhcmVkQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIFNoYXJlZEFycmF5QnVmZmVyKSkpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB2YXIgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoXG4gICAgKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIucHJvdG90eXBlLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIsIFVpbnQ4QXJyYXkpXG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgVWludDhBcnJheShhcnJheVZpZXcpXG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpXG4gIH1cbiAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgdmFyIGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmIChpc0luc3RhbmNlKGJ1ZiwgVWludDhBcnJheSkpIHtcbiAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBCdWZmZXIuZnJvbShidWYpLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcmNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cbmlmIChjdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGVbY3VzdG9tSW5zcGVjdFN5bWJvbF0gPSBCdWZmZXIucHJvdG90eXBlLmluc3BlY3Rcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIC8vIElmIGJ5dGVzLmxlbmd0aCBpcyBvZGQsIHRoZSBsYXN0IDggYml0cyBtdXN0IGJlIGlnbm9yZWQgKHNhbWUgYXMgbm9kZS5qcylcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyJylcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbClcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZSBmb3IgYHRvU3RyaW5nKCdoZXgnKWBcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzIxOVxudmFyIGhleFNsaWNlTG9va3VwVGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgdmFyIHRhYmxlID0gbmV3IEFycmF5KDI1NilcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgdmFyIGkxNiA9IGkgKiAxNlxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgdGFibGVbaTE2ICsgal0gPSBhbHBoYWJldFtpXSArIGFscGhhYmV0W2pdXG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJsZVxufSkoKVxuIl0sIm5hbWVzIjpbInJlcXVpcmUkJDAiLCJpZWVlNzU0IiwicmVxdWlyZSQkMSJdLCJtYXBwaW5ncyI6IjRCQUVxQixpQkFDQyxtQkFDRSxHQUV4QixHQUFJLEdBQVMsR0FDVCxFQUFZLEdBQ1osR0FBTSxNQUFPLGFBQWUsWUFBYyxXQUFhLE1BRXZELEVBQU8sbUVBQ1gsT0FBUyxHQUFJLEVBQUcsR0FBTSxFQUFLLE9BQVEsRUFBSSxHQUFLLEVBQUUsRUFDNUMsRUFBTyxHQUFLLEVBQUssR0FDakIsRUFBVSxFQUFLLFdBQVcsSUFBTSxFQUtsQyxFQUFVLElBQUksV0FBVyxJQUFNLEdBQy9CLEVBQVUsSUFBSSxXQUFXLElBQU0sR0FFL0IsWUFBa0IsRUFBSyxDQUNyQixHQUFJLEdBQU0sRUFBSSxPQUVkLEdBQUksRUFBTSxFQUFJLEVBQ1osS0FBTSxJQUFJLE9BQU0sa0RBS2xCLEdBQUksR0FBVyxFQUFJLFFBQVEsS0FDM0IsQUFBSSxJQUFhLElBQUksR0FBVyxHQUVoQyxHQUFJLEdBQWtCLElBQWEsRUFDL0IsRUFDQSxFQUFLLEVBQVcsRUFFcEIsTUFBTyxDQUFDLEVBQVUsR0FJcEIsWUFBcUIsRUFBSyxDQUN4QixHQUFJLEdBQU8sR0FBUSxHQUNmLEVBQVcsRUFBSyxHQUNoQixFQUFrQixFQUFLLEdBQzNCLE1BQVMsR0FBVyxHQUFtQixFQUFJLEVBQUssRUFHbEQsWUFBc0IsRUFBSyxFQUFVLEVBQWlCLENBQ3BELE1BQVMsR0FBVyxHQUFtQixFQUFJLEVBQUssRUFHbEQsWUFBc0IsRUFBSyxDQUN6QixHQUFJLEdBQ0EsRUFBTyxHQUFRLEdBQ2YsRUFBVyxFQUFLLEdBQ2hCLEVBQWtCLEVBQUssR0FFdkIsRUFBTSxHQUFJLElBQUksR0FBWSxFQUFLLEVBQVUsSUFFekMsRUFBVSxFQUdWLEVBQU0sRUFBa0IsRUFDeEIsRUFBVyxFQUNYLEVBRUEsRUFDSixJQUFLLEVBQUksRUFBRyxFQUFJLEVBQUssR0FBSyxFQUN4QixFQUNHLEVBQVUsRUFBSSxXQUFXLEtBQU8sR0FDaEMsRUFBVSxFQUFJLFdBQVcsRUFBSSxLQUFPLEdBQ3BDLEVBQVUsRUFBSSxXQUFXLEVBQUksS0FBTyxFQUNyQyxFQUFVLEVBQUksV0FBVyxFQUFJLElBQy9CLEVBQUksS0FBYyxHQUFPLEdBQU0sSUFDL0IsRUFBSSxLQUFjLEdBQU8sRUFBSyxJQUM5QixFQUFJLEtBQWEsRUFBTSxJQUd6QixNQUFJLEtBQW9CLEdBQ3RCLEdBQ0csRUFBVSxFQUFJLFdBQVcsS0FBTyxFQUNoQyxFQUFVLEVBQUksV0FBVyxFQUFJLEtBQU8sRUFDdkMsRUFBSSxLQUFhLEVBQU0sS0FHckIsSUFBb0IsR0FDdEIsR0FDRyxFQUFVLEVBQUksV0FBVyxLQUFPLEdBQ2hDLEVBQVUsRUFBSSxXQUFXLEVBQUksS0FBTyxFQUNwQyxFQUFVLEVBQUksV0FBVyxFQUFJLEtBQU8sRUFDdkMsRUFBSSxLQUFjLEdBQU8sRUFBSyxJQUM5QixFQUFJLEtBQWEsRUFBTSxLQUdsQixFQUdULFlBQTBCLEVBQUssQ0FDN0IsTUFBTyxHQUFPLEdBQU8sR0FBSyxJQUN4QixFQUFPLEdBQU8sR0FBSyxJQUNuQixFQUFPLEdBQU8sRUFBSSxJQUNsQixFQUFPLEVBQU0sSUFHakIsWUFBc0IsRUFBTyxFQUFPLEVBQUssQ0FHdkMsT0FGSSxHQUNBLEVBQVMsR0FDSixFQUFJLEVBQU8sRUFBSSxFQUFLLEdBQUssRUFDaEMsRUFDSSxHQUFNLElBQU0sR0FBTSxVQUNsQixHQUFNLEVBQUksSUFBTSxFQUFLLE9BQ3RCLEdBQU0sRUFBSSxHQUFLLEtBQ2xCLEVBQU8sS0FBSyxHQUFnQixJQUU5QixNQUFPLEdBQU8sS0FBSyxJQUdyQixZQUF3QixFQUFPLENBUTdCLE9BUEksR0FDQSxFQUFNLEVBQU0sT0FDWixFQUFhLEVBQU0sRUFDbkIsRUFBUSxHQUNSLEVBQWlCLE1BR1osRUFBSSxFQUFHLEVBQU8sRUFBTSxFQUFZLEVBQUksRUFBTSxHQUFLLEVBQ3RELEVBQU0sS0FBSyxHQUFZLEVBQU8sRUFBSSxFQUFJLEVBQWtCLEVBQU8sRUFBUSxFQUFJLElBSTdFLE1BQUksS0FBZSxFQUNqQixHQUFNLEVBQU0sRUFBTSxHQUNsQixFQUFNLEtBQ0osRUFBTyxHQUFPLEdBQ2QsRUFBUSxHQUFPLEVBQUssSUFDcEIsT0FFTyxJQUFlLEdBQ3hCLEdBQU8sR0FBTSxFQUFNLElBQU0sR0FBSyxFQUFNLEVBQU0sR0FDMUMsRUFBTSxLQUNKLEVBQU8sR0FBTyxJQUNkLEVBQVEsR0FBTyxFQUFLLElBQ3BCLEVBQVEsR0FBTyxFQUFLLElBQ3BCLE1BSUcsRUFBTSxLQUFLLDZHQ25KTCxTQUFVLEVBQVEsRUFBUSxFQUFNLEVBQU0sRUFBUSxDQUMzRCxHQUFJLEdBQUcsRUFDSCxFQUFRLEVBQVMsRUFBSyxFQUFPLEVBQzdCLEVBQVEsSUFBSyxHQUFRLEVBQ3JCLEVBQVEsR0FBUSxFQUNoQixFQUFRLEdBQ1IsRUFBSSxFQUFRLEVBQVMsRUFBSyxFQUMxQixFQUFJLEVBQU8sR0FBSyxFQUNoQixFQUFJLEVBQU8sRUFBUyxHQU94QixJQUxBLEdBQUssRUFFTCxFQUFJLEVBQU0sSUFBTSxDQUFDLEdBQVUsRUFDM0IsSUFBTyxDQUFDLEVBQ1IsR0FBUyxFQUNGLEVBQVEsRUFBRyxFQUFLLEVBQUksSUFBTyxFQUFPLEVBQVMsR0FBSSxHQUFLLEVBQUcsR0FBUyxFQUFHLENBSzFFLElBSEEsRUFBSSxFQUFNLElBQU0sQ0FBQyxHQUFVLEVBQzNCLElBQU8sQ0FBQyxFQUNSLEdBQVMsRUFDRixFQUFRLEVBQUcsRUFBSyxFQUFJLElBQU8sRUFBTyxFQUFTLEdBQUksR0FBSyxFQUFHLEdBQVMsRUFBRyxDQUUxRSxHQUFJLElBQU0sRUFDUixFQUFJLEVBQUksTUFDSCxJQUFJLElBQU0sRUFDZixNQUFPLEdBQUksSUFBUSxHQUFJLEdBQUssR0FBSyxNQUVqQyxFQUFJLEVBQUksS0FBSyxJQUFJLEVBQUcsR0FDcEIsRUFBSSxFQUFJLEVBRVYsTUFBUSxHQUFJLEdBQUssR0FBSyxFQUFJLEtBQUssSUFBSSxFQUFHLEVBQUksWUFHNUIsU0FBVSxFQUFRLEVBQU8sRUFBUSxFQUFNLEVBQU0sRUFBUSxDQUNuRSxHQUFJLEdBQUcsRUFBRyxFQUNOLEVBQVEsRUFBUyxFQUFLLEVBQU8sRUFDN0IsRUFBUSxJQUFLLEdBQVEsRUFDckIsRUFBUSxHQUFRLEVBQ2hCLEVBQU0sSUFBUyxHQUFLLEtBQUssSUFBSSxFQUFHLEtBQU8sS0FBSyxJQUFJLEVBQUcsS0FBTyxFQUMxRCxFQUFJLEVBQU8sRUFBSyxFQUFTLEVBQ3pCLEVBQUksRUFBTyxFQUFJLEdBQ2YsRUFBSSxFQUFRLEdBQU0sSUFBVSxHQUFLLEVBQUksRUFBUSxFQUFLLEVBQUksRUFtQzFELElBakNBLEVBQVEsS0FBSyxJQUFJLEdBRWpCLEFBQUksTUFBTSxJQUFVLElBQVUsSUFDNUIsR0FBSSxNQUFNLEdBQVMsRUFBSSxFQUN2QixFQUFJLEdBRUosR0FBSSxLQUFLLE1BQU0sS0FBSyxJQUFJLEdBQVMsS0FBSyxLQUNsQyxFQUFTLEdBQUksS0FBSyxJQUFJLEVBQUcsQ0FBQyxJQUFNLEdBQ2xDLEtBQ0EsR0FBSyxHQUVQLEFBQUksRUFBSSxHQUFTLEVBQ2YsR0FBUyxFQUFLLEVBRWQsR0FBUyxFQUFLLEtBQUssSUFBSSxFQUFHLEVBQUksR0FFNUIsRUFBUSxHQUFLLEdBQ2YsS0FDQSxHQUFLLEdBR1AsQUFBSSxFQUFJLEdBQVMsRUFDZixHQUFJLEVBQ0osRUFBSSxHQUNDLEFBQUksRUFBSSxHQUFTLEVBQ3RCLEdBQU0sR0FBUSxFQUFLLEdBQUssS0FBSyxJQUFJLEVBQUcsR0FDcEMsRUFBSSxFQUFJLEdBRVIsR0FBSSxFQUFRLEtBQUssSUFBSSxFQUFHLEVBQVEsR0FBSyxLQUFLLElBQUksRUFBRyxHQUNqRCxFQUFJLElBSUQsR0FBUSxFQUFHLEVBQU8sRUFBUyxHQUFLLEVBQUksSUFBTSxHQUFLLEVBQUcsR0FBSyxJQUFLLEdBQVEsRUFBRyxDQUk5RSxJQUZBLEVBQUssR0FBSyxFQUFRLEVBQ2xCLEdBQVEsRUFDRCxFQUFPLEVBQUcsRUFBTyxFQUFTLEdBQUssRUFBSSxJQUFNLEdBQUssRUFBRyxHQUFLLElBQUssR0FBUSxFQUFHLENBRTdFLEVBQU8sRUFBUyxFQUFJLElBQU0sRUFBSTs7Ozs7Z0JDekVoQyxHQUFJLEdBQVNBLEVBQ1RDLEVBQVVDLEVBQ1YsRUFDRCxNQUFPLFNBQVcsWUFBYyxNQUFPLFFBQU8sS0FBVyxXQUN0RCxPQUFPLElBQU8sOEJBQ2QsS0FFTixTQUFpQixFQUNqQixhQUFxQixHQUNyQixvQkFBNEIsR0FFNUIsR0FBSSxHQUFlLFdBQ25CLGFBQXFCLEVBZ0JyQixFQUFPLG9CQUFzQixJQUV6QixDQUFDLEVBQU8scUJBQXVCLE1BQU8sVUFBWSxhQUNsRCxNQUFPLFNBQVEsT0FBVSxZQUMzQixRQUFRLE1BQ04saUpBS0osWUFBOEIsQ0FFNUIsR0FBSSxDQUNGLEdBQUksR0FBTSxHQUFJLFlBQVcsR0FDckIsRUFBUSxDQUFFLElBQUssVUFBWSxDQUFFLE1BQU8sTUFDeEMsY0FBTyxlQUFlLEVBQU8sV0FBVyxXQUN4QyxPQUFPLGVBQWUsRUFBSyxHQUNwQixFQUFJLFFBQVUsU0FDZCxFQUFQLENBQ0EsTUFBTyxJQUlYLE9BQU8sZUFBZSxFQUFPLFVBQVcsU0FBVSxDQUNoRCxXQUFZLEdBQ1osSUFBSyxVQUFZLENBQ2YsR0FBSSxFQUFDLEVBQU8sU0FBUyxNQUNyQixNQUFPLE1BQUssVUFJaEIsT0FBTyxlQUFlLEVBQU8sVUFBVyxTQUFVLENBQ2hELFdBQVksR0FDWixJQUFLLFVBQVksQ0FDZixHQUFJLEVBQUMsRUFBTyxTQUFTLE1BQ3JCLE1BQU8sTUFBSyxjQUloQixXQUF1QixFQUFRLENBQzdCLEdBQUksRUFBUyxFQUNYLEtBQU0sSUFBSSxZQUFXLGNBQWdCLEVBQVMsa0NBR2hELEdBQUksR0FBTSxHQUFJLFlBQVcsR0FDekIsY0FBTyxlQUFlLEVBQUssRUFBTyxXQUMzQixFQWFULFdBQWlCLEVBQUssRUFBa0IsRUFBUSxDQUU5QyxHQUFJLE1BQU8sSUFBUSxTQUFVLENBQzNCLEdBQUksTUFBTyxJQUFxQixTQUM5QixLQUFNLElBQUksV0FDUixzRUFHSixNQUFPLEdBQVksR0FFckIsTUFBTyxHQUFLLEVBQUssRUFBa0IsR0FHckMsRUFBTyxTQUFXLEtBRWxCLFdBQWUsRUFBTyxFQUFrQixFQUFRLENBQzlDLEdBQUksTUFBTyxJQUFVLFNBQ25CLE1BQU8sR0FBVyxFQUFPLEdBRzNCLEdBQUksWUFBWSxPQUFPLEdBQ3JCLE1BQU8sR0FBYyxHQUd2QixHQUFJLEdBQVMsS0FDWCxLQUFNLElBQUksV0FDUixrSEFDMEMsTUFBTyxJQVNyRCxHQUxJLEVBQVcsRUFBTyxjQUNqQixHQUFTLEVBQVcsRUFBTSxPQUFRLGNBSW5DLE1BQU8sb0JBQXNCLGFBQzVCLEdBQVcsRUFBTyxvQkFDbEIsR0FBUyxFQUFXLEVBQU0sT0FBUSxvQkFDckMsTUFBTyxHQUFnQixFQUFPLEVBQWtCLEdBR2xELEdBQUksTUFBTyxJQUFVLFNBQ25CLEtBQU0sSUFBSSxXQUNSLHlFQUlKLEdBQUksR0FBVSxFQUFNLFNBQVcsRUFBTSxVQUNyQyxHQUFJLEdBQVcsTUFBUSxJQUFZLEVBQ2pDLE1BQU8sR0FBTyxLQUFLLEVBQVMsRUFBa0IsR0FHaEQsR0FBSSxHQUFJLEdBQVcsR0FDbkIsR0FBSSxFQUFHLE1BQU8sR0FFZCxHQUFJLE1BQU8sU0FBVyxhQUFlLE9BQU8sYUFBZSxNQUN2RCxNQUFPLEdBQU0sT0FBTyxjQUFpQixXQUN2QyxNQUFPLEdBQU8sS0FDWixFQUFNLE9BQU8sYUFBYSxVQUFXLEVBQWtCLEdBSTNELEtBQU0sSUFBSSxXQUNSLGtIQUMwQyxNQUFPLElBWXJELEVBQU8sS0FBTyxTQUFVLEVBQU8sRUFBa0IsRUFBUSxDQUN2RCxNQUFPLEdBQUssRUFBTyxFQUFrQixJQUt2QyxPQUFPLGVBQWUsRUFBTyxVQUFXLFdBQVcsV0FDbkQsT0FBTyxlQUFlLEVBQVEsWUFFOUIsV0FBcUIsRUFBTSxDQUN6QixHQUFJLE1BQU8sSUFBUyxTQUNsQixLQUFNLElBQUksV0FBVSwwQ0FDZixHQUFJLEVBQU8sRUFDaEIsS0FBTSxJQUFJLFlBQVcsY0FBZ0IsRUFBTyxrQ0FJaEQsV0FBZ0IsRUFBTSxFQUFNLEVBQVUsQ0FFcEMsTUFEQSxHQUFXLEdBQ1AsR0FBUSxFQUNILEVBQWEsR0FFbEIsSUFBUyxPQUlKLE1BQU8sSUFBYSxTQUN2QixFQUFhLEdBQU0sS0FBSyxFQUFNLEdBQzlCLEVBQWEsR0FBTSxLQUFLLEdBRXZCLEVBQWEsR0FPdEIsRUFBTyxNQUFRLFNBQVUsRUFBTSxFQUFNLEVBQVUsQ0FDN0MsTUFBTyxHQUFNLEVBQU0sRUFBTSxJQUczQixXQUFzQixFQUFNLENBQzFCLFNBQVcsR0FDSixFQUFhLEVBQU8sRUFBSSxFQUFJLEVBQVEsR0FBUSxHQU1yRCxFQUFPLFlBQWMsU0FBVSxFQUFNLENBQ25DLE1BQU8sR0FBWSxJQUtyQixFQUFPLGdCQUFrQixTQUFVLEVBQU0sQ0FDdkMsTUFBTyxHQUFZLElBR3JCLFdBQXFCLEVBQVEsRUFBVSxDQUtyQyxHQUpJLE9BQU8sSUFBYSxVQUFZLElBQWEsS0FDL0MsR0FBVyxRQUdULENBQUMsRUFBTyxXQUFXLEdBQ3JCLEtBQU0sSUFBSSxXQUFVLHFCQUF1QixHQUc3QyxHQUFJLEdBQVMsRUFBVyxFQUFRLEdBQVksRUFDeEMsRUFBTSxFQUFhLEdBRW5CLEVBQVMsRUFBSSxNQUFNLEVBQVEsR0FFL0IsTUFBSSxLQUFXLEdBSWIsR0FBTSxFQUFJLE1BQU0sRUFBRyxJQUdkLEVBR1QsV0FBd0IsRUFBTyxDQUc3QixPQUZJLEdBQVMsRUFBTSxPQUFTLEVBQUksRUFBSSxFQUFRLEVBQU0sUUFBVSxFQUN4RCxFQUFNLEVBQWEsR0FDZCxFQUFJLEVBQUcsRUFBSSxFQUFRLEdBQUssRUFDL0IsRUFBSSxHQUFLLEVBQU0sR0FBSyxJQUV0QixNQUFPLEdBR1QsV0FBd0IsRUFBVyxDQUNqQyxHQUFJLEVBQVcsRUFBVyxZQUFhLENBQ3JDLEdBQUksR0FBTyxHQUFJLFlBQVcsR0FDMUIsTUFBTyxHQUFnQixFQUFLLE9BQVEsRUFBSyxXQUFZLEVBQUssWUFFNUQsTUFBTyxHQUFjLEdBR3ZCLFdBQTBCLEVBQU8sRUFBWSxFQUFRLENBQ25ELEdBQUksRUFBYSxHQUFLLEVBQU0sV0FBYSxFQUN2QyxLQUFNLElBQUksWUFBVyx3Q0FHdkIsR0FBSSxFQUFNLFdBQWEsRUFBYyxJQUFVLEdBQzdDLEtBQU0sSUFBSSxZQUFXLHdDQUd2QixHQUFJLEdBQ0osTUFBSSxLQUFlLFFBQWEsSUFBVyxPQUN6QyxFQUFNLEdBQUksWUFBVyxHQUNoQixBQUFJLElBQVcsT0FDcEIsRUFBTSxHQUFJLFlBQVcsRUFBTyxHQUU1QixFQUFNLEdBQUksWUFBVyxFQUFPLEVBQVksR0FJMUMsT0FBTyxlQUFlLEVBQUssRUFBTyxXQUUzQixFQUdULFlBQXFCLEVBQUssQ0FDeEIsR0FBSSxFQUFPLFNBQVMsR0FBTSxDQUN4QixHQUFJLEdBQU0sRUFBUSxFQUFJLFFBQVUsRUFDNUIsRUFBTSxFQUFhLEdBRXZCLE1BQUksR0FBSSxTQUFXLEdBSW5CLEVBQUksS0FBSyxFQUFLLEVBQUcsRUFBRyxHQUNiLEVBR1QsR0FBSSxFQUFJLFNBQVcsT0FDakIsTUFBSSxPQUFPLEdBQUksUUFBVyxVQUFZLEVBQVksRUFBSSxRQUM3QyxFQUFhLEdBRWYsRUFBYyxHQUd2QixHQUFJLEVBQUksT0FBUyxVQUFZLE1BQU0sUUFBUSxFQUFJLE1BQzdDLE1BQU8sR0FBYyxFQUFJLE1BSTdCLFdBQWtCLEVBQVEsQ0FHeEIsR0FBSSxHQUFVLEVBQ1osS0FBTSxJQUFJLFlBQVcsMERBQ2EsRUFBYSxTQUFTLElBQU0sVUFFaEUsTUFBTyxHQUFTLEVBR2xCLFlBQXFCLEVBQVEsQ0FDM0IsTUFBSSxDQUFDLEdBQVUsR0FDYixHQUFTLEdBRUosRUFBTyxNQUFNLENBQUMsR0FHdkIsRUFBTyxTQUFXLFNBQW1CLEVBQUcsQ0FDdEMsTUFBTyxJQUFLLE1BQVEsRUFBRSxZQUFjLElBQ2xDLElBQU0sRUFBTyxXQUdqQixFQUFPLFFBQVUsU0FBa0IsRUFBRyxFQUFHLENBR3ZDLEdBRkksRUFBVyxFQUFHLGFBQWEsR0FBSSxFQUFPLEtBQUssRUFBRyxFQUFFLE9BQVEsRUFBRSxhQUMxRCxFQUFXLEVBQUcsYUFBYSxHQUFJLEVBQU8sS0FBSyxFQUFHLEVBQUUsT0FBUSxFQUFFLGFBQzFELENBQUMsRUFBTyxTQUFTLElBQU0sQ0FBQyxFQUFPLFNBQVMsR0FDMUMsS0FBTSxJQUFJLFdBQ1IseUVBSUosR0FBSSxJQUFNLEVBQUcsTUFBTyxHQUtwQixPQUhJLEdBQUksRUFBRSxPQUNOLEVBQUksRUFBRSxPQUVELEVBQUksRUFBRyxFQUFNLEtBQUssSUFBSSxFQUFHLEdBQUksRUFBSSxFQUFLLEVBQUUsRUFDL0MsR0FBSSxFQUFFLEtBQU8sRUFBRSxHQUFJLENBQ2pCLEVBQUksRUFBRSxHQUNOLEVBQUksRUFBRSxHQUNOLE1BSUosTUFBSSxHQUFJLEVBQVUsR0FDZCxFQUFJLEVBQVUsRUFDWCxHQUdULEVBQU8sV0FBYSxTQUFxQixFQUFVLENBQ2pELE9BQVEsT0FBTyxHQUFVLG1CQUNsQixVQUNBLFdBQ0EsWUFDQSxZQUNBLGFBQ0EsYUFDQSxhQUNBLFdBQ0EsWUFDQSxjQUNBLFdBQ0gsTUFBTyxXQUVQLE1BQU8sS0FJYixFQUFPLE9BQVMsU0FBaUIsRUFBTSxFQUFRLENBQzdDLEdBQUksQ0FBQyxNQUFNLFFBQVEsR0FDakIsS0FBTSxJQUFJLFdBQVUsK0NBR3RCLEdBQUksRUFBSyxTQUFXLEVBQ2xCLE1BQU8sR0FBTyxNQUFNLEdBR3RCLEdBQUksR0FDSixHQUFJLElBQVcsT0FFYixJQURBLEVBQVMsRUFDSixFQUFJLEVBQUcsRUFBSSxFQUFLLE9BQVEsRUFBRSxFQUM3QixHQUFVLEVBQUssR0FBRyxPQUl0QixHQUFJLEdBQVMsRUFBTyxZQUFZLEdBQzVCLEVBQU0sRUFDVixJQUFLLEVBQUksRUFBRyxFQUFJLEVBQUssT0FBUSxFQUFFLEVBQUcsQ0FDaEMsR0FBSSxHQUFNLEVBQUssR0FDZixHQUFJLEVBQVcsRUFBSyxZQUNsQixBQUFJLEVBQU0sRUFBSSxPQUFTLEVBQU8sT0FDNUIsRUFBTyxLQUFLLEdBQUssS0FBSyxFQUFRLEdBRTlCLFdBQVcsVUFBVSxJQUFJLEtBQ3ZCLEVBQ0EsRUFDQSxXQUdNLEVBQU8sU0FBUyxHQUcxQixFQUFJLEtBQUssRUFBUSxPQUZqQixNQUFNLElBQUksV0FBVSwrQ0FJdEIsR0FBTyxFQUFJLE9BRWIsTUFBTyxJQUdULFdBQXFCLEVBQVEsRUFBVSxDQUNyQyxHQUFJLEVBQU8sU0FBUyxHQUNsQixNQUFPLEdBQU8sT0FFaEIsR0FBSSxZQUFZLE9BQU8sSUFBVyxFQUFXLEVBQVEsYUFDbkQsTUFBTyxHQUFPLFdBRWhCLEdBQUksTUFBTyxJQUFXLFNBQ3BCLEtBQU0sSUFBSSxXQUNSLDJGQUNtQixNQUFPLElBSTlCLEdBQUksR0FBTSxFQUFPLE9BQ2IsRUFBYSxVQUFVLE9BQVMsR0FBSyxVQUFVLEtBQU8sR0FDMUQsR0FBSSxDQUFDLEdBQWEsSUFBUSxFQUFHLE1BQU8sR0FJcEMsT0FESSxHQUFjLEtBRWhCLE9BQVEsT0FDRCxZQUNBLGFBQ0EsU0FDSCxNQUFPLE9BQ0osV0FDQSxRQUNILE1BQU8sR0FBWSxHQUFRLFdBQ3hCLFdBQ0EsWUFDQSxjQUNBLFdBQ0gsTUFBTyxHQUFNLE1BQ1YsTUFDSCxNQUFPLEtBQVEsTUFDWixTQUNILE1BQU8sR0FBYyxHQUFRLGVBRTdCLEdBQUksRUFDRixNQUFPLEdBQVksR0FBSyxFQUFZLEdBQVEsT0FFOUMsRUFBWSxJQUFLLEdBQVUsY0FDM0IsRUFBYyxJQUl0QixFQUFPLFdBQWEsRUFFcEIsWUFBdUIsRUFBVSxFQUFPLEVBQUssQ0FDM0MsR0FBSSxHQUFjLEdBOEJsQixHQXJCSSxLQUFVLFFBQWEsRUFBUSxJQUNqQyxHQUFRLEdBSU4sRUFBUSxLQUFLLFFBSWIsTUFBUSxRQUFhLEVBQU0sS0FBSyxTQUNsQyxHQUFNLEtBQUssUUFHVCxHQUFPLElBS1gsTUFBUyxFQUNULEtBQVcsRUFFUCxHQUFPLEdBQ1QsTUFBTyxHQUtULElBRkssR0FBVSxHQUFXLFVBR3hCLE9BQVEsT0FDRCxNQUNILE1BQU8sSUFBUyxLQUFNLEVBQU8sT0FFMUIsV0FDQSxRQUNILE1BQU8sR0FBVSxLQUFNLEVBQU8sT0FFM0IsUUFDSCxNQUFPLElBQVcsS0FBTSxFQUFPLE9BRTVCLGFBQ0EsU0FDSCxNQUFPLElBQVksS0FBTSxFQUFPLE9BRTdCLFNBQ0gsTUFBTyxJQUFZLEtBQU0sRUFBTyxPQUU3QixXQUNBLFlBQ0EsY0FDQSxXQUNILE1BQU8sSUFBYSxLQUFNLEVBQU8sV0FHakMsR0FBSSxFQUFhLEtBQU0sSUFBSSxXQUFVLHFCQUF1QixHQUM1RCxFQUFZLEdBQVcsSUFBSSxjQUMzQixFQUFjLElBV3RCLEVBQU8sVUFBVSxVQUFZLEdBRTdCLFdBQWUsRUFBRyxFQUFHLEVBQUcsQ0FDdEIsR0FBSSxHQUFJLEVBQUUsR0FDVixFQUFFLEdBQUssRUFBRSxHQUNULEVBQUUsR0FBSyxFQUdULEVBQU8sVUFBVSxPQUFTLFVBQW1CLENBQzNDLEdBQUksR0FBTSxLQUFLLE9BQ2YsR0FBSSxFQUFNLEdBQU0sRUFDZCxLQUFNLElBQUksWUFBVyw2Q0FFdkIsT0FBUyxHQUFJLEVBQUcsRUFBSSxFQUFLLEdBQUssRUFDNUIsRUFBSyxLQUFNLEVBQUcsRUFBSSxHQUVwQixNQUFPLE9BR1QsRUFBTyxVQUFVLE9BQVMsVUFBbUIsQ0FDM0MsR0FBSSxHQUFNLEtBQUssT0FDZixHQUFJLEVBQU0sR0FBTSxFQUNkLEtBQU0sSUFBSSxZQUFXLDZDQUV2QixPQUFTLEdBQUksRUFBRyxFQUFJLEVBQUssR0FBSyxFQUM1QixFQUFLLEtBQU0sRUFBRyxFQUFJLEdBQ2xCLEVBQUssS0FBTSxFQUFJLEVBQUcsRUFBSSxHQUV4QixNQUFPLE9BR1QsRUFBTyxVQUFVLE9BQVMsVUFBbUIsQ0FDM0MsR0FBSSxHQUFNLEtBQUssT0FDZixHQUFJLEVBQU0sR0FBTSxFQUNkLEtBQU0sSUFBSSxZQUFXLDZDQUV2QixPQUFTLEdBQUksRUFBRyxFQUFJLEVBQUssR0FBSyxFQUM1QixFQUFLLEtBQU0sRUFBRyxFQUFJLEdBQ2xCLEVBQUssS0FBTSxFQUFJLEVBQUcsRUFBSSxHQUN0QixFQUFLLEtBQU0sRUFBSSxFQUFHLEVBQUksR0FDdEIsRUFBSyxLQUFNLEVBQUksRUFBRyxFQUFJLEdBRXhCLE1BQU8sT0FHVCxFQUFPLFVBQVUsU0FBVyxVQUFxQixDQUMvQyxHQUFJLEdBQVMsS0FBSyxPQUNsQixNQUFJLEtBQVcsRUFBVSxHQUNyQixVQUFVLFNBQVcsRUFBVSxFQUFVLEtBQU0sRUFBRyxHQUMvQyxHQUFhLE1BQU0sS0FBTSxZQUdsQyxFQUFPLFVBQVUsZUFBaUIsRUFBTyxVQUFVLFNBRW5ELEVBQU8sVUFBVSxPQUFTLFNBQWlCLEVBQUcsQ0FDNUMsR0FBSSxDQUFDLEVBQU8sU0FBUyxHQUFJLEtBQU0sSUFBSSxXQUFVLDZCQUM3QyxNQUFJLFFBQVMsRUFBVSxHQUNoQixFQUFPLFFBQVEsS0FBTSxLQUFPLEdBR3JDLEVBQU8sVUFBVSxRQUFVLFVBQW9CLENBQzdDLEdBQUksR0FBTSxHQUNOLEVBQU0sRUFBUSxrQkFDbEIsU0FBTSxLQUFLLFNBQVMsTUFBTyxFQUFHLEdBQUssUUFBUSxVQUFXLE9BQU8sT0FDekQsS0FBSyxPQUFTLEdBQUssSUFBTyxTQUN2QixXQUFhLEVBQU0sS0FFeEIsR0FDRixHQUFPLFVBQVUsR0FBdUIsRUFBTyxVQUFVLFNBRzNELEVBQU8sVUFBVSxRQUFVLFNBQWtCLEVBQVEsRUFBTyxFQUFLLEVBQVcsRUFBUyxDQUluRixHQUhJLEVBQVcsRUFBUSxhQUNyQixHQUFTLEVBQU8sS0FBSyxFQUFRLEVBQU8sT0FBUSxFQUFPLGFBRWpELENBQUMsRUFBTyxTQUFTLEdBQ25CLEtBQU0sSUFBSSxXQUNSLGlGQUNvQixNQUFPLElBaUIvQixHQWJJLElBQVUsUUFDWixHQUFRLEdBRU4sSUFBUSxRQUNWLEdBQU0sRUFBUyxFQUFPLE9BQVMsR0FFN0IsSUFBYyxRQUNoQixHQUFZLEdBRVYsSUFBWSxRQUNkLEdBQVUsS0FBSyxRQUdiLEVBQVEsR0FBSyxFQUFNLEVBQU8sUUFBVSxFQUFZLEdBQUssRUFBVSxLQUFLLE9BQ3RFLEtBQU0sSUFBSSxZQUFXLHNCQUd2QixHQUFJLEdBQWEsR0FBVyxHQUFTLEVBQ25DLE1BQU8sR0FFVCxHQUFJLEdBQWEsRUFDZixNQUFPLEdBRVQsR0FBSSxHQUFTLEVBQ1gsTUFBTyxHQVFULEdBTEEsS0FBVyxFQUNYLEtBQVMsRUFDVCxLQUFlLEVBQ2YsS0FBYSxFQUVULE9BQVMsRUFBUSxNQUFPLEdBUzVCLE9BUEksR0FBSSxFQUFVLEVBQ2QsRUFBSSxFQUFNLEVBQ1YsRUFBTSxLQUFLLElBQUksRUFBRyxHQUVsQixFQUFXLEtBQUssTUFBTSxFQUFXLEdBQ2pDLEVBQWEsRUFBTyxNQUFNLEVBQU8sR0FFNUIsRUFBSSxFQUFHLEVBQUksRUFBSyxFQUFFLEVBQ3pCLEdBQUksRUFBUyxLQUFPLEVBQVcsR0FBSSxDQUNqQyxFQUFJLEVBQVMsR0FDYixFQUFJLEVBQVcsR0FDZixNQUlKLE1BQUksR0FBSSxFQUFVLEdBQ2QsRUFBSSxFQUFVLEVBQ1gsR0FZVCxXQUErQixFQUFRLEVBQUssRUFBWSxFQUFVLEVBQUssQ0FFckUsR0FBSSxFQUFPLFNBQVcsRUFBRyxNQUFPLEdBbUJoQyxHQWhCQSxBQUFJLE1BQU8sSUFBZSxTQUN4QixHQUFXLEVBQ1gsRUFBYSxHQUNSLEFBQUksRUFBYSxXQUN0QixFQUFhLFdBQ0osRUFBYSxhQUN0QixHQUFhLGFBRWYsRUFBYSxDQUFDLEVBQ1YsRUFBWSxJQUVkLEdBQWEsRUFBTSxFQUFLLEVBQU8sT0FBUyxHQUl0QyxFQUFhLEdBQUcsR0FBYSxFQUFPLE9BQVMsR0FDN0MsR0FBYyxFQUFPLE9BQVEsQ0FDL0IsR0FBSSxFQUFLLE1BQU8sR0FDWCxFQUFhLEVBQU8sT0FBUyxVQUN6QixFQUFhLEVBQ3RCLEdBQUksRUFBSyxFQUFhLE1BQ2pCLE9BQU8sR0FTZCxHQUxJLE1BQU8sSUFBUSxVQUNqQixHQUFNLEVBQU8sS0FBSyxFQUFLLElBSXJCLEVBQU8sU0FBUyxHQUVsQixNQUFJLEdBQUksU0FBVyxFQUNWLEdBRUYsRUFBYSxFQUFRLEVBQUssRUFBWSxFQUFVLEdBQ2xELEdBQUksTUFBTyxJQUFRLFNBRXhCLE1BREEsR0FBTSxFQUFNLElBQ1IsTUFBTyxZQUFXLFVBQVUsU0FBWSxXQUN0QyxFQUNLLFdBQVcsVUFBVSxRQUFRLEtBQUssRUFBUSxFQUFLLEdBRS9DLFdBQVcsVUFBVSxZQUFZLEtBQUssRUFBUSxFQUFLLEdBR3ZELEVBQWEsRUFBUSxDQUFDLEdBQU0sRUFBWSxFQUFVLEdBRzNELEtBQU0sSUFBSSxXQUFVLHdDQUd0QixXQUF1QixFQUFLLEVBQUssRUFBWSxFQUFVLEVBQUssQ0FDMUQsR0FBSSxHQUFZLEVBQ1osRUFBWSxFQUFJLE9BQ2hCLEVBQVksRUFBSSxPQUVwQixHQUFJLElBQWEsUUFDZixHQUFXLE9BQU8sR0FBVSxjQUN4QixJQUFhLFFBQVUsSUFBYSxTQUNwQyxJQUFhLFdBQWEsSUFBYSxZQUFZLENBQ3JELEdBQUksRUFBSSxPQUFTLEdBQUssRUFBSSxPQUFTLEVBQ2pDLE1BQU8sR0FFVCxFQUFZLEVBQ1osR0FBYSxFQUNiLEdBQWEsRUFDYixHQUFjLEVBSWxCLFdBQWUsRUFBSyxFQUFHLENBQ3JCLE1BQUksS0FBYyxFQUNULEVBQUksR0FFSixFQUFJLGFBQWEsRUFBSSxHQUloQyxHQUFJLEdBQ0osR0FBSSxFQUFLLENBQ1AsR0FBSSxHQUFhLEdBQ2pCLElBQUssRUFBSSxFQUFZLEVBQUksRUFBVyxJQUNsQyxHQUFJLEVBQUssRUFBSyxLQUFPLEVBQUssRUFBSyxJQUFlLEdBQUssRUFBSSxFQUFJLElBRXpELEdBREksSUFBZSxJQUFJLEdBQWEsR0FDaEMsRUFBSSxFQUFhLElBQU0sRUFBVyxNQUFPLEdBQWEsTUFFMUQsQUFBSSxLQUFlLElBQUksSUFBSyxFQUFJLEdBQ2hDLEVBQWEsT0FLakIsS0FESSxFQUFhLEVBQVksR0FBVyxHQUFhLEVBQVksR0FDNUQsRUFBSSxFQUFZLEdBQUssRUFBRyxJQUFLLENBRWhDLE9BREksR0FBUSxHQUNILEVBQUksRUFBRyxFQUFJLEVBQVcsSUFDN0IsR0FBSSxFQUFLLEVBQUssRUFBSSxLQUFPLEVBQUssRUFBSyxHQUFJLENBQ3JDLEVBQVEsR0FDUixNQUdKLEdBQUksRUFBTyxNQUFPLEdBSXRCLE1BQU8sR0FHVCxFQUFPLFVBQVUsU0FBVyxTQUFtQixFQUFLLEVBQVksRUFBVSxDQUN4RSxNQUFPLE1BQUssUUFBUSxFQUFLLEVBQVksS0FBYyxJQUdyRCxFQUFPLFVBQVUsUUFBVSxTQUFrQixFQUFLLEVBQVksRUFBVSxDQUN0RSxNQUFPLEdBQXFCLEtBQU0sRUFBSyxFQUFZLEVBQVUsS0FHL0QsRUFBTyxVQUFVLFlBQWMsU0FBc0IsRUFBSyxFQUFZLEVBQVUsQ0FDOUUsTUFBTyxHQUFxQixLQUFNLEVBQUssRUFBWSxFQUFVLEtBRy9ELFlBQW1CLEVBQUssRUFBUSxFQUFRLEVBQVEsQ0FDOUMsRUFBUyxPQUFPLElBQVcsRUFDM0IsR0FBSSxHQUFZLEVBQUksT0FBUyxFQUM3QixBQUFLLEVBR0gsR0FBUyxPQUFPLEdBQ1osRUFBUyxHQUNYLEdBQVMsSUFKWCxFQUFTLEVBUVgsR0FBSSxHQUFTLEVBQU8sT0FFcEIsQUFBSSxFQUFTLEVBQVMsR0FDcEIsR0FBUyxFQUFTLEdBRXBCLE9BQVMsR0FBSSxFQUFHLEVBQUksRUFBUSxFQUFFLEVBQUcsQ0FDL0IsR0FBSSxHQUFTLFNBQVMsRUFBTyxPQUFPLEVBQUksRUFBRyxHQUFJLElBQy9DLEdBQUksRUFBWSxHQUFTLE1BQU8sR0FDaEMsRUFBSSxFQUFTLEdBQUssRUFFcEIsTUFBTyxHQUdULFlBQW9CLEVBQUssRUFBUSxFQUFRLEVBQVEsQ0FDL0MsTUFBTyxHQUFXLEVBQVksRUFBUSxFQUFJLE9BQVMsR0FBUyxFQUFLLEVBQVEsR0FHM0UsWUFBcUIsRUFBSyxFQUFRLEVBQVEsRUFBUSxDQUNoRCxNQUFPLEdBQVcsR0FBYSxHQUFTLEVBQUssRUFBUSxHQUd2RCxZQUFzQixFQUFLLEVBQVEsRUFBUSxFQUFRLENBQ2pELE1BQU8sR0FBVyxFQUFjLEdBQVMsRUFBSyxFQUFRLEdBR3hELFlBQW9CLEVBQUssRUFBUSxFQUFRLEVBQVEsQ0FDL0MsTUFBTyxHQUFXLEdBQWUsRUFBUSxFQUFJLE9BQVMsR0FBUyxFQUFLLEVBQVEsR0FHOUUsRUFBTyxVQUFVLE1BQVEsU0FBZ0IsRUFBUSxFQUFRLEVBQVEsRUFBVSxDQUV6RSxHQUFJLElBQVcsT0FDYixFQUFXLE9BQ1gsRUFBUyxLQUFLLE9BQ2QsRUFBUyxVQUVBLElBQVcsUUFBYSxNQUFPLElBQVcsU0FDbkQsRUFBVyxFQUNYLEVBQVMsS0FBSyxPQUNkLEVBQVMsVUFFQSxTQUFTLEdBQ2xCLEVBQVMsSUFBVyxFQUNwQixBQUFJLFNBQVMsR0FDWCxHQUFTLElBQVcsRUFDaEIsSUFBYSxRQUFXLEdBQVcsU0FFdkMsR0FBVyxFQUNYLEVBQVMsWUFHWCxNQUFNLElBQUksT0FDUiwyRUFJSixHQUFJLEdBQVksS0FBSyxPQUFTLEVBRzlCLEdBRkksS0FBVyxRQUFhLEVBQVMsSUFBVyxHQUFTLEdBRXBELEVBQU8sT0FBUyxHQUFNLEdBQVMsR0FBSyxFQUFTLElBQU8sRUFBUyxLQUFLLE9BQ3JFLEtBQU0sSUFBSSxZQUFXLDBDQUd2QixBQUFLLEdBQVUsR0FBVyxRQUcxQixPQURJLEdBQWMsS0FFaEIsT0FBUSxPQUNELE1BQ0gsTUFBTyxJQUFTLEtBQU0sRUFBUSxFQUFRLE9BRW5DLFdBQ0EsUUFDSCxNQUFPLElBQVUsS0FBTSxFQUFRLEVBQVEsT0FFcEMsWUFDQSxhQUNBLFNBQ0gsTUFBTyxJQUFXLEtBQU0sRUFBUSxFQUFRLE9BRXJDLFNBRUgsTUFBTyxJQUFZLEtBQU0sRUFBUSxFQUFRLE9BRXRDLFdBQ0EsWUFDQSxjQUNBLFdBQ0gsTUFBTyxJQUFVLEtBQU0sRUFBUSxFQUFRLFdBR3ZDLEdBQUksRUFBYSxLQUFNLElBQUksV0FBVSxxQkFBdUIsR0FDNUQsRUFBWSxJQUFLLEdBQVUsY0FDM0IsRUFBYyxLQUt0QixFQUFPLFVBQVUsT0FBUyxVQUFtQixDQUMzQyxNQUFPLENBQ0wsS0FBTSxTQUNOLEtBQU0sTUFBTSxVQUFVLE1BQU0sS0FBSyxLQUFLLE1BQVEsS0FBTSxLQUl4RCxZQUFzQixFQUFLLEVBQU8sRUFBSyxDQUNyQyxNQUFJLEtBQVUsR0FBSyxJQUFRLEVBQUksT0FDdEIsRUFBTyxjQUFjLEdBRXJCLEVBQU8sY0FBYyxFQUFJLE1BQU0sRUFBTyxJQUlqRCxXQUFvQixFQUFLLEVBQU8sRUFBSyxDQUNuQyxFQUFNLEtBQUssSUFBSSxFQUFJLE9BQVEsR0FJM0IsT0FISSxHQUFNLEdBRU4sRUFBSSxFQUNELEVBQUksR0FBSyxDQUNkLEdBQUksR0FBWSxFQUFJLEdBQ2hCLEVBQVksS0FDWixFQUFvQixFQUFZLElBQ2hDLEVBQ0MsRUFBWSxJQUNULEVBQ0MsRUFBWSxJQUNULEVBQ0EsRUFFWixHQUFJLEVBQUksR0FBb0IsRUFBSyxDQUMvQixHQUFJLEdBQVksRUFBVyxFQUFZLEVBRXZDLE9BQVEsT0FDRCxHQUNILEFBQUksRUFBWSxLQUNkLEdBQVksR0FFZCxVQUNHLEdBQ0gsRUFBYSxFQUFJLEVBQUksR0FDaEIsR0FBYSxNQUFVLEtBQzFCLEdBQWlCLEdBQVksS0FBUyxFQUFPLEVBQWEsR0FDdEQsRUFBZ0IsS0FDbEIsR0FBWSxJQUdoQixVQUNHLEdBQ0gsRUFBYSxFQUFJLEVBQUksR0FDckIsRUFBWSxFQUFJLEVBQUksR0FDZixHQUFhLE1BQVUsS0FBUyxHQUFZLE1BQVUsS0FDekQsR0FBaUIsR0FBWSxLQUFRLEdBQU8sR0FBYSxLQUFTLEVBQU8sRUFBWSxHQUNqRixFQUFnQixNQUFVLEdBQWdCLE9BQVUsRUFBZ0IsUUFDdEUsR0FBWSxJQUdoQixVQUNHLEdBQ0gsRUFBYSxFQUFJLEVBQUksR0FDckIsRUFBWSxFQUFJLEVBQUksR0FDcEIsRUFBYSxFQUFJLEVBQUksR0FDaEIsR0FBYSxNQUFVLEtBQVMsR0FBWSxNQUFVLEtBQVMsR0FBYSxNQUFVLEtBQ3pGLEdBQWlCLEdBQVksS0FBUSxHQUFRLEdBQWEsS0FBUyxHQUFPLEdBQVksS0FBUyxFQUFPLEVBQWEsR0FDL0csRUFBZ0IsT0FBVSxFQUFnQixTQUM1QyxHQUFZLEtBTXRCLEFBQUksSUFBYyxLQUdoQixHQUFZLE1BQ1osRUFBbUIsR0FDVixFQUFZLE9BRXJCLElBQWEsTUFDYixFQUFJLEtBQUssSUFBYyxHQUFLLEtBQVEsT0FDcEMsRUFBWSxNQUFTLEVBQVksTUFHbkMsRUFBSSxLQUFLLEdBQ1QsR0FBSyxFQUdQLE1BQU8sSUFBc0IsR0FNL0IsR0FBSSxHQUF1QixLQUUzQixZQUFnQyxFQUFZLENBQzFDLEdBQUksR0FBTSxFQUFXLE9BQ3JCLEdBQUksR0FBTyxFQUNULE1BQU8sUUFBTyxhQUFhLE1BQU0sT0FBUSxHQU0zQyxPQUZJLEdBQU0sR0FDTixFQUFJLEVBQ0QsRUFBSSxHQUNULEdBQU8sT0FBTyxhQUFhLE1BQ3pCLE9BQ0EsRUFBVyxNQUFNLEVBQUcsR0FBSyxJQUc3QixNQUFPLEdBR1QsWUFBcUIsRUFBSyxFQUFPLEVBQUssQ0FDcEMsR0FBSSxHQUFNLEdBQ1YsRUFBTSxLQUFLLElBQUksRUFBSSxPQUFRLEdBRTNCLE9BQVMsR0FBSSxFQUFPLEVBQUksRUFBSyxFQUFFLEVBQzdCLEdBQU8sT0FBTyxhQUFhLEVBQUksR0FBSyxLQUV0QyxNQUFPLEdBR1QsWUFBc0IsRUFBSyxFQUFPLEVBQUssQ0FDckMsR0FBSSxHQUFNLEdBQ1YsRUFBTSxLQUFLLElBQUksRUFBSSxPQUFRLEdBRTNCLE9BQVMsR0FBSSxFQUFPLEVBQUksRUFBSyxFQUFFLEVBQzdCLEdBQU8sT0FBTyxhQUFhLEVBQUksSUFFakMsTUFBTyxHQUdULFlBQW1CLEVBQUssRUFBTyxFQUFLLENBQ2xDLEdBQUksR0FBTSxFQUFJLE9BRWQsQUFBSSxFQUFDLEdBQVMsRUFBUSxJQUFHLEdBQVEsR0FDN0IsRUFBQyxHQUFPLEVBQU0sR0FBSyxFQUFNLElBQUssR0FBTSxHQUd4QyxPQURJLEdBQU0sR0FDRCxFQUFJLEVBQU8sRUFBSSxFQUFLLEVBQUUsRUFDN0IsR0FBTyxHQUFvQixFQUFJLElBRWpDLE1BQU8sR0FHVCxZQUF1QixFQUFLLEVBQU8sRUFBSyxDQUl0QyxPQUhJLEdBQVEsRUFBSSxNQUFNLEVBQU8sR0FDekIsRUFBTSxHQUVELEVBQUksRUFBRyxFQUFJLEVBQU0sT0FBUyxFQUFHLEdBQUssRUFDekMsR0FBTyxPQUFPLGFBQWEsRUFBTSxHQUFNLEVBQU0sRUFBSSxHQUFLLEtBRXhELE1BQU8sR0FHVCxFQUFPLFVBQVUsTUFBUSxTQUFnQixFQUFPLEVBQUssQ0FDbkQsR0FBSSxHQUFNLEtBQUssT0FDZixFQUFRLENBQUMsQ0FBQyxFQUNWLEVBQU0sSUFBUSxPQUFZLEVBQU0sQ0FBQyxDQUFDLEVBRWxDLEFBQUksRUFBUSxFQUNWLElBQVMsRUFDTCxFQUFRLEdBQUcsR0FBUSxJQUNkLEVBQVEsR0FDakIsR0FBUSxHQUdWLEFBQUksRUFBTSxFQUNSLElBQU8sRUFDSCxFQUFNLEdBQUcsR0FBTSxJQUNWLEVBQU0sR0FDZixHQUFNLEdBR0osRUFBTSxHQUFPLEdBQU0sR0FFdkIsR0FBSSxHQUFTLEtBQUssU0FBUyxFQUFPLEdBRWxDLGNBQU8sZUFBZSxFQUFRLEVBQU8sV0FFOUIsR0FNVCxXQUFzQixFQUFRLEVBQUssRUFBUSxDQUN6QyxHQUFLLEVBQVMsR0FBTyxHQUFLLEVBQVMsRUFBRyxLQUFNLElBQUksWUFBVyxzQkFDM0QsR0FBSSxFQUFTLEVBQU0sRUFBUSxLQUFNLElBQUksWUFBVyx5Q0FHbEQsRUFBTyxVQUFVLFdBQ2pCLEVBQU8sVUFBVSxXQUFhLFNBQXFCLEVBQVEsRUFBWSxFQUFVLENBQy9FLEVBQVMsSUFBVyxFQUNwQixFQUFhLElBQWUsRUFDdkIsR0FBVSxFQUFZLEVBQVEsRUFBWSxLQUFLLFFBS3BELE9BSEksR0FBTSxLQUFLLEdBQ1gsRUFBTSxFQUNOLEVBQUksRUFDRCxFQUFFLEVBQUksR0FBZSxJQUFPLE1BQ2pDLEdBQU8sS0FBSyxFQUFTLEdBQUssRUFHNUIsTUFBTyxJQUdULEVBQU8sVUFBVSxXQUNqQixFQUFPLFVBQVUsV0FBYSxTQUFxQixFQUFRLEVBQVksRUFBVSxDQUMvRSxFQUFTLElBQVcsRUFDcEIsRUFBYSxJQUFlLEVBQ3ZCLEdBQ0gsRUFBWSxFQUFRLEVBQVksS0FBSyxRQUt2QyxPQUZJLEdBQU0sS0FBSyxFQUFTLEVBQUUsR0FDdEIsRUFBTSxFQUNILEVBQWEsR0FBTSxJQUFPLE1BQy9CLEdBQU8sS0FBSyxFQUFTLEVBQUUsR0FBYyxFQUd2QyxNQUFPLElBR1QsRUFBTyxVQUFVLFVBQ2pCLEVBQU8sVUFBVSxVQUFZLFNBQW9CLEVBQVEsRUFBVSxDQUNqRSxTQUFTLElBQVcsRUFDZixHQUFVLEVBQVksRUFBUSxFQUFHLEtBQUssUUFDcEMsS0FBSyxJQUdkLEVBQU8sVUFBVSxhQUNqQixFQUFPLFVBQVUsYUFBZSxTQUF1QixFQUFRLEVBQVUsQ0FDdkUsU0FBUyxJQUFXLEVBQ2YsR0FBVSxFQUFZLEVBQVEsRUFBRyxLQUFLLFFBQ3BDLEtBQUssR0FBVyxLQUFLLEVBQVMsSUFBTSxHQUc3QyxFQUFPLFVBQVUsYUFDakIsRUFBTyxVQUFVLGFBQWUsU0FBdUIsRUFBUSxFQUFVLENBQ3ZFLFNBQVMsSUFBVyxFQUNmLEdBQVUsRUFBWSxFQUFRLEVBQUcsS0FBSyxRQUNuQyxLQUFLLElBQVcsRUFBSyxLQUFLLEVBQVMsSUFHN0MsRUFBTyxVQUFVLGFBQ2pCLEVBQU8sVUFBVSxhQUFlLFNBQXVCLEVBQVEsRUFBVSxDQUN2RSxTQUFTLElBQVcsRUFDZixHQUFVLEVBQVksRUFBUSxFQUFHLEtBQUssUUFFbEMsTUFBSyxHQUNULEtBQUssRUFBUyxJQUFNLEVBQ3BCLEtBQUssRUFBUyxJQUFNLElBQ3BCLEtBQUssRUFBUyxHQUFLLFVBRzFCLEVBQU8sVUFBVSxhQUNqQixFQUFPLFVBQVUsYUFBZSxTQUF1QixFQUFRLEVBQVUsQ0FDdkUsU0FBUyxJQUFXLEVBQ2YsR0FBVSxFQUFZLEVBQVEsRUFBRyxLQUFLLFFBRW5DLEtBQUssR0FBVSxTQUNuQixNQUFLLEVBQVMsSUFBTSxHQUNyQixLQUFLLEVBQVMsSUFBTSxFQUNyQixLQUFLLEVBQVMsS0FHbEIsRUFBTyxVQUFVLFVBQVksU0FBb0IsRUFBUSxFQUFZLEVBQVUsQ0FDN0UsRUFBUyxJQUFXLEVBQ3BCLEVBQWEsSUFBZSxFQUN2QixHQUFVLEVBQVksRUFBUSxFQUFZLEtBQUssUUFLcEQsT0FISSxHQUFNLEtBQUssR0FDWCxFQUFNLEVBQ04sRUFBSSxFQUNELEVBQUUsRUFBSSxHQUFlLElBQU8sTUFDakMsR0FBTyxLQUFLLEVBQVMsR0FBSyxFQUU1QixVQUFPLElBRUgsR0FBTyxHQUFLLElBQU8sS0FBSyxJQUFJLEVBQUcsRUFBSSxJQUVoQyxHQUdULEVBQU8sVUFBVSxVQUFZLFNBQW9CLEVBQVEsRUFBWSxFQUFVLENBQzdFLEVBQVMsSUFBVyxFQUNwQixFQUFhLElBQWUsRUFDdkIsR0FBVSxFQUFZLEVBQVEsRUFBWSxLQUFLLFFBS3BELE9BSEksR0FBSSxFQUNKLEVBQU0sRUFDTixFQUFNLEtBQUssRUFBUyxFQUFFLEdBQ25CLEVBQUksR0FBTSxJQUFPLE1BQ3RCLEdBQU8sS0FBSyxFQUFTLEVBQUUsR0FBSyxFQUU5QixVQUFPLElBRUgsR0FBTyxHQUFLLElBQU8sS0FBSyxJQUFJLEVBQUcsRUFBSSxJQUVoQyxHQUdULEVBQU8sVUFBVSxTQUFXLFNBQW1CLEVBQVEsRUFBVSxDQUcvRCxNQUZBLEdBQVMsSUFBVyxFQUNmLEdBQVUsRUFBWSxFQUFRLEVBQUcsS0FBSyxRQUN2QyxBQUFFLEtBQUssR0FBVSxJQUNaLEtBQU8sS0FBSyxHQUFVLEdBQUssR0FEQSxLQUFLLElBSTNDLEVBQU8sVUFBVSxZQUFjLFNBQXNCLEVBQVEsRUFBVSxDQUNyRSxFQUFTLElBQVcsRUFDZixHQUFVLEVBQVksRUFBUSxFQUFHLEtBQUssUUFDM0MsR0FBSSxHQUFNLEtBQUssR0FBVyxLQUFLLEVBQVMsSUFBTSxFQUM5QyxNQUFRLEdBQU0sTUFBVSxFQUFNLFdBQWEsR0FHN0MsRUFBTyxVQUFVLFlBQWMsU0FBc0IsRUFBUSxFQUFVLENBQ3JFLEVBQVMsSUFBVyxFQUNmLEdBQVUsRUFBWSxFQUFRLEVBQUcsS0FBSyxRQUMzQyxHQUFJLEdBQU0sS0FBSyxFQUFTLEdBQU0sS0FBSyxJQUFXLEVBQzlDLE1BQVEsR0FBTSxNQUFVLEVBQU0sV0FBYSxHQUc3QyxFQUFPLFVBQVUsWUFBYyxTQUFzQixFQUFRLEVBQVUsQ0FDckUsU0FBUyxJQUFXLEVBQ2YsR0FBVSxFQUFZLEVBQVEsRUFBRyxLQUFLLFFBRW5DLEtBQUssR0FDVixLQUFLLEVBQVMsSUFBTSxFQUNwQixLQUFLLEVBQVMsSUFBTSxHQUNwQixLQUFLLEVBQVMsSUFBTSxJQUd6QixFQUFPLFVBQVUsWUFBYyxTQUFzQixFQUFRLEVBQVUsQ0FDckUsU0FBUyxJQUFXLEVBQ2YsR0FBVSxFQUFZLEVBQVEsRUFBRyxLQUFLLFFBRW5DLEtBQUssSUFBVyxHQUNyQixLQUFLLEVBQVMsSUFBTSxHQUNwQixLQUFLLEVBQVMsSUFBTSxFQUNwQixLQUFLLEVBQVMsSUFHbkIsRUFBTyxVQUFVLFlBQWMsU0FBc0IsRUFBUSxFQUFVLENBQ3JFLFNBQVMsSUFBVyxFQUNmLEdBQVUsRUFBWSxFQUFRLEVBQUcsS0FBSyxRQUNwQ0QsRUFBUSxLQUFLLEtBQU0sRUFBUSxHQUFNLEdBQUksSUFHOUMsRUFBTyxVQUFVLFlBQWMsU0FBc0IsRUFBUSxFQUFVLENBQ3JFLFNBQVMsSUFBVyxFQUNmLEdBQVUsRUFBWSxFQUFRLEVBQUcsS0FBSyxRQUNwQ0EsRUFBUSxLQUFLLEtBQU0sRUFBUSxHQUFPLEdBQUksSUFHL0MsRUFBTyxVQUFVLGFBQWUsU0FBdUIsRUFBUSxFQUFVLENBQ3ZFLFNBQVMsSUFBVyxFQUNmLEdBQVUsRUFBWSxFQUFRLEVBQUcsS0FBSyxRQUNwQ0EsRUFBUSxLQUFLLEtBQU0sRUFBUSxHQUFNLEdBQUksSUFHOUMsRUFBTyxVQUFVLGFBQWUsU0FBdUIsRUFBUSxFQUFVLENBQ3ZFLFNBQVMsSUFBVyxFQUNmLEdBQVUsRUFBWSxFQUFRLEVBQUcsS0FBSyxRQUNwQ0EsRUFBUSxLQUFLLEtBQU0sRUFBUSxHQUFPLEdBQUksSUFHL0MsV0FBbUIsRUFBSyxFQUFPLEVBQVEsRUFBSyxFQUFLLEVBQUssQ0FDcEQsR0FBSSxDQUFDLEVBQU8sU0FBUyxHQUFNLEtBQU0sSUFBSSxXQUFVLCtDQUMvQyxHQUFJLEVBQVEsR0FBTyxFQUFRLEVBQUssS0FBTSxJQUFJLFlBQVcscUNBQ3JELEdBQUksRUFBUyxFQUFNLEVBQUksT0FBUSxLQUFNLElBQUksWUFBVyxzQkFHdEQsRUFBTyxVQUFVLFlBQ2pCLEVBQU8sVUFBVSxZQUFjLFNBQXNCLEVBQU8sRUFBUSxFQUFZLEVBQVUsQ0FJeEYsR0FIQSxFQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDcEIsRUFBYSxJQUFlLEVBQ3hCLENBQUMsRUFBVSxDQUNiLEdBQUksR0FBVyxLQUFLLElBQUksRUFBRyxFQUFJLEdBQWMsRUFDN0MsRUFBUyxLQUFNLEVBQU8sRUFBUSxFQUFZLEVBQVUsR0FHdEQsR0FBSSxHQUFNLEVBQ04sRUFBSSxFQUVSLElBREEsS0FBSyxHQUFVLEVBQVEsSUFDaEIsRUFBRSxFQUFJLEdBQWUsSUFBTyxNQUNqQyxLQUFLLEVBQVMsR0FBTSxFQUFRLEVBQU8sSUFHckMsTUFBTyxHQUFTLEdBR2xCLEVBQU8sVUFBVSxZQUNqQixFQUFPLFVBQVUsWUFBYyxTQUFzQixFQUFPLEVBQVEsRUFBWSxFQUFVLENBSXhGLEdBSEEsRUFBUSxDQUFDLEVBQ1QsRUFBUyxJQUFXLEVBQ3BCLEVBQWEsSUFBZSxFQUN4QixDQUFDLEVBQVUsQ0FDYixHQUFJLEdBQVcsS0FBSyxJQUFJLEVBQUcsRUFBSSxHQUFjLEVBQzdDLEVBQVMsS0FBTSxFQUFPLEVBQVEsRUFBWSxFQUFVLEdBR3RELEdBQUksR0FBSSxFQUFhLEVBQ2pCLEVBQU0sRUFFVixJQURBLEtBQUssRUFBUyxHQUFLLEVBQVEsSUFDcEIsRUFBRSxHQUFLLEdBQU0sSUFBTyxNQUN6QixLQUFLLEVBQVMsR0FBTSxFQUFRLEVBQU8sSUFHckMsTUFBTyxHQUFTLEdBR2xCLEVBQU8sVUFBVSxXQUNqQixFQUFPLFVBQVUsV0FBYSxTQUFxQixFQUFPLEVBQVEsRUFBVSxDQUMxRSxTQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDZixHQUFVLEVBQVMsS0FBTSxFQUFPLEVBQVEsRUFBRyxJQUFNLEdBQ3RELEtBQUssR0FBVyxFQUFRLElBQ2pCLEVBQVMsR0FHbEIsRUFBTyxVQUFVLGNBQ2pCLEVBQU8sVUFBVSxjQUFnQixTQUF3QixFQUFPLEVBQVEsRUFBVSxDQUNoRixTQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDZixHQUFVLEVBQVMsS0FBTSxFQUFPLEVBQVEsRUFBRyxNQUFRLEdBQ3hELEtBQUssR0FBVyxFQUFRLElBQ3hCLEtBQUssRUFBUyxHQUFNLElBQVUsRUFDdkIsRUFBUyxHQUdsQixFQUFPLFVBQVUsY0FDakIsRUFBTyxVQUFVLGNBQWdCLFNBQXdCLEVBQU8sRUFBUSxFQUFVLENBQ2hGLFNBQVEsQ0FBQyxFQUNULEVBQVMsSUFBVyxFQUNmLEdBQVUsRUFBUyxLQUFNLEVBQU8sRUFBUSxFQUFHLE1BQVEsR0FDeEQsS0FBSyxHQUFXLElBQVUsRUFDMUIsS0FBSyxFQUFTLEdBQU0sRUFBUSxJQUNyQixFQUFTLEdBR2xCLEVBQU8sVUFBVSxjQUNqQixFQUFPLFVBQVUsY0FBZ0IsU0FBd0IsRUFBTyxFQUFRLEVBQVUsQ0FDaEYsU0FBUSxDQUFDLEVBQ1QsRUFBUyxJQUFXLEVBQ2YsR0FBVSxFQUFTLEtBQU0sRUFBTyxFQUFRLEVBQUcsV0FBWSxHQUM1RCxLQUFLLEVBQVMsR0FBTSxJQUFVLEdBQzlCLEtBQUssRUFBUyxHQUFNLElBQVUsR0FDOUIsS0FBSyxFQUFTLEdBQU0sSUFBVSxFQUM5QixLQUFLLEdBQVcsRUFBUSxJQUNqQixFQUFTLEdBR2xCLEVBQU8sVUFBVSxjQUNqQixFQUFPLFVBQVUsY0FBZ0IsU0FBd0IsRUFBTyxFQUFRLEVBQVUsQ0FDaEYsU0FBUSxDQUFDLEVBQ1QsRUFBUyxJQUFXLEVBQ2YsR0FBVSxFQUFTLEtBQU0sRUFBTyxFQUFRLEVBQUcsV0FBWSxHQUM1RCxLQUFLLEdBQVcsSUFBVSxHQUMxQixLQUFLLEVBQVMsR0FBTSxJQUFVLEdBQzlCLEtBQUssRUFBUyxHQUFNLElBQVUsRUFDOUIsS0FBSyxFQUFTLEdBQU0sRUFBUSxJQUNyQixFQUFTLEdBR2xCLEVBQU8sVUFBVSxXQUFhLFNBQXFCLEVBQU8sRUFBUSxFQUFZLEVBQVUsQ0FHdEYsR0FGQSxFQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDaEIsQ0FBQyxFQUFVLENBQ2IsR0FBSSxHQUFRLEtBQUssSUFBSSxFQUFJLEVBQUksRUFBYyxHQUUzQyxFQUFTLEtBQU0sRUFBTyxFQUFRLEVBQVksRUFBUSxFQUFHLENBQUMsR0FHeEQsR0FBSSxHQUFJLEVBQ0osRUFBTSxFQUNOLEVBQU0sRUFFVixJQURBLEtBQUssR0FBVSxFQUFRLElBQ2hCLEVBQUUsRUFBSSxHQUFlLElBQU8sTUFDakMsQUFBSSxFQUFRLEdBQUssSUFBUSxHQUFLLEtBQUssRUFBUyxFQUFJLEtBQU8sR0FDckQsR0FBTSxHQUVSLEtBQUssRUFBUyxHQUFPLEdBQVEsR0FBUSxHQUFLLEVBQU0sSUFHbEQsTUFBTyxHQUFTLEdBR2xCLEVBQU8sVUFBVSxXQUFhLFNBQXFCLEVBQU8sRUFBUSxFQUFZLEVBQVUsQ0FHdEYsR0FGQSxFQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDaEIsQ0FBQyxFQUFVLENBQ2IsR0FBSSxHQUFRLEtBQUssSUFBSSxFQUFJLEVBQUksRUFBYyxHQUUzQyxFQUFTLEtBQU0sRUFBTyxFQUFRLEVBQVksRUFBUSxFQUFHLENBQUMsR0FHeEQsR0FBSSxHQUFJLEVBQWEsRUFDakIsRUFBTSxFQUNOLEVBQU0sRUFFVixJQURBLEtBQUssRUFBUyxHQUFLLEVBQVEsSUFDcEIsRUFBRSxHQUFLLEdBQU0sSUFBTyxNQUN6QixBQUFJLEVBQVEsR0FBSyxJQUFRLEdBQUssS0FBSyxFQUFTLEVBQUksS0FBTyxHQUNyRCxHQUFNLEdBRVIsS0FBSyxFQUFTLEdBQU8sR0FBUSxHQUFRLEdBQUssRUFBTSxJQUdsRCxNQUFPLEdBQVMsR0FHbEIsRUFBTyxVQUFVLFVBQVksU0FBb0IsRUFBTyxFQUFRLEVBQVUsQ0FDeEUsU0FBUSxDQUFDLEVBQ1QsRUFBUyxJQUFXLEVBQ2YsR0FBVSxFQUFTLEtBQU0sRUFBTyxFQUFRLEVBQUcsSUFBTSxNQUNsRCxFQUFRLEdBQUcsR0FBUSxJQUFPLEVBQVEsR0FDdEMsS0FBSyxHQUFXLEVBQVEsSUFDakIsRUFBUyxHQUdsQixFQUFPLFVBQVUsYUFBZSxTQUF1QixFQUFPLEVBQVEsRUFBVSxDQUM5RSxTQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDZixHQUFVLEVBQVMsS0FBTSxFQUFPLEVBQVEsRUFBRyxNQUFRLFFBQ3hELEtBQUssR0FBVyxFQUFRLElBQ3hCLEtBQUssRUFBUyxHQUFNLElBQVUsRUFDdkIsRUFBUyxHQUdsQixFQUFPLFVBQVUsYUFBZSxTQUF1QixFQUFPLEVBQVEsRUFBVSxDQUM5RSxTQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDZixHQUFVLEVBQVMsS0FBTSxFQUFPLEVBQVEsRUFBRyxNQUFRLFFBQ3hELEtBQUssR0FBVyxJQUFVLEVBQzFCLEtBQUssRUFBUyxHQUFNLEVBQVEsSUFDckIsRUFBUyxHQUdsQixFQUFPLFVBQVUsYUFBZSxTQUF1QixFQUFPLEVBQVEsRUFBVSxDQUM5RSxTQUFRLENBQUMsRUFDVCxFQUFTLElBQVcsRUFDZixHQUFVLEVBQVMsS0FBTSxFQUFPLEVBQVEsRUFBRyxXQUFZLGFBQzVELEtBQUssR0FBVyxFQUFRLElBQ3hCLEtBQUssRUFBUyxHQUFNLElBQVUsRUFDOUIsS0FBSyxFQUFTLEdBQU0sSUFBVSxHQUM5QixLQUFLLEVBQVMsR0FBTSxJQUFVLEdBQ3ZCLEVBQVMsR0FHbEIsRUFBTyxVQUFVLGFBQWUsU0FBdUIsRUFBTyxFQUFRLEVBQVUsQ0FDOUUsU0FBUSxDQUFDLEVBQ1QsRUFBUyxJQUFXLEVBQ2YsR0FBVSxFQUFTLEtBQU0sRUFBTyxFQUFRLEVBQUcsV0FBWSxhQUN4RCxFQUFRLEdBQUcsR0FBUSxXQUFhLEVBQVEsR0FDNUMsS0FBSyxHQUFXLElBQVUsR0FDMUIsS0FBSyxFQUFTLEdBQU0sSUFBVSxHQUM5QixLQUFLLEVBQVMsR0FBTSxJQUFVLEVBQzlCLEtBQUssRUFBUyxHQUFNLEVBQVEsSUFDckIsRUFBUyxHQUdsQixXQUF1QixFQUFLLEVBQU8sRUFBUSxFQUFLLEVBQUssRUFBSyxDQUN4RCxHQUFJLEVBQVMsRUFBTSxFQUFJLE9BQVEsS0FBTSxJQUFJLFlBQVcsc0JBQ3BELEdBQUksRUFBUyxFQUFHLEtBQU0sSUFBSSxZQUFXLHNCQUd2QyxXQUFxQixFQUFLLEVBQU8sRUFBUSxFQUFjLEVBQVUsQ0FDL0QsU0FBUSxDQUFDLEVBQ1QsRUFBUyxJQUFXLEVBQ2YsR0FDSCxFQUFhLEVBQUssRUFBTyxFQUFRLEdBRW5DQSxFQUFRLE1BQU0sRUFBSyxFQUFPLEVBQVEsRUFBYyxHQUFJLEdBQzdDLEVBQVMsRUFHbEIsRUFBTyxVQUFVLGFBQWUsU0FBdUIsRUFBTyxFQUFRLEVBQVUsQ0FDOUUsTUFBTyxHQUFXLEtBQU0sRUFBTyxFQUFRLEdBQU0sSUFHL0MsRUFBTyxVQUFVLGFBQWUsU0FBdUIsRUFBTyxFQUFRLEVBQVUsQ0FDOUUsTUFBTyxHQUFXLEtBQU0sRUFBTyxFQUFRLEdBQU8sSUFHaEQsV0FBc0IsRUFBSyxFQUFPLEVBQVEsRUFBYyxFQUFVLENBQ2hFLFNBQVEsQ0FBQyxFQUNULEVBQVMsSUFBVyxFQUNmLEdBQ0gsRUFBYSxFQUFLLEVBQU8sRUFBUSxHQUVuQ0EsRUFBUSxNQUFNLEVBQUssRUFBTyxFQUFRLEVBQWMsR0FBSSxHQUM3QyxFQUFTLEVBR2xCLEVBQU8sVUFBVSxjQUFnQixTQUF3QixFQUFPLEVBQVEsRUFBVSxDQUNoRixNQUFPLEdBQVksS0FBTSxFQUFPLEVBQVEsR0FBTSxJQUdoRCxFQUFPLFVBQVUsY0FBZ0IsU0FBd0IsRUFBTyxFQUFRLEVBQVUsQ0FDaEYsTUFBTyxHQUFZLEtBQU0sRUFBTyxFQUFRLEdBQU8sSUFJakQsRUFBTyxVQUFVLEtBQU8sU0FBZSxFQUFRLEVBQWEsRUFBTyxFQUFLLENBQ3RFLEdBQUksQ0FBQyxFQUFPLFNBQVMsR0FBUyxLQUFNLElBQUksV0FBVSwrQkFTbEQsR0FSSyxHQUFPLEdBQVEsR0FDaEIsQ0FBQyxHQUFPLElBQVEsR0FBRyxHQUFNLEtBQUssUUFDOUIsR0FBZSxFQUFPLFFBQVEsR0FBYyxFQUFPLFFBQ2xELEdBQWEsR0FBYyxHQUM1QixFQUFNLEdBQUssRUFBTSxHQUFPLEdBQU0sR0FHOUIsSUFBUSxHQUNSLEVBQU8sU0FBVyxHQUFLLEtBQUssU0FBVyxFQUFHLE1BQU8sR0FHckQsR0FBSSxFQUFjLEVBQ2hCLEtBQU0sSUFBSSxZQUFXLDZCQUV2QixHQUFJLEVBQVEsR0FBSyxHQUFTLEtBQUssT0FBUSxLQUFNLElBQUksWUFBVyxzQkFDNUQsR0FBSSxFQUFNLEVBQUcsS0FBTSxJQUFJLFlBQVcsMkJBR2xDLEFBQUksRUFBTSxLQUFLLFFBQVEsR0FBTSxLQUFLLFFBQzlCLEVBQU8sT0FBUyxFQUFjLEVBQU0sR0FDdEMsR0FBTSxFQUFPLE9BQVMsRUFBYyxHQUd0QyxHQUFJLEdBQU0sRUFBTSxFQUVoQixNQUFJLFFBQVMsR0FBVSxNQUFPLFlBQVcsVUFBVSxZQUFlLFdBRWhFLEtBQUssV0FBVyxFQUFhLEVBQU8sR0FFcEMsV0FBVyxVQUFVLElBQUksS0FDdkIsRUFDQSxLQUFLLFNBQVMsRUFBTyxHQUNyQixHQUlHLEdBT1QsRUFBTyxVQUFVLEtBQU8sU0FBZSxFQUFLLEVBQU8sRUFBSyxFQUFVLENBRWhFLEdBQUksTUFBTyxJQUFRLFNBQVUsQ0FTM0IsR0FSQSxBQUFJLE1BQU8sSUFBVSxTQUNuQixHQUFXLEVBQ1gsRUFBUSxFQUNSLEVBQU0sS0FBSyxRQUNGLE1BQU8sSUFBUSxVQUN4QixHQUFXLEVBQ1gsRUFBTSxLQUFLLFFBRVQsSUFBYSxRQUFhLE1BQU8sSUFBYSxTQUNoRCxLQUFNLElBQUksV0FBVSw2QkFFdEIsR0FBSSxNQUFPLElBQWEsVUFBWSxDQUFDLEVBQU8sV0FBVyxHQUNyRCxLQUFNLElBQUksV0FBVSxxQkFBdUIsR0FFN0MsR0FBSSxFQUFJLFNBQVcsRUFBRyxDQUNwQixHQUFJLEdBQU8sRUFBSSxXQUFXLEdBQzFCLEFBQUssS0FBYSxRQUFVLEVBQU8sS0FDL0IsSUFBYSxXQUVmLEdBQU0sUUFHTCxBQUFJLE9BQU8sSUFBUSxTQUN4QixFQUFNLEVBQU0sSUFDSCxNQUFPLElBQVEsV0FDeEIsR0FBTSxPQUFPLElBSWYsR0FBSSxFQUFRLEdBQUssS0FBSyxPQUFTLEdBQVMsS0FBSyxPQUFTLEVBQ3BELEtBQU0sSUFBSSxZQUFXLHNCQUd2QixHQUFJLEdBQU8sRUFDVCxNQUFPLE1BR1QsRUFBUSxJQUFVLEVBQ2xCLEVBQU0sSUFBUSxPQUFZLEtBQUssT0FBUyxJQUFRLEVBRTNDLEdBQUssR0FBTSxHQUVoQixHQUFJLEdBQ0osR0FBSSxNQUFPLElBQVEsU0FDakIsSUFBSyxFQUFJLEVBQU8sRUFBSSxFQUFLLEVBQUUsRUFDekIsS0FBSyxHQUFLLE1BRVAsQ0FDTCxHQUFJLEdBQVEsRUFBTyxTQUFTLEdBQ3hCLEVBQ0EsRUFBTyxLQUFLLEVBQUssR0FDakIsRUFBTSxFQUFNLE9BQ2hCLEdBQUksSUFBUSxFQUNWLEtBQU0sSUFBSSxXQUFVLGNBQWdCLEVBQ2xDLHFDQUVKLElBQUssRUFBSSxFQUFHLEVBQUksRUFBTSxFQUFPLEVBQUUsRUFDN0IsS0FBSyxFQUFJLEdBQVMsRUFBTSxFQUFJLEdBSWhDLE1BQU8sT0FNVCxHQUFJLElBQW9CLG9CQUV4QixZQUFzQixFQUFLLENBTXpCLEdBSkEsRUFBTSxFQUFJLE1BQU0sS0FBSyxHQUVyQixFQUFNLEVBQUksT0FBTyxRQUFRLEdBQW1CLElBRXhDLEVBQUksT0FBUyxFQUFHLE1BQU8sR0FFM0IsS0FBTyxFQUFJLE9BQVMsR0FBTSxHQUN4QixFQUFNLEVBQU0sSUFFZCxNQUFPLEdBR1QsV0FBc0IsRUFBUSxFQUFPLENBQ25DLEVBQVEsR0FBUyxJQU1qQixPQUxJLEdBQ0EsRUFBUyxFQUFPLE9BQ2hCLEVBQWdCLEtBQ2hCLEVBQVEsR0FFSCxFQUFJLEVBQUcsRUFBSSxFQUFRLEVBQUUsRUFBRyxDQUkvQixHQUhBLEVBQVksRUFBTyxXQUFXLEdBRzFCLEVBQVksT0FBVSxFQUFZLE1BQVEsQ0FFNUMsR0FBSSxDQUFDLEVBQWUsQ0FFbEIsR0FBSSxFQUFZLE1BQVEsQ0FFdEIsQUFBSyxJQUFTLEdBQUssSUFBSSxFQUFNLEtBQUssSUFBTSxJQUFNLEtBQzlDLGlCQUNTLEVBQUksSUFBTSxFQUFRLENBRTNCLEFBQUssSUFBUyxHQUFLLElBQUksRUFBTSxLQUFLLElBQU0sSUFBTSxLQUM5QyxTQUlGLEVBQWdCLEVBRWhCLFNBSUYsR0FBSSxFQUFZLE1BQVEsQ0FDdEIsQUFBSyxJQUFTLEdBQUssSUFBSSxFQUFNLEtBQUssSUFBTSxJQUFNLEtBQzlDLEVBQWdCLEVBQ2hCLFNBSUYsRUFBYSxHQUFnQixPQUFVLEdBQUssRUFBWSxPQUFVLFVBQzdELEFBQUksSUFFSixJQUFTLEdBQUssSUFBSSxFQUFNLEtBQUssSUFBTSxJQUFNLEtBTWhELEdBSEEsRUFBZ0IsS0FHWixFQUFZLElBQU0sQ0FDcEIsR0FBSyxJQUFTLEdBQUssRUFBRyxNQUN0QixFQUFNLEtBQUssV0FDRixFQUFZLEtBQU8sQ0FDNUIsR0FBSyxJQUFTLEdBQUssRUFBRyxNQUN0QixFQUFNLEtBQ0osR0FBYSxFQUFNLElBQ25CLEVBQVksR0FBTyxhQUVaLEVBQVksTUFBUyxDQUM5QixHQUFLLElBQVMsR0FBSyxFQUFHLE1BQ3RCLEVBQU0sS0FDSixHQUFhLEdBQU0sSUFDbkIsR0FBYSxFQUFNLEdBQU8sSUFDMUIsRUFBWSxHQUFPLGFBRVosRUFBWSxRQUFVLENBQy9CLEdBQUssSUFBUyxHQUFLLEVBQUcsTUFDdEIsRUFBTSxLQUNKLEdBQWEsR0FBTyxJQUNwQixHQUFhLEdBQU0sR0FBTyxJQUMxQixHQUFhLEVBQU0sR0FBTyxJQUMxQixFQUFZLEdBQU8sU0FHckIsTUFBTSxJQUFJLE9BQU0sc0JBSXBCLE1BQU8sR0FHVCxZQUF1QixFQUFLLENBRTFCLE9BREksR0FBWSxHQUNQLEVBQUksRUFBRyxFQUFJLEVBQUksT0FBUSxFQUFFLEVBRWhDLEVBQVUsS0FBSyxFQUFJLFdBQVcsR0FBSyxLQUVyQyxNQUFPLEdBR1QsWUFBeUIsRUFBSyxFQUFPLENBR25DLE9BRkksR0FBRyxFQUFJLEVBQ1AsRUFBWSxHQUNQLEVBQUksRUFBRyxFQUFJLEVBQUksUUFDakIsTUFBUyxHQUFLLEdBRFcsRUFBRSxFQUdoQyxFQUFJLEVBQUksV0FBVyxHQUNuQixFQUFLLEdBQUssRUFDVixFQUFLLEVBQUksSUFDVCxFQUFVLEtBQUssR0FDZixFQUFVLEtBQUssR0FHakIsTUFBTyxHQUdULFdBQXdCLEVBQUssQ0FDM0IsTUFBTyxHQUFPLFlBQVksR0FBWSxJQUd4QyxXQUFxQixFQUFLLEVBQUssRUFBUSxFQUFRLENBQzdDLE9BQVMsR0FBSSxFQUFHLEVBQUksR0FDYixJQUFJLEdBQVUsRUFBSSxRQUFZLEdBQUssRUFBSSxRQURsQixFQUFFLEVBRTVCLEVBQUksRUFBSSxHQUFVLEVBQUksR0FFeEIsTUFBTyxHQU1ULFdBQXFCLEVBQUssRUFBTSxDQUM5QixNQUFPLGFBQWUsSUFDbkIsR0FBTyxNQUFRLEVBQUksYUFBZSxNQUFRLEVBQUksWUFBWSxNQUFRLE1BQ2pFLEVBQUksWUFBWSxPQUFTLEVBQUssS0FFcEMsV0FBc0IsRUFBSyxDQUV6QixNQUFPLEtBQVEsRUFLakIsR0FBSSxJQUF1QixVQUFZLENBR3JDLE9BRkksR0FBVyxtQkFDWCxFQUFRLEdBQUksT0FBTSxLQUNiLEVBQUksRUFBRyxFQUFJLEdBQUksRUFBRSxFQUV4QixPQURJLEdBQU0sRUFBSSxHQUNMLEVBQUksRUFBRyxFQUFJLEdBQUksRUFBRSxFQUN4QixFQUFNLEVBQU0sR0FBSyxFQUFTLEdBQUssRUFBUyxHQUc1QyxNQUFPIn0=
